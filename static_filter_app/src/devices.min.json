[{"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 2, "instances": [{"label": "ETH_0"}, {"label": "ETH_1"}]}, "name": "mimxrt1064_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1064-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1064-evk\">\n<span id=\"mimxrt1064-evk\"></span><h1>NXP MIMXRT1064-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1064-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1064 adds to the industry’s first crossover\nprocessor series and expands the i.MX RT series to three scalable families.\nThe i.MX RT1064 doubles the On-Chip SRAM to 1MB while keeping pin-to-pin\ncompatibility with i.MX RT1050. This series introduces additional features\nideal for real-time applications such as High-Speed GPIO, CAN-FD, and\nsynchronous parallel NAND/NOR/PSRAM controller. The i.MX RT1064 runs on the\nArm® Cortex-M7® core up to 600 MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1064_evk.jpg\"><img alt=\"MIMXRT1064-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1064_evk.jpg\" style=\"width: 600px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1064DVL6A MCU (600 MHz, 1024 KB on-chip memory, 4096KB on-chip QSPI\nflash)</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256 Mbit SDRAM</p></li>\n<li><p>64 Mbit QSPI Flash</p></li>\n<li><p>512 Mbit Hyper Flash</p></li>\n<li><p>TF socket for SD card</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>LCD connector</p></li>\n</ul>\n</li>\n<li><p>Ethernet</p>\n<ul>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n</ul>\n</li>\n<li><p>USB</p>\n<ul>\n<li><p>USB 2.0 OTG connector</p></li>\n<li><p>USB 2.0 host connector</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>3.5 mm audio stereo headphone jack</p></li>\n<li><p>Board-mounted microphone</p></li>\n<li><p>Left and right speaker out connectors</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC jack</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 20-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n<li><p>Sensor</p>\n<ul>\n<li><p>FXOS8700CQ 6-axis e-compass</p></li>\n<li><p>CMOS camera sensor interface</p></li>\n</ul>\n</li>\n<li><p>Expansion port</p>\n<ul>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>CAN bus connector</p></li>\n</ul>\n<p>For more information about the MIMXRT1064 SoC and MIMXRT1064-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1064-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1064\">i.MX RT1064 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMXRT1064CEC.pdf\">i.MX RT1064 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1064RM\">i.MX RT1064 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/run-time-software/i.mx-developer-resources/mimxrt1064-evk-i.mx-rt1064-evaluation-kit:MIMXRT1064-EVK\">MIMXRT1064-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1064QSG\">MIMXRT1064-EVK Quick Reference Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/MIMXRT10601064EKBHUG.pdf\">MIMXRT1064-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=i.MXRT160EVKDS&amp;Parent_nodeId=1537930933174731284155&amp;Parent_pageType=product\">MIMXRT1064-EVK Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1064_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DISPLAY</p></td>\n<td><p>on-chip</p></td>\n<td><p>display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VIDEO</p></td>\n<td><p>on-chip</p></td>\n<td><p>video, using CSI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>QSPI flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SDHC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ENET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>dma</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1064_evk/mimxrt1064_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1064 SoC has four pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_02</p></td>\n<td><p>LCD_RST</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>GPIO/ENET_RST</p></td>\n<td><p>LED/Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>GPIO/ENET_INT</p></td>\n<td><p>GPIO/Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_11</p></td>\n<td><p>GPIO</p></td>\n<td><p>Touch Interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_12</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_13</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_06</p></td>\n<td><p>LPUART3_TX</p></td>\n<td><p>UART Arduino</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_07</p></td>\n<td><p>LPUART3_RX</p></td>\n<td><p>UART Arduino</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WAKEUP</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_00</p></td>\n<td><p>LCD_CLK</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_01</p></td>\n<td><p>LCD_ENABLE</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_02</p></td>\n<td><p>LCD_HSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_03</p></td>\n<td><p>LCD_VSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_04</p></td>\n<td><p>LCD_DATA00</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_05</p></td>\n<td><p>LCD_DATA01</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_06</p></td>\n<td><p>LCD_DATA02</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_07</p></td>\n<td><p>LCD_DATA03</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_08</p></td>\n<td><p>LCD_DATA04</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_09</p></td>\n<td><p>LCD_DATA05</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_10</p></td>\n<td><p>LCD_DATA06</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_11</p></td>\n<td><p>LCD_DATA07</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_12</p></td>\n<td><p>LCD_DATA08</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_13</p></td>\n<td><p>LCD_DATA09</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_14</p></td>\n<td><p>LCD_DATA10</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_15</p></td>\n<td><p>LCD_DATA11</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_00</p></td>\n<td><p>LCD_DATA12</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_01</p></td>\n<td><p>LCD_DATA13</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_02</p></td>\n<td><p>LCD_DATA14</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_03</p></td>\n<td><p>LCD_DATA15</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_04</p></td>\n<td><p>ENET_RX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_05</p></td>\n<td><p>ENET_RX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_06</p></td>\n<td><p>ENET_RX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_07</p></td>\n<td><p>ENET_TX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_08</p></td>\n<td><p>ENET_TX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_09</p></td>\n<td><p>ENET_TX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_10</p></td>\n<td><p>ENET_REF_CLK</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_11</p></td>\n<td><p>ENET_RX_ER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_12</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_14</p></td>\n<td><p>USDHC1_VSELECT</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_15</p></td>\n<td><p>BACKLIGHT_CTL</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_40</p></td>\n<td><p>ENET_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_41</p></td>\n<td><p>ENET_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>ENET_RST</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>ENET_INT</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_00</p></td>\n<td><p>USDHC1_CMD</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_01</p></td>\n<td><p>USDHC1_CLK</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_02</p></td>\n<td><p>USDHC1_DATA0</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_03</p></td>\n<td><p>USDHC1_DATA1</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_04</p></td>\n<td><p>USDHC1_DATA2</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_05</p></td>\n<td><p>USDHC1_DATA3</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B1_05</p></td>\n<td><p>FLEXSPIA_DQS</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B1_06</p></td>\n<td><p>FLEXSPIA_SS0_B</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B1_07</p></td>\n<td><p>FLEXSPIA_SCLK</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B1_08</p></td>\n<td><p>FLEXSPIA_DATA00</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B1_09</p></td>\n<td><p>FLEXSPIA_DATA01</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B1_10</p></td>\n<td><p>FLEXSPIA_DATA02</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B1_11</p></td>\n<td><p>FLEXSPIA_DATA03</p></td>\n<td><p>QSPI Flash</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1064 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 600 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1064 SoC has eight UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console\nand the remaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"using-j-link\">\n<span id=\"using-j-link-rt1064\"></span><h4>Using J-Link<a class=\"headerlink\" href=\"#using-j-link\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>There are two options: the onboard debug circuit can be updated with Segger\nJ-Link firmware, or <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a> can be attached to the\nEVK. See <a class=\"reference external\" href=\"https://community.nxp.com/t5/i-MX-RT-Knowledge-Base/Using-J-Link-with-MIMXRT1060-EVK-or-MIMXRT1064-EVK/ta-p/1281149\">Using J-Link with MIMXRT1060-EVK or MIMXRT1064-EVK</a> for more\ndetails.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J45 and J46 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J41.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1064_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW9 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1064_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1064_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1064_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"troubleshooting\">\n<h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If the debug probe fails to connect with the following error, it’s possible\nthat the boot header in QSPI flash is invalid or corrupted. The boot header is\nconfigured by <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NXP_IMX_RT_BOOT_HEADER.html#std-kconfig-CONFIG_NXP_IMX_RT_BOOT_HEADER\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NXP_IMX_RT_BOOT_HEADER</span></code></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Remote debugging using :2331</span>\n<span class=\"go\">Remote communication error.  Target disconnected.: Connection reset by peer.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">You can't do that when your target is `exec'</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">Could not connect to target.</span>\n<span class=\"go\">Please check power, connection and settings.</span>\n</pre></div>\n</div>\n<p>You can fix it by erasing and reprogramming the QSPI flash with the following\nsteps:</p>\n<ol class=\"arabic simple\">\n<li><p>Set the SW7 DIP switches to ON-OFF-ON-OFF to prevent booting from QSPI flash.</p></li>\n<li><p>Reset by pressing SW9</p></li>\n<li><p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code> again with a known working Zephyr\napplication.</p></li>\n<li><p>Set the SW7 DIP switches to OFF-OFF-ON-OFF to boot from QSPI flash.</p></li>\n<li><p>Reset by pressing SW9</p></li>\n</ol>\n<p>If the west flash or debug commands fail, and the command hangs while executing\nrunners.jlink, confirm the J-Link debug probe is configured, powered, and\nconnected to the EVK properly.  See <a class=\"reference internal\" href=\"#using-j-link-rt1064\"><span class=\"std std-ref\">Using J-Link</span></a> for more\ndetails.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f411re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F411RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f411re\">\n<span id=\"nucleo-f411re-board\"></span><h1>ST Nucleo F411RE<a class=\"headerlink\" href=\"#st-nucleo-f411re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F411RE board features an ARM Cortex-M4 based STM32F411RE MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F411RE board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f411re.png\"><img alt=\"Nucleo F411RE\" class=\"align-center\" src=\"../../../../_images/nucleo_f411re.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f411re.html\">Nucleo F411RE website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F411RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F411RET6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels, with FIFO and burst support</p></li>\n<li><p>RTC</p></li>\n<li><p>8 General purpose timers</p></li>\n<li><p>2 watchdog timers (independent and window)</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>USART/UART (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI/I2S (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>CRC calculation unit</p></li>\n</ul>\n<p>More information about STM32F411RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f411re.html\">STM32F411RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00119316.pdf\">STM32F411 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f411re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2S</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2s</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f411re/nucleo_f411re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F411RE Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f411re_arduino.png\"><img alt=\"Nucleo F411RE Arduino connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f411re_arduino.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f411re_morpho.png\"><img alt=\"Nucleo F411RE Morpho connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f411re_morpho.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB3</p></li>\n<li><p>I2C1 SCL/SDA : PA8/B4</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PA4/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>I2S1 SCK/SD : PA5/PA7 (Arduino I2S)</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Please note that SPI1 and I2S1 are connected to the same mcu pins, as the h/w controller is the same one.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F411RE System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 84MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F411RE board has 3 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f411re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F411RE board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f411re\">\n<h4>Flashing an application to Nucleo F411RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f411re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f411re samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f411re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 524288}], "main_ram_size": 524288, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "CRMU_UART"}, {"label": "CCG_UART0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bcm958402m2_m7", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Broadcom BCM958402M2 (Cortex-M7)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"broadcom-bcm958402m2-cortex-m7\">\n<span id=\"bcm958402m2-m7\"></span><h1>Broadcom BCM958402M2 (Cortex-M7)<a class=\"headerlink\" href=\"#broadcom-bcm958402m2-cortex-m7\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Broadcom bcm958402m2_m7 board utilizes the Viper BCM58402_M7 SoC to\nprovide support for PCIe offload engine functionality.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The bcm958402m2_m7 is a PCIe card with the following physical features:</p>\n<ul class=\"simple\">\n<li><p>PCIe Gen4 interface</p></li>\n<li><p>RS232 UART (optionally populated)</p></li>\n<li><p>JTAG (optionally populated)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Broadcom bcm958402m2_m7 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Compatible with UART NS16550</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/bcm958402m2_m7/bcm958402m2_m7_defconfig</span></code></p>\n</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The flash on board is not supported by Zephyr at this time.\nBoard is booted over PCIe interface.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The bcm958402m2_m7 board includes pads for soldering a JTAG connector.\nZephyr applications running on the M7 core can also be tested\nby observing UART console output.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ram0", "size": 4194304}], "main_ram_size": 4194304, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "generic_leon3", "arch": "sparc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">SPARC Boards</a> »</li>\n<li>Generic LEON3</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"generic-leon3\">\n<span id=\"id1\"></span><h1>Generic LEON3<a class=\"headerlink\" href=\"#generic-leon3\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board configuration is designed to work with LEON3 processor template\ndesigns available in the GRLIB GPL distribution.\nIt can also be used with the evaluation version of the TSIM3 LEON3 simulator.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The board configuration is compatible with most GRLIB LEON3 FPGA template\ndesigns such as the Digilent Arty A7, Terasic DE0-Nano and Microsemi\nM2GL-EVAL-KIT.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">generic_leon3</span></code> board configuration can be built as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>).\nIn order to build the application for <code class=\"docutils literal notranslate\"><span class=\"pre\">generic_leon3</span></code>, set the <code class=\"docutils literal notranslate\"><span class=\"pre\">BOARD</span></code> variable\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">generic_leon3</span></code>.</p>\n</div>\n<div class=\"section\" id=\"running-on-hardware\">\n<h3>Running on hardware<a class=\"headerlink\" href=\"#running-on-hardware\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect with GRMON, then load and run the application. The example below uses\nthe Terasic DE2-115 Cyclone IV FPGA board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>grmon -altjtag -u\n<span class=\"go\">  GRMON debug monitor v3.2.8 eval version</span>\n\n<span class=\"go\">  Copyright (C) 2020 Cobham Gaisler - All rights reserved.</span>\n<span class=\"go\">  For latest updates, go to http://www.gaisler.com/</span>\n<span class=\"go\">  Comments or bug-reports to support@gaisler.com</span>\n\n<span class=\"go\">JTAG chain (1): EP3C120/EP4CE115</span>\n<span class=\"go\">  GRLIB build version: 4250</span>\n<span class=\"go\">  Detected frequency:  50.0 MHz</span>\n\n<span class=\"go\">  Component                            Vendor</span>\n<span class=\"go\">  LEON3 SPARC V8 Processor             Cobham Gaisler</span>\n<span class=\"go\">  AHB Debug UART                       Cobham Gaisler</span>\n<span class=\"go\">  JTAG Debug Link                      Cobham Gaisler</span>\n<span class=\"go\">  GR Ethernet MAC                      Cobham Gaisler</span>\n<span class=\"go\">  GRDMAC DMA Controller                Cobham Gaisler</span>\n<span class=\"go\">  LEON2 Memory Controller              European Space Agency</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  LEON3 Debug Support Unit             Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Multi-processor Interrupt Ctrl.      Cobham Gaisler</span>\n<span class=\"go\">  Modular Timer Unit                   Cobham Gaisler</span>\n<span class=\"go\">  General Purpose I/O port             Cobham Gaisler</span>\n<span class=\"go\">  SPI Controller                       Cobham Gaisler</span>\n<span class=\"go\">  AHB Status Register                  Cobham Gaisler</span>\n\n<span class=\"go\">  Use command 'info sys' to print a detailed report of attached cores</span>\n\n<span class=\"go\">grmon3&gt; load zephyr/zephyr.elf</span>\n<span class=\"go\">      40000000 text              16.2kB /  16.2kB   [===============&gt;] 100%</span>\n<span class=\"go\">      400040A8 initlevel           40B              [===============&gt;] 100%</span>\n<span class=\"go\">      400040D0 rodata             484B              [===============&gt;] 100%</span>\n<span class=\"go\">      400042B4 datas               20B              [===============&gt;] 100%</span>\n<span class=\"go\">      400042C8 sw_isr_table       256B              [===============&gt;] 100%</span>\n<span class=\"go\">      400043C8 devices             36B              [===============&gt;] 100%</span>\n<span class=\"go\">  Total size: 16.98kB (1.91Mbit/s)</span>\n<span class=\"go\">  Entry point 0x40000000</span>\n<span class=\"go\">  Image zephyr/zephyr.elf loaded</span>\n\n<span class=\"go\">grmon3&gt; run</span>\n<span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-30-ga124c31ec4cf  ***</span>\n<span class=\"go\">Hello World! generic_leon3</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"running-in-simulation\">\n<h3>Running in simulation<a class=\"headerlink\" href=\"#running-in-simulation\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The same application binary can be simulated with the TSIM3 LEON3 simulator.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tsim-leon3\n<span class=\"go\"> TSIM3 LEON3 SPARC simulator, version 3.0.2 (evaluation version)</span>\n\n<span class=\"go\"> Copyright (C) 2020, Cobham Gaisler - all rights reserved.</span>\n<span class=\"go\"> This software may only be used with a valid license.</span>\n<span class=\"go\"> For latest updates, go to https://www.gaisler.com/</span>\n<span class=\"go\"> Comments or bug-reports to support@gaisler.com</span>\n\n<span class=\"go\">Number of CPUs: 2</span>\n<span class=\"go\">system frequency: 50.000 MHz</span>\n<span class=\"go\">icache: 1 * 4 KiB, 16 bytes/line (4 KiB total)</span>\n<span class=\"go\">dcache: 1 * 4 KiB, 16 bytes/line (4 KiB total)</span>\n<span class=\"go\">Allocated 4096 KiB SRAM memory, in 1 bank at 0x40000000</span>\n<span class=\"go\">Allocated 32 MiB SDRAM memory, in 1 bank at 0x60000000</span>\n<span class=\"go\">Allocated 2048 KiB ROM memory at 0x00000000</span>\n\n<span class=\"go\">tsim&gt; load zephyr/zephyr.elf</span>\n<span class=\"go\">  section: text, addr: 0x40000000, size 16552 bytes</span>\n<span class=\"go\">  section: initlevel, addr: 0x400040a8, size 40 bytes</span>\n<span class=\"go\">  section: rodata, addr: 0x400040d0, size 484 bytes</span>\n<span class=\"go\">  section: datas, addr: 0x400042b4, size 20 bytes</span>\n<span class=\"go\">  section: sw_isr_table, addr: 0x400042c8, size 256 bytes</span>\n<span class=\"go\">  section: devices, addr: 0x400043c8, size 36 bytes</span>\n<span class=\"go\">  Read 436 symbols</span>\n<span class=\"go\">tsim&gt; run</span>\n<span class=\"go\">  Initializing and starting from 0x40000000</span>\n<span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-30-ga124c31ec4cf  ***</span>\n<span class=\"go\">Hello World! generic_leon3</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/downloads/leongrlib\">GRLIB IP Library and LEON3, GPL version</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/products/simulators/tsim3/tsim3-leon3\">TSIM3 LEON3 simulator</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/products/debug-tools/grmon3\">GRMON3 debug monitor</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bl654_dvk", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "M4_FLASH", "size": 1048576}, {"label": "M0_FLASH", "size": 262144}], "main_flash_size": 1048576, "memory": [{"label": "m4_dtcm", "size": 196608}, {"label": "m0_tcm", "size": 131072}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "rv32m1_vega_ri5cy", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "black_f407zg_pro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Black STM32 F407ZG Pro Development Board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"black-stm32-f407zg-pro-development-board\">\n<span id=\"black-f407zg-pro-board\"></span><h1>Black STM32 F407ZG Pro Development Board<a class=\"headerlink\" href=\"#black-stm32-f407zg-pro-development-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BLACK_F407ZG_PRO board features an ARM Cortex-M4 based STM32F407zg MCU\nwith a wide range of connectivity support and configurations. There are\nmultiple version of this board like <code class=\"docutils literal notranslate\"><span class=\"pre\">black_f407ve</span></code>.\nHere are some highlights of the BLACK_F407ZG_PRO board:</p>\n<ul>\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Extension header for all LQFP144 I/Os for quick connection to prototyping\nboard and easy probing</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB VBUS or external source (3.3V, 5V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Three LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>3.3 V power on (LD0)</p></li>\n<li><p>Two user LEDs: green (LD1), green (LD2)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Four push-buttons: RESET, K0, K1 and WK_UP</p></li>\n<li><p>Mini-AB connector</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/black_f407zg_pro.jpg\"><img alt=\"BLACK_F407ZG_PRO\" class=\"align-center\" src=\"../../../../_images/black_f407zg_pro.jpg\" style=\"width: 500px; height: 500px;\"/></a>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>The +5V pins on this board are directly connected to the +5V pin\nof the USB connector. There is no protection in place. Do not\npower this board through USB and an external power supply at\nthe same time.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>BLACK_F407ZG_PRO board provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F407ZGT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>168 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>8MHz system crystal</p></li>\n<li><p>32.768KHz RTC crystal</p></li>\n<li><p>JTAG/SWD header</p></li>\n<li><p>1024 kB Flash</p></li>\n<li><p>192+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC battery CR1220</p></li>\n<li><p>Advanced-control Timer (2)</p></li>\n<li><p>General Purpose Timers (12)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART (3), UART (2)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>I2S (2)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO (1)</p></li>\n<li><p>CAN (2)</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Micro SD</p></li>\n<li><p>1x 10/100 Ethernet MAC</p></li>\n<li><p>1x 8 to 12-bit Parallel Camera interface</p></li>\n<li><p>Micro USB for power and comms</p></li>\n<li><p>2x jumpers for bootloader selection</p></li>\n<li><p>2x16 FMSC LCD Interface</p></li>\n<li><p>NRF24L01 socket</p></li>\n<li><p>Dimensions: 102.5mm x 74.56mm</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F407ZG SOC can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32f407zg.html\">STM32F407ZG on www.st.com</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr black_f407zg_pro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>CAN controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver.\nZephyr default configuration uses CAN_2 exclusively, as\nsimultaneous use of CAN_1 and CAN_2 is not yet supported.</p>\n</div>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/black_f407_generic/black_f407zg_pro_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407ZG_PRO has 7 GPIO controllers. These controllers are responsible for pin\nmuxing, input/output, pull-up, etc.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PD13</p></li>\n<li><p>LD4 : PD12</p></li>\n<li><p>LD5 : PD14</p></li>\n<li><p>LD6 : PD15</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>CAN1_RX : PD0</p></li>\n<li><p>CAN1_TX : PD1</p></li>\n<li><p>CAN2_RX : PB12</p></li>\n<li><p>CAN2_TX : PB13</p></li>\n<li><p>SPI2 MISO : PC2</p></li>\n<li><p>SPI2 MOSI : PC3</p></li>\n<li><p>SPI2 SCK : PB10</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407ZG_PRO System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock\nat 168MHz, driven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407ZG_PRO has up to 6 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.\nPlease note that ST-Link Virtual Com Port is not wired to chip serial port.\nIn order to enable console output you should use a serial cable and connect\nit to UART2 pins (PA2/PA3).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">black_f407zg_pro</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407ZG_PRO board includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-black-f407zg-pro\">\n<h4>Flashing an application to BLACK_F407ZG_PRO<a class=\"headerlink\" href=\"#flashing-an-application-to-black-f407zg-pro\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b black_f407zg_pro samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see user led “LD1” blinking.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b black_f407zg_pro samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 262144}, {"label": "dtcm", "size": 65536}], "main_ram_size": 262144, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32f746g_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F746G Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f746g-discovery\">\n<span id=\"stm32f746g-disco-board\"></span><h1>ST STM32F746G Discovery<a class=\"headerlink\" href=\"#st-stm32f746g-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The discovery kit enables a wide diversity of applications taking benefit\nfrom audio, multi-sensor support, graphics, security, security, video,\nand high-speed connectivity features. Important board features include:</p>\n<ul class=\"simple\">\n<li><p>STM32F746NGH6 microcontroller featuring 1 Mbytes of Flash memory and 340 Kbytes of RAM, in BGA216 package</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB re-enumeration capability</p></li>\n<li><p>Five power supply options:</p>\n<ul>\n<li><p>ST LINK/V2-1</p></li>\n<li><p>USB FS connector</p></li>\n<li><p>USB HS connector</p></li>\n<li><p>VIN from Arduino connector</p></li>\n<li><p>External 5 V from connector</p></li>\n</ul>\n</li>\n<li><p>Two pushbuttons (user and reset)</p></li>\n<li><p>USB functions: virtual COM port, mass storage, debug port</p></li>\n<li><p>4.3-inch 480x272 color LCD-TFT with capacitive touch screen</p></li>\n<li><p>SAI audio codec</p></li>\n<li><p>Audio line in and line out jack</p></li>\n<li><p>Stereo speaker outputs</p></li>\n<li><p>Two ST MEMS microphones</p></li>\n<li><p>SPDIF RCA input connector</p></li>\n<li><p>128-Mbit Quad-SPI Flash memory</p></li>\n<li><p>128-Mbit SDRAM (64 Mbits accessible)</p></li>\n<li><p>Connector for microSD card</p></li>\n<li><p>USB OTG HS with Micro-AB connectors</p></li>\n<li><p>USB OTG FS with Micro-AB connectors</p></li>\n<li><p>Ethernet connector compliant with IEEE-802.3-2002</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f746g_disco.jpg\"><img alt=\"STM32F746G-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f746g_disco.jpg\" style=\"width: 500px; height: 357px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f746gdiscovery.html\">32F746G-DISCO website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F746G Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F746NGH6 in BGA216 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M7 CPU with FPU</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>384+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>LCD parallel interface, 8080/6800 modes</p></li>\n<li><p>LCD TFT controller supporting up to XGA resolution</p></li>\n<li><p>MIPI®  DSI host controller supporting up to 720p 30Hz resolution</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (17)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (8)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (6)</p></li>\n<li><p>1xSAI (serial audio interface)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>8- to 14-bit parallel camera</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<p>More information about STM32F746NGH6 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/content/st_com/en/products/microcontrollers/stm32-32-bit-arm-cortex-mcus/stm32-high-performance-mcus/stm32f7-series/stm32f7x6/stm32f746ng.html\">STM32F746NGH6 on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00124865.pdf\">STM32F74xxx reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f746g_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SDMMC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI NOR</p></td>\n<td><p>on-chip</p></td>\n<td><p>off-chip flash</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f746g_disco/stm32f746g_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F746G Discovery kit has 9 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00190424.pdf\">32F746G-DISCO board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The STM32F746G Discovery kit features an Arduino Uno V3 connector. Board is\nconfigured as follows</p>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PB7 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PC6/PC7 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SDMMC_1 D0/D1/D2/D3/CK/CD/CMD: PC8/PC9/PC10/PC11/PC12/PC13/PD2</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI : PA8/PI1/PB14/PB15 (Arduino SPI)</p></li>\n<li><p>PWM_3_CH1 : PB4</p></li>\n<li><p>ETH : PA1, PA2, PA7, PC1, PC4, PC5, PG11, PG13, PG14</p></li>\n<li><p>USER_PB : PI11</p></li>\n<li><p>LD1 : PI1</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F746G System Clock can be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default, the System clock is driven by the PLL\nclock at 216MHz, driven by a 25MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F746G Discovery kit has up to 8 UARTs. The Zephyr console output is assigned to UART1\nwhich connected to the onboard ST-LINK/V2 Virtual COM port interface. Default communication\nsettings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f746g_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F746G Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f746g\">\n<h4>Flashing an application to STM32F746G<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f746g\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F746G Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f746g_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f746g_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "particle_boron", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Particle Boron</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"particle-boron\">\n<span id=\"id1\"></span><h1>Particle Boron<a class=\"headerlink\" href=\"#particle-boron\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Particle Boron is a cellular-enabled development board with a\nNordic Semiconductor nRF52840 for mesh support and an LTE or 2G/3G\nmodem.  The board was developed by Particle Industries and has a SWD\nconnector on it for programming.</p>\n<p>It is equipped with a onboard LIPO circuit and conforms to the\nAdafruit Feather formfactor.</p>\n<p>The Particle Boron board provides support for the Nordic Semiconductor nRF52840\nARM® Cortex®-M4F SoC with an integrated 2.4 GHz transceiver supporting\nBluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>For more information about the Particle Boron board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://docs.particle.io/datasheets/cellular/boron-datasheet/\">Boron Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/particle-iot/boron\">Boron Hardware Files</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>On the front of the board are RGB-LED, LED and LIPO circuitry.\nThe RGB-LED is controlled by the nRF52840 via GPIO pins.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/particle_boron.png\"><img alt=\"Particle Boron\" src=\"../../../../_images/particle_boron.png\" style=\"width: 150px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Particle Boron (Credit: Particle Industries)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"power-supply\">\n<h3>Power supply<a class=\"headerlink\" href=\"#power-supply\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board is optimized for low power applications and supports two\npower source configurations: battery and micro USB connector.</p>\n<p>It contains circuitry for LIPO usage and can be charged via the USB port.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The particle_boron board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Please see the <a class=\"reference external\" href=\"https://docs.particle.io/datasheets/cellular/boron-datasheet/\">Boron Datasheet</a> for header pin assignments, which are\ncommon to all Feather-compatible Particle boards.  Some peripherals are\navailable to applications through DTS overlay include directives:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi1_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI1 pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_uart1_rtscts.dtsi</span></code> adds hardware flow control to\nlabeled Feather UART pins</p></li>\n</ul>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (blue)</p></li>\n<li><p>LED1 (red)</p></li>\n<li><p>LED2 (green)</p></li>\n<li><p>LED3 (blue)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SW0 via MODE</p></li>\n<li><p>SW1 via RESET</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>TWI0 enabled on labeled header (SDA/SCL)</p></li>\n<li><p>TWI1 enabled for internal power management ICs</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SPI0 disabled due to TWI0 conflict</p></li>\n<li><p>SPI1 disabled due to TWI1 conflict</p></li>\n<li><p>SPI2 internal to 32 Mb CFI flash chip</p></li>\n<li><p>SPI3 selectable with overlay (SPI or SPI1)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uart\">\n<h4>UART<a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UARTE0 enabled RX/TX on labeled header (UART1); add RTS/CTS with overlay</p></li>\n<li><p>UARTE1 internal to u-blox cellular modem</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">particle_boron</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash an application in the usual way, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_boron samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_boron samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons\">\n<h2>Testing the LEDs and buttons<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and\nLEDs on the board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "msp_exp432p401r_launchxl", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>MSP-EXP432P401R LaunchXL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"msp-exp432p401r-launchxl\">\n<span id=\"id1\"></span><h1>MSP-EXP432P401R LaunchXL<a class=\"headerlink\" href=\"#msp-exp432p401r-launchxl\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink MSP‐EXP432P401R LaunchPad development kit is an easy-to-use evaluation\nmodule for the SimpleLink MSP432P401R microcontroller. It contains everything needed to start\ndeveloping on the SimpleLink MSP432 low-power + performance ARM® 32-bit Cortex®-M4F\nmicrocontroller (MCU).</p>\n<div class=\"figure align-center\">\n<img alt=\"MSP-EXP432P401R LaunchXL development board\" src=\"../../../../_images/msp_exp432p401r_launchxl.jpg\"/>\n</div>\n<div class=\"section\" id=\"features\">\n<h3>Features:<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Low-power ARM Cortex-M4F MSP432P401R</p></li>\n<li><p>40-pin LaunchPad development kit standard that leverages the BoosterPack plug-in module ecosystem</p></li>\n<li><p>XDS110-ET, an open-source onboard debug probe featuring EnergyTrace+ technology and application\nUART</p></li>\n<li><p>Two buttons and two LEDs for user interaction</p></li>\n<li><p>Backchannel UART through USB to PC</p></li>\n</ul>\n<p>Details on the MSP-EXP432P401R LaunchXL development board can be found in the\n<a class=\"reference external\" href=\"http://www.ti.com/lit/ug/slau597c/slau597c.pdf\">MSP-EXP432P401R LaunchXL User’s Guide</a>.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>The on-board 32-kHz crystal allows for lower LPM3 sleep currents and a higher-precision clock source than the\ndefault internal 32-kHz REFOCLK. Therefore, the presence of the crystal allows the full range of low-\npower modes to be used.</p></li>\n<li><p>The on-board 48-MHz crystal allows the device to run at its maximum operating speed for MCLK and HSMCLK.</p></li>\n</ul>\n<p>The MSP-EXP432P401R LaunchXL development board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>More details about the supported peripherals are available in <a class=\"reference external\" href=\"http://www.ti.com/lit/ug/slau356f/slau356f.pdf\">MSP432P4XX TRM</a>\nOther hardware features are not currently supported by the Zephyr kernel.</p>\n</div>\n</div>\n<div class=\"section\" id=\"building-and-flashing\">\n<h2>Building and Flashing<a class=\"headerlink\" href=\"#building-and-flashing\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the <a class=\"reference internal\" href=\"../../../../getting_started/index.html#getting-started\"><span class=\"std std-ref\">Getting Started Guide</span></a> instructions for Zephyr application\ndevelopment.</p>\n<p>For example, to build the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application for the\nMSP-EXP432P401R LaunchXL:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b msp_exp432p401r_launchxl samples/hello_world</span>\n</pre></div>\n</div>\n<p>The resulting <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code> binary in the build directory can be flashed onto\nMSP-EXP432P401R LaunchXL using the command line utility mentioned below.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"for-linux\">\n<h4>For Linux:<a class=\"headerlink\" href=\"#for-linux\" title=\"Permalink to this headline\">¶</a></h4>\n<p><a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/UniFlash_v4_Quick_Guide#Command_Line_Interface\">UniFlash</a> command line utility is used to program the flash memory. Only\nelf loading is currently supported.</p>\n<p>The following command will flash the <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code> binary to the MSP-EXP432P401R LaunchXL board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./dslite.sh --config<span class=\"o\">=</span>MSP432P401R.ccxml zephyr.elf\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The ccxml configuration file is included in boards/arm/msp_exp432p401r_launchxl/support.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MSP-EXP432P401R LaunchXL board supports debugging primarily using <a class=\"reference external\" href=\"http://www.ti.com/tool/ccstudio\">CCS IDE</a>. More information\non debugging using CCS can be found in <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/Debug_Handbook_for_CCS#Cortex_M3.2FM4.2FTiva.2FMSP432\">CCS Debug Handbook</a>.</p>\n<p>Launchpad also supports debugging using GDB. See section 3.3 of <a class=\"reference external\" href=\"http://www.ti.com/lit/ug/slau688b/slau688b.pdf\">GCC ARM Toolchain Guide</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>TI MSP432 Wiki:</dt><dd><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/TI_MSP432\">https://en.wikipedia.org/wiki/TI_MSP432</a></p>\n</dd>\n<dt>TI MSP432P401R Product Page:</dt><dd><p><a class=\"reference external\" href=\"http://www.ti.com/product/msp432p401r\">http://www.ti.com/product/msp432p401r</a></p>\n</dd>\n<dt>TI MSP432 SDK:</dt><dd><p><a class=\"reference external\" href=\"http://www.ti.com/tool/SIMPLELINK-MSP432-SDK\">http://www.ti.com/tool/SIMPLELINK-MSP432-SDK</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 327680}, {"label": "ccm0", "size": 65536}], "main_ram_size": 327680, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32f469i_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F469I Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f469i-discovery\">\n<span id=\"stm32f469i-disco-board\"></span><h1>ST STM32F469I Discovery<a class=\"headerlink\" href=\"#st-stm32f469i-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F469 Discovery kit features an ARM Cortex-M4 based STM32F469NI MCU\nwith a wide range of connectivity support and configurations Here are\nsome highlights of the STM32F469I-DISCO board:</p>\n<ul>\n<li><p>STM32 microcontroller in BGA216 package</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer, supporting USB reenumeration capability</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>ST-LINK/V2-1 USB connector</p></li>\n<li><p>User USB FS connector</p></li>\n<li><p>VIN from Arduino* compatible connectors</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Four user LEDs</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB OTG FS with micro-AB connector</p></li>\n<li><p>4-inch 800x480 pixel TFT color LCD with MIPI DSI interface and capacitive touch screen</p></li>\n<li><p>SAI Audio DAC, with a stereo headphone output jack</p></li>\n<li><p>Three MEMS microphones</p></li>\n<li><p>MicroSD card connector</p></li>\n<li><p>I2C extension connector</p></li>\n<li><p>4Mx32bit SDRAM</p></li>\n<li><p>128-Mbit Quad-SPI NOR Flash</p></li>\n<li><p>Expansion connectors and Arduino UNO V3 connectors</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f469i_disco.jpg\"><img alt=\"STM32F469I-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f469i_disco.jpg\" style=\"width: 457px; height: 551px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f469idiscovery.html\">32F469IDISCOVERY website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F469I-DISCO Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F469NIH6 in BGA216 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>180 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>384+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>LCD parallel interface, 8080/6800 modes</p></li>\n<li><p>LCD TFT controller supporting up to XGA resolution</p></li>\n<li><p>MIPI®  DSI host controller supporting up to 720p 30Hz resolution</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (17)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (8)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (6)</p></li>\n<li><p>1xSAI (serial audio interface)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>8- to 14-bit parallel camera</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F469NI can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f469ni.html\">STM32F469NI on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00127514.pdf\">STM32F469 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f469i_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f469i_disco/stm32f469i_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F469I-DISCO Discovery kit has 9 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00218846.pdf\">32F469IDISCOVERY board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PB10/PB11 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI : PH6/PD3/PB14/PB15 (Arduino SPI)</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD1 : PG6</p></li>\n<li><p>LD2 : PD4</p></li>\n<li><p>LD3 : PD5</p></li>\n<li><p>LD4 : PK3</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F469I-DISCO System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 180MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F469 Discovery kit has up to 8 UARTs. The Zephyr console output is assigned to UART3.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f469i_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F469I-DISCO Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f469i-disco\">\n<h4>Flashing an application to STM32F469I-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f469i-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F469I-DISCO Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f469i_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f469i_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "sram1", "size": 294912}, {"label": "sram4", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32h747i_disco_m7", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "96b_carbon_nrf51", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Carbon nRF51</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-carbon-nrf51\">\n<span id=\"b-carbon-nrf51-board\"></span><h1>96Boards Carbon nRF51<a class=\"headerlink\" href=\"#boards-carbon-nrf51\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This is the secondary nRF51822 chip on the 96Boards Carbon and provides\nBluetooth functionality to the main STM32F401RET chip via SPI.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>If you’re looking to reprogram the main STMicro part, see\n<a class=\"reference internal\" href=\"../../96b_carbon/doc/index.html#b-carbon-board\"><span class=\"std std-ref\">96Boards Carbon</span></a>. Users should not use this configuration\nunless they want to reprogram the secondary chip which provides\nBluetooth connectivity.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards Carbon nRF51 has two external oscillators. The frequency\nof the slow clock is 32.768 kHz. The frequency of the main clock is 16\nMHz.</p>\n<p>See <a class=\"reference internal\" href=\"../../96b_carbon/doc/index.html#b-carbon-board\"><span class=\"std std-ref\">96Boards Carbon</span></a> for other general information about the\nboard; that configuration is for the same physical board, just a\ndifferent chip.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPIS</p></td>\n<td><p>on-chip</p></td>\n<td><p>SPI slave</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_carbon_nrf51/96b_carbon_nrf51_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Carbon nRF51 has one SPI, which for providing Bluetooth\ncommunication. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : P0.25</p></li>\n<li><p>SPI1_SCK  : P0.07</p></li>\n<li><p>SPI1_MISO : P0.30</p></li>\n<li><p>SPI1_MOSI : P0.00</p></li>\n</ul>\n<p>The SWD debug pins are broken out to an external header; all other\nconnected pins are to the main STM32F401RET chip.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<span id=\"b-carbon-nrf51-programming\"></span><h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The 96Boards Carbon nRF51 can be flashed using an external SWD\ndebugger, via the debug header labeled “BLE” on the board’s\nsilkscreen. The header is not populated; 0.1” male header must be\nsoldered on first.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"96Boards Carbon nRF51 Debug\" src=\"../../../../_images/96b_carbon_nrf51.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Carbon nRF51 Debug</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>The following example assumes a Zephyr binary <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code> will be\nflashed to the board.</p>\n<p>It uses the <a class=\"reference external\" href=\"https://github.com/blacksphere/blackmagic/wiki\">Black Magic Debug Probe</a> as an SWD programmer, which can\nbe connected to the BLE debug header using flying leads and its 20 Pin\nJTAG Adapter Board Kit. When plugged into your host PC, the Black\nMagic Debug Probe enumerates as a USB serial device as documented on\nits <a class=\"reference external\" href=\"https://github.com/blacksphere/blackmagic/wiki/Getting-Started\">Getting started page</a>.</p>\n<p>It also uses the GDB binary provided with the Zephyr SDK,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">arm-zephyr-eabi-gdb</span></code>. Other GDB binaries, such as the GDB from GCC\nARM Embedded, can be used as well.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>arm-zephyr-eabi-gdb -q zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target extended-remote /dev/ttyACM0</span>\n<span class=\"go\">Remote debugging using /dev/ttyACM0</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">monitor swdp_scan</span>\n<span class=\"go\">Target voltage: 3.3V</span>\n<span class=\"go\">Available Targets:</span>\n<span class=\"go\">No. Att Driver</span>\n<span class=\"go\"> 1      nRF51</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">attach 1</span>\n<span class=\"go\">Attaching to Remote target</span>\n<span class=\"go\">0xabcdef12 in ?? ()</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>After you’ve flashed the chip, you can keep debugging using the same\nGDB instance. To reattach, just follow the same steps above, but don’t\nrun “load”. You can then debug as usual with GDB. In particular, type\n“run” at the GDB prompt to restart the program you’ve flashed.</p>\n<p>As an aid to debugging, this board configuration directs a console\noutput to a currently unused pin connected to the STM32F401RET. Users\nwho are experienced in electronics rework can remove a resistor (R22)\non the board and attach a wire to the nRF51822’s UART output.</p>\n</div>\n</div>\n<div class=\"section\" id=\"providing-bluetooth-to-96b-carbon\">\n<span id=\"b-carbon-nrf51-bluetooth\"></span><h2>Providing Bluetooth to 96b_carbon<a class=\"headerlink\" href=\"#providing-bluetooth-to-96b-carbon\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This 96b_carbon_nrf51 Zephyr configuration can be used to provide\nBluetooth functionality from the secondary nRF51822 chip to the\nprimary STM32F401RE chip on the <a class=\"reference internal\" href=\"../../96b_carbon/doc/index.html#b-carbon-board\"><span class=\"std std-ref\">96Boards Carbon</span></a>.</p>\n<p>To do this, build the <code class=\"docutils literal notranslate\"><span class=\"pre\">samples/bluetooth/hci_spi/</span></code> application\nprovided with Zephyr with <code class=\"docutils literal notranslate\"><span class=\"pre\">BOARD=96b_carbon_nrf51</span></code>, then flash it to\nthe nRF51822 chip using the instructions <a class=\"reference internal\" href=\"#b-carbon-nrf51-programming\"><span class=\"std std-ref\">above</span></a>. (For instructions on how to build a\nZephyr application, see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>.)</p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>Be sure to flash the hci_spi application to the nRF51822 chip and\nnot to the main STM32F401RET chip.  While both chips are supported\nby Zephyr, the hci_spi application providing Bluetooth support will\nonly run on the nRF51822 chip.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.96boards.org/product/carbon/\">Board documentation from 96Boards</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF51822\">nRF51822 information from Nordic Semiconductor</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "M4_FLASH", "size": 1048576}, {"label": "M0_FLASH", "size": 262144}], "main_flash_size": 1048576, "memory": [{"label": "m4_dtcm", "size": 196608}, {"label": "m0_tcm", "size": 131072}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "rv32m1_vega_zero_riscy", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 32768}], "main_flash_size": 32768, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 6, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_14"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32g0316_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32G0316 Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32g0316-discovery\">\n<span id=\"stm32g0316-disco-board\"></span><h1>ST STM32G0316 Discovery<a class=\"headerlink\" href=\"#st-stm32g0316-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32G0316-DISCO Discovery kit helps to discover features of STM32G0 in SO8 package.\nThis discovery kit offers an SO8 to DIL8 module designed with the STM32G031J6 microcontroller\nand allows the user to develop applications. It includes an on-board ST-LINK/V2-1 to debug\nand program the embedded STM32 microcontroller.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32g0316_disco.jpg\"><img alt=\"STM32G0316-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32g0316_disco.jpg\" style=\"width: 670px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>STM32G031J6 Arm® Cortex®-M0+ core-based microcontroller,\nfeaturing 32 Kbytes of Flash memory and 8 Kbytes of SRAM, in an SO8 package</p></li>\n<li><p>1 user LED</p></li>\n<li><p>1 reset/user push-button</p></li>\n<li><p>Individual and breakable STM32 SO8 to DIL8 module</p></li>\n<li><p>ST-LINK Micro-B USB connector</p></li>\n<li><p>DIL8 socket to ease programming of the STM32 MCU</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer</p></li>\n</ul>\n<p>For more information about the STM32G03x SoC and the STM32G0316-DISCO board, see these ST reference documents:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32g031j6.html\">STM32G031J6 website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32g031j6.pdf\">STM32G031 datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00371828.pdf\">STM32G0x1 reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/stm32g0316-disco.html\">STM32G0316-DISCO website</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32g0316_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32g0316_disco/stm32g0316_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Due to the small number of I/O pins on the SO8 package, multiple die I/Os are bonded\nto the same package pins to maximize the number of peripherals which can be used.\nCare must be taken not to set two I/Os which are connected together to conflicting\nstates (e.g. both as outputs, one low, the other high).</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1 TX/RX : PA9/PB7 (pins 5/1)</p></li>\n<li><p>USER_PB : PA0 (pin 4)</p></li>\n<li><p>LD2 : PA12 (pin 6)</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32g0316_disco</span></code> board configuration can be built the\nusual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32G0316-DISCO board includes an ST-LINK/V2-1 embedded debug tool\ninterface. This interface is not yet supported by the openocd version included in\nthe Zephyr SDK. Instead, support can be enabled on pyocd by adding “pack” support with\nthe following pyocd command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd pack --update\n<span class=\"gp\">$ </span>pyocd pack --install stm32g031j6\n</pre></div>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-the-stm32g0316-disco\">\n<h4>Flashing an application to the STM32G0316-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-the-stm32g0316-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32g0316_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32g0316_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram1", "size": 4194304}, {"label": "sram2_3", "size": 4194304}, {"label": "psram", "size": 16777216}, {"label": "code", "size": 524288}, {"label": "ram", "size": 1048576}], "main_ram_size": 16777216, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_TOUCH"}, {"label": "I2C_AUDIO_CONF"}, {"label": "I2C_SHIELD0"}, {"label": "I2C_SHIELD1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mps2_an521_nonsecure", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram0_bsd", "size": 65536}, {"label": "sram0_ns", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160_innblue21", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF9160 INNBLUE21</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf9160-innblue21\">\n<span id=\"id1\"></span><h1>nRF9160 INNBLUE21<a class=\"headerlink\" href=\"#nrf9160-innblue21\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF9160 innblue21 is a cellular IoT sensor development board, which\nis based on the nRF9160 SiP, and features NB-IoT and LTE-M connectivity.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf9160_innblue21.png\"><img alt=\"nRF9160 innblue21\" src=\"../../../../_images/nrf9160_innblue21.png\" style=\"width: 716px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF9160 innblue21 (Credit: innblue)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following parts are built into the board:</p>\n<ul class=\"simple\">\n<li><p>Accelerometer: ST LIS2DH12</p></li>\n<li><p>CryptoElement: Atmel ATECC608a</p></li>\n<li><p>Humidity Sensor: ST HTS221</p></li>\n<li><p>Qi charger: TI BQ51013</p></li>\n<li><p>Battery fuel gauge: TI BQ27421</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf9160_innblue21 board configuration supports the following\nhardware (as of nRF9160) features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Interface</p></td>\n<td><p>Controller</p></td>\n<td><p>Driver/Component</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>system protection</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UARTE</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 ( red ) = P0.7</p></li>\n<li><p>LED2 (green) = P0.6</p></li>\n<li><p>LED3 ( blue) = P0.5</p></li>\n<li><p>LED4 ( red ) = P0.4</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons-and-switches\">\n<h4>Push buttons and Switches<a class=\"headerlink\" href=\"#push-buttons-and-switches\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = P0.31</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit. The IDAU is implemented\nwith the System Protection Unit and is used to define secure and non-secure\nmemory maps.  By default, all of the memory space  (Flash, SRAM, and\nperipheral address space) is defined to be secure accessible only.</p></li>\n<li><p>Secure boot.</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nrf9160_innblue21 supports the Armv8m Security Extension, and by default boots\nin the Secure state.</p>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications\">\n<h3>Building Secure/Non-Secure Zephyr applications<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The process requires the following steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build the Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue21</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_TRUSTED_EXECUTION_SECURE=y</span></code> in the the application project configuration file.</p></li>\n<li><p>Build the Non-Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue21_ns</span></code>.</p></li>\n<li><p>Merge the two binaries together.</p></li>\n</ol>\n<p>When building a Secure/Non-Secure application, the Secure application will\nhave to set the IDAU (SPU) configuration to allow Non-Secure access to all\nCPU resources utilized by the Non-Secure application firmware. SPU\nconfiguration shall take place before jumping to the Non-Secure application.</p>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application\">\n<h3>Building a Secure only application<a class=\"headerlink\" href=\"#building-a-secure-only-application\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build the Zephyr app in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>), using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue21</span></code>.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF9160 innblue21\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf9160_innblue21 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_22"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l073rz", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L073RZ</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l073rz\">\n<span id=\"nucleo-l073rz-board\"></span><h1>ST Nucleo L073RZ<a class=\"headerlink\" href=\"#st-nucleo-l073rz\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32L073RZ MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l073rz.jpg\"><img alt=\"Nucleo L073RZ\" class=\"align-center\" src=\"../../../../_images/nucleo_l073rz.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l073rz.html\">Nucleo L073RZ website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo L073RZ provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32L073RZ can be found in the\n<a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00095744.pdf\">STM32L0x3 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l073rz board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l073rz/nucleo_l073rz_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l073rz_connectors.png\"><img alt=\"Nucleo L073RZ connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l073rz_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n<li><p>DAC       : PA4</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l073rz</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L073RZ board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l073rz\">\n<h4>Flashing an application to Nucleo L073RZ<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l073rz\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l073rz samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l073rz samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l073rz.html\">http://www.st.com/en/evaluation-tools/nucleo-l073rz.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00095744.pdf\">http://www.st.com/resource/en/reference_manual/dm00095744.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160dk_nrf9160", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF9160 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf9160-dk\">\n<span id=\"nrf9160dk-nrf9160\"></span><h1>nRF9160 DK<a class=\"headerlink\" href=\"#nrf9160-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF9160 DK (PCA10090) is a single-board development kit for evaluation and\ndevelopment on the nRF9160 SiP for LTE-M and NB-IoT. The nrf9160dk_nrf9160\nboard configuration provides support for the Nordic Semiconductor nRF9160 ARM\nCortex-M33F CPU with ARMv8-M Security Extension and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter with EasyDMA\">UARTE</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n<li><p><abbr title=\"Implementation Defined Attribution Unit\">IDAU</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf9160dk_nrf9160.png\"><img alt=\"nRF9160 DK\" src=\"../../../../_images/nrf9160dk_nrf9160.png\" style=\"width: 711px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF9160 DK (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF9160-DK\">nRF9160 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF9160 DK has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf9160dk_nrf9160 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>system protection</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UARTE</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"additional-hardware-in-v0-14-0\">\n<span id=\"nrf9160dk-additional-hardware\"></span><h4>Additional hardware in v0.14.0+<a class=\"headerlink\" href=\"#additional-hardware-in-v0-14-0\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Starting from v0.14.0, additional hardware is available on the DK:</p>\n<ul class=\"simple\">\n<li><p>External flash memory (MX25R6435F, 64 Mb)</p></li>\n<li><p>I/O expander (PCAL6408A) that can be used to interface LEDs, slide switches,\nand buttons</p></li>\n</ul>\n<p>To use this additional hardware, specify the revision of the board that\nshould be used when building your application (for more information, see\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-board-version\"><span class=\"std std-ref\">Building for a board revision</span></a>). For example, to build for nRF9160 DK v1.0.0:</p>\n<p>Using west:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf9160dk_nrf9160@1.0.0</span>\n</pre></div>\n</div>\n<p>Using CMake and ninja:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mkdir build &amp;&amp; cd build</span>\n<span class=\"go\">cmake -GNinja -DBOARD=nrf9160dk_nrf9160@1.0.0 ..</span>\n<span class=\"go\">ninja</span>\n</pre></div>\n</div>\n<p>Remember to also enable routing for this additional hardware in the firmware for\n<a class=\"reference internal\" href=\"../../nrf9160dk_nrf52840/doc/index.html#nrf9160dk-nrf52840\"><span class=\"std std-ref\">nRF9160 DK - nRF52840</span></a> (see <a class=\"reference internal\" href=\"../../nrf9160dk_nrf52840/doc/index.html#nrf9160dk-board-controller-firmware\"><span class=\"std std-ref\">Board controller firmware</span></a>).</p>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF9160-DK\">nRF9160 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id6\">2</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id9\">3</a>\nfor a complete list of nRF9160 DK board hardware features.</p>\n</div>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.2</p></li>\n<li><p>LED2 (green) = P0.3</p></li>\n<li><p>LED3 (green) = P0.4</p></li>\n<li><p>LED4 (green) = P0.5</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons-and-switches\">\n<h4>Push buttons and Switches<a class=\"headerlink\" href=\"#push-buttons-and-switches\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = P0.6</p></li>\n<li><p>BUTTON2 = P0.7</p></li>\n<li><p>SWITCH1 = P0.8</p></li>\n<li><p>SWITCH2 = P0.9</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit (<a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">IDAU</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>).  The IDAU is implemented\nwith the System Protection Unit and is used to define secure and non-secure\nmemory maps.  By default, all of the memory space  (Flash, SRAM, and\nperipheral address space) is defined to be secure accessible only.</p></li>\n<li><p>Secure boot.</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nrf9160dk_nrf9160 supports the Armv8m Security Extension, and by default boots\nin the Secure state.</p>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\">\n<h3>Building Secure/Non-Secure Zephyr applications with Arm® TrustZone®<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications on the nRF9160 may contain a Secure and a Non-Secure firmware\nimage. The Secure image can be built using either Zephyr or\n<a class=\"reference external\" href=\"https://www.trustedfirmware.org/projects/tf-m/\">Trusted Firmware M</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">4</a> (TF-M). Non-Secure firmware images are always built\nusing Zephyr. The two alternatives are described below.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>By default the Secure image for nRF9160 is built using TF-M.</p>\n</div>\n<div class=\"section\" id=\"building-the-secure-firmware-using-zephyr\">\n<h4>Building the Secure firmware using Zephyr<a class=\"headerlink\" href=\"#building-the-secure-firmware-using-zephyr\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process requires the following steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build the Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160dk_nrf9160</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_TRUSTED_EXECUTION_SECURE=y</span></code> in the application project configuration file.</p></li>\n<li><p>Build the Non-Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160dk_nrf9160_ns</span></code>.</p></li>\n<li><p>Merge the two binaries together.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"building-the-secure-firmware-with-tf-m\">\n<h4>Building the Secure firmware with TF-M<a class=\"headerlink\" href=\"#building-the-secure-firmware-with-tf-m\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process to build the Secure firmware image using TF-M and the Non-Secure\nfirmware image using Zephyr requires the following action:</p>\n<ol class=\"arabic\">\n<li><p>Build the Non-Secure Zephyr application\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160dk_nrf9160_ns</span></code>.\nTo invoke the building of TF-M the Zephyr build system requires the\nKconfig option <code class=\"docutils literal notranslate\"><span class=\"pre\">BUILD_WITH_TFM</span></code> to be enabled, which is done by\ndefault when building Zephyr as a Non-Secure application.\nThe Zephyr build system will perform the following steps automatically:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Build the Non-Secure firmware image as a regular Zephyr application</p></li>\n<li><p>Build a TF-M (secure) firmware image</p></li>\n<li><p>Merge the output binaries together</p></li>\n<li><p>Optionally build a bootloader image (MCUboot)</p></li>\n</ul>\n</div></blockquote>\n</li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Depending on the TF-M configuration, an application DTS overlay may be\nrequired, to adjust the Non-Secure image Flash and SRAM starting address\nand sizes.</p>\n</div>\n<p>When building a Secure/Non-Secure application, the Secure application will\nhave to set the IDAU (SPU) configuration to allow Non-Secure access to all\nCPU resources utilized by the Non-Secure application firmware. SPU\nconfiguration shall take place before jumping to the Non-Secure application.</p>\n</div>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application\">\n<h3>Building a Secure only application<a class=\"headerlink\" href=\"#building-a-secure-only-application\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build the Zephyr app in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>), using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160dk_nrf9160</span></code>.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF9160 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf9160dk_nrf9160 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf9160-dk\">\n<h2>Testing the LEDs and buttons in the nRF9160 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf9160-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf9160dk_nrf9160/nrf9160dk_nrf9160_common.dts\">boards/arm/nrf9160dk_nrf9160/nrf9160dk_nrf9160_common.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id5\">1</a>,<a href=\"#id6\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF9160-DK\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF9160-DK</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\">3</span><span class=\"fn-backref\">(<a href=\"#id8\">1</a>,<a href=\"#id9\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id11\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.trustedfirmware.org/projects/tf-m/\">https://www.trustedfirmware.org/projects/tf-m/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "olimex_stm32_h407", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>OLIMEX-STM32-H407</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"olimex-stm32-h407\">\n<span id=\"id1\"></span><h1>OLIMEX-STM32-H407<a class=\"headerlink\" href=\"#olimex-stm32-h407\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-H407 is open source hardware and is based on\nthe STMicroelectronics STM32F407ZG ARM Cortex-M4 CPU.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex_stm32_h407.jpg\"><img alt=\"OLIMEX-STM32-H407\" src=\"../../../../_images/olimex_stm32_h407.jpg\" style=\"width: 540px; height: 454px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-H407</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-H407/open-source-hardware\">OLIMEX-STM32-H407 website</a> and <a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-H407/resources/STM32-H407.pdf\">OLIMEX-STM32-H407 user manual</a>.\nThe <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031020.pdf\">ST STM32F407ZG Datasheet</a> contains the processor’s\ninformation and the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The olimex_stm32_h407 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex-stm32-h407-front.png\"><img alt=\"OLIMEX-STM32-H407 connectors\" src=\"../../../../_images/olimex-stm32-h407-front.png\" style=\"width: 739px; height: 530px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-H407 connectors</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED (green) = PC13</p></li>\n<li><p>PWR_LED (red) = power</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUT = PA0</p></li>\n<li><p>RST = NRST</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>JTAG/SWD debug</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>+3.3V</p></td>\n<td><p>12</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PB4 / TRST</p></td>\n<td><p>13</p></td>\n<td><p>PB3 / TDO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>14</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PA15 / TDI</p></td>\n<td><p>15</p></td>\n<td><p>PB4 / TRST</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PA13 / TMS</p></td>\n<td><p>17</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>GND</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA14 / TCK</p></td>\n<td><p>19</p></td>\n<td><p>+5V_JTAG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>GND</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>UEXT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 50%\"/>\n<col style=\"width: 35%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Wire   Name</p></th>\n<th class=\"head\"><p>STM32F407 port</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PC6/USART6_TX</p></td>\n<td><p>PC6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PC7/USART6_RX</p></td>\n<td><p>PC7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PB8/I2C1_SCL</p></td>\n<td><p>PB8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PB9/I2C1_SDA</p></td>\n<td><p>PB9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PC2/SPI2_MISO</p></td>\n<td><p>PC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PC3/SPI2_MOSI</p></td>\n<td><p>PC3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PB10/SPI_SCK/UART3_TX</p></td>\n<td><p>PB10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>RB7/UEXT_CS</p></td>\n<td><p>PB7</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>CON1 power</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>RST</p></td>\n<td><p>RESET</p></td>\n<td><p>25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3V3</p></td>\n<td><p>VCC (3V3)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5V</p></td>\n<td><p>VDD (5V)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VIN</p></td>\n<td><p>VIN</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON2 analog</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>A0</p></td>\n<td><p>PC0</p></td>\n<td><p>26</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A1</p></td>\n<td><p>PC1</p></td>\n<td><p>27</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A2</p></td>\n<td><p>PB0</p></td>\n<td><p>46</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A3</p></td>\n<td><p>PB1</p></td>\n<td><p>47</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A4</p></td>\n<td><p>PC4</p></td>\n<td><p>44</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A5</p></td>\n<td><p>PC5</p></td>\n<td><p>45</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON3 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 32%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D0</p></td>\n<td><p>PA3/USART2_RX</p></td>\n<td><p>37</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D1</p></td>\n<td><p>PA2/USART2_TX</p></td>\n<td><p>36</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D2</p></td>\n<td><p>PG7</p></td>\n<td><p>92</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D3</p></td>\n<td><p>PG8</p></td>\n<td><p>93</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D4</p></td>\n<td><p>PG12</p></td>\n<td><p>127</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D5</p></td>\n<td><p>PG13</p></td>\n<td><p>128</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D6</p></td>\n<td><p>PG14</p></td>\n<td><p>129</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D7</p></td>\n<td><p>PG15</p></td>\n<td><p>132</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON4 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D8</p></td>\n<td><p>PA1</p></td>\n<td><p>35</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D9</p></td>\n<td><p>PB11</p></td>\n<td><p>70</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D10</p></td>\n<td><p>PA4</p></td>\n<td><p>40</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D11</p></td>\n<td><p>PA7</p></td>\n<td><p>43</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D12</p></td>\n<td><p>PA6</p></td>\n<td><p>42</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D13</p></td>\n<td><p>PA5</p></td>\n<td><p>41</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>AGND</p></td>\n<td><p>31</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>AREF</p></td>\n<td><p>AREF</p></td>\n<td><p>32</p></td>\n</tr>\n</tbody>\n</table>\n<p>PD</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PD8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PD9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PD0</p></td>\n<td><p>13</p></td>\n<td><p>PD10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PD1</p></td>\n<td><p>14</p></td>\n<td><p>PD11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PD2/SD_CMD</p></td>\n<td><p>15</p></td>\n<td><p>PD12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PD3</p></td>\n<td><p>16</p></td>\n<td><p>PD13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PD4</p></td>\n<td><p>17</p></td>\n<td><p>PD14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PD5</p></td>\n<td><p>18</p></td>\n<td><p>PD15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PD6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PD7</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PE</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PE8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PE9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PE0</p></td>\n<td><p>13</p></td>\n<td><p>PE10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PE1</p></td>\n<td><p>14</p></td>\n<td><p>PE11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PE2</p></td>\n<td><p>15</p></td>\n<td><p>PE12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PE3</p></td>\n<td><p>16</p></td>\n<td><p>PE13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PE4</p></td>\n<td><p>17</p></td>\n<td><p>PE14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PE5</p></td>\n<td><p>18</p></td>\n<td><p>PE15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PE6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PE7</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PF</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PF8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PF9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PF0</p></td>\n<td><p>13</p></td>\n<td><p>PF10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PF1</p></td>\n<td><p>14</p></td>\n<td><p>PF11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PF2</p></td>\n<td><p>15</p></td>\n<td><p>PF12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PF3</p></td>\n<td><p>16</p></td>\n<td><p>PF13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PF4</p></td>\n<td><p>17</p></td>\n<td><p>PF14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PF5</p></td>\n<td><p>18</p></td>\n<td><p>PF15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PF6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PF7</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PG</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PG8/D3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PG9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PG0</p></td>\n<td><p>13</p></td>\n<td><p>PG10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PG1</p></td>\n<td><p>14</p></td>\n<td><p>PG11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PG2</p></td>\n<td><p>15</p></td>\n<td><p>PG12/D4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PG3</p></td>\n<td><p>16</p></td>\n<td><p>PG13/D5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PG4</p></td>\n<td><p>17</p></td>\n<td><p>PG14/D6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PG5</p></td>\n<td><p>18</p></td>\n<td><p>PG15/D7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PG6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PG7/D2</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEX-STM32-H407 has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 12 MHz. The processor can setup HSE to drive the master clock,\nwhich can be set as high as 168 MHz.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-H407 board does not include an embedded debug tool\ninterface. You will need to use ST tools or an external JTAG probe.\nIn the following examples the Olimex ARM-USB-OCD-H is used.</p>\n<p>If you have an external JTAG probe compliant with the default Zephyr OpenOCD\nconfiguration, however, then applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">olimex_stm32_h407</span></code> board\nconfiguration can be built and flashed in the usual way (see\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing-an-application-to-the-olimex-stm32-h407\">\n<h3>Flashing an application to the Olimex-STM32-H407<a class=\"headerlink\" href=\"#flashing-an-application-to-the-olimex-stm32-h407\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect the ARM-USB-OCD-H debugger to your host computer and to the JTAG port\nof the OLIMEX-STM32-H407 board. Then build and flash an application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_h407 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0\n</pre></div>\n</div>\n<p>After resetting the board, you should see the following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** BOOTING ZEPHYR OS v1.11.0 - BUILD: Mar 12 2018 03:12:40 *****</span>\n<span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Provided that you have a JTAG probe, you can debug an application in the usual\nway.  Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_h407 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "holyiot_yj16019", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Holyiot YJ-16019</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"holyiot-yj-16019\">\n<span id=\"holyiot-yj16019\"></span><h1>Holyiot YJ-16019<a class=\"headerlink\" href=\"#holyiot-yj-16019\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The <a class=\"reference external\" href=\"http://www.holyiot.com\">Holyiot</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a> YJ-16019 hardware provides support for the Nordic\nSemiconductor nRF52832 ARM Cortex-M4 CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/holyiot_yj16019_front.jpg\"><img alt=\"Holyiot YJ-16019\" src=\"../../../../_images/holyiot_yj16019_front.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Holyiot YJ-16019 (Credit: Holyiot)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>The board is equipped with one LED, one push button, and is powered by\na CR2032 coin cell. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52832 of the Holyiot YJ-16019 is clocked by an external crystal\nwith a frequency of 32.768 kHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The holyiot_yj16019 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led-and-push-button\">\n<h4>LED and push button<a class=\"headerlink\" href=\"#led-and-push-button\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>Push button = P0.28</p></li>\n<li><p>LED = P0.29</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">holyiot_yj16019</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details); however, an external\nSegger J-Link is required since the board does not have any on-board\ndebug IC.</p>\n<p>The following pins of the Segger J-Link must be connected to the following test\npads on the PCB (see image):</p>\n<ul class=\"simple\">\n<li><p>VTref = VCC</p></li>\n<li><p>GND = GND</p></li>\n<li><p>SWDIO = SDO</p></li>\n<li><p>SWCLK = SCK</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/holyiot_yj16019_pcb.png\"><img alt=\"Holyiot YJ-16019 PCB\" src=\"../../../../_images/holyiot_yj16019_pcb.png\" style=\"width: 390px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Holyiot YJ-16019 PCB (Credit: Holyiot)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b holyiot_yj16019 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic\nnRF52x-based boards with a Segger debugger.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-led-and-button-on-the-holyiot-yj-16019\">\n<h2>Testing the LED and button on the Holyiot YJ-16019<a class=\"headerlink\" href=\"#testing-the-led-and-button-on-the-holyiot-yj-16019\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the button and LED on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running\ncorrectly on your board. The button and LED definitions can be found\nin <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/holyiot_yj16019/holyiot_yj16019.dts\">boards/arm/holyiot_yj16019/holyiot_yj16019.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.holyiot.com\">http://www.holyiot.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em7d", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52833dk_nrf52820", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52820 emulation on nRF52833 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52820-emulation-on-nrf52833-dk\">\n<span id=\"nrf52833dk-nrf52820\"></span><h1>nRF52820 emulation on nRF52833 DK<a class=\"headerlink\" href=\"#nrf52820-emulation-on-nrf52833-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nrf52833dk_nrf52820 board is a modified version of the\n<a class=\"reference internal\" href=\"../../nrf52833dk_nrf52833/doc/index.html#nrf52833dk-nrf52833\"><span class=\"std std-ref\">nRF52833 DK</span></a> that enforces the limitations imposed by the nRF52820\nIC, which is a variant of the original nRF52833. Since Nordic does not offer a\ndevelopment kit for the nRF52820 you can use this board to develop for this IC\nwhile using the nRF52833 Development Kit (PCA10100).</p>\n<p>See <a class=\"reference internal\" href=\"../../nrf52833dk_nrf52833/doc/index.html#nrf52833dk-nrf52833\"><span class=\"std std-ref\">nRF52833 DK</span></a> for more information about the development board\nand <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52820\">nRF52820 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52820\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52820</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 81920}, {"label": "sram1", "size": 8192}], "main_ram_size": 81920, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cc26x2r1_launchxl", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>CC26x2R1 LaunchXL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cc26x2r1-launchxl\">\n<span id=\"id1\"></span><h1>CC26x2R1 LaunchXL<a class=\"headerlink\" href=\"#cc26x2r1-launchxl\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Texas Instruments CC26x2R LaunchPad™ (LAUNCHXL-CC26X2R1) is a\ndevelopment kit for the SimpleLink™ multi-Standard CC2652R wireless MCU.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/tool/launchxl-cc26x2r1\">TI CC26x2R LaunchPad Product Page</a> for details.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/cc26x2r1_launchxl.png\"><img alt=\"TI CC26x2R LaunchPad\" src=\"../../../../_images/cc26x2r1_launchxl.png\" style=\"width: 400px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Texas Instruments CC26x2R LaunchPad™</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The CC26x2R LaunchPad™ development kit features the CC2652R wireless MCU.\nThe board is equipped with two LEDs, two push buttons and BoosterPack connectors\nfor expansion. It also includes an integrated (XDS110) debugger.</p>\n<p>The CC2652 wireless MCU has a 48 MHz Arm® Cortex®-M4F SoC and an\nintegrated 2.4 GHz transceiver supporting multiple protocols including Bluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/product/cc2652r\">TI CC2652R Product Page</a> for additional details.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The CC26x2R LaunchPad board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>All I/O signals are accessible from the BoosterPack connectors. Pin function\naligns with the LaunchPad standard.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DIO0</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO1</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO2</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART RXD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO3</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART TXD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO4</p></td>\n<td><p>I2C_MSSCL</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO5</p></td>\n<td><p>I2C_MSSDA</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO8</p></td>\n<td><p>SSI0_RX</p></td>\n<td><p>SPI MISO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO9</p></td>\n<td><p>SSI0_TX</p></td>\n<td><p>SPI MOSI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO10</p></td>\n<td><p>SSI0_CLK</p></td>\n<td><p>SPI CLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO11</p></td>\n<td><p>SSIO_CS</p></td>\n<td><p>SPI CS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO12</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO13</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO14</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO15</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO16</p></td>\n<td></td>\n<td><p>JTAG TDO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO17</p></td>\n<td></td>\n<td><p>JTAG TDI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO18</p></td>\n<td><p>UART0_RTS</p></td>\n<td><p>UART RTS / JTAG SWO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO19</p></td>\n<td><p>UART0_CTS</p></td>\n<td><p>UART CTS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO20</p></td>\n<td><p>GPIO</p></td>\n<td><p>Flash CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO21</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO22</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO23</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO24</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO25</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO26</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO27</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO28</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO29</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO30</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A7</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Before flashing or debugging ensure the RESET, TMS, TCK, TDO, and TDI jumpers\nare in place. Also place jumpers on the the TXD and RXD signals for a serial\nconsole using the XDS110 application serial port.</p>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites:<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Ensure the XDS-110 emulation firmware on the board is updated.</p>\n<p>Download and install the latest <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/XDS_Emulation_Software_Package#XDS_Emulation_Software_.28emupack.29_Download\">XDS-110 emulation package</a>.</p>\n<p>Follow these <a class=\"reference external\" href=\"http://software-dl.ti.com/ccs/esd/documents/xdsdebugprobes/emu_xds110.html#updating-the-xds110-firmware\">xds110 firmware update directions</a></p>\n<p>Note that the emulation package install may place the xdsdfu utility\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;install_dir&gt;/ccs_base/common/uscif/xds110/</span></code>.</p>\n</li>\n<li><p>Install OpenOCD</p>\n<p>You can obtain OpenOCD by following these\n<a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">installing the latest Zephyr SDK instructions</span></a>.</p>\n<p>After the installation, add the directory containing the OpenOCD executable\nto your environment’s PATH variable. For example, use this command in Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export PATH=$ZEPHYR_SDK_INSTALL_DIR/sysroots/x86_64-pokysdk-linux/usr/bin/openocd:$PATH</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">CC26x2R</span> <span class=\"pre\">LaunchPad</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>screen &lt;tty_device&gt; <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the XDS110 application\nserial device can be found. For example, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc26x2r1_launchxl samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc26x2r1_launchxl samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"bootloader\">\n<h3>Bootloader<a class=\"headerlink\" href=\"#bootloader\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ROM bootloader on CC13x2 and CC26x2 devices is enabled by default. The\nbootloader will start if there is no valid application image in flash or the\nso-called backdoor is enabled (via option\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE.html#std-kconfig-CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE</span></code></a>) and BTN-1 is held\ndown during reset. See the bootloader documentation in chapter 10 of the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swcu185\">TI\nCC13x2 / CC26x2 Technical Reference Manual</a> for additional information.</p>\n</div>\n<div class=\"section\" id=\"power-management-and-uart\">\n<h3>Power Management and UART<a class=\"headerlink\" href=\"#power-management-and-uart\" title=\"Permalink to this headline\">¶</a></h3>\n<p>System and device power management are supported on this platform, and\ncan be enabled via the standard Kconfig options in Zephyr, such as\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM.html#std-kconfig-CONFIG_PM\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM_DEVICE.html#std-kconfig-CONFIG_PM_DEVICE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM_DEVICE</span></code></a>.</p>\n<p>When system power management is turned on (CONFIG_PM=y),\nsleep state 2 (standby mode) is allowed, and polling is used to retrieve input\nby calling uart_poll_in(), it is possible for characters to be missed if the\nsystem enters standby mode between calls to uart_poll_in(). This is because\nthe UART is inactive while the system is in standby mode. The workaround is to\ndisable sleep state 2 while polling:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pm_constraint_set</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">uart_poll_in</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">expects</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">pm_constraint_release</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>CC26X2R1 LaunchPad Quick Start Guide:</dt><dd><p><a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru528\">http://www.ti.com/lit/pdf/swru528</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 9, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f410rb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F410RB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f410rb\">\n<span id=\"nucleo-f410rb-board\"></span><h1>ST Nucleo F410RB<a class=\"headerlink\" href=\"#st-nucleo-f410rb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F410RB board features an ARM Cortex-M4 based STM32F410RB MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F410RB board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f410rb.png\"><img alt=\"Nucleo F410RB\" class=\"align-center\" src=\"../../../../_images/nucleo_f410rb.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-F410RB.html\">Nucleo F410RB website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F410RB provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F410RBT6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>Adaptive real-time accelerator (ART Accelerator)</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>128 KB Flash</p></li>\n<li><p>32 KB SRAM</p></li>\n<li><p>General purpose timer (4)</p></li>\n<li><p>Low-power timer (1)</p></li>\n<li><p>Advanced-control timer (1)</p></li>\n<li><p>Random number generator (TRNG for HW entropy)</p></li>\n<li><p>SPI/I2S (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>USART (3)</p></li>\n<li><p>GPIO (50) with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels</p></li>\n<li><p>12-bit DAC with 1 channel</p></li>\n<li><p>RTC</p></li>\n</ul>\n<p>More information about STM32F410RB can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f410rb.html\">STM32F410RB on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00180366.pdf\">STM32F410 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f410rb board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2S</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2s</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>window &amp; independent</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f410rb/nucleo_f410rb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F410RB Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f410rb_arduino_top_left.png\"><img alt=\"Nucleo F410RB Arduino connectors (top left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f410rb_arduino_top_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f410rb_arduino_top_right.png\"><img alt=\"Nucleo F410RB Arduino connectors (top right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f410rb_arduino_top_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f410rb_morpho_top_left.png\"><img alt=\"Nucleo F410RB Morpho connectors (top left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f410rb_morpho_top_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f410rb_morpho_top_right.png\"><img alt=\"Nucleo F410RB Morpho connectors (top right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f410rb_morpho_top_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD2 : PA5</p></li>\n<li><p>I2C1_SDA : PB9</p></li>\n<li><p>I2C1_SCL : PB8</p></li>\n<li><p>I2C2_SDA : PB3</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F410RB System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default, the System clock is driven by the PLL clock at 84MHz,\ndriven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F410RB board has 3 USARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f410rb</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F410RB board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f410rb\">\n<h4>Flashing an application to Nucleo F410RB<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f410rb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f410rb samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f410rb samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1024_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1024-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1024-evk\">\n<span id=\"mimxrt1024-evk\"></span><h1>NXP MIMXRT1024-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1024-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1024 expands the i.MX RT crossover processor families by providing\nhigh-performance feature set in low-cost LQFP packages, further simplifying\nboard design and layout for customers. The i.MX RT1024 runs on the Arm®\nCortex®-M7 core at 500 MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1024_evk.jpg\"><img alt=\"MIMXRT1024-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1024_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1024DAG5A MCU (600 MHz, 256 KB on-chip memory, 4096KB on-chip QSPI\nflash)</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256 Mbit SDRAM</p></li>\n<li><p>64 Mbit QSPI Flash</p></li>\n<li><p>TF socket for SD card</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n<li><p>Micro USB host and OTG connectors</p></li>\n<li><p>CAN transceivers</p></li>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>Audio Codec</p></li>\n<li><p>4-pole audio headphone jack</p></li>\n<li><p>Microphone</p></li>\n<li><p>External speaker connection</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC jack</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 10-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the MIMXRT1024 SoC and MIMXRT1024-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/i-mx-rt-crossover-mcus/i-mx-rt1024-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1024\">i.MX RT1024 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com.cn/docs/en/data-sheet/IMXRT1024CEC.pdf\">i.MX RT1024 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com.cn/docs/en/reference-manual/IMXRT1024RM.pdf\">i.MX RT1024 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/i-mx-rt1024-evaluation-kit:MIMXRT1024-EVK\">MIMXRT1024-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com.cn/docs/en/user-guide/MIMXRT1024EVKHUG.pdf\">MIMXRT1024-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/sps/download/preDownload.jsp?render=true\">MIMXRT1024-EVK Design Files</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1024_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ENET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1024_evk/mimxrt1024_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1024 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_08</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_06</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_07</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WAKEUP</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_04</p></td>\n<td><p>ENET_RST</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_08</p></td>\n<td><p>ENET_REF_CLK</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>ENET_RX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>ENET_RX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_11</p></td>\n<td><p>ENET_RX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_12</p></td>\n<td><p>ENET_RX_ER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_13</p></td>\n<td><p>ENET_TX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_14</p></td>\n<td><p>ENET_TX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_15</p></td>\n<td><p>ENET_TX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_06</p></td>\n<td><p>ENET_INT</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_41</p></td>\n<td><p>ENET_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_40</p></td>\n<td><p>ENET_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1024 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 500 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1024 SoC has eight UARTs. One is configured for the console and the\nremaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"jlink-external-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 10-pin connector to J55. Check that jumpers J47 and J48 are\n<strong>off</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are disconnected from the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J50 and J46 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J23.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1024_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW9 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.4.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1024_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1024_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.4.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1024_evk</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 163840}], "main_ram_size": 163840, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l452re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L452RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l452re\">\n<span id=\"nucleo-l452re-board\"></span><h1>ST Nucleo L452RE<a class=\"headerlink\" href=\"#st-nucleo-l452re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L452RE(-P) boards feature an ARM Cortex-M4 based STM32L452RE MCU\nwith a wide range of connectivity support and configurations. There are two variants:</p>\n<ul class=\"simple\">\n<li><p>ST Nucleo L452RE</p></li>\n<li><p>ST Nucleo L452RE-P</p></li>\n</ul>\n<p>Here some highlights of these boards:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>One push-button: RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l452re_p.jpg\"><img alt=\"Nucleo L452RE-P\" class=\"align-center\" src=\"../../../../_images/nucleo_l452re_p.jpg\" style=\"width: 363px; height: 408px;\"/></a>\n<p>The main difference between the ST Nucleo L452RE and the L452RE-P (note the missing\n“-P” at the end) lays in the External Switched Mode Power Supply (SMPS) included in\nthe P series.</p>\n<p>More information about the boards can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-l452re.html\">Nucleo L452RE website</a> and\nthe <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-l452re-p.html\">Nucleo L452RE-P website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L452RE SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 28 nA Standby mode and 84\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 80 MHz,\n100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>2 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 3 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>12x timers:</p>\n<ul>\n<li><p>1x 16-bit advanced motor-control</p></li>\n<li><p>1x 32-bit and 3x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 26 fast I/Os, most 5 V-tolerant</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 512 KB single bank Flash, proprietary code readout protection</p></li>\n<li><p>160 KB of SRAM including 32 KB with hardware parity check</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>1x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>1x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>17x communication interfaces\n- USB 2.0 full-speed crystal less solution with LPM and BCD\n- 1x SAI (serial audio interface)\n- 4x I2C FM+(1 Mbit/s), SMBus/PMBus\n- 3x USARTs (ISO 7816, LIN, IrDA, modem)\n- 1x UART (LIN, IrDA, modem)\n- 1x LPUART (Stop 2 wake-up)\n- 3x SPIs (and 1x Quad SPI)\n- CAN (2.0B Active) and SDMMC interface\n- IRTIM (Infrared interface)</p></li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32L452RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32l452re.html\">STM32L452RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00151940.pdf\">STM32L452 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l452re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver</p>\n</div>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l452re/nucleo_l452re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L452RE Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l452re_pinout.png\"><img alt=\"Nucleo L452RE Pinout\" class=\"align-center\" src=\"../../../../_images/nucleo_l452re_pinout.png\" style=\"width: 496px; height: 446px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l452re_p_pinout.png\"><img alt=\"Nucleo L452RE-P Pinout\" class=\"align-center\" src=\"../../../../_images/nucleo_l452re_p_pinout.png\" style=\"width: 537px; height: 446px;\"/></a>\n<p>For more details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00105823.pdf\">ST Nucleo L452RE User Manual</a> or\n<a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00387966.pdf\">ST Nucleo L452RE-P User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>I2C_1_SCL : PB8</p></li>\n<li><p>I2C_1_SDA : PB7</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>SPI_NSS : PB6</p></li>\n<li><p>SPI_SCK : PA5</p></li>\n<li><p>SPI_MISO : PA6</p></li>\n<li><p>SPI_MOSI : PA7</p></li>\n<li><p>CAN_TX : PA11</p></li>\n<li><p>CAN_RX : PA12</p></li>\n<li><p>LD2 : PA5</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L452RE System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L452RE board has 3 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l452re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L452RE board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l452re\">\n<h4>Flashing an application to Nucleo L452RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l452re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo L452RE to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l452re samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l452re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840_mdk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52840-mdk</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52840-mdk\">\n<span id=\"id1\"></span><h1>nRF52840-mdk<a class=\"headerlink\" href=\"#nrf52840-mdk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52840-MDK is a versatile, easy-to-use IoT hardware platform for\nBluetooth 5, Bluetooth mesh, Thread, IEEE 802.15.4, ANT and 2.4GHz proprietary\napplications using the nRF52840 SoC.</p>\n<p>The development kit comes with a fully integrated debugger (also known as\nDAPLink) that provides USB drag-and-drop programming, USB Virtual COM port\nand CMSIS-DAP interface.</p>\n<p>The kit contains a Microchip USB 2.0 Hi-Speed hub controller with two downstream\nports: one for DAPLink interface and one for nRF52840 USB device controller.\nThe kit also features ultra-low power 64-Mb QSPI FLASH memory, programmable\nuser button, RGB LED, up to 24 GPIOs, antenna selection for custom applications.</p>\n<p>See <a class=\"reference external\" href=\"https://wiki.makerdiary.com/nrf52840-mdk\">nRF52840-mdk website</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> for more information about the development\nboard and <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52840\">nRF52840 website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52840\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52840</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.makerdiary.com/nrf52840-mdk\">https://wiki.makerdiary.com/nrf52840-mdk</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 524288, "memory": [{"label": "sramx", "size": 32768}, {"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 65536}, {"label": "sram4", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s28", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP LPCXpresso55S28</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-lpcxpresso55s28\">\n<span id=\"lpcxpresso55s28\"></span><h1>NXP LPCXpresso55S28<a class=\"headerlink\" href=\"#nxp-lpcxpresso55s28\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The LPCXpresso55S28 development board provides the ideal platform for evaluation\nof and development with the LPC552x/S2x MCU based on the Arm® Cortex®-M33\narchitecture. The board includes a high-performance onboard debug probe, audio\nsubsystem and accelerometer, with several options for adding off-the-shelf\nadd-on boards for networking, sensors, displays, and other interfaces.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/LPC55S28-EVK.png\"><img alt=\"LPCXpresso55S28\" class=\"align-center\" src=\"../../../../_images/LPC55S28-EVK.png\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>LPC55S28 Arm® Cortex®-M33 microcontroller running at up to 150 MHz</p></li>\n<li><p>512 KB flash and 256 KB SRAM on-chip</p></li>\n<li><p>Onboard, high-speed USB, Link2 debug probe with CMSIS-DAP and SEGGER J-Link\nprotocol options</p></li>\n<li><p>UART and SPI port bridging from LPC55S28 target to USB via the onboard debug\nprobe</p></li>\n<li><p>Hardware support for external debug probe</p></li>\n<li><p>3 x user LEDs, plus Reset, ISP (3) and user buttons</p></li>\n<li><p>Micro SD card slot (4-bit SDIO)</p></li>\n<li><p>NXP MMA8652FCR1 accelerometer</p></li>\n<li><p>Stereo audio codec with line in/out</p></li>\n<li><p>High and full speed USB ports with micro A/B connector for host or device\nfunctionality</p></li>\n<li><p>MikroEletronika Click expansion option</p></li>\n<li><p>LPCXpresso-V3 expansion option compatible with Arduino UNO</p></li>\n<li><p>PMod compatible expansion / host connector</p></li>\n</ul>\n<p>For more information about the LPC55S28 SoC and LPCXPresso55S28 board, see:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc5500-cortex-m33/lpc552x-s2x-mainstream-arm-cortex-m33-based-microcontroller-family:LPC552x-S2x\">LPC55S28 SoC Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/LPC55S2X-LPC552X.pdf\">LPC55S28 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM11126\">LPC55S28 User Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/design/software/development-software/lpcxpresso55s28-development-board:LPC55S28-EVK\">LPCXpresso55S28 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM11158\">LPCXpresso55S28 User Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=LPCXpresso55S69-DS\">LPCXpresso55S28 Development Board Design Files</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The lpcxpresso55s28 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IOCON</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WWDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>windowed watchdog timer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently enabled.</p>\n<p>The default configuration file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/lpcxpresso55s28/lpcxpresso55s28_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The LPC55S28 SoC has IOCON registers, which can be used to configure\nthe functionality of a pin.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PIO0_26</p></td>\n<td><p>SPI</p></td>\n<td><p>SPI MOSI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO0_29</p></td>\n<td><p>USART</p></td>\n<td><p>USART RX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO0_30</p></td>\n<td><p>USART</p></td>\n<td><p>USART TX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO1_1</p></td>\n<td><p>SPI</p></td>\n<td><p>SPI SSEL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO1_2</p></td>\n<td><p>SPI</p></td>\n<td><p>SPI SCK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO1_3</p></td>\n<td><p>SPI</p></td>\n<td><p>SPI MISO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO1_4</p></td>\n<td><p>GPIO</p></td>\n<td><p>RED LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO1_6</p></td>\n<td><p>GPIO</p></td>\n<td><p>BLUE_LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO1_7</p></td>\n<td><p>GPIO</p></td>\n<td><p>GREEN LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO1_20</p></td>\n<td><p>I2C</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO1_21</p></td>\n<td><p>I2C</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The LPC55S28 SoC is configured to use the internal FRO at 96MHz as a\nsource for the system clock. Other sources for the system clock are\nprovided in the SOC, depending on your system requirements.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The LPC55S28 SoC has 8 FLEXCOMM interfaces for serial communication. One is\nconfigured as USART for the console and the remaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This\nboard is configured by default to use the LPC-Link2 CMSIS-DAP Onboard\nDebug Probe.</p>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect a USB cable from your PC to P6, and use the serial terminal of your\nchoice (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b lpcxpresso55s28 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the RESET button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.4.0 *****</span>\n<span class=\"go\">Hello World! lpcxpresso55s28</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b lpcxpresso55s28 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS zephyr-v2.4.0 *****</span>\n<span class=\"go\">Hello World! lpcxpresso55s28</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840dk_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52840 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52840-dk\">\n<span id=\"nrf52840dk-nrf52840\"></span><h1>nRF52840 DK<a class=\"headerlink\" href=\"#nrf52840-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52840 Development Kit (PCA10056) hardware provides support for the\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52840dk_nrf52840.jpg\"><img alt=\"nRF52840 DK\" src=\"../../../../_images/nrf52840dk_nrf52840.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF52840 DK (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-DK\">nRF52840 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.\nThe <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a> contains the processor’s information\nand the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF52840 DK has two external oscillators. The frequency of the slow clock\nis 32.768 kHz. The frequency of the main clock is 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf52840dk_nrf52840 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-DK\">nRF52840 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a>\nfor a complete list of nRF52840 Development Kit board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.13</p></li>\n<li><p>LED2 (green) = P0.14</p></li>\n<li><p>LED3 (green) = P0.15</p></li>\n<li><p>LED4 (green) = P0.16</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.11</p></li>\n<li><p>BUTTON2 = SW2 = P0.12</p></li>\n<li><p>BUTTON3 = SW3 = P0.24</p></li>\n<li><p>BUTTON4 = SW4 = P0.25</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840dk_nrf52840</span></code> board configuration can be\nbuilt, flashed, and debugged in the usual way. See\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details on\nbuilding and running.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF52840 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52840dk_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf52840-dk\">\n<h2>Testing the LEDs and buttons in the nRF52840 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf52840-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf52840dk_nrf52840/nrf52840dk_nrf52840.dts\">boards/arm/nrf52840dk_nrf52840/nrf52840dk_nrf52840.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"using-uart1\">\n<h2>Using UART1<a class=\"headerlink\" href=\"#using-uart1\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following approach can be used when an application needs to use\nmore than one UART for connecting peripheral devices:</p>\n<ol class=\"arabic\">\n<li><p>Add devicetree overlay file to the main directory of your application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat nrf52840dk_nrf52840.overlay\n<span class=\"go\">&amp;uart1 {</span>\n<span class=\"go\">  compatible = \"nordic,nrf-uarte\";</span>\n<span class=\"go\">  current-speed = &lt;115200&gt;;</span>\n<span class=\"go\">  status = \"okay\";</span>\n<span class=\"go\">  tx-pin = &lt;14&gt;;</span>\n<span class=\"go\">  rx-pin = &lt;16&gt;;</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n<p>In the overlay file above, pin P0.16 is used for RX and P0.14 is used for TX</p>\n</li>\n<li><p>Use the UART1 as <code class=\"docutils literal notranslate\"><span class=\"pre\">device_get_binding(DT_LABEL(DT_NODELABEL(uart1)))</span></code></p></li>\n</ol>\n<p>See <a class=\"reference internal\" href=\"../../../../guides/dts/howtos.html#set-devicetree-overlays\"><span class=\"std std-ref\">Set devicetree overlays</span></a> for further details.</p>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">nRF52840 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">3</a>, chapter 7 ‘Hardware and Layout’.\nIn the table 7.1.1 ‘aQFN73 ball assignments’ select the pins marked\n‘General purpose I/O’.  Note that pins marked as ‘low frequency I/O only’ can only be used\nin under-10KHz applications. They are not suitable for 115200 speed of UART.</p>\n<p>Translate the ‘Pin’ into number for devicetree by using the following formula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-DK\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-DK</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 9, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_F"}, {"label": "GPIO_I"}, {"label": "GPIO_J"}, {"label": "GPIO_K"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 4, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efr32mg_sltb004a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFR32MG-SLTB004A</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efr32mg-sltb004a\">\n<span id=\"id1\"></span><h1>EFR32MG-SLTB004A<a class=\"headerlink\" href=\"#efr32mg-sltb004a\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFR32™ Mighty Gecko Starter Kit EFR32MG-SLTB004A (a.k.a Thunderboard\nSense 2) contains a MCU from the EFR32MG family built on ARM® Cortex®-M4F\nprocessor with low power capabilities.</p>\n<img alt=\"EFR32MG-SLTB004A\" class=\"align-center\" src=\"../../../../_images/efr32mg_sltb004a.jpg\"/>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>EFR32MG12 Mighty Gecko Wireless SoC with 38.4 MHz operating frequency</p></li>\n<li><p>ARM® Cortex® M4 core with 256 kB RAM and 1024 kB Flash</p></li>\n<li><p>Macronix ultra low power 8-Mbit SPI flash (MX25R8035F)</p></li>\n<li><p>2.4 GHz ceramic antenna for wireless transmission</p></li>\n<li><p>Silicon Labs Si7021 relative humidity and temperature sensor</p></li>\n<li><p>Silicon Labs Si1133 UV index and ambient light sensor</p></li>\n<li><p>Silicon Labs Si7210 hall effect sensor</p></li>\n<li><p>Bosch Sensortec BMP280 barometric pressure sensor</p></li>\n<li><p>ams CCS811 indoor air quality gas sensor</p></li>\n<li><p>TDK InvenSense ICM-20648 6-axis inertial sensor</p></li>\n<li><p>TDK InvenSense ICS-43434 MEMS microphone</p></li>\n<li><p>Four high brightness RGB LEDs from Broadcom Limited (ASMT-YTB7-0AA02)</p></li>\n<li><p>One bi-color LED and two push buttons</p></li>\n<li><p>Power enable signals for fine grained power-control</p></li>\n<li><p>On-board SEGGER J-Link debugger for easy programming and debugging, which\nincludes a USB virtual COM port</p></li>\n<li><p>Mini Simplicity connector for access to energy profiling and advanced wireless\nnetwork debugging</p></li>\n<li><p>Breakout pads for GPIO access and connection to external hardware</p></li>\n<li><p>Reset button</p></li>\n<li><p>Automatic switch-over between USB and battery power</p></li>\n<li><p>CR2032 coin cell holder and external battery connector</p></li>\n</ul>\n<p>For more information about the EFR32MG SoC and Thunderboard Sense 2\n(EFR32MG-SLTB004A) board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/wireless/mesh-networking/efr32mg-mighty-gecko-zigbee-thread-soc\">EFR32MG Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/efr32mg12-datasheet.pdf\">EFR32MG Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/efr32xg12-rm.pdf\">EFR32MG Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/development-tools/thunderboard/thunderboard-sense-two-kit\">EFR32MG-SLTB004A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug309-sltb004a-user-guide.pdf\">EFR32MG-SLTB004A User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/schematic-files/TBSense2-BRD4166A-D00-schematic.pdf\">EFR32MG-SLTB004A Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efr32mg_sltb004a board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtcc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c port-polling</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi port-polling</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TRNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>true random number generator</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efr32mg_sltb004a/efr32mg_sltb004a_defconfig</span></code>.</p>\n<p>Other hardware features are currently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFR32MG SoC has eight gpio controllers (PORTA, PORTB, PORTC, PORTD,\nPORTF, PORTI, PORTJ and PORTK).</p>\n<p>In the following table, the column Name contains Pin names. For example, PE2\nmeans Pin number 2 on PORTE and #27 represents the location bitfield , as used\nin the board’s and microcontroller’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 24%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PD8</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0 (RED)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD9</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1 (GREEN)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PD14</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW0 Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD15</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA0</p></td>\n<td><p>UART_TX</p></td>\n<td><p>UART TX Console VCOM_TX US0_TX #0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PA1</p></td>\n<td><p>UART_RX</p></td>\n<td><p>UART RX Console VCOM_RX US0_RX #0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF3</p></td>\n<td><p>UART_TX</p></td>\n<td><p>EXP12_UART_TX LEU0_TX #27</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF4</p></td>\n<td><p>UART_RX</p></td>\n<td><p>EXP14_UART_RX LEU0_RX #27</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC10</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>EXP16_I2C_SDA I2C0_SDA #15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC11</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>EXP15_I2C_SCL I2C0_SCL #15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB6</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>CCS811_I2C_SDA I2C1_SDA #6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB7</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>CCS811_I2C_SCL I2C1_SCL #6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PK0</p></td>\n<td><p>SPI_MOSI</p></td>\n<td><p>Flash MOSI US2_TX #29</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PK2</p></td>\n<td><p>SPI_MISO</p></td>\n<td><p>Flash MISO US2_RX #30</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF7</p></td>\n<td><p>SPI_SCLK</p></td>\n<td><p>Flash SCLK US2_CLK #18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PK1</p></td>\n<td><p>SPI_CS</p></td>\n<td><p>Flash Chip Select (GPIO)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFR32MG SoC is configured to use the 38.4 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFR32MG SoC has four USARTs and one Low Energy UARTs (LEUART with 9600\nmaximum baudrate). USART0 is configured as the Zephyr console and is connected\nto the On-Board J-Link Debugger that presents a virtual COM port for general\npurpose application serial data transfer with this interface.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFR32MG-SLTB004A includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and a\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efr32-sltb004a\">\n<h4>Flashing an application to EFR32-SLTB004A<a class=\"headerlink\" href=\"#flashing-an-application-to-efr32-sltb004a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efr32mg_sltb004a samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFR32MG-SLTB004A to your host computer using the USB port and you\nshould see a USB connection which exposes a Mass Storage (TB004) and a\nUSB Serial Port. Copy the generated zephyr.bin in the SLTB004A drive.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you should be able to see on the corresponding Serial Port\nthe following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "96b_carbon", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Carbon</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-carbon\">\n<span id=\"b-carbon-board\"></span><h1>96Boards Carbon<a class=\"headerlink\" href=\"#boards-carbon\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards is based on the STMicroelectronics STM32F401RET Cortex-M4 CPU and\nalso contains a nRF51822 chip connected over SPI for BLE connectivity.</p>\n<p>The 96Boards Carbon board is built with two chips: an STMicroelectronics\nSTM32F401RET Cortex-M4 CPU and an nRF51822 chip connected to\nthe Cortex-M4 CPU over SPI for Bluetooth LE connectivity.  Even though\nboth chips exist on the same physical board, they must be programmed\nseparately:</p>\n<ul class=\"simple\">\n<li><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">96b_carbon</span></code> configuration is used when developing programs for\nthe main chip on the board, the STM32F401RET. Users will likely want to\nwrite applications targeting this chip, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">96b_carbon</span></code>\nconfiguration, since it is connected to all of the breakout\nI/O headers.</p></li>\n<li><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">96b_carbon_nrf51</span></code> configuration should be used for programming\nthe secondary nRF51822 chip. Most users will likely not develop\napplications for this chip, since Zephyr already provides a\nsample application that can be flashed onto the nRF51822\nto provide Bluetooth functionality to applications on the main\nSTM32F401RET chip.</p></li>\n</ul>\n<p>For instructions on how to set up the nRF51822 to develop Bluetooth\napplications, see <a class=\"reference internal\" href=\"../../96b_carbon_nrf51/doc/index.html#b-carbon-nrf51-bluetooth\"><span class=\"std std-ref\">Providing Bluetooth to 96b_carbon</span></a>.</p>\n<p>After you have flashed your nRF51, you can perform basic validation\nof this Bluetooth setup using the instructions\n<a class=\"reference internal\" href=\"#b-carbon-verify-bluetooth\"><span class=\"std std-ref\">below</span></a>.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_carbon.png\"><img alt=\"96Boards Carbon\" src=\"../../../../_images/96b_carbon.png\" style=\"width: 487px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Carbon</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Carbon provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F401RET6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>84 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>96 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (7)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (4)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Bluetooth LE over SPI, provided by nRF51822</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F401RE can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f401re.html\">STM32F401RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00096844.pdf\">STM32F401 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_carbon board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB OTG FS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>More details about the board can be found at <a class=\"reference external\" href=\"http://www.96boards.org/documentation\">96Boards website</a>.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_carbon/96b_carbon_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User1 LED = PD2</p></li>\n<li><p>LED2 / User2 LED = PA15</p></li>\n<li><p>LED3 / BT LED = PB5</p></li>\n<li><p>LED4 / Power LED = VCC</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = BOOT0 (SW1)</p></li>\n<li><p>BUTTON = RST</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Low Speed Header</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 51%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F401 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>UART2_CTS</p></td>\n<td><p>PA0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>UART2_TX</p></td>\n<td><p>PA2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>UART2_RX</p></td>\n<td><p>PA3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>UART2_RTS</p></td>\n<td><p>PA1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>USB5V</p></td>\n<td><p>USB5V</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>AIN12</p></td>\n<td><p>PC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>AIN14</p></td>\n<td><p>PC4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>UART6_TX</p></td>\n<td><p>PC6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>GPIO</p></td>\n<td><p>PC8</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>21</p></td>\n<td><p>I2C1_SCL</p></td>\n<td><p>PB6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>I2C1_SCA</p></td>\n<td><p>PB7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>25</p></td>\n<td><p>I2C2_SCA</p></td>\n<td><p>PB3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>27</p></td>\n<td><p>I2C2_SCL</p></td>\n<td><p>PB10</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>29</p></td>\n<td><p>RST_BTN</p></td>\n<td><p>RST_BTN</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 51%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F401 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>2</p></td>\n<td><p>SPI2_SS</p></td>\n<td><p>PB12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>SPI2_MOSI</p></td>\n<td><p>PB15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>6</p></td>\n<td><p>SPI2_MISO</p></td>\n<td><p>PB14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>SPI2_SCK</p></td>\n<td><p>PB13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>10</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>VCC2</p></td>\n<td><p>VCC2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>AIN13</p></td>\n<td><p>PC3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>AIN15</p></td>\n<td><p>PC5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>18</p></td>\n<td><p>UART6_RX</p></td>\n<td><p>PC7</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>20</p></td>\n<td><p>GPIO</p></td>\n<td><p>PC9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>22</p></td>\n<td><p>I2C1_SCL</p></td>\n<td><p>PB8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>24</p></td>\n<td><p>I2C1_SDA</p></td>\n<td><p>PB9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>26</p></td>\n<td><p>AIN10</p></td>\n<td><p>PC0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>28</p></td>\n<td><p>AIN11</p></td>\n<td><p>PC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>30</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n</tr>\n</tbody>\n</table>\n<p>More detailed information about the connectors can be found in\n<a class=\"reference external\" href=\"https://linaro.co/ie-specification\">96Boards IE Specification</a>.</p>\n</div>\n<div class=\"section\" id=\"external-clock-sources\">\n<h4>External Clock Sources<a class=\"headerlink\" href=\"#external-clock-sources\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32F4 has two external oscillators. The frequency of the slow clock is\n32.768 kHz. The frequency of the main clock is 16 MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Carbon board has up to 4 U(S)ARTs. The Zephyr console output is\nassigned to USART1. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Carbon board has up to 2 I2Cs. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB3</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Carbon board has up to 2 SPIs. SPI1 is used for Bluetooth communication\nover HCI. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS  : PB12</p></li>\n<li><p>SPI2_SCK  : PB13</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Carbon board has a USB OTG dual-role device (DRD) controller that\nsupports both device and host functions through its mini “OTG” USB connector.\nOnly USB device functions are supported in Zephyr at the moment.</p>\n<ul class=\"simple\">\n<li><p>USB_DM : PA11</p></li>\n<li><p>USB_DP : PA12</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 main entry points for flashing STM32F4X SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware). Flashing using the ROM bootloader requires a special activation\npattern, which can be triggered by using the BOOT0 pin. The ROM bootloader\nsupports flashing via USB (DFU), UART, I2C and SPI. You can read more about\nhow to enable and use the ROM bootloader by checking the application\nnote <a class=\"reference external\" href=\"http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf\">AN2606</a>, page 109.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"installing-dfu-util\">\n<h4>Installing dfu-util<a class=\"headerlink\" href=\"#installing-dfu-util\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is recommended to use at least v0.8 of <a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">dfu-util</a>. The package available in\ndebian/ubuntu can be quite old, so you might have to build dfu-util from source.</p>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-96boards-carbon\">\n<h4>Flashing an Application to 96Boards Carbon<a class=\"headerlink\" href=\"#flashing-an-application-to-96boards-carbon\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the micro-USB cable to the USB OTG Carbon port and to your computer.\nThe board should power ON. Force the board into DFU mode by keeping the BOOT0\nswitch pressed while pressing and releasing the RST switch.</p>\n<p>Confirm that the board is in DFU mode:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo dfu-util -l\n<span class=\"go\">dfu-util 0.8</span>\n<span class=\"go\">Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.</span>\n<span class=\"go\">Copyright 2010-2014 Tormod Volden and Stefan Schmidt</span>\n<span class=\"go\">This program is Free Software and has ABSOLUTELY NO WARRANTY</span>\n<span class=\"go\">Please report bugs to dfu-util@lists.gnumonks.org</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=3, name=\"@Device Feature/0xFFFF0000/01*004 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=2, name=\"@OTP Memory /0x1FFF7800/01*512 e,01*016 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=1, name=\"@Option Bytes /0x1FFFC000/01*016 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=0, name=\"@Internal Flash /0x08000000/04*016Kg,01*064Kg,03*128Kg\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found Runtime: [05ac:8290] ver=0104, devnum=2, cfg=1, intf=5, alt=0, name=\"UNKNOWN\", serial=\"UNKNOWN\"</span>\n</pre></div>\n</div>\n<p>You should see following confirmation on your Linux host:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>dmesg\n<span class=\"go\">usb 1-2.1: new full-speed USB device number 14 using xhci_hcd</span>\n<span class=\"go\">usb 1-2.1: New USB device found, idVendor=0483, idProduct=df11</span>\n<span class=\"go\">usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span>\n<span class=\"go\">usb 1-2.1: Product: STM32 BOOTLOADER</span>\n<span class=\"go\">usb 1-2.1: Manufacturer: STMicroelectronics</span>\n<span class=\"go\">usb 1-2.1: SerialNumber: 3574364C3034</span>\n</pre></div>\n</div>\n<p>Then build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_carbon samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Connect the micro-USB cable to the USB UART (FTDI) port and to your computer.\nRun your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board 96Boards Carbon\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">-b</span></code> option sets baud rate ignoring the value from config.</p>\n<p>Press the Reset button and you should see the the following message in your\nterminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"verifying-bluetooth-functionality\">\n<span id=\"b-carbon-verify-bluetooth\"></span><h4>Verifying Bluetooth Functionality<a class=\"headerlink\" href=\"#verifying-bluetooth-functionality\" title=\"Permalink to this headline\">¶</a></h4>\n<p>This section contains instructions for verifying basic Bluetooth\nfunctionality on the board. For help on Zephyr applications\nin general, see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>.</p>\n<ol class=\"arabic\">\n<li><p>Flash the nRF51 with the hci_spi sample application as described in\n<a class=\"reference internal\" href=\"../../96b_carbon_nrf51/doc/index.html#b-carbon-nrf51-bluetooth\"><span class=\"std std-ref\">Providing Bluetooth to 96b_carbon</span></a>.</p></li>\n<li><p>Install the dfu-util flashing app, as described above.</p></li>\n<li><p>Build and flash the <code class=\"docutils literal notranslate\"><span class=\"pre\">samples/bluetooth/ipsp</span></code> application for\n96b_carbon. See the instructions above for how to put your board\ninto DFU mode if you haven’t done this before:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_carbon samples/bluetooth/ipsp</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</li>\n<li><p>Refer to the instructions in <a class=\"reference internal\" href=\"../../../../samples/bluetooth/ipsp/README.html#bluetooth-ipsp-sample\"><span class=\"std std-ref\">Bluetooth: IPSP Sample</span></a> for how\nto verify functionality.</p></li>\n</ol>\n<p>Congratulations! Your 96Boards Carbon now has Bluetooth\nconnectivity. Refer to <a class=\"reference internal\" href=\"../../../../guides/bluetooth/index.html#bluetooth\"><span class=\"std std-ref\">Bluetooth</span></a> for additional information on\nfurther Bluetooth application development.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The 96b_carbon can be debugged by installing a 100 mil (0.1 inch) header\ninto the header at the bottom right hand side of the board, and\nattaching an SWD debugger to the 3V3 (3.3V), GND, CLK, DIO, and RST\npins on that header. Then apply power to the 96Boards Carbon via one\nof its USB connectors. You can now attach your debugger to the\nSTM32F401RET using an SWD scan.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_ESP32", "size": 4194304}], "main_flash_size": 4194304, "memory": [{"label": "sram0", "size": 327680}], "main_ram_size": 327680, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "esp32", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>ESP32</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"esp32\">\n<span id=\"id1\"></span><h1>ESP32<a class=\"headerlink\" href=\"#esp32\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ESP32 is a series of low cost, low power system on a chip microcontrollers\nwith integrated Wi-Fi &amp; dual-mode Bluetooth.  The ESP32 series employs a\nTensilica Xtensa LX6 microprocessor in both dual-core and single-core\nvariations.  ESP32 is created and developed by Espressif Systems, a\nShanghai-based Chinese company, and is manufactured by TSMC using their 40nm\nprocess. <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id2\">1</a></p>\n<p>The features include the following:</p>\n<ul class=\"simple\">\n<li><p>Dual core Xtensa microprocessor (LX6), running at 160 or 240MHz</p></li>\n<li><p>520KB of SRAM</p></li>\n<li><p>802.11b/g/n/e/i</p></li>\n<li><p>Bluetooth v4.2 BR/EDR and BLE</p></li>\n<li><p>Various peripherals:</p>\n<ul>\n<li><p>12-bit ADC with up to 18 channels</p></li>\n<li><p>2x 8-bit DACs</p></li>\n<li><p>10x touch sensors</p></li>\n<li><p>Temperature sensor</p></li>\n<li><p>4x SPI</p></li>\n<li><p>2x I2S</p></li>\n<li><p>2x I2C</p></li>\n<li><p>3x UART</p></li>\n<li><p>SD/SDIO/MMC host</p></li>\n<li><p>Slave (SDIO/SPI)</p></li>\n<li><p>Ethernet MAC</p></li>\n<li><p>CAN bus 2.0</p></li>\n<li><p>IR (RX/TX)</p></li>\n<li><p>Motor PWM</p></li>\n<li><p>LED PWM with up to 16 channels</p></li>\n<li><p>Hall effect sensor</p></li>\n</ul>\n</li>\n<li><p>Cryptographic hardware acceleration (RNG, ECC, RSA, SHA-2, AES)</p></li>\n<li><p>5uA deep sleep current</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-requirements\">\n<h2>System requirements<a class=\"headerlink\" href=\"#system-requirements\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ESP32 toolchain <code class=\"file docutils literal notranslate\"><span class=\"pre\">xtensa-esp32-elf</span></code> is required to build this port.\nThe toolchain installation can be performed in two ways:</p>\n<ol class=\"arabic\">\n<li><p>Automatic installation</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west espressif install</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>By default, the toolchain will be downloaded and installed under $HOME/.espressif directory\n(%USERPROFILE%/.espressif on Windows).</p>\n</div>\n</li>\n<li><p>Manual installation</p>\n<p>Follow the <a class=\"reference external\" href=\"https://docs.espressif.com/projects/esp-idf/en/v4.2/esp32/api-guides/tools/idf-tools.html#xtensa-esp32-elf\">ESP32 Toolchain</a> link to download proper OS package version.\nUnpack the toolchain file to a known location as it will be required for environment path configuration.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"build-environment-setup\">\n<h3>Build Environment Setup<a class=\"headerlink\" href=\"#build-environment-setup\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Some variables must be exported into the environment prior to building this port.\nFind more information at <a class=\"reference internal\" href=\"../../../../application/index.html#env-vars\"><span class=\"std std-ref\">Setting Variables</span></a> on how to keep this settings saved in you environment.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>In case of manual toolchain installation, set <code class=\"file docutils literal notranslate\"><span class=\"pre\">ESPRESSIF_TOOLCHAIN_PATH</span></code> accordingly.\nOtherwise, set toolchain path as below. If necessary, update the version folder path as in <code class=\"file docutils literal notranslate\"><span class=\"pre\">esp-2020r3-8.4.0</span></code>.</p>\n</div>\n<p>On Linux and macOS:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export ZEPHYR_TOOLCHAIN_VARIANT=\"espressif\"</span>\n<span class=\"go\">export ESPRESSIF_TOOLCHAIN_PATH=\"${HOME}/.espressif/tools/xtensa-esp32-elf/esp-2020r3-8.4.0/xtensa-esp32-elf\"</span>\n</pre></div>\n</div>\n<p>On Windows:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>on CMD:\n<span class=\"go\">set ESPRESSIF_TOOLCHAIN_PATH=%USERPROFILE%\\.espressif\\tools\\xtensa-esp32-elf\\esp-2020r3-8.4.0\\xtensa-esp32-elf</span>\n<span class=\"go\">set ZEPHYR_TOOLCHAIN_VARIANT=espressif</span>\n<span class=\"go\">set PATH=%PATH%;%ESPRESSIF_TOOLCHAIN_PATH%\\bin</span>\n\n<span class=\"gp\"># </span>on PowerShell\n<span class=\"gp\">$</span>env:ESPRESSIF_TOOLCHAIN_PATH<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$env</span><span class=\"s2\">:USERPROFILE\\.espressif\\tools\\xtensa-esp32-elf\\esp-2020r3-8.4.0\\xtensa-esp32-elf\"</span>\n<span class=\"gp\">$</span>env:ZEPHYR_TOOLCHAIN_VARIANT<span class=\"o\">=</span><span class=\"s2\">\"espressif\"</span>\n<span class=\"gp\">$</span>env:Path +<span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"nv\">$env</span><span class=\"s2\">:ESPRESSIF_TOOLCHAIN_PATH\\bin\"</span>\n</pre></div>\n</div>\n<p>Finally, retrieve required submodules to build this port. This might take a while for the first time:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west espressif update</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>It is recommended running the command above after <code class=\"file docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">update</span></code> so that submodules also get updated.</p>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The usual <code class=\"docutils literal notranslate\"><span class=\"pre\">flash</span></code> target will work with the <code class=\"docutils literal notranslate\"><span class=\"pre\">esp32</span></code> board\nconfiguration. Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>\napplication.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b esp32 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Refer to <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for\nmore details.</p>\n<p>It’s impossible to determine which serial port the ESP32 board is\nconnected to, as it uses a generic RS232-USB converter.  The default of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code> is provided as that’s often the assigned name on a Linux\nmachine without any other such converters.</p>\n<p>The baud rate of 921600bps is recommended.  If experiencing issues when\nflashing, try halving the value a few times (460800, 230400, 115200,\netc).  It might be necessary to change the flash frequency or the flash\nmode; please refer to the <a class=\"reference external\" href=\"https://github.com/espressif/esptool/blob/master/README.md\">esptool documentation</a> for guidance on these\nsettings.</p>\n<p>All flashing options are now handled by the <a class=\"reference internal\" href=\"../../../../guides/west/index.html#west\"><span class=\"std std-ref\">West (Zephyr’s meta-tool)</span></a> tool, including flashing\nwith custom options such as a different serial port.  The <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span></code> tool supports\nspecific options for the ESP32 board, as listed here:</p>\n<blockquote>\n<div><dl class=\"option-list\">\n<dt><kbd><span class=\"option\">--esp-idf-path <var>ESP_IDF_PATH</var></span></kbd></dt>\n<dd><p>path to ESP-IDF</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-device <var>ESP_DEVICE</var></span></kbd></dt>\n<dd><p>serial port to flash, default $ESPTOOL_PORT if defined.\nIf not, esptool will loop over available serial ports until\nit finds ESP32 device to flash.</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-baud-rate <var>ESP_BAUD_RATE</var></span></kbd></dt>\n<dd><p>serial baud rate, default 921600</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-size <var>ESP_FLASH_SIZE</var></span></kbd></dt>\n<dd><p>flash size, default “detect”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-freq <var>ESP_FLASH_FREQ</var></span></kbd></dt>\n<dd><p>flash frequency, default “40m”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-mode <var>ESP_FLASH_MODE</var></span></kbd></dt>\n<dd><p>flash mode, default “dio”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-tool <var>ESP_TOOL</var></span></kbd></dt>\n<dd><p>if given, complete path to espidf. default is to\nsearch for it in [ESP_IDF_PATH]/components/esptool_py/\nesptool/esptool.py</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-bootloader <var>ESP_FLASH_BOOTLOADER</var></span></kbd></dt>\n<dd><p>Bootloader image to flash</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-partition_table <var>ESP_FLASH_PARTITION_TABLE</var></span></kbd></dt>\n<dd><p>Partition table to flash</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For example, to flash to <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB2</span></code>, use the following command after\nhaving build the application in the <code class=\"docutils literal notranslate\"><span class=\"pre\">build</span></code> directory:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west flash -d build/ --skip-rebuild --esp-device /dev/ttyUSB2</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"using-jtag\">\n<h3>Using JTAG<a class=\"headerlink\" href=\"#using-jtag\" title=\"Permalink to this headline\">¶</a></h3>\n<p>As with much custom hardware, the ESP-32 modules require patches to\nOpenOCD that are not upstream.  Espressif maintains their own fork of\nthe project here.  By convention they put it in <code class=\"docutils literal notranslate\"><span class=\"pre\">~/esp</span></code> next to the\ninstallations of their toolchain and SDK:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cd ~/esp</span>\n\n<span class=\"go\">git clone https://github.com/espressif/openocd-esp32</span>\n\n<span class=\"go\">cd openocd-esp32</span>\n<span class=\"go\">./bootstrap</span>\n<span class=\"go\">./configure</span>\n<span class=\"go\">make</span>\n</pre></div>\n</div>\n<p>On the ESP-WROVER-KIT board, the JTAG pins are connected internally to\na USB serial port on the same device as the console.  These boards\nrequire no external hardware and are debuggable as-is.  The JTAG\nsignals, however, must be jumpered closed to connect the internal\ncontroller (the default is to leave them disconnected).  The jumper\nheaders are on the right side of the board as viewed from the power\nswitch, next to similar headers for SPI and UART.  See\n<a class=\"reference external\" href=\"https://dl.espressif.com/doc/esp-idf/latest/get-started/get-started-wrover-kit.html\">ESP-WROVER-32 V3 Getting Started Guide</a> for details.</p>\n<p>On the ESP-WROOM-32 DevKitC board, the JTAG pins are not run to a\nstandard connector (e.g. ARM 20-pin) and need to be manually connected\nto the external programmer (e.g. a Flyswatter2):</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\"/>\n<col style=\"width: 48%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>ESP32 pin</p></th>\n<th class=\"head\"><p>JTAG pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>3V3</p></td>\n<td><p>VTRef</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EN</p></td>\n<td><p>nTRST</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IO14</p></td>\n<td><p>TMS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO12</p></td>\n<td><p>TDI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO13</p></td>\n<td><p>TCK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IO15</p></td>\n<td><p>TDO</p></td>\n</tr>\n</tbody>\n</table>\n<p>Once the device is connected, you should be able to connect with (for\na DevKitC board, replace with esp32-wrover.cfg for WROVER):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cd ~/esp/openocd-esp32</span>\n<span class=\"go\">src/openocd -f interface/ftdi/flyswatter2.cfg -c 'set ESP32_ONLYCPU 1' -c 'set ESP32_RTOS none' -f board/esp-wroom-32.cfg -s tcl</span>\n</pre></div>\n</div>\n<p>The ESP32_ONLYCPU setting is critical: without it OpenOCD will present\nonly the “APP_CPU” via the gdbserver, and not the “PRO_CPU” on which\nZephyr is running.  It’s currently unexplored as to whether the CPU\ncan be switched at runtime or if breakpoints can be set for\neither/both.</p>\n<p>Now you can connect to openocd with gdb and point it to the OpenOCD\ngdbserver running (by default) on localhost port 3333.  Note that you\nmust use the gdb distributed with the ESP-32 SDK.  Builds off of the\nFSF mainline get inexplicable protocol errors when connecting.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">~/esp/xtensa-esp32-elf/bin/xtensa-esp32-elf-gdb outdir/esp32/zephyr.elf</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote localhost:3333</span>\n</pre></div>\n</div>\n<p>Further documentation can be obtained from the SoC vendor in <a class=\"reference external\" href=\"http://esp-idf.readthedocs.io/en/latest/api-guides/jtag-debugging/index.html\">JTAG debugging\nfor ESP32</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ESP32\">https://en.wikipedia.org/wiki/ESP32</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em9d", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "reel_board", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>reel board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"reel-board\">\n<span id=\"id1\"></span><h1>reel board<a class=\"headerlink\" href=\"#reel-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p><a class=\"reference external\" href=\"https://www.phytec.de/reelboard/\">reel board</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id12\">1</a> is a evaluation board based on the Nordic Semiconductor\nnRF52840 SoC. The board was developed by PHYTEC Messtechnik GmbH in\ncooperation with Zephyr Project for the Hackathon - “Get Connected”.\nThe board has a built-in debug adapter based on the DAPLink interface\nfirmware and NXP MK20DX128VFM5 SoC.</p>\n<p>It is equipped with the Electrophoretic (electronic ink) Display (EPD),\nenvironmental (temperature, humidity, light, accelerometer) sensors, and\nBluetooth connectivity making it easy to experiment and evaluate the\nZephyr OS in these kinds of use cases:</p>\n<ul class=\"simple\">\n<li><p>battery powered sensor node</p></li>\n<li><p>low-power, low-cost human-machine interface (HMI) for remote\ncontrol and environmental sensor monitoring</p></li>\n<li><p>temperature and humidity monitor on your table</p></li>\n<li><p>product, name or price tag</p></li>\n<li><p>interactive badge for meetings and conferences</p></li>\n</ul>\n<p>The board provides support for the Nordic Semiconductor nRF52840 ARM®\nCortex®-M4F SoC with an integrated 2.4 GHz transceiver supporting Bluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>The schematic can be found on the <a class=\"reference external\" href=\"https://www.phytec.de/reelboard/\">reel board website</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>On the front of the board are RGB-LED, ADPS9960 and HDC1010 sensors,\nand Electrophoretic Display.\nThe RGB-LED is controlled by the nRF52840 via GPIO pins.\nDisplay is controlled by the nRF52840 via SPI and 3 GPIOs.</p>\n<p>On the back side of the board are all other components such as nRF52840,\na circuit for the Debug Adapter, On/Off and power source switch, battery holder,\nbuttons and the MMA8652FC (accelerometer) sensor.</p>\n<p>ADPS9960 is a Digital Proximity, Ambient Light, RGB and Gesture sensor.\nHDC1010 is a digital humidity and temperature sensor.\nMMA8652FC is a 12-bit Digital Accelerometer.\nAll sensors are connected to the I2C bus and one GPIO pin each,\nwhich can be used as an interrupt source.</p>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reel_board.png\"><img alt=\"reel board front\" src=\"../../../../_images/reel_board.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board front (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reel_board_descr_back.png\"><img alt=\"reel board back\" src=\"../../../../_images/reel_board_descr_back.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board back (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>Since PCB version 1507.2, the nRF52840 SoC is not soldered directly to\nthe board but integrated as a module on a NOTM.2 adapter.\nThe wiring is identical for versions 1507.1 and 1507.2.</p>\n<div class=\"section\" id=\"display\">\n<span id=\"reel-board-display\"></span><h3>Display<a class=\"headerlink\" href=\"#display\" title=\"Permalink to this headline\">¶</a></h3>\n<p>GDEH0213B1 is the display with which the board was introduced\nin 2018. Unfortunately, this display has been discontinued.\nCurrently the board is delivered with the display GDEH0213B72.\nIt is expected that the display will be replaced over time\ndue the short product lifecycle of this type of displays.\nThe following table lists the displays used on the reel board.\nThe label on the ribbon cable can help to distinguish the displays.\nAccording to the display type, the correct designation must be\nused for building an application.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 25%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Display</p></th>\n<th class=\"head\"><p>Ribbon Cable Label</p></th>\n<th class=\"head\"><p>Controller / Driver</p></th>\n<th class=\"head\"><p>Board Designation</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Good Display\nGDEH0213B1</p></td>\n<td><p>HINK-E0213</p></td>\n<td><p>SSD1673 /\nssd16xx</p></td>\n<td><p>reel_board</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Good Display\nGDEH0213B72</p></td>\n<td><p>HINK-E0213A22</p></td>\n<td><p>IL3897 /\nssd16xx</p></td>\n<td><p>reel_board_v2</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"power-supply\">\n<h3>Power supply<a class=\"headerlink\" href=\"#power-supply\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board is optimized for low power applications and supports two\npower source configurations, battery and micro USB connector.</p>\n<p>The On/Off switch can choose which power source is used.</p>\n<p>reel board uses a TPS610981 boost converter to generate supply voltage\nfor nRF52840 and peripherals (sensors and EPD).\nThe boost converter has two modes:</p>\n<ul class=\"simple\">\n<li><p>Active mode - supply voltages for nRF52840 and peripherals are on</p></li>\n<li><p>Low Power mode - only supply voltage for nRF52840 is on</p></li>\n</ul>\n<p>The mode is controlled by MODE pin (P1.00).</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Actually there is no possibility to reduce energy consumption by the\nLow Power mode. Both voltages are always on, see:\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/reel_board/board.c\">boards/arm/reel_board/board.c</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The reel_board board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>MMA8652FC polling:\nADPS9960 polling:\nHDC1010 polling</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"port-p0\">\n<h4>Port P0<a class=\"headerlink\" href=\"#port-p0\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 45%\"/>\n<col style=\"width: 44%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P0.00</p></td>\n<td><p>XL1</p></td>\n<td><p>32.768 kHz oscillator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.01</p></td>\n<td><p>XL2</p></td>\n<td><p>32.768 kHz oscillator</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.02</p></td>\n<td><p>expansion connector pin 30</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.03</p></td>\n<td><p>expansion connector pin 31</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.04</p></td>\n<td><p>expansion connector pin 19</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.05</p></td>\n<td><p>expansion connector pin 11</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.06</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console over USB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.07</p></td>\n<td><p>Button</p></td>\n<td><p>user button (S5)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.08</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console over USB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.09</p></td>\n<td><p>expansion connector pin 27</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.10</p></td>\n<td><p>expansion connector pin 29</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.11</p></td>\n<td><p>RGB LED (red)</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.12</p></td>\n<td><p>RGB LED (green)</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.13</p></td>\n<td><p>PWM LED | Buzzer</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.14</p></td>\n<td><p>EPD Busy output</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.15</p></td>\n<td><p>EPD Reset input</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.16</p></td>\n<td><p>EPD DC input</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.17</p></td>\n<td><p>EPD SPI3_CS</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.18</p></td>\n<td><p>CPU Reset</p></td>\n<td><p>Reset (S4)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.19</p></td>\n<td><p>EPD SPI3_CLK</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.20</p></td>\n<td><p>EPD SPI3_MOSI</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.21</p></td>\n<td><p>SPI3_MISO</p></td>\n<td><p>SPI (not connected)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.22</p></td>\n<td><p>HDC1010 DRDYn</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.23</p></td>\n<td><p>APDS9960 INT</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.24</p></td>\n<td><p>MMA8652FC INT1</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.25</p></td>\n<td><p>MMA8652FC INT2</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.26</p></td>\n<td><p>I2C_0</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.27</p></td>\n<td><p>I2C_0</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.28</p></td>\n<td><p>expansion connector pin 3</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.29</p></td>\n<td><p>expansion connector pin 52</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.30</p></td>\n<td><p>expansion connector pin 1</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.31</p></td>\n<td><p>expansion connector pin 37</p></td>\n<td><p>None</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"port-p1\">\n<h4>Port P1<a class=\"headerlink\" href=\"#port-p1\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 45%\"/>\n<col style=\"width: 44%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P1.00</p></td>\n<td><p>peripheral power on</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.01</p></td>\n<td><p>expansion connector pin 32</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.02</p></td>\n<td><p>expansion connector pin 34</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.03</p></td>\n<td><p>expansion connector pin 17</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.04</p></td>\n<td><p>expansion connector pin 15</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.05</p></td>\n<td><p>expansion connector pin 13</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.06</p></td>\n<td><p>expansion connector pin 33</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.07</p></td>\n<td><p>expansion connector pin 35</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.08</p></td>\n<td><p>expansion connector pin 45</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.09</p></td>\n<td><p>RGB LED (blue)</p></td>\n<td><p>GPIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.10</p></td>\n<td><p>expansion connector pin 47</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.11</p></td>\n<td><p>expansion connector pin 49</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.12</p></td>\n<td><p>expansion connector pin 51</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.13</p></td>\n<td><p>expansion connector pin 36</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1.14</p></td>\n<td><p>expansion connector pin 48</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P1.15</p></td>\n<td><p>expansion connector pin 50</p></td>\n<td><p>None</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"solder-jumper-and-testpoints\">\n<h3>Solder Jumper and Testpoints<a class=\"headerlink\" href=\"#solder-jumper-and-testpoints\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are several labeled solder jumpers on the board.\nThese can be used to connect a logic analyzer to check the behavior of a\ndriver or to measure the voltage of a signal.</p>\n<div class=\"figure align-center\" id=\"id5\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reel_board_tp.png\"><img alt=\"reel board Jumper and Testpoints\" src=\"../../../../_images/reel_board_tp.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board testpoints (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"i2c-bus-and-sensors-testpoints\">\n<h4>I2C bus and sensors testpoints<a class=\"headerlink\" href=\"#i2c-bus-and-sensors-testpoints\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 40%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Type</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>J19</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint I2C SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J20</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint I2C SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>J7</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint INT1 MMA8652FC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J24</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint INT2 MMA8652FC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>J11</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint INT APDS9960</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J12</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint DRDYn HDC1010</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"epd-testpoints\">\n<h4>EPD testpoints<a class=\"headerlink\" href=\"#epd-testpoints\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 40%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Type</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>J13</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD Busy</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J14</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD Reset</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>J15</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD DC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J16</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD SPI_CS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>J17</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD SPI_CLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J18</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint EPD SPI_MOSI</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"power-supply-testpoint\">\n<h4>Power supply testpoint<a class=\"headerlink\" href=\"#power-supply-testpoint\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 32%\"/>\n<col style=\"width: 59%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Type</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>J21</p></td>\n<td><p>closed solder jumper</p></td>\n<td><p>testpoint peripheral voltage on/off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TP11</p></td>\n<td><p>testpoint</p></td>\n<td><p>testpoint peripheral voltage</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TP12</p></td>\n<td><p>testpoint</p></td>\n<td><p>testpoint nRF52840 supply voltage VDD_nRF</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TP13</p></td>\n<td><p>testpoint</p></td>\n<td><p>testpoint boost converter input voltage</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"build-in-debug-adapter\">\n<h3>Build-in Debug Adapter<a class=\"headerlink\" href=\"#build-in-debug-adapter\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The debug adapter is based on the DAPLink interface firmware and\nNXP MK20DX128VFM5 SoC. The adapter is powered via a micro USB connector and\nis always on when the board is connected to the USB host.\nreel board can be flashed and debugged, powered either from battery or USB.\nIf the Adapter is powered via USB, the Adapter circuit heats the board\nslightly and the temperature sensor can output values up to 1.5 degrees higher.</p>\n<div class=\"figure align-center\" id=\"id6\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reel_board_debug.png\"><img alt=\"reel board Debug Adapter\" src=\"../../../../_images/reel_board_debug.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board Debug Adapter overview (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"debug-adapter-firmware\">\n<h4>Debug Adapter Firmware<a class=\"headerlink\" href=\"#debug-adapter-firmware\" title=\"Permalink to this headline\">¶</a></h4>\n<p>DAPLink firmware for the adapter can be found at <a class=\"reference external\" href=\"https://github.com/jfischer-phytec-iot/DAPLink/tree/reel-board\">DAPLink reel board Firmware</a> <a class=\"footnote-reference brackets\" href=\"#id13\" id=\"id14\">2</a>.\nTo update the firmware (if necessary), the adapter must be started in bootloader\nmode. For this, the board should be disconnected from the USB host,\nthe J22 should be closed (use tweezers for this) and the board reconnected to\nthe USB host.</p>\n</div>\n<div class=\"section\" id=\"debug-adapter-jumper\">\n<h4>Debug Adapter Jumper<a class=\"headerlink\" href=\"#debug-adapter-jumper\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 9%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Type</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>J3</p></td>\n<td><p>open solder jumper</p></td>\n<td><p>close to pass UART TX to external adapter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J4</p></td>\n<td><p>open solder jumper</p></td>\n<td><p>close to pass UART RX to external adapter</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>J22</p></td>\n<td><p>open solder jumper</p></td>\n<td><p>close to start adapter in bootloader mode</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"adapter-leds\">\n<h4>Adapter LEDs<a class=\"headerlink\" href=\"#adapter-leds\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 37%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Type</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D11</p></td>\n<td><p>green</p></td>\n<td><p>flashes when adapter is active</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D14</p></td>\n<td><p>red</p></td>\n<td><p>reserved</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D15</p></td>\n<td><p>yellow</p></td>\n<td><p>reserved</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"expansion-connector\">\n<h2>Expansion Connector<a class=\"headerlink\" href=\"#expansion-connector\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The expansion connector has the same dimensions and similar pinout\nas the BBC MicroBit edge connector. The expansion components that are\ndesigned especially for the reel board are called link boards.</p>\n<div class=\"figure align-center\" id=\"id7\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reel_board_excon.png\"><img alt=\"reel board Expansion Connector\" src=\"../../../../_images/reel_board_excon.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board Expansion Connector (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"link-board-base\">\n<h3>link board BASE<a class=\"headerlink\" href=\"#link-board-base\" title=\"Permalink to this headline\">¶</a></h3>\n<p>link board BASE is a passive expansion board and allows other link boards or\nthird party shields in Arduino UNO R3 format to be connected to the reel board.\nIn addition, it includes a NOTM.2 connector and more powerful DCDC converter\nthen reel board.</p>\n<div class=\"figure align-center\" id=\"id8\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/rb_lb_shield.png\"><img alt=\"reel board and link board BASE\" src=\"../../../../_images/rb_lb_shield.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">reel board and link board BASE (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>link board BASE can be used in combination with other link boards or\nthird party shields in two ways:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>As an adapter</dt><dd><p>reel board is plugged into the link board BASE. Both peripherals on\nreel board and shields can be used as long as there is no conflict\nbetween I2C devices. Care should be taken to provide enough power\nto the complete circuit.</p>\n</dd>\n<dt>Stand-alone</dt><dd><p>NOTM.2 adapter is removed from the reel board and\nconnected to NOTM.2 connector on the link board BASE.\nThe wiring to the shield connector is identical to the\nconfiguration above and no software modifications for the shield\nare necessary.\nStand-alone configuration is more suitable for applications where\nperipherals on the reel board are not used or in conflict,\npower provided by the reel board is not enough,\nor for prototypes in the field.</p>\n</dd>\n</dl>\n</div></blockquote>\n<div class=\"figure align-center\" id=\"id9\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/link_board_base.png\"><img alt=\"link board BASE\" src=\"../../../../_images/link_board_base.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">link board BASE (Credit: PHYTEC)</span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>Components on the link board BASE:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>reel board Connector:</dt><dd><p>2x40 position edge connector.</p>\n</dd>\n<dt>Micro USB Connector:</dt><dd><p>USB can be used as power source. USB data lines are wired\nto NOTM.2 connector.</p>\n</dd>\n<dt>NOTM.2 Connector:</dt><dd><p>Connector for NOTM.2 adapter. If the connector is used then\nreel board should be removed from reel board connector.</p>\n</dd>\n<dt>SWD Connector X11:</dt><dd><p>Wired to NOTM.2 connector. A debug probe can\nbe connected to program or debug MCU in Stand-alone configuration.</p>\n</dd>\n<dt>Alternative Power Source X5 or X9:</dt><dd><p>Positive pin is closer to the + character. Nominal voltage is\n3.3V, there is no protection against reverse polarity or overvoltage.\nUse it with care.</p>\n</dd>\n<dt>Shield Connector:</dt><dd><p>Connector for link boards and third party shields in Arduino UNO R3\nformat. Only shields designed for 3.3V supply voltage are supported.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Meaning of the Power Source Switch positions:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>EXT</dt><dd><p>link board BASE is powered from Alternative Power Source Connector\nX9 or X5.</p>\n</dd>\n<dt>USB</dt><dd><p>link board BASE is powered from from USB connector\n(via DCDC converter).</p>\n</dd>\n<dt>RB</dt><dd><p>link board BASE is powered from reel board. The available power is\nbelow 0.3W and depends on which source is used to power the reel board.</p>\n</dd>\n</dl>\n</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">reel_board</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you use Linux, create a udev rule (as <code class=\"docutils literal notranslate\"><span class=\"pre\">root</span></code>) to fix a permission issue\nwhen not using root for flashing.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span><span class=\"nb\">echo</span> <span class=\"s1\">'ATTR{idProduct}==\"0204\", ATTR{idVendor}==\"0d28\", MODE=\"0666\", GROUP=\"plugdev\"'</span> &gt; /etc/udev/rules.d/50-cmsis-dap.rules\n</pre></div>\n</div>\n<p>Reload the rules and replug the device.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo udevadm control --reload-rules\n</pre></div>\n</div>\n<p>Finally, unplug and plug the board again for the rules to take effect.</p>\n<p>Build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the reel board\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b reel_board samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Please use reel_board_v2 to build a application for the board equipped with\nthe GDEH0213B72, see <a class=\"reference internal\" href=\"#reel-board-display\"><span class=\"std std-ref\">Display</span></a>.</p>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b reel_board_v2 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b reel_board samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons\">\n<h2>Testing the LEDs and buttons<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and\nLEDs on the board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id11\">1</a>,<a href=\"#id12\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.phytec.de/reelboard/\">https://www.phytec.de/reelboard/</a></p>\n</dd>\n<dt class=\"label\" id=\"id13\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id14\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/jfischer-phytec-iot/DAPLink/tree/reel-board\">https://github.com/jfischer-phytec-iot/DAPLink/tree/reel-board</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf51_vbluno51", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF51-VBLUno51</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf51-vbluno51\">\n<span id=\"id1\"></span><h1>nRF51-VBLUno51<a class=\"headerlink\" href=\"#nrf51-vbluno51\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Zephyr uses the nrf51_vbluno51 board configuration to run on the VBLUno51 board,\na VNG Bluetooth Low Energy UNO using an nRF51822 ARM processor.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"nRF51_VBLUno51\" src=\"../../../../_images/nrf51_vbluno51.jpg\"/>\n<p class=\"caption\"><span class=\"caption-text\">nrf51_vbluno51 Top</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"nRF51_VBLUno51 Bottom\" src=\"../../../../_images/nrf51_vbluno51_bot.jpg\"/>\n<p class=\"caption\"><span class=\"caption-text\">nrf51_vbluno51 Bottom</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://vngiotlab.github.io/vbluno/\">VBLUno51 wiki page</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>VBLUno51 board has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 16 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><dl class=\"simple\">\n<dt>CPU:</dt><dd><ul>\n<li><p>Nordic nRF51822: ARM® Cortex™ M0 32bit.</p></li>\n<li><p><em>Bluetooth Low Energy interface.</em></p></li>\n<li><p>256KB Flash, 32KB RAM.</p></li>\n<li><p>UART(1), I2C(2), SPI(1), PWM(3), SWD, Timer 16bit(3).</p></li>\n<li><p>21 digital channels, 6 ADC 10bit channels.</p></li>\n<li><p>1 Led and 1 Button onboard.</p></li>\n<li><p>GPIO Voltage: 0 - 3.3V.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>DAPLink (CMSIS-DAP) interface for program and debug:</dt><dd><ul>\n<li><p>USB MSD: Drag and Drop programming flash memory.</p></li>\n<li><p>USB HID (DAP): CMSIS-DAP compliant debug channel.</p></li>\n<li><p>USB CDC: Virtual COM port for log, trace and terminal emulation.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Supports hardware flow control features (RTS/CTS).</p></li>\n<li><p><em>Energy monitoring for BLE module by current measurement (Only VBLUno51_EM)</em></p></li>\n<li><p>FOTA (Firmware over the air): Upgrade firmware over BLE interface.</p></li>\n<li><dl class=\"simple\">\n<dt>Build good applications with:</dt><dd><ul>\n<li><p>Compiler and IDE: GCC, Keil MDK, IAR, Eclipse, Qt Creator.</p></li>\n<li><p>Frameworks: Arduino, ARM mbed-OS, Zephyr-OS, Nordic SDK, RIOT-OS, MyNewt-OS, ChibiOS, NuttX RTOS</p></li>\n<li><p>A lot of tutorials for Arduino, mbed-os and more.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Pinout: Arduino Uno Rev3 compliant.</p></li>\n<li><dl class=\"simple\">\n<dt>Power:</dt><dd><ul>\n<li><p>USB port.</p></li>\n<li><p>Power adapter: +9 -&gt; +12V.</p></li>\n<li><p>3V Battery: CR20xx holder</p></li>\n<li><p>Rechargeable battery jump: +3.7 -&gt; +12V</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Open source: Hardware design, firmware, packages, tutorial and example codes</p></li>\n</ul>\n<p>See <a class=\"reference external\" href=\"https://vngiotlab.github.io/vbluno/\">VBLUno51 wiki page</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id8\">1</a> for full documents and tutorials about the VBLUno51 board.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED = LED0 (green) = P0.7</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = BUT = SW0 = P0.15</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"more-details\">\n<h4>More details<a class=\"headerlink\" href=\"#more-details\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"nRF51_VBLUno51 Pinout\" src=\"../../../../_images/vbluno51_nordic_pinout.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">nrf51_vbluno51 Pinout</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"nRF51_VBLUno51 Fritzing part\" src=\"../../../../_images/vbluno51_frizting.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">nrf51_vbluno51 Fritzing part</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf51_vbluno51</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The VBLUno51 board has on-board DAPLink (CMSIS-DAP) interface for flashing and debugging.\nYou do not need any other programming device.\nYou only need to install pyOCD tool (<a class=\"reference external\" href=\"https://pypi.python.org/pypi/pyOCD\">https://pypi.python.org/pypi/pyOCD</a>)</p>\n<p>This tutorial uses the blinky application <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a>.</p>\n<p>See the <a class=\"reference internal\" href=\"../../../../getting_started/index.html#getting-started\"><span class=\"std std-ref\">Getting Started Guide</span></a> for general information on setting up\nyour development environment. Then build and flash the application in\nthe usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51_vbluno51 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51_vbluno51 samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-vbluno51-with-zephyr-buttons-leds-uart-ble\">\n<h2>Testing the VBLUno51 with Zephyr: buttons, LEDs, UART, BLE<a class=\"headerlink\" href=\"#testing-the-vbluno51-with-zephyr-buttons-leds-uart-ble\" title=\"Permalink to this headline\">¶</a></h2>\n<blockquote>\n<div><p>Here are some sample applications that you can use to test different\ncomponents on the VBLUno51 board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/beacon/README.html#bluetooth-beacon-sample\"><span class=\"std std-ref\">Bluetooth: Beacon</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/peripheral_hr/README.html#peripheral-hr\"><span class=\"std std-ref\">Bluetooth: Peripheral HR</span></a></p></li>\n</ul>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id7\">1</a>,<a href=\"#id8\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://vngiotlab.github.io/vbluno/\">https://vngiotlab.github.io/vbluno/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram1", "size": 4194304}, {"label": "sram2_3", "size": 4194304}, {"label": "psram", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_TOUCH"}, {"label": "I2C_AUDIO_CONF"}, {"label": "I2C_SHIELD0"}, {"label": "I2C_SHIELD1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mps2_an521", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM MPS2+ AN521</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-mps2-an521\">\n<span id=\"mps2-an521-board\"></span><h1>ARM MPS2+ AN521<a class=\"headerlink\" href=\"#arm-mps2-an521\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The mps2_an521 board configuration is used by Zephyr applications that run\non the MPS2+ AN521 board. It provides support for the MPS2+ AN521 ARM Cortex-M33\nCPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit GPIO</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mps2_an521.png\"><img alt=\"ARM MPS2+ AN521\" class=\"align-center\" src=\"../../../../_images/mps2_an521.png\" style=\"width: 666px; height: 546px;\"/></a>\n<p>In addition to enabling actual hardware usage, this board configuration can\nalso use QEMU to emulate the AN521 platform running on the MPS2+.</p>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/development-boards/fpga-prototyping-boards/mps2\">MPS2 FPGA Website</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board configuration makes no claims about its suitability for use\nwith actual MPS2 hardware systems using AN521, or any other hardware\nsystem. It has been tested on actual hardware, but its primary purpose is\nfor use with QEMU and unit tests for the ARM Cortex-M33.</p>\n</div>\n<div class=\"section\" id=\"zephyr-board-options\">\n<h3>Zephyr board options<a class=\"headerlink\" href=\"#zephyr-board-options\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MPS2+ AN521 is a dual core SoC with Cortex-M33 architecture on both cores\n(CPU0 and CPU1). Zephyr provides support for building firmware\nimages for both CPU0 and CPU1. For CPU0 supporting ARM Security Extensions\nboth Secure and Non-Secure firmware images may be built.</p>\n<p>The BOARD options are summarized below:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 29%\"/>\n<col style=\"width: 71%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>BOARD</p></th>\n<th class=\"head\"><p>Description</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>mps2_an521</p></td>\n<td><p>For building Secure (or Secure-only) firmware on CPU0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>mps2_an521_ns</p></td>\n<td><p>For building Non-Secure firmware for CPU0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>mps2_an521_remote</p></td>\n<td><p>For building firmware on CPU1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM MPS2+ AN521 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>Dual core ARM Cortex-M33</p></li>\n<li><p>Soft Macro Model (SMM) implementation of SSE-200 subsystem</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>16MB internal memory SRAM</p></li>\n<li><p>8KB of NVM code</p></li>\n<li><p>224MB code memory</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>P-JTAG, SWD &amp; 16-bit TRACE</p></li>\n<li><p>UART port</p></li>\n</ul>\n</li>\n<li><p>Interface</p>\n<ul>\n<li><p>AHB GPIO connected to the EXP port</p></li>\n<li><p>UART</p></li>\n<li><p>SPI</p></li>\n<li><p>I2C</p></li>\n<li><p>I2S</p></li>\n<li><p>Color LCD serial interface</p></li>\n<li><p>Ethernet</p></li>\n<li><p>VGA</p></li>\n</ul>\n</li>\n<li><p>On-board Peripherals</p>\n<ul>\n<li><p>Color LCD</p></li>\n<li><p>8 LEDs</p></li>\n<li><p>8 Switches</p></li>\n<li><p>External SSRAM1, SSRAM2 &amp; SSRAM3</p></li>\n<li><p>SMSC9220</p></li>\n<li><p>CS42L52</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"user-push-buttons\">\n<h3>User push buttons<a class=\"headerlink\" href=\"#user-push-buttons\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mps2_an521 board provides the following user push buttons:</p>\n<ul class=\"simple\">\n<li><p>ON power on</p></li>\n<li><p>nSRST: Cortex-M33 system reset and CoreSight debug reset</p></li>\n<li><p>USERPB0 and USERPB1: User defined buttons</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mps2_an521 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/development-boards/fpga-prototyping-boards/mps2\">MPS2 FPGA Website</a> for a complete list of MPS2+ AN521 board hardware\nfeatures.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mps2_an521/mps2_an521_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS2+ AN521 is a Cortex-M33 based SoC and has 15 fixed exceptions and 77 IRQs.</p>\n<p>A Cortex-M33-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Zephyr provides handlers for exceptions 1-7, 11, 12, 14, and 15, as listed\nin the following table:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>Undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>SecureFault</p></td>\n<td><p>Unauthorized\naccess to\nsecure region\nfrom ns space</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM MPS2+ AN521 Board has 4 CMSDK AHB GPIO controllers. Each providing 16\nbits of IO. These controllers are responsible for pin-muxing, input/output,\npull-up, etc.</p>\n<p>All GPIO controller pins are exposed via the following sequence of pin numbers:</p>\n<ul class=\"simple\">\n<li><p>Pins 0 - 15 are for GPIO0</p></li>\n<li><p>Pins 16 -  31 are for GPIO1</p></li>\n<li><p>Pins 32 -  47 are for GPIO2</p></li>\n<li><p>Pins 48 -  51 are for GPIO3</p></li>\n</ul>\n<p>Mapping from the ARM MPS2+ AN521 Board pins to GPIO controllers:</p>\n<ul class=\"rst-columns simple\">\n<li><p>D0 : EXT_0</p></li>\n<li><p>D1 : EXT_4</p></li>\n<li><p>D2 : EXT_2</p></li>\n<li><p>D3 : EXT_3</p></li>\n<li><p>D4 : EXT_1</p></li>\n<li><p>D5 : EXT_6</p></li>\n<li><p>D6 : EXT_7</p></li>\n<li><p>D7 : EXT_8</p></li>\n<li><p>D8 : EXT_9</p></li>\n<li><p>D9 : EXT_10</p></li>\n<li><p>D10 : EXT_12</p></li>\n<li><p>D11 : EXT_13</p></li>\n<li><p>D12 : EXT_14</p></li>\n<li><p>D13 : EXT_11</p></li>\n<li><p>D14 : EXT_15</p></li>\n<li><p>D15 : EXT_5</p></li>\n<li><p>D16 : EXT_16</p></li>\n<li><p>D17 : EXT_17</p></li>\n<li><p>D18 : EXT_18</p></li>\n<li><p>D19 : EXT_19</p></li>\n<li><p>D20 : EXT_20</p></li>\n<li><p>D21 : EXT_21</p></li>\n<li><p>D22 : EXT_22</p></li>\n<li><p>D23 : EXT_23</p></li>\n<li><p>D24 : EXT_24</p></li>\n<li><p>D25 : EXT_25</p></li>\n<li><p>D26 : EXT_26</p></li>\n<li><p>D27 : EXT_30</p></li>\n<li><p>D28 : EXT_28</p></li>\n<li><p>D29 : EXT_29</p></li>\n<li><p>D30 : EXT_27</p></li>\n<li><p>D31 : EXT_32</p></li>\n<li><p>D32 : EXT_33</p></li>\n<li><p>D33 : EXT_34</p></li>\n<li><p>D34 : EXT_35</p></li>\n<li><p>D35 : EXT_36</p></li>\n<li><p>D36 : EXT_38</p></li>\n<li><p>D37 : EXT_39</p></li>\n<li><p>D38 : EXT_40</p></li>\n<li><p>D39 : EXT_44</p></li>\n<li><p>D40 : EXT_41</p></li>\n<li><p>D41 : EXT_31</p></li>\n<li><p>D42 : EXT_37</p></li>\n<li><p>D43 : EXT_42</p></li>\n<li><p>D44 : EXT_43</p></li>\n<li><p>D45 : EXT_45</p></li>\n<li><p>D46 : EXT_46</p></li>\n<li><p>D47 : EXT_47</p></li>\n<li><p>D48 : EXT_48</p></li>\n<li><p>D49 : EXT_49</p></li>\n<li><p>D50 : EXT_50</p></li>\n<li><p>D51 : EXT_51</p></li>\n</ul>\n<p>Peripheral Mapping:</p>\n<ul class=\"rst-columns simple\">\n<li><p>UART_3_RX : D0</p></li>\n<li><p>UART_3_TX : D1</p></li>\n<li><p>SPI_3_CS : D10</p></li>\n<li><p>SPI_3_MOSI : D11</p></li>\n<li><p>SPI_3_MISO : D12</p></li>\n<li><p>SPI_3_SCLK : D13</p></li>\n<li><p>I2C_3_SDA : D14</p></li>\n<li><p>I2C_3_SCL : D15</p></li>\n<li><p>UART_4_RX : D26</p></li>\n<li><p>UART_4_TX : D30</p></li>\n<li><p>SPI_4_CS : D36</p></li>\n<li><p>SPI_4_MOSI : D37</p></li>\n<li><p>SPI_4_MISO : D38</p></li>\n<li><p>SPI_4_SCK : D39</p></li>\n<li><p>I2C_4_SDA : D40</p></li>\n<li><p>I2C_4_SCL : D41</p></li>\n</ul>\n<p>For mode details refer to <a class=\"reference external\" href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dai0521c/DAI0521C_Example_SSE200_Subsystem_for_MPS2plus.pdf\">MPS2+ AN521 Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"led\">\n<h3>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS2+ has 8 built-in LEDs connected to Serial Configuration Controller (SCC).</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The SCC register CFG_REG1 Bits [7:0] for LEDa, 0 = OFF 1 = ON.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS2+ AN521 has several clocks connected:</p>\n<ul class=\"rst-columns simple\">\n<li><p>MAINCLK : 20MHz</p></li>\n<li><p>SYSCLK : 20MHz</p></li>\n<li><p>S32KCLK : 32kHz</p></li>\n<li><p>TRACECLK : 20MHz</p></li>\n<li><p>SWCLKTCK : 20MHz</p></li>\n<li><p>TRACECLKIN : 20MHz</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MPS2+ AN521 has five UARTs. The Zephyr console output by default, uses\nUART0, which is J10 on the board.</p>\n<p>UART2 is reserved. And UART 1, 3 and 4 are alt-functions on the EXP ports.</p>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit (<a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">IDAU</a>). The IDAU is used to define\nsecure and non-secure memory maps. By default, all of the memory space is\ndefined to be secure accessible only</p></li>\n<li><p>Secure and Non-secure peripherals via the Peripheral Protection Controller\n(PPC). Peripherals can be assigned as secure or non-secure accessible</p></li>\n<li><p>Secure boot</p></li>\n<li><p>Secure <a class=\"reference external\" href=\"https://developer.arm.com/products/architecture/system-architectures/amba\">AMBA®</a> interconnect</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"serial-configuration-controller-scc\">\n<h3>Serial Configuration Controller (SCC)<a class=\"headerlink\" href=\"#serial-configuration-controller-scc\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MPS2+ AN521 implements a Serial Configuration Control (SCC) register.\nThe purpose of this register is to allow individual control of clocks,\nreset-signals and interrupts to peripherals, and pin-muxing, and the LEDs and\nswitches.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>MPS2+ AN521 (CPU0) supports the Armv8m Security Extension.\nApplications built for the mps2_an521 board by default\nboot in the Secure state.</p>\n<p>MPS2+ AN521 (CPU1) does not support the Armv8m Security Extension.</p>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\">\n<h3>Building Secure/Non-Secure Zephyr applications with Arm® TrustZone®<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications on the MPS2+ AN521 (CPU0) may contain a Secure and a Non-Secure\nfirmware image. The Secure image can be built using either Zephyr\nor <a class=\"reference external\" href=\"https://git.trustedfirmware.org/trusted-firmware-m.git/tree/docs/user_guides/tfm_build_instruction.rst\">Trusted Firmware M</a> (TF-M). Non-Secure firmware images are always built\nusing Zephyr. The two alternatives are described below.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>By default the Secure image for the MPS2+ AN521 (CPU0) is built\nusing TF-M.</p>\n</div>\n<div class=\"section\" id=\"building-the-secure-firmware-with-tf-m\">\n<h4>Building the Secure firmware with TF-M<a class=\"headerlink\" href=\"#building-the-secure-firmware-with-tf-m\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process to build the Secure firmware image using TF-M and the Non-Secure\nfirmware image using Zephyr requires the following steps:</p>\n<ol class=\"arabic\">\n<li><p>Build the Non-Secure Zephyr application\nfor MPS2+ AN521 (CPU0) using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=mps2_an521_ns</span></code>.\nTo invoke the building of TF-M the Zephyr build system requires the\nKconfig option <code class=\"docutils literal notranslate\"><span class=\"pre\">BUILD_WITH_TFM</span></code> to be enabled, which is done by\ndefault when building Zephyr as a Non-Secure application.\nThe Zephyr build system will perform the following steps automatically:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Build the Non-Secure firmware image as a regular Zephyr application</p></li>\n<li><p>Build a TF-M (secure) firmware image</p></li>\n<li><p>Merge the output image binaries together</p></li>\n<li><p>Optionally build a bootloader image (MCUboot)</p></li>\n</ul>\n</div></blockquote>\n</li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Depending on the TF-M configuration, an application DTS overlay may be\nrequired, to adjust the Non-Secure image Flash and SRAM starting address\nand sizes.</p>\n</div>\n</div>\n<div class=\"section\" id=\"building-the-secure-firmware-using-zephyr\">\n<h4>Building the Secure firmware using Zephyr<a class=\"headerlink\" href=\"#building-the-secure-firmware-using-zephyr\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process to build the Secure and the Non-Secure firmware images\nusing Zephyr requires the following steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build the Secure Zephyr application for MPS2+ AN521 (CPU0)\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=mps2_an521</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_TRUSTED_EXECUTION_SECURE=y</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_BUILD_WITH_TFM=n</span></code>\nin the application project configuration file.</p></li>\n<li><p>Build the Non-Secure Zephyr application for MPS2+ AN521 (CPU0)\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=mps2_an521_ns</span></code>.</p></li>\n<li><p>Merge the two binaries together.</p></li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application-on-mps2-an521-cpu0\">\n<h3>Building a Secure only application on MPS2+ AN521 (CPU0)<a class=\"headerlink\" href=\"#building-a-secure-only-application-on-mps2-an521-cpu0\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build the Zephyr app in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>), using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=mps2_an521</span></code> for\nthe firmware running on the MPS2+ AN521 (CPU0).</p>\n<p>When building a Secure/Non-Secure application for the MPS2+ AN521 (CPU0),\nthe Secure application will have to set the SAU/IDAU configuration to allow\nNon-Secure access to all CPU resources utilized by the Non-Secure application\nfirmware. SAU/IDAU configuration shall take place before jumping to the\nNon-Secure application.</p>\n<p>The following system components are required to be properly configured during the\nsecure firmware:</p>\n<ul class=\"simple\">\n<li><p>AHB5 TrustZone Memory Protection Controller (MPC)</p></li>\n<li><p>AHB5 TrustZone Peripheral Protection Controller (PPC)</p></li>\n<li><p>Implementation-Defined Attribution Unit (IDAU)</p></li>\n</ul>\n<p>For more details refer to <a class=\"reference external\" href=\"https://developer.arm.com/products/system-design/subsystems/corelink-sse-200-subsystem\">Corelink SSE-200 Subsystem</a>.</p>\n</div>\n<div class=\"section\" id=\"building-standalone-applications-on-mps2-an521-cpu1\">\n<h3>Building standalone applications on MPS2+ AN521 CPU1<a class=\"headerlink\" href=\"#building-standalone-applications-on-mps2-an521-cpu1\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications may be built for the second Cortex-M33\n(remote) core of MPS2+ AN521. The core is referred to as CPU1.</p>\n<p>Build the Zephyr app in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>), using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=mps2_an521_remote</span></code> for\nthe firmware running on the MPS2+ AN521 (CPU1).</p>\n<p>The Zephyr build will automatically trigger building a minimal (empty)\nsecure-only firmware for CPU0, which will be used to boot the remote\ncore (CPU1).</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS2+ AN521 provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage</p></li>\n<li><p>A Serial Port which is J10 on MPS2+ board</p></li>\n</ul>\n<p>Build applications as described above.\nHere is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application built as\na secure-only application for CPU0.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mps2_an521 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! mps2_an521</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"uploading-an-application-to-mps2-an521\">\n<h4>Uploading an application to MPS2+ AN521<a class=\"headerlink\" href=\"#uploading-an-application-to-mps2-an521\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Applications can be in elf, hex or bin format. The binaries are flashed when\nthe board boots up, using files stored on the on-board Micro SD card. The\nMotherboard Configuration Controller (MCC) is responsible for loading the FPGA\nimage and binaries.</p>\n<p>Connect the MPS2+ to your host computer using the USB port. You should see a\nUSB connection exposing a Mass Storage (<code class=\"docutils literal notranslate\"><span class=\"pre\">V2M_MPS2</span></code> by default).</p>\n<p>The update requires 3 steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Copy application files to <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;MPS2</span> <span class=\"pre\">device</span> <span class=\"pre\">name&gt;/SOFTWARE/</span></code>.</p></li>\n<li><p>Open <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;MPS2</span> <span class=\"pre\">device</span> <span class=\"pre\">name&gt;/MB/HBI0263C/AN521/images.txt</span></code>.</p></li>\n<li><p>Update the <code class=\"docutils literal notranslate\"><span class=\"pre\">AN521/images.txt</span></code> file as follows:</p></li>\n</ol>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>TITLE: Versatile Express Images Configuration File\n\n<span class=\"o\">[</span>IMAGES<span class=\"o\">]</span>\nTOTALIMAGES: <span class=\"m\">1</span> <span class=\"p\">;</span>Number of Images <span class=\"o\">(</span>Max: <span class=\"m\">32</span><span class=\"o\">)</span>\n\nIMAGE0ADDRESS: 0x10000000 <span class=\"p\">;</span>Please <span class=\"k\">select</span> the required executable program\n\nIMAGE0FILE: <span class=\"se\">\\S</span>OFTWARE<span class=\"se\">\\z</span>ephyr.bin\n</pre></div>\n</div>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! mps2_an521</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Refer to the tfm_integration sample for more details about integrating with TF-M and multiple images scenario.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "gr716a_mini", "arch": "sparc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">SPARC Boards</a> »</li>\n<li>GR716-MINI Development Board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"gr716-mini-development-board\">\n<span id=\"gr716a-mini\"></span><h1>GR716-MINI Development Board<a class=\"headerlink\" href=\"#gr716-mini-development-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The GR716-MINI development board provides:</p>\n<ul class=\"simple\">\n<li><p>GR716 microcontroller</p></li>\n<li><p>SPI Flash PROM, 32 MiB</p></li>\n<li><p>SRAM, 2 MiB</p></li>\n<li><p>FTDI USB interface for UART debug link (AHBUART) and application UART\n(APBUART).</p></li>\n<li><p>4x MMCX connectors (2 ADC, 2 DAC)</p></li>\n<li><p>Miniature 80 pin mezzanine connector (bottom side)</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/gr716a_mini.jpg\"><img alt=\"GR716-MINI Development Board\" src=\"../../../../_images/gr716a_mini.jpg\" style=\"width: 543px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">GR716-MINI Development Board (Credit: Cobham Gaisler AB)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"console-output\">\n<h3>Console Output<a class=\"headerlink\" href=\"#console-output\" title=\"Permalink to this headline\">¶</a></h3>\n<p>By default, the kernel is configured to send console output to the\nfirst APBUART peripheral (apbuart0). The UART debug forwarding setting,\nif enabled in GRMON, is preserved.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">gr716a_mini</span></code> board configuration can be built\nas usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>).\nIn order to build the application for <code class=\"docutils literal notranslate\"><span class=\"pre\">gr716a_mini</span></code>, set the <code class=\"docutils literal notranslate\"><span class=\"pre\">BOARD</span></code>\nvariable to <code class=\"docutils literal notranslate\"><span class=\"pre\">gr716a_mini</span></code>.</p>\n<p>The application is linked to the on-chip tightly coupled memory by\ndefault.</p>\n</div>\n<div class=\"section\" id=\"running-on-hardware\">\n<h3>Running on hardware<a class=\"headerlink\" href=\"#running-on-hardware\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect with GRMON, then load and run the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>grmon -u -cginit 0x00010000 -uart /dev/ttyUSB0\n<span class=\"go\">  GRMON debug monitor v3.2.8</span>\n\n<span class=\"go\">  Copyright (C) 2020 Cobham Gaisler - All rights reserved.</span>\n<span class=\"go\">  For latest updates, go to http://www.gaisler.com/</span>\n<span class=\"go\">  Comments or bug-reports to support@gaisler.com</span>\n\n<span class=\"go\">  Device ID:           0x716</span>\n<span class=\"go\">  GRLIB build version: 4204</span>\n<span class=\"go\">  Detected system:     GR716</span>\n<span class=\"go\">  Detected frequency:  20.0 MHz</span>\n\n<span class=\"go\">  Component                            Vendor</span>\n<span class=\"go\">  AHB-to-AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  MIL-STD-1553B Interface              Cobham Gaisler</span>\n<span class=\"go\">  GRSPW2 SpaceWire Serial Link         Cobham Gaisler</span>\n<span class=\"go\">  SPI to AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  I2C to AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  CAN Controller with DMA              Cobham Gaisler</span>\n<span class=\"go\">  CAN Controller with DMA              Cobham Gaisler</span>\n<span class=\"go\">  AHB Debug UART                       Cobham Gaisler</span>\n<span class=\"go\">  AHB-to-AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  PacketWire Receiver with DMA         Cobham Gaisler</span>\n<span class=\"go\">  PacketWire Transmitter with DMA      Cobham Gaisler</span>\n<span class=\"go\">  GRDMAC DMA Controller                Cobham Gaisler</span>\n<span class=\"go\">  GRDMAC DMA Controller                Cobham Gaisler</span>\n<span class=\"go\">  GRDMAC DMA Controller                Cobham Gaisler</span>\n<span class=\"go\">  GRDMAC DMA Controller                Cobham Gaisler</span>\n<span class=\"go\">  Dual-port SPI Slave                  Cobham Gaisler</span>\n<span class=\"go\">  LEON3FT SPARC V8 Processor           Cobham Gaisler</span>\n<span class=\"go\">  AHB-to-AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  AHB Memory Scrubber                  Cobham Gaisler</span>\n<span class=\"go\">  AHB-to-AHB Bridge                    Cobham Gaisler</span>\n<span class=\"go\">  AHB Debug UART                       Cobham Gaisler</span>\n<span class=\"go\">  Dual-port AHB(/CPU) On-Chip RAM      Cobham Gaisler</span>\n<span class=\"go\">  Dual-port AHB(/CPU) On-Chip RAM      Cobham Gaisler</span>\n<span class=\"go\">  Generic AHB ROM                      Cobham Gaisler</span>\n<span class=\"go\">  Memory controller with EDAC          Cobham Gaisler</span>\n<span class=\"go\">  SPI Memory Controller                Cobham Gaisler</span>\n<span class=\"go\">  SPI Memory Controller                Cobham Gaisler</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  Memory controller with EDAC          Cobham Gaisler</span>\n<span class=\"go\">  LEON3 Debug Support Unit             Cobham Gaisler</span>\n<span class=\"go\">  AHB/APB Bridge                       Cobham Gaisler</span>\n<span class=\"go\">  AMBA Trace Buffer                    Cobham Gaisler</span>\n<span class=\"go\">  Multi-processor Interrupt Ctrl.      Cobham Gaisler</span>\n<span class=\"go\">  Modular Timer Unit                   Cobham Gaisler</span>\n<span class=\"go\">  Modular Timer Unit                   Cobham Gaisler</span>\n<span class=\"go\">  GR716 AMBA Protection unit           Cobham Gaisler</span>\n<span class=\"go\">  Clock gating unit                    Cobham Gaisler</span>\n<span class=\"go\">  Clock gating unit                    Cobham Gaisler</span>\n<span class=\"go\">  General Purpose Register             Cobham Gaisler</span>\n<span class=\"go\">  LEON3 Statistics Unit                Cobham Gaisler</span>\n<span class=\"go\">  AHB Status Register                  Cobham Gaisler</span>\n<span class=\"go\">  CCSDS TDP / SpaceWire I/F            Cobham Gaisler</span>\n<span class=\"go\">  General Purpose Register Bank        Cobham Gaisler</span>\n<span class=\"go\">  General Purpose Register             Cobham Gaisler</span>\n<span class=\"go\">  GR716 AMBA Protection unit           Cobham Gaisler</span>\n<span class=\"go\">  GR716 Bandgap                        Cobham Gaisler</span>\n<span class=\"go\">  GR716 Brownout detector              Cobham Gaisler</span>\n<span class=\"go\">  GR716 Phase-locked loop              Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  Generic UART                         Cobham Gaisler</span>\n<span class=\"go\">  AHB Status Register                  Cobham Gaisler</span>\n<span class=\"go\">  ADC / DAC Interface                  Cobham Gaisler</span>\n<span class=\"go\">  SPI Controller                       Cobham Gaisler</span>\n<span class=\"go\">  SPI Controller                       Cobham Gaisler</span>\n<span class=\"go\">  PWM generator                        Cobham Gaisler</span>\n<span class=\"go\">  General Purpose I/O port             Cobham Gaisler</span>\n<span class=\"go\">  General Purpose I/O port             Cobham Gaisler</span>\n<span class=\"go\">  AMBA Wrapper for OC I2C-master       Cobham Gaisler</span>\n<span class=\"go\">  AMBA Wrapper for OC I2C-master       Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Analog-to-Digital Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Digital-to-Analog Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Digital-to-Analog Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Digital-to-Analog Conv         Cobham Gaisler</span>\n<span class=\"go\">  GR716 Digital-to-Analog Conv         Cobham Gaisler</span>\n<span class=\"go\">  I2C Slave                            Cobham Gaisler</span>\n<span class=\"go\">  I2C Slave                            Cobham Gaisler</span>\n<span class=\"go\">  PWM generator                        Cobham Gaisler</span>\n<span class=\"go\">  LEON3 Statistics Unit                Cobham Gaisler</span>\n<span class=\"go\">  General Purpose Register             Cobham Gaisler</span>\n\n<span class=\"go\">  Use command 'info sys' to print a detailed report of attached cores</span>\n\n<span class=\"go\">grmon3&gt; load zephyr/zephyr.elf</span>\n<span class=\"go\">      31000000 text              16.2kB /  16.2kB   [===============&gt;] 100%</span>\n<span class=\"go\">      300040A8 initlevel           40B              [===============&gt;] 100%</span>\n<span class=\"go\">      300040D0 rodata             484B              [===============&gt;] 100%</span>\n<span class=\"go\">      300042B4 datas               20B              [===============&gt;] 100%</span>\n<span class=\"go\">      300042C8 sw_isr_table       256B              [===============&gt;] 100%</span>\n<span class=\"go\">      300043C8 devices             36B              [===============&gt;] 100%</span>\n<span class=\"go\">  Total size: 16.98kB (1.91Mbit/s)</span>\n<span class=\"go\">  Entry point 0x31000000</span>\n<span class=\"go\">  Image zephyr/zephyr.elf loaded</span>\n\n<span class=\"go\">grmon3&gt; run</span>\n<span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-788-gc82a8736a65e  ***</span>\n<span class=\"go\">Hello World! gr716a_mini</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"running-in-simulation\">\n<h3>Running in simulation<a class=\"headerlink\" href=\"#running-in-simulation\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The same application binary can be simulated with the TSIM3 LEON3 simulator.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tsim-leon3 -freq <span class=\"m\">20</span> -gr716\n\n<span class=\"go\"> TSIM3 LEON3 SPARC simulator, version v3.0.2</span>\n\n<span class=\"go\"> Copyright (C) 2020, Cobham Gaisler - all rights reserved.</span>\n<span class=\"go\"> For latest updates, go to https://www.gaisler.com/</span>\n<span class=\"go\"> Comments or bug-reports to support@gaisler.com</span>\n\n<span class=\"go\">Number of CPUs: 1</span>\n<span class=\"go\">register windows: 31</span>\n<span class=\"go\">system frequency: 20.000 MHz</span>\n<span class=\"go\">using 64-bit time</span>\n<span class=\"go\">Allocated 128 KiB local instruction RAM memory at 0x31000000</span>\n<span class=\"go\">Allocated 64 KiB local data RAM memory at 0x30000000</span>\n<span class=\"go\">Allocated 4096 KiB SRAM memory, in 1 bank at 0x40000000</span>\n<span class=\"go\">Allocated 2048 KiB ROM memory at 0x01000000</span>\n<span class=\"go\">Allocated 16384 KiB SPIM ROM memory at 0x02000000</span>\n<span class=\"go\">Allocated 16384 KiB SPIM ROM memory at 0x04000000</span>\n\n<span class=\"go\">tsim&gt; load zephyr/zephyr.elf</span>\n<span class=\"go\">  section: text, addr: 0x31000000, size 16956 bytes</span>\n<span class=\"go\">  section: initlevel, addr: 0x30000000, size 40 bytes</span>\n<span class=\"go\">  section: rodata, addr: 0x30000028, size 484 bytes</span>\n<span class=\"go\">  section: datas, addr: 0x3000020c, size 20 bytes</span>\n<span class=\"go\">  section: sw_isr_table, addr: 0x30000220, size 256 bytes</span>\n<span class=\"go\">  section: devices, addr: 0x30000320, size 36 bytes</span>\n<span class=\"go\">  Read 438 symbols</span>\n<span class=\"go\">tsim&gt; run</span>\n<span class=\"go\">  Initializing and starting from 0x31000000</span>\n<span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-788-gc82a8736a65e  ***</span>\n<span class=\"go\">Hello World! gr716a_mini</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/products/boards/gr716-boards\">GR716 Evaluation and Development Boards</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/products/simulators/tsim3/tsim3-leon3\">TSIM3 LEON3 simulator</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.gaisler.com/index.php/products/debug-tools/grmon3\">GRMON3 debug monitor</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bbc_microbit", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>BBC MicroBit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"bbc-microbit\">\n<span id=\"id1\"></span><h1>BBC MicroBit<a class=\"headerlink\" href=\"#bbc-microbit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Micro Bit (also referred to as BBC Micro Bit, stylized as micro:bit) is an\nARM-based embedded system designed by the BBC for use in computer education in\nthe UK.</p>\n<p>The board is 4 cm × 5 cm and has an ARM Cortex-M0 processor, accelerometer and\nmagnetometer sensors, Bluetooth and USB connectivity, a display consisting of\n25 LEDs, two programmable buttons, and can be powered by either USB or an\nexternal battery pack. The device inputs and outputs are through five ring\nconnectors that are part of the 23-pin edge connector.</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>UART</p></li>\n<li><p>GPIO</p></li>\n<li><p>FLASH</p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/bbc_microbit.png\"><img alt=\"BBC Micro Bit\" src=\"../../../../_images/bbc_microbit.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BBC Micro Bit (Credit: <a class=\"reference external\" href=\"http://microbit.org/\">http://microbit.org/</a>)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.microbit.org/\">microbit website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The micro:bit has the following physical features:</p>\n<ul class=\"simple\">\n<li><p>25 individually-programmable LEDs</p></li>\n<li><p>2 programmable buttons</p></li>\n<li><p>Physical connection pins</p></li>\n<li><p>Light and temperature sensors</p></li>\n<li><p>Motion sensors (accelerometer and compass)</p></li>\n<li><p>Wireless Communication, via Radio and Bluetooth</p></li>\n<li><p>USB interface</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The bbc_microbit board configuration supports the following nRF51\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF51 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b bbc_microbit samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.microbit.org/\">http://www.microbit.org/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bcm958401m2", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Broadcom BCM958401M2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"broadcom-bcm958401m2\">\n<span id=\"bcm958401m2\"></span><h1>Broadcom BCM958401M2<a class=\"headerlink\" href=\"#broadcom-bcm958401m2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Broadcom BCM958401M2 board utilizes the Valkyrie BCM58400 SoC to\nprovide support for PCIe offload engine functionality.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BCM958401M2 is a PCIe card with the following physical features:</p>\n<ul class=\"simple\">\n<li><p>PCIe Gen3 interface</p></li>\n<li><p>RS232 UART (optionally populated)</p></li>\n<li><p>JTAG (optionally populated)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Broadcom BCM958401M2 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/bcm958401m2/bcm958401m2_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The flash on board is not supported by Zephyr at this time.\nBoard is booted over PCIe interface.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The bcm958401m2 board includes pads for soldering a JTAG connector.\nZephyr applications running on the M7 core can also be tested by observing UART console output.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "arduino_nano_33_ble", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Arduino Nano 33 BLE (Sense)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arduino-nano-33-ble-sense\">\n<span id=\"arduino-nano-33-ble\"></span><h1>Arduino Nano 33 BLE (Sense)<a class=\"headerlink\" href=\"#arduino-nano-33-ble-sense\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Arduino Nano 33 BLE is designed around Nordic Semiconductor’s\nnRF52840 ARM Cortex-M4F CPU. Arduino sells 2 variants of the board, the\nplain <a class=\"reference external\" href=\"https://store.arduino.cc/usa/nano-33-ble/\">BLE</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> type and the <a class=\"reference external\" href=\"https://store.arduino.cc/usa/nano-33-ble-sense/\">BLE Sense</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> type. The “Sense” variant is distinguished by\nthe inclusion of more sensors, but otherwise both variants are the same.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/arduino_nano_33_ble_sense.png\"><img alt=\"Arduino Nano 33 BLE (Sense variant)\" class=\"align-center\" src=\"../../../../_images/arduino_nano_33_ble_sense.png\" style=\"width: 500px;\"/></a>\n<p>The Sense variant of the board</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The package is configured to support the following hardware:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C0</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C1</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n<p>Notably, this includes the PDM (microphone) interface.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://content.arduino.cc/assets/NANO33BLE_V2.0_sch.pdf\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a> will tell you everything\nyou need to know about the pins.</p>\n<p>A convinience header mapping the Arduino pin names to their\nZephyr pin numbers can be found in <code class=\"code docutils literal notranslate\"><span class=\"pre\">arduino_nano_33_ble_pins.h</span></code>,\nif you link against the <code class=\"code docutils literal notranslate\"><span class=\"pre\">arduino_nano_33_ble_pins</span></code> CMake library.</p>\n<p>For your convience, two Kconfig options are added:</p>\n<ol class=\"arabic simple\">\n<li><dl class=\"simple\">\n<dt><code class=\"code docutils literal notranslate\"><span class=\"pre\">BOARD_ARDUINO_NANO_33_BLE_INIT_SENSORS</span></code>:</dt><dd><p>This configuration option enables the internal I2C sensors.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt><code class=\"code docutils literal notranslate\"><span class=\"pre\">BOARD_ARDUINO_NANO_33_BLE_EN_USB_CONSOLE</span></code>:</dt><dd><p>This configuration option enables the USB CDC subsystem and\nthe console, so that printk works.</p>\n</dd>\n</dl>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board requires the Arduino variant of bossac. You will not\nbe able to flash with the bossac included with the zephyr-sdk, or\nusing shumatech’s mainline build.</p>\n<p>You can get this variant of bossac with one of two ways:</p>\n<ol class=\"arabic simple\">\n<li><p>Building the binary from the <a class=\"reference external\" href=\"https://github.com/arduino/BOSSA/tree/nrf\">Arduino source tree</a></p></li>\n<li><p>Downloading the Arduino IDE</p>\n<ol class=\"arabic simple\">\n<li><p>Install the board support package within the IDE</p></li>\n<li><p>Change your IDE preferences to provide verbose logging</p></li>\n<li><p>Build and flash a sample application, and read the logs to figure out where Arduino stored bossac.</p></li>\n<li><p>In most Linux based systems the path is <code class=\"docutils literal notranslate\"><span class=\"pre\">$HOME/.arduino15/packages/arduino/tools/bossac/1.9.1-arduino2/bossac</span></code>.</p></li>\n</ol>\n</li>\n</ol>\n<p>Once you have a path to bossac, you can pass it as an argument to west:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>west flash --bossac<span class=\"o\">=</span><span class=\"s2\">\"&lt;path to the arduino version of bossac&gt;\"</span>\n</pre></div>\n</div>\n<p>For example</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>west flash --bossac<span class=\"o\">=</span><span class=\"nv\">$HOME</span>/.arduino15/packages/arduino/tools/bossac/1.9.1-arduino2/bossac\n</pre></div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Attach the board to your computer using the USB cable, and then</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b arduino_nano_33_ble samples/basic/blinky</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Double-tap the RESET button on your board. Your board should disconnect, reconnect,\nand there should be a pulsing orange LED near the USB port.</p>\n<p>Then, you can flash the image using the above script.</p>\n<p>You should see the the red LED blink.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://store.arduino.cc/usa/nano-33-ble/\">https://store.arduino.cc/usa/nano-33-ble/</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://store.arduino.cc/usa/nano-33-ble-sense/\">https://store.arduino.cc/usa/nano-33-ble-sense/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://content.arduino.cc/assets/NANO33BLE_V2.0_sch.pdf\">https://content.arduino.cc/assets/NANO33BLE_V2.0_sch.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 196608}, {"label": "dtcm", "size": 65536}], "main_ram_size": 196608, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f723e_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F723E Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f723e-discovery\">\n<span id=\"stm32f723e-disco-board\"></span><h1>ST STM32F723E Discovery<a class=\"headerlink\" href=\"#st-stm32f723e-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The discovery kit enables a wide diversity of applications taking benefit\nfrom audio, multi-sensor support, graphics, security, security, video,\nand high-speed connectivity features. Important board features include:</p>\n<ul class=\"simple\">\n<li><p>STM32F723IEK6 microcontroller featuring 512 Kbytes of Flash memory and 256+16+4 Kbytes of RAM, in BGA176 package</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB re-enumeration capability</p></li>\n<li><p>TFT LCD 240x240 pixels with touch panel</p></li>\n<li><p>SAI audio codec</p></li>\n<li><p>Audio line in and line out jack</p></li>\n<li><p>Stereo speaker outputs</p></li>\n<li><p>Four ST MEMS microphones</p></li>\n<li><p>Two pushbuttons (user and reset)</p></li>\n<li><p>512-Mbit Quad-SPI Flash memory</p></li>\n<li><p>8-Mbit external PSRAM</p></li>\n<li><p>USB OTG HS with Micro-AB connectors</p></li>\n<li><p>USB OTG FS with Micro-AB connectors</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f723e_disco.jpg\"><img alt=\"STM32F723E-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f723e_disco.jpg\" style=\"width: 400px; height: 261px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f723ediscovery.html\">32F723E-DISCO website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F723E Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F723IEK6 in BGA176 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M7 CPU with FPU</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>256+16+4 KB SRAM including 64KB of tightly coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer (2)</p></li>\n<li><p>General Purpose Timers (13)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (8)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (5)</p></li>\n<li><p>2xSAI (serial audio interface)</p></li>\n<li><p>SDIO (2)</p></li>\n<li><p>CAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and on-chip hi-speed PHY</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<p>More information about STM32F723IEK6 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f723ie.html\">STM32F723IEK6 on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00305990.pdf\">STM32F72xxx reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f723e_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f723e_disco/stm32f723e_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F723E Discovery kit has 7 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00342318.pdf\">32F723E-DISCO board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA3 (Arduino Serial)</p></li>\n<li><p>UART_6 TX/RX : PC6/PC7 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9</p></li>\n<li><p>I2C2 SCL/SDA : PH4/PH5 (Arduino I2C)</p></li>\n<li><p>I2C3 SCL/SDA : PA8/PH8</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PB4/PB5 (Arduino SPI)</p></li>\n<li><p>LD1 : PA5</p></li>\n<li><p>LD5 : PA7</p></li>\n<li><p>LD6 : PB1</p></li>\n<li><p>OTG_FS_DM : PA11</p></li>\n<li><p>OTG_FS_DP : PA12</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F723E System Clock can be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default, the System clock is driven by the PLL\nclock at 216MHz, driven by a 25MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F723E Discovery kit has up to 8 UARTs. The Zephyr console output is assigned to UART6\nwhich connected to the onboard ST-LINK/V2 Virtual COM port interface. Default communication\nsettings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f723e_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F723E Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f723e-disco\">\n<h4>Flashing an application to STM32F723E-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f723e-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F723E Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f723e_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f723e_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 7, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}]}, "dac": {"count": 4, "instances": [{"label": "DAC_1"}, {"label": "DAC_3"}, {"label": "DAC_2"}, {"label": "DAC_4"}]}, "pwm": {"count": 10, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_g474re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo G474RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-g474re\">\n<span id=\"nucleo-g474re-board\"></span><h1>ST Nucleo G474RE<a class=\"headerlink\" href=\"#st-nucleo-g474re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo G474RE board features an ARM Cortex-M4 based STM32G474RE MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo G474RE board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>On-board ST-LINK/V3E debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), power LED (LD3), user LED (LD2)</p></li>\n<li><p>Two push-buttons: RESET and USER</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_g474re.jpg\"><img alt=\"Nucleo G474RE\" class=\"align-center\" src=\"../../../../_images/nucleo_g474re.jpg\" style=\"width: 426px; height: 256px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g474re.html\">Nucleo G474RE website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32G474RE SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 28 nA Standby mode and 84\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 170 MHz</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator (HSE)</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>2 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>14x timers:</p>\n<ul>\n<li><p>1x 32-bit timer and 2x 16-bit timers with up to four IC/OC/PWM or pulse counter and quadrature (incremental) encoder input</p></li>\n<li><p>2x 16-bit 8-channel advanced motor control timers, with up to 8x PWM channels, dead time generation and emergency stop</p></li>\n<li><p>1x 16-bit timer with 2x IC/OCs, one OCN/PWM, dead time generation and emergency stop</p></li>\n<li><p>2x 16-bit timers with IC/OC/OCN/PWM, dead time generation and emergency stop</p></li>\n<li><p>2x watchdog timers (independent, window)</p></li>\n<li><p>2x 16-bit basic timers</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>1x low-power timer</p></li>\n</ul>\n</li>\n<li><p>Up to 86 fast I/Os, most 5 V-tolerant</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 128 KB single bank Flash, proprietary code readout protection</p></li>\n<li><p>Up to 22 KB of SRAM including 16 KB with hardware parity check</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>2x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>4x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>3x operational amplifiers with built-in PGA</p></li>\n<li><p>4x ultra-fast rail-to-rail analog comparators</p></li>\n</ul>\n</li>\n<li><p>16x communication interfaces</p>\n<ul>\n<li><p>1 x FDCAN controller supporting flexible data rate</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>4x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>1x LPUART</p></li>\n<li><p>3x SPIs (2x with multiplexed half duplex I2S interface)</p></li>\n<li><p>1x SAI (serial audio interface)</p></li>\n<li><p>USB 2.0 full-speed interface with LPM and BCD support</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n<li><p>USB Type-C™ /USB power delivery controller (UCPD)</p></li>\n</ul>\n</li>\n<li><p>12-channel DMA controller</p></li>\n<li><p>True random number generator (RNG)</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32G474RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g474re.html\">STM32G474RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00355726.pdf\">STM32G4 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_g474re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_g474re/nucleo_g474re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G474RE Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00556337.pdf\">STM32G4 Nucleo-64 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PC4</p></li>\n<li><p>UART_1_RX : PC5</p></li>\n<li><p>LPUART_1_TX : PA2</p></li>\n<li><p>LPUART_1_RX : PA3</p></li>\n<li><p>I2C_1_SCL : PB8</p></li>\n<li><p>I2C_1_SDA : PB9</p></li>\n<li><p>SPI_1_NSS : PB6</p></li>\n<li><p>SPI_1_SCK : PA5</p></li>\n<li><p>SPI_1_MISO : PA6</p></li>\n<li><p>SPI_1_MOSI : PA7</p></li>\n<li><p>SPI_2_NSS : PB12</p></li>\n<li><p>SPI_2_SCK : PB13</p></li>\n<li><p>SPI_2_MISO : PB14</p></li>\n<li><p>SPI_2_MOSI : PB15</p></li>\n<li><p>SPI_3_NSS : PA15</p></li>\n<li><p>SPI_3_SCK : PC10</p></li>\n<li><p>SPI_3_MISO : PC11</p></li>\n<li><p>SPI_3_MOSI : PC12</p></li>\n<li><p>PWM_3_CH1 : PB4</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD2 : PA5</p></li>\n<li><p>ADC1_IN1 : PA0</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo G474RE System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 150MHz,\ndriven by 16MHz high speed internal oscillator. The clock can be boosted to 170MHz if boost mode\nis selected.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo G474RE board has 3 U(S)ARTs. The Zephyr console output is assigned to LPUART1.\nDefault settings are 115200 8N1.</p>\n<p>Please note that LPUART1 baudrate is limited to 9600 if the MCU is clocked by LSE (32.768 kHz) in\nlow power mode.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_g474re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G474RE board includes an ST-LINK/V3E embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-g474re\">\n<h4>Flashing an application to Nucleo G474RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-g474re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo G474RE to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g474re samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g474re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 49152}], "main_ram_size": 49152, "gpio": {"count": 7, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 3, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_3"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f103_mini", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>STM32F103 Mini</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"stm32f103-mini\">\n<span id=\"stm32f103-mini-board\"></span><h1>STM32F103 Mini<a class=\"headerlink\" href=\"#stm32f103-mini\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F103_MINI board features an ARM Cortex-M3 based STM32F103RC MCU\nwith a wide range of connectivity support and configurations. There are\nmultiple version of this board like <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f103_mini</span></code>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f103_mini_yellow.jpg\"><img alt=\"STM32F103 Mini Yellow\" class=\"align-center\" src=\"../../../../_images/stm32f103_mini_yellow.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f103_mini_blue.jpg\"><img alt=\"STM32F103 Mini Blue\" class=\"align-center\" src=\"../../../../_images/stm32f103_mini_blue.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F103 Mini provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Two LEDs:</p>\n<ul>\n<li><p>User LED (LD1), power LED (LD2)</p></li>\n</ul>\n</li>\n<li><p>USB re-enumeration capability:</p>\n<ul>\n<li><p>Mass storage</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F103RC can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/cd00171190.pdf\">STM32F103 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f103rc.pdf\">STM32F103 data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f103_mini board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f103_mini/stm32f103_mini_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f103_mini_pin.jpg\"><img alt=\"Nucleo F103RB connectors\" class=\"align-center\" src=\"../../../../_images/stm32f103_mini_pin.jpg\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX: PA9/PA10</p></li>\n<li><p>UART_2 TX/RX: PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI: PA4/PA5/PA6/PA7</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI: PB12/PB13/PB14/PB15</p></li>\n<li><p>I2C1 SDA/SCL: PB9/PB8</p></li>\n<li><p>PWM1_CH1: PA8</p></li>\n<li><p>USER_PB: PC13</p></li>\n<li><p>LD1: PA5</p></li>\n<li><p>USB_DC DM/DP: PA11/PA12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The on-board 8MHz crystal is used to produce a 72MHz system clock with PLL.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f103_mini</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are 2 main entry points for flashing STM32F1X SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware such as ST-Link). Flashing using the ROM bootloader requires a special activation\npattern, which can be triggered by using the BOOT0 pin.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f103-mini\">\n<h4>Flashing an application to stm32f103 mini<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f103-mini\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f103_mini samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f103_mini samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/cd00171190.pdf\">http://www.st.com/resource/en/reference_manual/cd00171190.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f103rc.pdf\">http://www.st.com/resource/en/datasheet/stm32f103rc.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "olimex_stm32_h103", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>OLIMEX-STM32-H103</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"olimex-stm32-h103\">\n<span id=\"id1\"></span><h1>OLIMEX-STM32-H103<a class=\"headerlink\" href=\"#olimex-stm32-h103\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-H103 is a simple development board based on the\nSTMicroelectronics STM32F103RBT6 ARM Cortex-M3 CPU, with all the MCU pins\npopulated and accessible through two male 26-pin connectors.</p>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex_stm32_h103_top.jpg\"><img alt=\"OLIMEX-STM32-H103 top\" src=\"../../../../_images/olimex_stm32_h103_top.jpg\" style=\"width: 800px;\"/></a>\n</div>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex_stm32_h103_bottom.jpg\"><img alt=\"OLIMEX-STM32-H103 bottom\" src=\"../../../../_images/olimex_stm32_h103_bottom.jpg\" style=\"width: 800px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-H103</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-H103/\">OLIMEX-STM32-H103 website</a> and <a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-H103/resources/STM32-H103.pdf\">OLIMEX-STM32-H103 user manual</a>.\nThe <a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-H405/resources/STM32-H405_sch.pdf\">OLIMEX-STM32-H103 schematic</a> is also available.</p>\n<p>The <a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f103rb.pdf\">ST STM32F103RB Datasheet</a> contains the processor’s\ninformation and the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The OLIMEX STM32-H103 supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX: PA9/PA10</p></li>\n<li><p>UART_2 TX/RX: PA2/PA3</p></li>\n<li><p>UART_3 TX/RX: PC10/PC11 (not enabled)</p></li>\n<li><p>I2C_1 SCL/SDA : PB6/PB7</p></li>\n<li><p>I2C_2 SCL/SDA : PB10/PB11</p></li>\n<li><p>PWM_1_CH1: PA8</p></li>\n<li><p>SPI_1 NSS_OE/SCK/MISO/MOSI: PA4/PA5/PA6/PA7</p></li>\n<li><p>SPI_2 NSS_OE/SCK/MISO/MOSI: PB12/PB13/PB14/PB15</p></li>\n<li><p>USB_DC DM/DP/DISC/PWR: PA11/PA12/PC11/PC4 (not enabled)</p></li>\n<li><p>ADC_1: PA1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The on-board 8 MHz crystal is used to produce a 72 MHz system clock with PLL.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board has 3 U(S)ARTs, UART1 and UART2 are enabled by default, with UART2\nused as Zephyr’s console. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"on-board-leds\">\n<h4>On-Board LEDs<a class=\"headerlink\" href=\"#on-board-leds\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board has one on-board green LED that is connected to PC12, which\nis active low.</p>\n<p>There is also a red power LED neither connected nor controlled by the MCU.</p>\n</div>\n<div class=\"section\" id=\"on-board-button\">\n<h4>On-Board Button<a class=\"headerlink\" href=\"#on-board-button\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board has one user button connected to PA0.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h4>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>USB is not enabled by default, however PC4 is configured by default as an ADC\ninput to sense the USB voltage (see schematic). It is possible to disconnect\nit by desoldering the appropriate pad in the PCB.</p>\n<p>The board uses PC11 to disconnect the pull-up resistor on the USB-DP line.</p>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>JTAG/SWD debug</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 44%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 28%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>2</p></td>\n<td><p>TVCC 3.3V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>PB4 / TRST</p></td>\n<td><p>4</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PA15 / TDI</p></td>\n<td><p>6</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>PA13 / TMS / SWDIO</p></td>\n<td><p>8</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA14 / TCK / SWCLK</p></td>\n<td><p>10</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>NC</p></td>\n<td><p>12</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PB3 / TDO</p></td>\n<td><p>14</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>RST</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>NC</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>NC</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>EXTENSION 1</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 38%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 38%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Name / STM32F103 Port</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Name / STM32F103 Port</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>PA11 / USB_DM</p></td>\n<td><p>2</p></td>\n<td><p>PA8 / <strong>PWM_1_CH1</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>PA12 / USB_DP</p></td>\n<td><p>4</p></td>\n<td><p>PA9 / <strong>UART1_TX</strong></p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>+3.3V</p></td>\n<td><p>6</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>PA10 / <strong>UART1_RX</strong></p></td>\n<td><p>8</p></td>\n<td><p>PC10</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PC11 / <strong>USB_DISC</strong></p></td>\n<td><p>10</p></td>\n<td><p>PC12 / <strong>LED</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>PD2</p></td>\n<td><p>12</p></td>\n<td><p>PB5/I2C1_SMBA</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PB6 / <strong>I2C1_SCL</strong></p></td>\n<td><p>14</p></td>\n<td><p>PA6 / <strong>SPI1_MISO</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>PB7 / <strong>I2C1_SDA</strong></p></td>\n<td><p>16</p></td>\n<td><p>PB8</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>PB9</p></td>\n<td><p>18</p></td>\n<td><p>PA5 / <strong>SPI1_SCK</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>PC0</p></td>\n<td><p>20</p></td>\n<td><p>PC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>21</p></td>\n<td><p>PB0</p></td>\n<td><p>22</p></td>\n<td><p>PA7 / <strong>SPI1_MOSI</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>VBAT</p></td>\n<td><p>24</p></td>\n<td><p>PC13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>25</p></td>\n<td><p>RST</p></td>\n<td><p>26</p></td>\n<td><p>PB1</p></td>\n</tr>\n</tbody>\n</table>\n<p>EXTENSION 2</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 39%\"/>\n<col style=\"width: 11%\"/>\n<col style=\"width: 38%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Name / STM32F103 Port</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Name / STM32F103 Port</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDDA</p></td>\n<td><p>2</p></td>\n<td><p>PC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>GNDA</p></td>\n<td><p>4</p></td>\n<td><p>PA0 / <strong>BUTTON</strong></p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>+3.3V</p></td>\n<td><p>6</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>PA2 / <strong>USART2_TX</strong></p></td>\n<td><p>8</p></td>\n<td><p>PA1 / <strong>ADC_1</strong></p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PC3</p></td>\n<td><p>10</p></td>\n<td><p>PA3 / <strong>USART2_RX</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>PA4 / <strong>SPI1_NSS</strong></p></td>\n<td><p>12</p></td>\n<td><p>PC4 / <strong>USB-P</strong></p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PC5</p></td>\n<td><p>14</p></td>\n<td><p>PB10 / <strong>I2C2_SCL</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>P11 / <strong>I2C2_SDA</strong></p></td>\n<td><p>16</p></td>\n<td><p>PB13 / <strong>SPI2_SCK</strong></p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>PB12 / <strong>SPI2_NSS</strong></p></td>\n<td><p>18</p></td>\n<td><p>PB14 / <strong>SPI2_MISO</strong></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>PB15 / <strong>SPI2_MOSI</strong></p></td>\n<td><p>20</p></td>\n<td><p>PC6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>21</p></td>\n<td><p>PC7</p></td>\n<td><p>22</p></td>\n<td><p>PC8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>+5V USB</p></td>\n<td><p>24</p></td>\n<td><p>PC9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>25</p></td>\n<td><p>GND</p></td>\n<td><p>26</p></td>\n<td><p>VIN</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board does not include any embedded debug tool interface, instead you\nwill have to use an external probe connected to the available 20-pin JTAG\nconnector to progran and debug the board. Both JTAG and SWD are supported.</p>\n<p>By default when using <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> ST-Link will be used with OpenOCD’s\nSWD transport, but it is also possible to use JTAG with the Olimex ARM-USB-OCD-H\nprobe, for instance. For the latter, you should replace the file <code class=\"docutils literal notranslate\"><span class=\"pre\">openocd.cfg</span></code>\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">openocd_olimex_jtag.cfg</span></code>, located in the board’s support directory.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_h103 samples/basic/button</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_h103 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "LPC_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 32768}, {"label": "sramx", "size": 32768}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso54114_m4", "arch": null, "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f411e_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F411E Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f411e-discovery\">\n<span id=\"stm32f411e-disco-board\"></span><h1>ST STM32F411E Discovery<a class=\"headerlink\" href=\"#st-stm32f411e-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F411E Discovery kit features an ARM Cortex-M4 based STM32F411VE MCU\nwith a wide range of connectivity support and configurations.\nHere are some highlights of the STM32F411E-DISCO board:</p>\n<ul class=\"simple\">\n<li><p>STM32F411VET6 microcontroller featuring 512 KB of Flash memory, 128 KB of RAM in an LQFP100 package</p></li>\n<li><p>On-board ST-LINK/V2 with selection mode switch to use the kit as a standalone STLINK/V2 (with SWD connector for programming and debugging)</p></li>\n<li><p>Board power supply: through USB bus or from an external 5 V supply voltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>L3GD20(rev B) or I3G4250D(rev D): ST MEMS motion sensor, 3-axis digital output gyroscope.</p></li>\n<li><p>LSM303DLHC(rev B) or LSM303AGR(rev D): ST MEMS system-in-package featuring a 3D digital linear acceleration sensor and a 3D digital magnetic sensor.</p></li>\n<li><p>MP45DT02(rev B) or IMP34DT05(rev D), ST MEMS audio sensor, omnidirectional digital microphone</p></li>\n<li><p>CS43L22, audio DAC with integrated class D speaker driver</p></li>\n<li><dl class=\"simple\">\n<dt>Eight LEDs:</dt><dd><ul>\n<li><p>LD1 (red/green) for USB communication</p></li>\n<li><p>LD2 (red) for 3.3 V power on</p></li>\n<li><dl class=\"simple\">\n<dt>Four user LEDs:</dt><dd><p>LD3 (orange), LD4 (green), LD5 (red) and LD6 (blue)</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Two USB OTG LEDs:</dt><dd><p>LD7 (green) VBus and LD8 (red) over-current</p>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Two pushbuttons (user and reset)</p></li>\n<li><p>USB OTG with micro-AB connector</p></li>\n<li><p>Extension header for LQFP100 I/Os for a quick connection to the prototyping board and an easy probing</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f411e_disco.jpg\"><img alt=\"STM32F411E-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f411e_disco.jpg\" style=\"width: 533px; height: 500px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f411ediscovery.html\">32F411EDISCOVERY website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F411E-DISCO Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F411VET6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>1x12-bit, 2.4 MSPS ADC with 16 channels</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Up to 11 Timers (six 16-bit, two 32-bit, two watchdog timers and a SysTick timer)</p></li>\n<li><p>USART/UART (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI/I2S (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 full-speed device/host/OTG controller with on-chip PHY</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>96-bit unique ID</p></li>\n<li><p>RTC</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F411VE can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f411ve.html\">STM32F411VE website</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00119316.pdf\">STM32F411x reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f411e_disco board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32f411e_disco/stm32f411e_disco_defconfig\">boards/arm/stm32f411e_disco/stm32f411e_disco_defconfig</a></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F411E-DISCO Discovery kit has 5 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00148985.pdf\">32F411EDISCOVERY board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>LD3 : PD13 (PWM4 CH2)</p></li>\n<li><p>LD4 : PD12 (PWM4 CH1)</p></li>\n<li><p>LD5 : PD14 (PWM4 CH3)</p></li>\n<li><p>LD6 : PD15 (PWM4 CH4)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F411E-DISCO System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 100MHz, driven by the internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F411G Discovery kit has up to 3 UARTs. The Zephyr console output is\nassigned to UART2. Default settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f411e_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F411E-DISCO Discovery kit includes an ST-LINK/V2 embedded debug tool\ninterface. This interface is supported by the openocd version included in\nZephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f411e-disco\">\n<h4>Flashing an application to STM32F411E-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f411e-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM32F411E-DISCO Discovery kit to your host computer using the\nUSB port. Then build and flash an application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f411e_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Incase you are using PCB revision B, you have to use an\nadapted board definition as the default PCB rev here is D:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f411e_disco@B samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the orange led (LD3) blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug applications in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f411e_disco samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f411ediscovery.html\">http://www.st.com/en/evaluation-tools/32f411ediscovery.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00148985.pdf\">http://www.st.com/resource/en/user_manual/dm00148985.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f411ve.html\">http://www.st.com/en/microcontrollers/stm32f411ve.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00119316.pdf\">http://www.st.com/resource/en/reference_manual/dm00119316.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "particle_xenon", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Particle Xenon</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"particle-xenon\">\n<span id=\"id1\"></span><h1>Particle Xenon<a class=\"headerlink\" href=\"#particle-xenon\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Particle Xenon is a low-cost mesh-enabled development board based on the\nNordic Semiconductor nRF52840 SoC. The board was developed by Particle\nIndustries and has an SWD connector on it for programming.</p>\n<p>It is equipped with a onboard LIPO circuit and conforms to the\nAdafruit Feather formfactor.</p>\n<p>The Particle Xenon board provides support for the Nordic Semiconductor nRF52840\nARM® Cortex®-M4F SoC with an integrated 2.4 GHz transceiver supporting\nBluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>For more information about the Particle Xenon board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://docs.particle.io/datasheets/mesh/xenon-datasheet/\">Xenon Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/particle-iot/xenon\">Xenon Hardware Files</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>On the front of the board are RGB-LED, LED and LIPO circuitry.\nThe RGB-LED is controlled by the nRF52840 via GPIO pins.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/particle_xenon.png\"><img alt=\"Particle Xenon\" src=\"../../../../_images/particle_xenon.png\" style=\"width: 150px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Particle Xenon (Credit: Particle Industries)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"power-supply\">\n<h3>Power supply<a class=\"headerlink\" href=\"#power-supply\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board is optimized for low power applications and supports two\npower source configurations, battery and micro USB connector.</p>\n<p>It contains circuitry for LIPO usage and can be charged via the USB port.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The particle_xenon board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Please see the <a class=\"reference external\" href=\"https://docs.particle.io/datasheets/mesh/xenon-datasheet/\">Xenon Datasheet</a> for header pin assignments, which are\ncommon to all Feather-compatible Particle boards.  Some peripherals are\navailable to applications through DTS overlay include directives:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_i2c1_twi1.dtsi</span></code> exposes TWI1 on labeled Feather\nSDA1/SCL1 pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi_spi1.dtsi</span></code> exposes SPI1 on labeled Feather\nSPI pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi1_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI1 pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_uart1_rtscts.dtsi</span></code> adds hardware flow control to\nlabeled Feather UART pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_xenon_uart2.dtsi</span></code> exposes UARTE1 on labeled Feather\nUART2 pins</p></li>\n</ul>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (blue)</p></li>\n<li><p>LED1 (red)</p></li>\n<li><p>LED2 (green)</p></li>\n<li><p>LED3 (blue)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SW0 via MODE</p></li>\n<li><p>SW1 via RESET</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>TWI0 enabled on labeled header (SDA/SCL)</p></li>\n<li><p>TWI1 selectable with overlay (SDA1/SCL1)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SPI0 disabled due to TWI0 conflict</p></li>\n<li><p>SPI1 selectable with overlay (SPI)</p></li>\n<li><p>SPI2 internal to 32 Mb CFI flash chip</p></li>\n<li><p>SPI3 selectable with overlay (SPI or SPI1)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uart\">\n<h4>UART<a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UARTE0 enabled RX/TX on labeled header (UART1); add RTS/CTS with overlay</p></li>\n<li><p>UARTE1 selectable with overlay (UART2)</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">particle_xenon</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash an application in the usual way, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_xenon samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_xenon samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons\">\n<h2>Testing the LEDs and buttons<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and\nLEDs on the board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52_sparkfun", "arch": "arm", "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash", "size": 2097152}], "main_flash_size": 2097152, "memory": [], "main_ram_size": 0, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "native_posix_64", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 251904}, {"label": "flash_reserved", "size": 10240}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 251904, "memory": [{"label": "sramx", "size": 16384}, {"label": "sram0", "size": 32768}, {"label": "sram1", "size": 16384}, {"label": "sram2", "size": 16384}, {"label": "sram4", "size": 16384}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s16_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 393216}, {"label": "FLASH_1", "size": 655360}], "main_flash_size": 655360, "memory": [{"label": "sram0", "size": 143360}, {"label": "sram1", "size": 4096}, {"label": "sram2", "size": 114688}], "main_ram_size": 143360, "gpio": {"count": 15, "instances": [{"label": "P0"}, {"label": "P1"}, {"label": "P2"}, {"label": "P3"}, {"label": "P4"}, {"label": "P5"}, {"label": "P6"}, {"label": "P7"}, {"label": "P8"}, {"label": "P9"}, {"label": "P10"}, {"label": "P11"}, {"label": "P12"}, {"label": "P13"}, {"label": "P14"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "uart_5"}, {"label": "uart_6"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cy8ckit_062_ble_m0", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 2147483648}], "main_ram_size": 2147483648, "gpio": {"count": 10, "instances": [{"label": "GPIO_N_000"}, {"label": "GPIO_N_032"}, {"label": "GPIO_N_064"}, {"label": "GPIO_NW_000"}, {"label": "GPIO_NW_032"}, {"label": "GPIO_NW_064"}, {"label": "GPIO_W_000"}, {"label": "GPIO_W_032"}, {"label": "GPIO_SW_000"}, {"label": "GPIO_SW_032"}]}, "i2c": {"count": 8, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}, {"label": "I2C_5"}, {"label": "I2C_6"}, {"label": "I2C_7"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "up_squared", "arch": "x86", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">x86 Boards</a> »</li>\n<li>UP Squared</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"up-squared\">\n<span id=\"id1\"></span><h1>UP Squared<a class=\"headerlink\" href=\"#up-squared\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>UP² (UP Squared) is an ultra compact single board computer with high\nperformance and low power consumption. It features the latest Intel® Apollo\nLake Celeron™ and Pentium™ Processors with only 4W of Scenario Design Power and\na powerful and flexible Intel® FPGA Altera MAX 10 onboard.</p>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/up_squared.png\"><img alt=\"UP Squared\" src=\"../../../../_images/up_squared.png\" style=\"width: 800px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Up Squared (Credit: <a class=\"reference external\" href=\"https://up-board.org\">https://up-board.org</a>)</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>This board configuration enables kernel support for the <a class=\"reference external\" href=\"https://www.up-board.org/upsquared/specifications\">UP Squared</a> board.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board configuration works on all three variants of <a class=\"reference external\" href=\"https://www.up-board.org/upsquared/specifications\">UP Squared</a>\nboards containing Intel® Pentium™ SoC,\nIntel® Celeron™ SoC, or Intel® Atom™ SoC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>General information about the board can be found at the <a class=\"reference external\" href=\"https://www.up-board.org/upsquared/specifications\">UP Squared</a> website.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In addition to the standard architecture devices (HPET, local and I/O APICs,\netc.), Zephyr supports the following Apollo Lake-specific SoC devices:</p>\n<ul class=\"simple\">\n<li><p>HSUART</p></li>\n<li><p>GPIO</p></li>\n<li><p>I2C</p></li>\n</ul>\n<div class=\"section\" id=\"hsuart-high-speed-serial-port-support\">\n<h4>HSUART High-Speed Serial Port Support<a class=\"headerlink\" href=\"#hsuart-high-speed-serial-port-support\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Apollo Lake UARTs are NS16550-compatible, with “high-speed” capability.</p>\n<p>Baud rates beyond 115.2kbps (up to 3.6864Mbps) are supported, with additional\nconfiguration. The UARTs are fed a master clock which is fed into a PLL which\nin turn outputs the baud master clock. The PLL is controlled by a per-UART\n32-bit register called <code class=\"docutils literal notranslate\"><span class=\"pre\">PRV_CLOCK_PARAMS</span></code> (aka the <code class=\"docutils literal notranslate\"><span class=\"pre\">PCP</span></code>), the format of\nwhich is:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 24%\"/>\n<col style=\"width: 24%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>[31]</p></th>\n<th class=\"head\"><p>[30:16]</p></th>\n<th class=\"head\"><p>[15:1]</p></th>\n<th class=\"head\"><p>[0]</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>enable</p></td>\n<td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code></p></td>\n<td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code></p></td>\n<td><p>toggle</p></td>\n</tr>\n</tbody>\n</table>\n<p>The resulting baud master clock frequency is <code class=\"docutils literal notranslate\"><span class=\"pre\">(n/m)</span></code> * master.</p>\n<p>Typically, the master clock is 100MHz, and the firmware by default sets\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">PCP</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">0x3d090240</span></code>, i.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span> <span class=\"pre\">=</span> <span class=\"pre\">288</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span> <span class=\"pre\">=</span>  <span class=\"pre\">15625</span></code>, which\nresults in the de-facto standard 1.8432MHz master clock and a max baud rate\nof 115.2k.  Higher baud rates are enabled by changing the PCP and telling\nZephyr what the resulting master clock is.</p>\n<p>Use devicetree to set the value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">PRV_CLOCK_PARAMS</span></code> register in\nthe UART block of interest. Typically a devicetree overlay file would be\npresent in the application directory (specific to the board, such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">up_squared.overlay</span></code>), with contents like this:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">/ {</span>\n<span class=\"go\">    soc {</span>\n<span class=\"go\">        uart@0 {</span>\n<span class=\"go\">            pcp = &lt;0x3d090900&gt;;</span>\n<span class=\"go\">            clock-frequency = &lt;7372800&gt;;</span>\n<span class=\"go\">            current-speed = &lt;230400&gt;;</span>\n<span class=\"go\">        };</span>\n<span class=\"go\">    };</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>The relevant variables are <code class=\"docutils literal notranslate\"><span class=\"pre\">pcp</span></code> (the value to use for <code class=\"docutils literal notranslate\"><span class=\"pre\">PRV_CLOCK_PARAMS</span></code>),\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">clock-frequency</span></code> (the resulting baud master clock). The meaning of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">current-speed</span></code> is unchanged, and as usual indicates the initial baud rate.</p>\n</div>\n<div class=\"section\" id=\"gpio\">\n<h4>GPIO<a class=\"headerlink\" href=\"#gpio\" title=\"Permalink to this headline\">¶</a></h4>\n<p>GPIOs are exposed through the HAT header, and can be referred using\npredefined macros such as <code class=\"docutils literal notranslate\"><span class=\"pre\">UP2_HAT_PIN3</span></code>. The physical pins are\nconnected to the on-board FPGA acting as level shifter. Therefore,\nto actually utilize these GPIO pins, the function of the pins and\ndirections (input/output) must be set in the BIOS. This can be\naccomplished in BIOS, under menu <code class=\"docutils literal notranslate\"><span class=\"pre\">Advanced</span></code>, and option\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HAT</span> <span class=\"pre\">Configurations</span></code>. When a corresponding pin is set to act as\nGPIO, there is an option to set the direction of the pin. This needs\nto be set accordingly for the GPIO to function properly.</p>\n</div>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference external\" href=\"https://www.up-board.org/upsquared/specifications\">UP Squared</a> website and <a class=\"reference external\" href=\"https://wiki.up-community.org/Pinout\">UP Squared Pinout</a> website\nfor connection diagrams.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Use the following procedures for booting an image on a UP Squared board.</p>\n<div class=\"contents local topic\" id=\"contents\">\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#build-zephyr-application\" id=\"id4\">Build Zephyr application</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#preparing-the-boot-device\" id=\"id5\">Preparing the Boot Device</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#booting-the-up-squared-board\" id=\"id6\">Booting the UP Squared Board</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#booting-the-up-squared-board-over-network\" id=\"id7\">Booting the UP Squared Board over network</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"build-zephyr-application\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Build Zephyr application</a><a class=\"headerlink\" href=\"#build-zephyr-application\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build a Zephyr application; for instance, to build the <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code>\napplication on UP Squared:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b up_squared samples/hello_world</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>A Zephyr EFI image file named <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.efi</span></code> is automatically\ncreated in the build directory after the application is built.</p>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"preparing-the-boot-device\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Preparing the Boot Device</a><a class=\"headerlink\" href=\"#preparing-the-boot-device\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Prepare a USB flash drive to boot the Zephyr application image on\na UP Squared board.</p>\n<ol class=\"arabic\">\n<li><p>Refer to the <a class=\"reference external\" href=\"https://wiki.up-community.org/Serial_console\">UP Squared Serial Console Wiki page</a> for instructions on how to\nconnect for serial console.</p></li>\n<li><p>Format the USB flash drive as FAT32.</p>\n<p>On Windows, open <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">Explorer</span></code>, and right-click on the USB flash drive.\nSelect <code class=\"docutils literal notranslate\"><span class=\"pre\">Format...</span></code>. Make sure in <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">System</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">FAT32</span></code> is selected.\nClick on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Format</span></code> button and wait for it to finish.</p>\n<p>On Linux, graphical utilities such as <code class=\"docutils literal notranslate\"><span class=\"pre\">gparted</span></code> can be used to format\nthe USB flash drive as FAT32. Alternatively, under terminal, find out\nthe corresponding device node for the USB flash drive (for example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/sdd</span></code>). Execute the following command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>mkfs.vfat -F <span class=\"m\">32</span> &lt;device-node&gt;\n</pre></div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>Make sure the device node is the actual device node for\nthe USB flash drive. Or else you may erase other storage devices\non your system, and will render the system unusable afterwards.</p>\n</div>\n</li>\n<li><p>Copy the Zephyr EFI image file <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr/zephyr.efi</span></code> to the USB drive.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-the-up-squared-board\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Booting the UP Squared Board</a><a class=\"headerlink\" href=\"#booting-the-up-squared-board\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Boot the UP Squared board to the EFI shell with USB flash drive connected.</p>\n<ol class=\"arabic\">\n<li><p>Insert the prepared boot device (USB flash drive) into the UP Squared board.</p></li>\n<li><p>Connect the board to the host system using the serial cable and\nconfigure your host system to watch for serial data.  See\n<a class=\"reference external\" href=\"https://wiki.up-community.org/Serial_console\">https://wiki.up-community.org/Serial_console</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>On Windows, PuTTY has an option to set up configuration for\nserial data.  Use a baud rate of 115200.</p>\n</div>\n</li>\n<li><p>Power on the UP Squared board.</p></li>\n<li><p>When the following output appears, press <kbd class=\"kbd docutils literal notranslate\">F7</kbd>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Press &lt;DEL&gt; or &lt;ESC&gt; to enter setup.</span>\n</pre></div>\n</div>\n</li>\n<li><p>From the menu that appears, select the menu entry that describes\nthat particular EFI shell.</p></li>\n<li><p>From the EFI shell select Zephyr EFI image to boot.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Shell&gt; fs0:zephyr.efi</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>You can safely ignore this message if it appears:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">WARNING: no console will be available to OS</span>\n</pre></div>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-the-up-squared-board-over-network\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Booting the UP Squared Board over network</a><a class=\"headerlink\" href=\"#booting-the-up-squared-board-over-network\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"build-zephyr-image\">\n<h4>Build Zephyr image<a class=\"headerlink\" href=\"#build-zephyr-image\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic simple\">\n<li><p>Follow <a class=\"reference internal\" href=\"#build-zephyr-application\">Build Zephyr application</a> steps to build Zephyr image.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"prepare-linux-host\">\n<h4>Prepare Linux host<a class=\"headerlink\" href=\"#prepare-linux-host\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Install DHCP, TFTP servers. For example <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo apt-get install dnsmasq\n</pre></div>\n</div>\n</li>\n<li><p>Configure DHCP server. Configuration for <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code> is below:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>Only listen to this interface\n<span class=\"go\">interface=eno2</span>\n<span class=\"go\">dhcp-range=10.1.1.20,10.1.1.30,12h</span>\n</pre></div>\n</div>\n</li>\n<li><p>Configure TFTP server.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>tftp\n<span class=\"go\">enable-tftp</span>\n<span class=\"go\">tftp-root=/srv/tftp</span>\n<span class=\"go\">dhcp-boot=zephyr.efi</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.efi</span></code> is a Zephyr EFI binary created above.</p>\n</li>\n<li><p>Copy the Zephyr EFI image <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr/zephyr.efi</span></code> to the\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/srv/tftp</span></code> folder.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo cp zephyr/zephyr.efi /srv/tftp\n</pre></div>\n</div>\n</div></blockquote>\n</li>\n<li><p>TFTP root should be looking like:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tree /srv/tftp\n<span class=\"go\">/srv/tftp</span>\n<span class=\"go\">└── zephyr.efi</span>\n</pre></div>\n</div>\n</li>\n<li><p>Restart <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code> service:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo systemctl restart dnsmasq.service\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"prepare-up-squared-board-for-network-boot\">\n<h4>Prepare UP Squared board for network boot<a class=\"headerlink\" href=\"#prepare-up-squared-board-for-network-boot\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Enable PXE network from BIOS settings.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Advanced -&gt; Network Stack Configuration -&gt; Enable Network Stack -&gt; Enable Ipv4 PXE Support</span>\n</pre></div>\n</div>\n</li>\n<li><p>Make network boot as the first boot option.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Boot -&gt; Boot Option #1 : [Network]</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-up-squared\">\n<h4>Booting UP Squared<a class=\"headerlink\" href=\"#booting-up-squared\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Connect the board to the host system using the serial cable and\nconfigure your host system to watch for serial data.  See\n<a class=\"reference external\" href=\"https://wiki.up-community.org/Serial_console\">https://wiki.up-community.org/Serial_console</a>.</p></li>\n<li><p>Power on the UP Squared board.</p></li>\n<li><p>Verify that the board got an IP address:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>journalctl -f -u dnsmasq\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPDISCOVER(eno2) 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPOFFER(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPREQUEST(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPACK(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n</pre></div>\n</div>\n</li>\n<li><p>Verify that network booting is started:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>journalctl -f -u dnsmasq\n<span class=\"go\">dnsmasq-tftp[5386]: sent /srv/tftp/zephyr.efi to 10.1.1.28</span>\n</pre></div>\n</div>\n</li>\n<li><p>When the boot process completes, you have finished booting the\nZephyr application image.</p></li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 4, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "arduino_due", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Arduino Due</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arduino-due\">\n<span id=\"id1\"></span><h1>Arduino Due<a class=\"headerlink\" href=\"#arduino-due\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The arduino_due board configuration is used by Zephyr applications\nthat run on the Arduino Due board. It provides support for the Atmel\nSAM3X8E ARM Cortex-M3 CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Serial Port over USB (ATMEL_SAM3)</p></li>\n</ul>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.arduino.cc/en/Main/ArduinoBoardDue\">Arduino Due website</a>.\nThe <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-11057-32-bit-Cortex-M3-Microcontroller-SAM3X-SAM3A_Datasheet.pdf\">Atmel SAM3X8E Datasheet</a> has the information and the datasheet about\nthe processor.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This configuration is not supported by Arduino.</p>\n</div>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/arduino_due.png\"><img alt=\"Arduino Due\" class=\"align-center\" src=\"../../../../_images/arduino_due.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The arduino_due board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Watchdog</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.arduino.cc/en/Main/ArduinoBoardDue\">Arduino Due website</a> and <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-11057-32-bit-Cortex-M3-Microcontroller-SAM3X-SAM3A_Datasheet.pdf\">Atmel SAM3X8E Datasheet</a> for a complete\nlist of Arduino Due board hardware features.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/arduino_due/arduino_due_defconfig\">boards/arm/arduino_due/arduino_due_defconfig</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>For I2C, pull-up resistors are required for using SCL1 and SDA1 (near IO13).</p>\n</div>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are 15 fixed exceptions including exceptions 12 (debug monitor) and 15\n(SYSTICK) that behave more as interrupts than exceptions. In addition, there can\nbe a variable number of IRQs. Exceptions 7-10 and 13 are reserved. They don’t\nneed handlers.</p>\n<p>A Cortex-M3/4-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Handlers are provided for exceptions 1-6, 11-12, and 14-15.  The table here\nidentifies the handlers used for each exception.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>After a reset, all exceptions have a priority of 0. Interrupts cannot run\nat priority 0 for the interrupt locking mechanism and exception handling\nto function properly.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Arduino Due has two external oscillators/resonators. The slow clock is\n32.768 kHz, and the main clock is 12 MHz. The processor can set up PLL to drive\nthe master clock, which can be set as high as 84 MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Atmel SAM3X8E processor has a single UART that is used by the SAM-BA\nbootloader. This UART has only two wires for RX/TX and does not have flow\ncontrol (CTS/RTS) or FIFO. The RX/TX pins are connected to the ATmega16U2,\nwhich provides USB-to-TTL serial function. The Zephyr console output, by\ndefault, is utilizing this controller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"bossa-tool\">\n<h4>BOSSA Tool<a class=\"headerlink\" href=\"#bossa-tool\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Flashing the Zephyr kernel onto Arduino Due requires the <a class=\"reference external\" href=\"https://github.com/shumatech/BOSSA\">bossa tool</a>.</p>\n<p>There are GUI and command line versions of the bossa tool. The following\nsection provides the steps to build the command line version. Please\nrefer to the bossa tool’s README file on how to build the GUI version.</p>\n<p>To build the bossa tool, follow these steps:</p>\n<ol class=\"arabic\">\n<li><p>Checkout the bossa tool’s code from the repository.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git clone https://github.com/shumatech/BOSSA.git\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span> BOSSA\n</pre></div>\n</div>\n</li>\n<li><p>Checkout the arduino branch. The code on the master branch does not\nwork with Arduino Due.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git checkout arduino\n</pre></div>\n</div>\n</li>\n<li><p>Build the command line version of the bossa tool.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>make bin/bossac\n</pre></div>\n</div>\n</li>\n<li><p>The resulting binary is available at <code class=\"file docutils literal notranslate\"><span class=\"pre\">bin/bossac</span></code>.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-arduino-due\">\n<h4>Flashing an Application to Arduino Due<a class=\"headerlink\" href=\"#flashing-an-application-to-arduino-due\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">arduino_due</span></code> board configuration can be built\nand flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application. After\nbuilding the application, press the Reset button before running the\nflash command, so the board will boot into the SAM-BA bootloader and\nbe prepared to receive the new program.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b arduino_due samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>After flashing the application, run your favorite terminal program to\nlisten for output. For example, under Linux, the terminal should be\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring.</p>\n<p>Now press the Reset button and you should see “Hello World!” in your terminal.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Make sure your terminal program is closed before flashing the binary image,\nor it will interfere with the flashing process.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_NUVOTON", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 163840}], "main_ram_size": 163840, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 8, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nuvoton_pfm_m487", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NUVOTON NUMAKER PFM M487</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nuvoton-numaker-pfm-m487\">\n<span id=\"nuvoton-pfm-m487\"></span><h1>NUVOTON NUMAKER PFM M487<a class=\"headerlink\" href=\"#nuvoton-numaker-pfm-m487\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The NuMaker PFM M487 is an Internet of Things (IoT) application focused platform\nspecially developed by Nuvoton. The PFM-M487 is based on the NuMicro® M487\nEthernet series MCU with ARM® -Cortex®-M4F core.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pfm_m487.jpeg\"><img alt=\"PFM-M487\" class=\"align-center\" src=\"../../../../_images/pfm_m487.jpeg\" style=\"width: 720px;\"/></a>\n<div class=\"section\" id=\"features\">\n<h3>Features:<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>32-bit Arm Cortex®-M4 M487JIDAE MCU</p></li>\n<li><p>Core clock upto 192 MHz</p></li>\n<li><p>512 KB embedded Dual Bank Flash and 160 KB SRAM</p></li>\n<li><p>Audio codec (NAU88L25) with Microphone In and Headphone Out</p></li>\n<li><p>Ethernet (IP101GR) for network application</p></li>\n<li><p>USB 2.0 High-Speed OTG / Host / Device</p></li>\n<li><p>USB 1.1 Full-Speed OTG / Host / Device</p></li>\n<li><p>External SPI Flash (Winbond W25Q20) which can be regarded as ROM module</p></li>\n<li><p>MicroSD Card slot for T-Flash</p></li>\n<li><p>M487 extended interface 4 connector with 36 pins each</p></li>\n<li><p>Arduino UNO compatible interface</p></li>\n<li><p>Three push-buttons: one is for reset and the other two are for user-defined</p></li>\n<li><p>Four LEDs: one is for power indication and the other three are for user-defined</p></li>\n<li><p>On-board NU-Link-Me ICE debugger/programmer with SWD connector</p></li>\n</ul>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.nuvoton.com/export/resource-files/UM_NuMaker-PFM-M487_User_Manual_EN_Rev1.01.pdf\">PFM M487 User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>The on-board 12-MHz crystal allows the device to run at its maximum operating speed of 192MHz.</p></li>\n</ul>\n<p>The development board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>More details about the supported peripherals are available in <a class=\"reference external\" href=\"https://www.nuvoton.com/export/resource-files/TRM_M480_Series_EN_Rev2.02.pdf\">M480 TRM</a>\nOther hardware features are not currently supported by the Zephyr kernel.</p>\n</div>\n</div>\n<div class=\"section\" id=\"building-and-flashing\">\n<h2>Building and Flashing<a class=\"headerlink\" href=\"#building-and-flashing\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>On board debugger Nu-link-Me can emulate UART0 as a virtual COM port over usb,\nTo enable this, set ISW1 DIP switch 1-3 (TXD RXD VOM) to ON.\nConnect the PFM M487 IoT to your host computer using the USB port, then\nrun a serial host program to connect with your board. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nuvoton_pfm_m487 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nuvoton_pfm_m487 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Step through the application in your debugger.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MX25UM512", "size": 33554432}], "main_flash_size": 33554432, "memory": [{"label": "sram0", "size": 4194304}, {"label": "sram1", "size": 65536}], "main_ram_size": 4194304, "gpio": {"count": 1, "instances": [{"label": "GPIO"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB_0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "intel_s1000_crb", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>Intel S1000 CRB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"intel-s1000-crb\">\n<span id=\"intel-s1000\"></span><h1>Intel S1000 CRB<a class=\"headerlink\" href=\"#intel-s1000-crb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Intel S1000 ASIC is designed for complex far-field signal processing\nalgorithms that use high dimensional microphone arrays to do beamforming,\ncancel echoes, and reduce noise. It connects to a host processor chip via\nsimple SPI and I2S interfaces, to the microphone array via I2S or PDM\ninterfaces, and to speakers via I2S. In addition, it has an I2C interface\nfor controlling platform components such as ADCs, DACs, CODECs and PMICs.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/intel_s1000_crb.png\"><img alt=\"Intel Speech Enabling Developer Kit\" class=\"align-center\" src=\"../../../../_images/intel_s1000_crb.png\" style=\"width: 442px;\"/></a>\n<p>The Intel S1000 contains the following:</p>\n<ul class=\"simple\">\n<li><p>Dual DSP</p>\n<ul>\n<li><p>Dual 400 MHz Tensilica HiFi3 cores</p></li>\n<li><p>Single precision scalar floating-point</p></li>\n<li><p>16KB 4-way I$; 48KB 4-way D$</p></li>\n</ul>\n</li>\n<li><p>Inference Engine</p>\n<ul>\n<li><p>On-chip Neural Network Accelerator</p></li>\n</ul>\n</li>\n<li><p>Internal Memory</p>\n<ul>\n<li><p>4MB shared embedded SRAM</p></li>\n<li><p>64KB embedded SRAM for streaming samples in low power mode</p></li>\n</ul>\n</li>\n<li><p>External Memory Interfaces</p>\n<ul>\n<li><p>Up to 8MB external 16-bit PSRAM</p></li>\n<li><p>Up to 128MB external SPI flash</p></li>\n</ul>\n</li>\n<li><p>I/O Interfaces</p>\n<ul>\n<li><p>Host I/O: SPI or USB 2.0 High-speed device</p></li>\n<li><p>Microphone: I2S/TDM 9.6 MHz max. bit clock</p></li>\n<li><p>Digital Microphone: 4 stereo PDM ports up to 4.8 MHz clock</p></li>\n<li><p>Speaker: I2S/TDM 9.6 MHz max. bit clock</p></li>\n<li><p>Instrumentation: I2C master @ 100/400 KHz</p></li>\n<li><p>Debug: UART up to 2.4 Mbaud/s</p></li>\n<li><p>GPIO: 8 GPIOs with PWM output capability</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board is not available for purchase anymore.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-requirements\">\n<h2>System requirements<a class=\"headerlink\" href=\"#system-requirements\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Xtensa ‘toolchain’ i.e. XCC is required to build this port. This needs a\nlicense and is available for Linux and Windows from Cadence.</p>\n<p>In order to download the installer and the core configuration, users need to\nhave a registered account at <a class=\"reference external\" href=\"https://tensilicatools.com\">https://tensilicatools.com</a>.</p>\n<p>The toolchain installer and the core configuration can be downloaded by following\nthe links at <a class=\"reference external\" href=\"https://tensilicatools.com/platform/intel-sue-creek\">Tensilica Tools for Sue Creek</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a></p>\n<p>Select version RI-2018.0 and download the archive. The archive contains two files:</p>\n<ul class=\"simple\">\n<li><p>Installer: <code class=\"file docutils literal notranslate\"><span class=\"pre\">Xplorer-8.0.8-linux-x64-installer.bin</span></code> and</p></li>\n<li><p>Core configuration\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">X6H3SUE_RI_2018_0_linux_redist.tgz</span></code></p></li>\n</ul>\n<p>For JTAG based debugging, download the XOCD package as well.</p>\n<p>A node locked license key can also be generated from the <a class=\"reference external\" href=\"https://tensilicatools.com\">SDK portal</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Please upgrade to RI-2018.0 version of XCC if you have previously installed\nthe older RF-2016.4 version of XCC. The old toolchain does not support\nthe C/C++ standards required for building Zephyr applications.</p>\n</div>\n</div>\n<div class=\"section\" id=\"set-up-build-environment\">\n<h3>Set up build environment<a class=\"headerlink\" href=\"#set-up-build-environment\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Run the installer using these commands:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cd ~/Downloads</span>\n<span class=\"go\">chmod +x Xplorer-8.0.8-linux-installer.bin</span>\n<span class=\"go\">./Xplorer-8.0.8-linux-installer.bin</span>\n</pre></div>\n</div>\n<p>Please note a dialogue box should pop-up after running this command. In case the\ngraphical installation tool does not start, the tool will revert to console\nbased installation. The graphical tool is the preferred installation method.</p>\n<p>If the graphical tool does not start, it means your system is missing some\npackages which is preventing successful installation, most probably\n<code class=\"docutils literal notranslate\"><span class=\"pre\">gtk2-i686</span></code>.  You can install any missing packages with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">gtk2</span><span class=\"o\">-</span><span class=\"n\">i686</span>\n</pre></div>\n</div>\n<p>On Fedora 29 you might need to install the following packages:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sudo</span> <span class=\"n\">dnf</span> <span class=\"n\">install</span> <span class=\"n\">libXtst</span><span class=\"o\">.</span><span class=\"n\">i686</span> <span class=\"n\">libnsl</span><span class=\"o\">.</span><span class=\"n\">i686</span> <span class=\"n\">gtk2</span><span class=\"o\">.</span><span class=\"n\">i686</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The SDK is a 32 bit binary, so you will need to install 32bit compatibility\npackages for this work.</p>\n</div>\n<p>Follow the instructions and install the toolchain and related tools in your\npreferred path.</p>\n<p>After a successful installation of the tool, run the Xtensa Xplorer (it will run\nautomatically after installation is done) and follow the steps to install the\nsoftware keys you have downloaded from <a class=\"reference external\" href=\"https://tensilicatools.com/platform/intel-sue-creek\">Tensilica Tools for Sue Creek</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id3\">1</a></p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The license key you have requested is tied to the Ethernet MAC address on the\nhost system. The license manager expects a network device named <code class=\"docutils literal notranslate\"><span class=\"pre\">eth0</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">eth1</span></code>. On many modern Linux distribution the naming scheme is different\nand determined automatically. You will need to either force the naming to\nfollow what the license manager expects or create a dedicated ethernet device\nfor this to work.</p>\n<p>On Ubuntu 18.04 LTS, you can install the license key manually with</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cp sue-creek-SDK-license.dat &lt;path to SDK&gt;/XtDevTools/install/tools/RI-2018.0-linux/XtensaTools/Tools/lic/license.dat\"</span>\n</pre></div>\n</div>\n</div>\n<p>After the tool chain is successfully installed, the core build needs to be\ninstalled as follows</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tar -xvzf X6H3SUE_RI_2018_0_linux_redist.tgz --directory &lt;path to SDK&gt;/XtDevTools/install/builds</span>\n<span class=\"go\">cd &lt;path to SDK&gt;/XtDevTools/install/builds/RI-2018.0-linux/X6H3SUE_RI_2018_0</span>\n<span class=\"go\">./install</span>\n</pre></div>\n</div>\n<p>The <code class=\"file docutils literal notranslate\"><span class=\"pre\">install</span></code> script is the Xtensa Processor Configuration Installation\nTool which is required to update the installation path. When it prompts to\nenter the path to the Xtensa Tools directory, enter\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">&lt;path</span> <span class=\"pre\">to</span> <span class=\"pre\">SDK&gt;/XtDevTools/install/tools/RI-2018.0-linux/XtensaTools</span></code>.\nYou should use the default registry\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">&lt;path</span> <span class=\"pre\">to</span> <span class=\"pre\">SDK&gt;/XtDevTools/install/tools/RI-2018.0-linux/XtensaTools/config</span></code>.</p>\n<p>With the XCC toolchain installed, the Zephyr build system must be instructed\nto use this particular variant by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">ZEPHYR_TOOLCHAIN_VARIANT</span></code>\nshell variable. Some more environment variables are also required (see below):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export XTENSA_TOOLCHAIN_PATH=&lt;path to SDK&gt;</span>\n<span class=\"go\">export ZEPHYR_TOOLCHAIN_VARIANT=xcc</span>\n<span class=\"go\">export TOOLCHAIN_VER=RI-2018.0-linux</span>\n<span class=\"go\">export XTENSA_CORE=X6H3SUE_RI_2018_0</span>\n<span class=\"go\">export XTENSA_SYSTEM=${XTENSA_TOOLCHAIN_PATH}/XtDevTools/install/tools/RI-2018.0-linux/XtensaTools/config/</span>\n<span class=\"go\">export XTENSA_BUILD_PATHS=${XTENSA_TOOLCHAIN_PATH}/XtDevTools/install/builds/</span>\n<span class=\"go\">export XTENSA_OCD_PATH=&lt;path to XOCD&gt;/xocd-12.0.4</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The usual <code class=\"docutils literal notranslate\"><span class=\"pre\">flash</span></code> target will work with the <code class=\"docutils literal notranslate\"><span class=\"pre\">intel_s1000_crb</span></code> board\nconfiguration using JTAG. Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>\napplication.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b intel_s1000_crb samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Refer to <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for\nmore details.</p>\n</div>\n<div class=\"section\" id=\"downloading-binary-image\">\n<h3>Downloading binary image<a class=\"headerlink\" href=\"#downloading-binary-image\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A Linux host connected to the SPI interface of the <code class=\"docutils literal notranslate\"><span class=\"pre\">intel_s1000_crb</span></code> board\ncan download a zephyr binary to RAM and execute the image.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cd &lt;app-dir&gt;/build</span>\n<span class=\"go\">sudo -E python3 \\</span>\n<span class=\"gp\">   $</span>ZEPHYR_BASE/boards/xtensa/intel_s1000_crb/support/download.py <span class=\"se\">\\</span>\n   zephyr/zephyr.bin\n</pre></div>\n</div>\n<p>The script depends on a few python modules. These dependencies can be installed\non the Linux host using the command below.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">pip3 install --user pyyaml python-periphery hashlib bitstruct</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"setting-up-uart\">\n<h3>Setting up UART<a class=\"headerlink\" href=\"#setting-up-uart\" title=\"Permalink to this headline\">¶</a></h3>\n<p>We recommend using a “FT232RL FTDI USB To TTL Serial Converter Adapter Module”\nto tap the UART data. The J8 Header on S1000 CRB is dedicated for UART.\nConnect the J8 header and UART chip as shown below:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\"/>\n<col style=\"width: 48%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>UART chip</p></th>\n<th class=\"head\"><p>J8 Header</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DTR</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RX</p></td>\n<td><p>2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TX</p></td>\n<td><p>4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VCC</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>CTS</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GND</p></td>\n<td><p>10</p></td>\n</tr>\n</tbody>\n</table>\n<p>Attach one end of the USB cable to the UART chip and the other end to the\nLinux system. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">minicom</span></code> or another terminal emulator to monitor the\nUART data by following these steps:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dmesg | grep USB</span>\n<span class=\"go\">minicom -D /dev/ttyUSB0</span>\n</pre></div>\n</div>\n<p>Here, the first command will indicate the tty to which the USB is connected.\nThe second command assumes it was USB0 and opens up minicom. You can suitably\nmodify the second command based on the output of the first command. The serial\nsettings configured in zephyr is “115200 8N1”. This is also the default\nsettings in minicom and can be verified by pressing Ctrl-A Z P.</p>\n</div>\n<div class=\"section\" id=\"using-jtag\">\n<h3>Using JTAG<a class=\"headerlink\" href=\"#using-jtag\" title=\"Permalink to this headline\">¶</a></h3>\n<p>For debugging and flashing, you can use a flyswatter2 to connect to the Intel\nS1000 CRB.\nThe pinouts for flyswatter2 and the corresponding pinouts for CRB are\nshown below. Note that pin 6 on CRB is left unconnected.</p>\n<p>The corresponding pin mapping is</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 23%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 23%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>S1000</p></th>\n<th class=\"head\"><p>Flyswatter2</p></th>\n<th class=\"head\"><p>Flyswatter2</p></th>\n<th class=\"head\"><p>S1000</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>1</p></td>\n<td><p>11</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NC</p></td>\n<td><p>2</p></td>\n<td><p>12</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>4</p></td>\n<td><p>3</p></td>\n<td><p>13</p></td>\n<td><p>5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NC</p></td>\n<td><p>4</p></td>\n<td><p>14</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>5</p></td>\n<td><p>15</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>6</p></td>\n<td><p>16</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>2</p></td>\n<td><p>7</p></td>\n<td><p>17</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NC</p></td>\n<td><p>8</p></td>\n<td><p>18</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>9</p></td>\n<td><p>19</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NC</p></td>\n<td><p>10</p></td>\n<td><p>20</p></td>\n<td><p>NC</p></td>\n</tr>\n</tbody>\n</table>\n<p>Ideally, these connections should have been enough to get the debug working.\nHowever, we need to short 2 pins on Host Connector J3 via a 3.3k resistor\n(simple shorting without the resistor will also do) for debugging to work.\nThose 2 pins are Pin5 HOST_RST_N_LT_R) and Pin21 (+V_HOST_3P3_1P8).</p>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id2\">1</a>,<a href=\"#id3\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://tensilicatools.com/platform/intel-sue-creek\">https://tensilicatools.com/platform/intel-sue-creek</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://tensilicatools.com\">https://tensilicatools.com</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 327680}], "main_ram_size": 327680, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l496zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L496ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l496zg\">\n<span id=\"nucleo-l496zg-board\"></span><h1>ST Nucleo L496ZG<a class=\"headerlink\" href=\"#st-nucleo-l496zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L496ZG board features an ARM Cortex-M4 based STM32L496ZG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo L476ZG board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP144 package</p></li>\n<li><p>USB OTG FS with Micro-AB connector</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>8 LEDs: user LEDs (LD1, LD2, LD3), communication LED (LD4), USB\npower fault(LD5), power LED (LD6), USB FS OTG (LD7, LD8)</p></li>\n<li><p>2 push buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l496zg.jpg\"><img alt=\"Nucleo L496ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_l496zg.jpg\" style=\"width: 250px; height: 250px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l496zg.html\">Nucleo L496ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L496ZG SoC provides the following hardware capabilities:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 108 nA Standby mode and 91 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, frequency up to 80 MHz, 100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than  ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>LCD 8 x 40 or 4 x 44 with step-up converter</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>16x timers:</p>\n<ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 114 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 1 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 320 KB of SRAM including 64 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>3x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>20x communication interfaces</p>\n<ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>4x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>5x U(S)ARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>1x LPUART</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>2x CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<p>More information about STM32L496ZG can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l496zg.html\">STM32L496ZG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00083560.pdf\">STM32L496 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l496zg board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>System Window Watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l496zg/nucleo_l496zg_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L496ZG Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00368330.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PD5/PD6</p></li>\n<li><p>UART_3 TX/RX : PD8/PD9</p></li>\n<li><p>LPUART_1 TX/RX : PG7/PG8</p></li>\n<li><p>PWM_1_CH1: PE9</p></li>\n<li><p>PWM_1_CH2: PE11</p></li>\n<li><p>PWM_1_CH3: PE13</p></li>\n<li><p>PWM_2_CH1: PA0</p></li>\n<li><p>I2C_1_SCL: PB8</p></li>\n<li><p>I2C_1_SDA: PB7</p></li>\n<li><p>SPI_1_NSS: PD14</p></li>\n<li><p>SPI_1_SCK: PA5</p></li>\n<li><p>SPI_1_MISO: PA6</p></li>\n<li><p>SPI_1_MOSI: PA7</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PC7</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L496ZG System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L496ZG board has 5 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l496zg</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L496ZG board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.5.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l496zg\">\n<h4>Flashing an application to Nucleo L496ZG<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l496zg\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo L496ZG to your host computer using the USB port.\nThen build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0\n</pre></div>\n</div>\n<p>Then build and flash the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l496zg samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l496zg samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 9, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f091rc", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F091RC</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f091rc\">\n<span id=\"nucleo-f091rc-board\"></span><h1>ST Nucleo F091RC<a class=\"headerlink\" href=\"#st-nucleo-f091rc\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32F091RC MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f091rc.jpg\"><img alt=\"Nucleo F091RC\" class=\"align-center\" src=\"../../../../_images/nucleo_f091rc.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f091rc.html\">Nucleo F091RC website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F091RC provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F091RC can be found in the\n<a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">STM32F091 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f091rc board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>SPI controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f091rc/nucleo_f091rc_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f091rc_connectors.png\"><img alt=\"Nucleo F091RC connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f091rc_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PA11/PA12</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 SCK/MISO/MOSI : PB13/PB14/PB15</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PA5</p></li>\n<li><p>DAC_OUT1 : PA4</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f091rc</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F091RC board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f091rc\">\n<h4>Flashing an application to Nucleo F091RC<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f091rc\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f091rc samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f091rc samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f091rc.html\">http://www.st.com/en/evaluation-tools/nucleo-f091rc.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">http://www.st.com/resource/en/reference_manual/dm00031936.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160dk_nrf9160ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bl653_dvk", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_ESP32", "size": 4194304}], "main_flash_size": 4194304, "memory": [{"label": "sram0", "size": 327680}], "main_ram_size": 327680, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "odroid_go", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>ODROID-GO</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"odroid-go\">\n<span id=\"id1\"></span><h1>ODROID-GO<a class=\"headerlink\" href=\"#odroid-go\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ODROID-GO Game Kit is a “Do it yourself” (“DIY”) portable game console by\nHardKernel. It features a custom ESP32-WROVER with 16 MB flash and it operates\nfrom 80 MHz - 240 MHz <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id2\">1</a>.</p>\n<p>The features include the following:</p>\n<ul class=\"simple\">\n<li><p>Dual core Xtensa microprocessor (LX6), running at 80 -  240MHz</p></li>\n<li><p>4 MB of PSRAM</p></li>\n<li><p>802.11b/g/n/e/i</p></li>\n<li><p>Bluetooth v4.2 BR/EDR and BLE</p></li>\n<li><p>2.4 inch 320x240 TFT LCD</p></li>\n<li><p>Speaker</p></li>\n<li><p>Micro SD card slot</p></li>\n<li><p>Micro USB port (battery charging and USB_UART data communication</p></li>\n<li><p>Input Buttons (Menu, Volume, Select, Start, A, B, Direction Pad)</p></li>\n<li><p>Expansion port (I2C, GPIO, SPI)</p></li>\n<li><p>Cryptographic hardware acceleration (RNG, ECC, RSA, SHA-2, AES)</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"ODROID-GO\" src=\"../../../../_images/odroid_go.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">ODROID-Go Game Kit</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"external-connector\">\n<h3>External Connector<a class=\"headerlink\" href=\"#external-connector\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 36%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>ESP32-WROVER Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VSPI.SCK (IO18)</p></td>\n<td><p>GPIO18, VSPICLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>IO12</p></td>\n<td><p>GPIO12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>IO15</p></td>\n<td><p>GPIO15, ADC2_CH3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>IO4</p></td>\n<td><p>GPIO4, ADC2_CH0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P3V3</p></td>\n<td><p>3.3 V</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>VSPI.MISO (IO19)</p></td>\n<td><p>GPIO19, VSPIQ</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>VSPI.MOSI (IO23)</p></td>\n<td><p>GPIO23, VSPID</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>N.C</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>VBUS</p></td>\n<td><p>USB VBUS (5V)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h2>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Zephyr odroid_go board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"programming\">\n<h2>Programming<a class=\"headerlink\" href=\"#programming\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Two components are required in order to build applications for this board: the\n<a class=\"reference external\" href=\"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-setup-toolchain\">toolchain</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a> and the <a class=\"reference external\" href=\"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-get-esp-idf\">SDK</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a>.  Both are provided by the SoC manufacturer.</p>\n<p>The SDK contains headers and a hardware abstraction layer library (provided only\nas object files) that are required for the port to function.</p>\n<p>The toolchain is available for Linux, Windows, and macOS hosts and instructions\nto obtain and set them up are available in the <a class=\"reference external\" href=\"https://github.com/espressif/esp-idf\">ESP-IDF repository</a>, as explained in the\n<a class=\"reference external\" href=\"SDK\">ESP-IDF Programming Guide</a>.</p>\n<div class=\"section\" id=\"set-up-build-environment\">\n<h3>Set up build environment<a class=\"headerlink\" href=\"#set-up-build-environment\" title=\"Permalink to this headline\">¶</a></h3>\n<p>With both the toolchain and SDK installed, the Zephyr build system must be\ninstructed to use this particular variant by setting the following shell\nvariables:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export ZEPHYR_TOOLCHAIN_VARIANT=\"espressif\"</span>\n<span class=\"go\">export ESPRESSIF_TOOLCHAIN_PATH=\"/path/to/xtensa-esp32-elf/\"</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The usual <code class=\"docutils literal notranslate\"><span class=\"pre\">flash</span></code> target will work with the <code class=\"docutils literal notranslate\"><span class=\"pre\">odroid_go</span></code> board configuration.\nHere is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b odroid_go samples/hello_world -- -DESP_IDF_PATH=/path/to/esp-idf/</span>\n</pre></div>\n</div>\n<p>Refer to <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more\ndetails.</p>\n<p>All flashing options are handled by the <a class=\"reference internal\" href=\"../../../../guides/west/index.html#west\"><span class=\"std std-ref\">West (Zephyr’s meta-tool)</span></a> tool, including flashing\nwith custom options such as a different serial port.  The <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span></code> tool supports\nspecific options for the ESP32 board, as listed here:</p>\n<blockquote>\n<div><dl class=\"option-list\">\n<dt><kbd><span class=\"option\">--esp-idf-path <var>ESP_IDF_PATH</var></span></kbd></dt>\n<dd><p>path to ESP-IDF</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-device <var>ESP_DEVICE</var></span></kbd></dt>\n<dd><p>serial port to flash, default /dev/ttyUSB0</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-baud-rate <var>ESP_BAUD_RATE</var></span></kbd></dt>\n<dd><p>serial baud rate, default 921600</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-size <var>ESP_FLASH_SIZE</var></span></kbd></dt>\n<dd><p>flash size, default “detect”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-freq <var>ESP_FLASH_FREQ</var></span></kbd></dt>\n<dd><p>flash frequency, default “40m”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-mode <var>ESP_FLASH_MODE</var></span></kbd></dt>\n<dd><p>flash mode, default “dio”</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-tool <var>ESP_TOOL</var></span></kbd></dt>\n<dd><p>complete path to espidf, default is to search for it in\n[ESP_IDF_PATH]/components/esptool_py/esptool/esptool.py</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-bootloader <var>ESP_FLASH_BOOTLOADER</var></span></kbd></dt>\n<dd><p>Bootloader image to flash</p>\n</dd>\n<dt><kbd><span class=\"option\">--esp-flash-partition_table <var>ESP_FLASH_PARTITION_TABLE</var></span></kbd></dt>\n<dd><p>Partition table to flash</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For example, to flash to <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>, use the following command after\nhaving build the application in the <code class=\"docutils literal notranslate\"><span class=\"pre\">build</span></code> directory:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west flash -d build/ --skip-rebuild --esp-tool=/path/to/esp-idf/components/esptool_py/esptool/esptool.py --esp-device /dev/ttyUSB0</span>\n</pre></div>\n</div>\n<p>Connect ODROID-GO to your PC via the mini USB port and run your favorite\nterminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">minicom -D /dev/ttyUSB0 -b 115200</span>\n</pre></div>\n</div>\n<p>Power off and then power on ODROID-GO. You should see the following message in\nyour terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! odroid_go</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-setup-toolchain\">https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-setup-toolchain</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-get-esp-idf\">https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html#get-started-get-esp-idf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.odroid.com/odroid_go/odroid_go\">https://wiki.odroid.com/odroid_go/odroid_go</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 2, "instances": [{"label": "ETH_0"}, {"label": "ETH_1"}]}, "name": "mimxrt1060_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1060-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1060-evk\">\n<span id=\"mimxrt1060-evk\"></span><h1>NXP MIMXRT1060-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1060-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1060 adds to the industry’s first crossover\nprocessor series and expands the i.MX RT series to three scalable families.</p>\n<p>The i.MX RT1060 doubles the On-Chip SRAM to 1MB while keeping pin-to-pin\ncompatibility with i.MX RT1050. This series introduces additional features\nideal for real-time applications such as High-Speed GPIO, CAN-FD, and\nsynchronous parallel NAND/NOR/PSRAM controller. The i.MX RT1060 runs on the\nArm® Cortex-M7® core up to 600 MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1060_evk.jpg\"><img alt=\"MIMXRT1060-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1060_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1062DVL6A MCU (600 MHz, 1024 KB on-chip memory)</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256 Mbit SDRAM</p></li>\n<li><p>64 Mbit QSPI Flash</p></li>\n<li><p>512 Mbit Hyper Flash</p></li>\n<li><p>TF socket for SD card</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>LCD connector</p></li>\n</ul>\n</li>\n<li><p>Ethernet</p>\n<ul>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n</ul>\n</li>\n<li><p>USB</p>\n<ul>\n<li><p>USB 2.0 OTG connector</p></li>\n<li><p>USB 2.0 host connector</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>3.5 mm audio stereo headphone jack</p></li>\n<li><p>Board-mounted microphone</p></li>\n<li><p>Left and right speaker out connectors</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC jack</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 20-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n<li><p>Sensor</p>\n<ul>\n<li><p>FXOS8700CQ 6-axis e-compass</p></li>\n<li><p>CMOS camera sensor interface</p></li>\n</ul>\n</li>\n<li><p>Expansion port</p>\n<ul>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>CAN bus connector</p></li>\n</ul>\n<p>For more information about the MIMXRT1060 SoC and MIMXRT1060-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1060-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1060\">i.MX RT1060 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/nxp/data-sheets/IMXRT1060CEC.pdf\">i.MX RT1060 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1060RM\">i.MX RT1060 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/software-development-tools/mcuxpresso-software-and-tools/mimxrt1060-evk-i.mx-rt1060-evaluation-kit:MIMXRT1060-EVK\">MIMXRT1060-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/MIMXRT10601064EKBHUG.pdf\">MIMXRT1060-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1060-EVK-DESIGN-FILE-A2\">MIMXRT1060-EVK Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1060_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DISPLAY</p></td>\n<td><p>on-chip</p></td>\n<td><p>display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>QSPI flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SDHC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ENET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>dma</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1060_evk/mimxrt1060_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1060 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_02</p></td>\n<td><p>LCD_RST</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>GPIO/ENET_RST</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>GPIO/ENET_INT</p></td>\n<td><p>GPIO/Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_11</p></td>\n<td><p>GPIO</p></td>\n<td><p>Touch Interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_12</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_13</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_00</p></td>\n<td><p>LPI2C1_SCL</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_01</p></td>\n<td><p>LPI2C1_SDA</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_06</p></td>\n<td><p>LPUART3_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_07</p></td>\n<td><p>LPUART3_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WAKEUP</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_00</p></td>\n<td><p>LCD_CLK</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_01</p></td>\n<td><p>LCD_ENABLE</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_02</p></td>\n<td><p>LCD_HSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_03</p></td>\n<td><p>LCD_VSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_04</p></td>\n<td><p>LCD_DATA00</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_05</p></td>\n<td><p>LCD_DATA01</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_06</p></td>\n<td><p>LCD_DATA02</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_07</p></td>\n<td><p>LCD_DATA03</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_08</p></td>\n<td><p>LCD_DATA04</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_09</p></td>\n<td><p>LCD_DATA05</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_10</p></td>\n<td><p>LCD_DATA06</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_11</p></td>\n<td><p>LCD_DATA07</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_12</p></td>\n<td><p>LCD_DATA08</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_13</p></td>\n<td><p>LCD_DATA09</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_14</p></td>\n<td><p>LCD_DATA10</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_15</p></td>\n<td><p>LCD_DATA11</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_00</p></td>\n<td><p>LCD_DATA12</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_01</p></td>\n<td><p>LCD_DATA13</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_02</p></td>\n<td><p>LCD_DATA14</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_03</p></td>\n<td><p>LCD_DATA15</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_04</p></td>\n<td><p>ENET_RX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_05</p></td>\n<td><p>ENET_RX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_06</p></td>\n<td><p>ENET_RX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_07</p></td>\n<td><p>ENET_TX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_08</p></td>\n<td><p>ENET_TX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_09</p></td>\n<td><p>ENET_TX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_10</p></td>\n<td><p>ENET_REF_CLK</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_11</p></td>\n<td><p>ENET_RX_ER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_12</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_14</p></td>\n<td><p>USDHC1_VSELECT</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_15</p></td>\n<td><p>BACKLIGHT_CTL</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_40</p></td>\n<td><p>ENET_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_41</p></td>\n<td><p>ENET_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>ENET_RST</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>ENET_INT</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_00</p></td>\n<td><p>USDHC1_CMD</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_01</p></td>\n<td><p>USDHC1_CLK</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_02</p></td>\n<td><p>USDHC1_DATA0</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_03</p></td>\n<td><p>USDHC1_DATA1</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_04</p></td>\n<td><p>USDHC1_DATA2</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_05</p></td>\n<td><p>USDHC1_DATA3</p></td>\n<td><p>SD Card</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1060 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 600 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1060 SoC has eight UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART3</span></code> for the Bluetooth Host Controller Interface (BT HCI), and the\nremaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"using-j-link\">\n<span id=\"using-j-link-rt1060\"></span><h4>Using J-Link<a class=\"headerlink\" href=\"#using-j-link\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>There are two options: the onboard debug circuit can be updated with Segger\nJ-Link firmware, or <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a> can be attached to the\nEVK. See <a class=\"reference external\" href=\"https://community.nxp.com/t5/i-MX-RT-Knowledge-Base/Using-J-Link-with-MIMXRT1060-EVK-or-MIMXRT1064-EVK/ta-p/1281149\">Using J-Link with MIMXRT1060-EVK or MIMXRT1064-EVK</a> for more\ndetails.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J45 and J46 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J41.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1060_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW9 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1060_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1060_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1060_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"troubleshooting\">\n<h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If the debug probe fails to connect with the following error, it’s possible\nthat the boot header in QSPI flash is invalid or corrupted. The boot header is\nconfigured by <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NXP_IMX_RT_BOOT_HEADER.html#std-kconfig-CONFIG_NXP_IMX_RT_BOOT_HEADER\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NXP_IMX_RT_BOOT_HEADER</span></code></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Remote debugging using :2331</span>\n<span class=\"go\">Remote communication error.  Target disconnected.: Connection reset by peer.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">You can't do that when your target is `exec'</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">Could not connect to target.</span>\n<span class=\"go\">Please check power, connection and settings.</span>\n</pre></div>\n</div>\n<p>You can fix it by erasing and reprogramming the QSPI flash with the following\nsteps:</p>\n<ol class=\"arabic simple\">\n<li><p>Set the SW7 DIP switches to ON-OFF-ON-OFF to prevent booting from QSPI flash.</p></li>\n<li><p>Reset by pressing SW9</p></li>\n<li><p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code> again with a known working Zephyr\napplication.</p></li>\n<li><p>Set the SW7 DIP switches to OFF-OFF-ON-OFF to boot from QSPI flash.</p></li>\n<li><p>Reset by pressing SW9</p></li>\n</ol>\n<p>If the west flash or debug commands fail, and the command hangs while executing\nrunners.jlink, confirm the J-Link debug probe is configured, powered, and\nconnected to the EVK properly. See <a class=\"reference internal\" href=\"#using-j-link-rt1060\"><span class=\"std std-ref\">Using J-Link</span></a> for more details.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bt510", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 753664}], "main_flash_size": 753664, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "altera_max10", "arch": "nios2", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">NIOS II Boards</a> »</li>\n<li>Altera MAX10</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"altera-max10\">\n<span id=\"id1\"></span><h1>Altera MAX10<a class=\"headerlink\" href=\"#altera-max10\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Zephyr kernel is supported on the Altera MAX10 Rev C development kit, using\nthe Nios II Gen 2 soft CPU.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/altera_max10.jpg\"><img alt=\"Altera's MAX* 10\" src=\"../../../../_images/altera_max10.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Altera’s MAX* 10  (Credit: Altera)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"dip-switch-settings\">\n<h3>DIP Switch settings<a class=\"headerlink\" href=\"#dip-switch-settings\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are two sets of switches on the back of the board. Of particular\nimportance is SW2:</p>\n<ul class=\"simple\">\n<li><p>Switch 2 (CONFIG_SEL) should be in the OFF (up) position so that the first\nboot image is CFM0</p></li>\n<li><p>Switch 3 (VTAP_BYPASS) needs to be in the ON (down) position or the flashing\nscripts won’t work</p></li>\n<li><p>Switch 4 (HSMC_BYPASSN) should be OFF (up)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/Altera_MAX10_switches.jpg\"><img alt=\"Altera's MAX* 10 Switches\" class=\"align-center\" src=\"../../../../_images/Altera_MAX10_switches.jpg\" style=\"width: 442px;\"/></a>\n<p>Other switches are user switches, their position is application-specific.</p>\n</div>\n<div class=\"section\" id=\"necessary-software\">\n<h3>Necessary Software<a class=\"headerlink\" href=\"#necessary-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You will need the Altera Quartus SDK in order to work with this device. The\n<a class=\"reference external\" href=\"http://dl.altera.com/?edition=lite\">Altera Lite Distribution</a> of Quartus may be obtained without\ncharge.</p>\n<p>For your convenience using the SDK tools (such as <code class=\"docutils literal notranslate\"><span class=\"pre\">nios2-configure-sof</span></code>),\nyou should put the binaries provided by the SDK\nin your path. Below is an example, adjust ALTERA_BASE to where you installed the\nSDK:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export ALTERA_BASE=/opt/altera_lite/16.0</span>\n<span class=\"go\">export PATH=$PATH:$ALTERA_BASE/quartus/bin:$ALTERA_BASE/nios2eds/bin</span>\n</pre></div>\n</div>\n<p>You may need to adjust your udev rules so that you can talk to the USB Blaster\nII peripheral, which is the built-in JTAG interface for this device.</p>\n<p>The following works for Fedora 23:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>For Altera USB-Blaster permissions.\n<span class=\"go\">SUBSYSTEM==\"usb\",\\</span>\n<span class=\"go\">ENV{DEVTYPE}==\"usb_device\",\\</span>\n<span class=\"go\">ATTR{idVendor}==\"09fb\",\\</span>\n<span class=\"go\">ATTR{idProduct}==\"6010\",\\</span>\n<span class=\"go\">MODE=\"0666\",\\</span>\n<span class=\"go\">NAME=\"bus/usb/$env{BUSNUM}/$env{DEVNUM}\",\\</span>\n<span class=\"go\">RUN+=\"/bin/chmod 0666 %c\"</span>\n<span class=\"go\">SUBSYSTEM==\"usb\",\\</span>\n<span class=\"go\">ENV{DEVTYPE}==\"usb_device\",\\</span>\n<span class=\"go\">ATTR{idVendor}==\"09fb\",\\</span>\n<span class=\"go\">ATTR{idProduct}==\"6810\",\\</span>\n<span class=\"go\">MODE=\"0666\",\\</span>\n<span class=\"go\">NAME=\"bus/usb/$env{BUSNUM}/$env{DEVNUM}\",\\</span>\n<span class=\"go\">RUN+=\"/bin/chmod 0666 %c\"</span>\n</pre></div>\n</div>\n<p>You can test connectivity with the SDK jtagconfig tool, you should see something\nlike:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>jtagconfig\n<span class=\"go\">1) USB-BlasterII [1-1.2]</span>\n<span class=\"go\">  031050DD   10M50DA(.|ES)/10M50DC</span>\n<span class=\"go\">  020D10DD   VTAP10</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"reference-cpu\">\n<h3>Reference CPU<a class=\"headerlink\" href=\"#reference-cpu\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A reference CPU design of a Nios II/f core is included in the Zephyr tree\nin the <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/soc/nios2/nios2f-zephyr/cpu\">soc/nios2/nios2f-zephyr/cpu</a> directory.</p>\n<p>Flash this CPU using the <code class=\"docutils literal notranslate\"><span class=\"pre\">nios2-configure-sof</span></code> SDK tool with the FPGA\nconfiguration file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/soc/nios2/nios2f-zephyr/cpu/ghrd_10m50da.sof\">soc/nios2/nios2f-zephyr/cpu/ghrd_10m50da.sof</a>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nios2-configure-sof ghrd_10m50da.sof\n</pre></div>\n</div>\n<p>This CPU is a Nios II/F core with a 16550 UART, JTAG UART, and the Avalon Timer.\nFor any Nios II SOC definition, you can find out more details about the CPU\nconfiguration by inspecting system.h in the SOC’s include directory.</p>\n</div>\n<div class=\"section\" id=\"console-output\">\n<h3>Console Output<a class=\"headerlink\" href=\"#console-output\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"uart\">\n<h4>16550 UART<a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h4>\n<p>By default, the kernel is configured to send console output to the 16550 UART.\nYou can monitor this on your workstation by connecting to the top right mini USB\nport on the board (it will show up in /dev as a ttyUSB node), and then running\nminicom with flow control disabled, 115200-8N1 settings.</p>\n</div>\n<div class=\"section\" id=\"jtag-uart\">\n<h4>JTAG UART<a class=\"headerlink\" href=\"#jtag-uart\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can also have it send its console output to the JTAG UART.\nEnable <code class=\"docutils literal notranslate\"><span class=\"pre\">jtag_uart</span></code> node in <code class=\"file docutils literal notranslate\"><span class=\"pre\">altera_max10.dts</span></code> or overlay file:</p>\n<div class=\"highlight-devicetree notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">&amp;</span><span class=\"na\">jtag_uart</span> <span class=\"p\">{</span>\n    <span class=\"kr\">status</span> <span class=\"o\">=</span> <span class=\"s\">\"okay\"</span><span class=\"p\">;</span>\n    <span class=\"n\">current-speed</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"mi\">115200</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n<p>To view these messages on your local workstation, run the terminal application\nin the SDK:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nios2-terminal\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"flashing-kernel-into-ufm\">\n<h4>Flashing Kernel into UFM<a class=\"headerlink\" href=\"#flashing-kernel-into-ufm\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The usual <code class=\"docutils literal notranslate\"><span class=\"pre\">flash</span></code> target will work with the <code class=\"docutils literal notranslate\"><span class=\"pre\">altera_max10</span></code> board\nconfiguration. Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>\napplication.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b altera_max10 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Refer to <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for\nmore details.</p>\n<p>This provisions the Zephyr kernel and the CPU configuration onto the board,\nusing the scripts/support/quartus-flash.py script. After it completes the kernel\nwill immediately boot.</p>\n</div>\n<div class=\"section\" id=\"flashing-kernel-directly-into-ram-over-jtag\">\n<h4>Flashing Kernel directly into RAM over JTAG<a class=\"headerlink\" href=\"#flashing-kernel-directly-into-ram-over-jtag\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The SDK included the nios2-download tool which will let you flash a kernel\ndirectly into RAM and then boot it from the __start symbol.</p>\n<p>In order for this to work, your entire kernel must be located in RAM. Make sure\nthe following config options are disabled:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">CONFIG_XIP=n</span>\n<span class=\"go\">CONFIG_INCLUDE_RESET_VECTOR=n</span>\n</pre></div>\n</div>\n<p>Then, after building your kernel, push it into device’s RAM by running\nthis from the build directory:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nios2-download --go zephyr/zephyr.elf\n</pre></div>\n</div>\n<p>If you have a console session running (either minicom or nios2-terminal) you\nshould see the application’s output. There are additional arguments you can pass\nto nios2-download so that it spawns a GDB server that you can connect to,\nalthough it’s typically simpler to just use nios2-gdb-server as described below.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Altera SDK includes a GDB server which can be used to debug a MAX10 board.\nYou can either debug a running image that was flashed onto the device in User\nFlash Memory (UFM), or load an image over the JTAG using GDB.</p>\n<div class=\"section\" id=\"debugging-with-ufm-flashed-image\">\n<h4>Debugging With UFM Flashed Image<a class=\"headerlink\" href=\"#debugging-with-ufm-flashed-image\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can debug an application in the usual way.  Here is an example.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b altera_max10 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>You will see output similar to the following:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Nios II GDB server running on port 3335</span>\n<span class=\"go\">Ignoring --stop option because --tcpport also specified</span>\n<span class=\"go\">GNU gdb (GDB) 7.11.0.20160511-git</span>\n<span class=\"go\">Copyright (C) 2016 Free Software Foundation, Inc.</span>\n<span class=\"go\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span>\n<span class=\"go\">This is free software: you are free to change and redistribute it.</span>\n<span class=\"go\">There is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"</span>\n<span class=\"go\">and \"show warranty\" for details.</span>\n<span class=\"go\">This GDB was configured as \"--host=x86_64-pokysdk-linux --target=nios2-zephyr-elf\".</span>\n<span class=\"go\">Type \"show configuration\" for configuration details.</span>\n<span class=\"go\">For bug reporting instructions, please see:</span>\n<span class=\"go\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span>\n<span class=\"go\">Find the GDB manual and other documentation resources online at:</span>\n<span class=\"go\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span>\n<span class=\"go\">For help, type \"help\".</span>\n<span class=\"go\">Type \"apropos word\" to search for commands related to \"word\"...</span>\n<span class=\"go\">Reading symbols from /projects/zephyr/samples/hello_world/build/zephyr/zephyr.elf...done.</span>\n<span class=\"go\">Remote debugging using :3335</span>\n<span class=\"go\">Using cable \"USB-BlasterII [3-1.3]\", device 1, instance 0x00</span>\n<span class=\"go\">Resetting and pausing target processor: OK</span>\n<span class=\"go\">Listening on port 3335 for connection from GDB: accepted</span>\n<span class=\"go\">isr_tables_syms () at /projects/zephyr/arch/common/isr_tables.c:63</span>\n<span class=\"go\">63      GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b _PrepC</span>\n<span class=\"go\">Breakpoint 1 at 0xdf0: file /projects/zephyr/arch/nios2/core/prep_c.c, line 36.</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b z_cstart</span>\n<span class=\"go\">Breakpoint 2 at 0x1254: file /projects/zephyr/kernel/init.c, line 348.</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">c</span>\n<span class=\"go\">Continuing.</span>\n\n<span class=\"go\">Breakpoint 2, _Cstart () at /projects/zephyr/kernel/init.c:348</span>\n<span class=\"go\">348     {</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span>\n</pre></div>\n</div>\n<p>To start debugging manually:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nios2-gdb-server --tcpport 1234 --stop --reset-target</span>\n</pre></div>\n</div>\n<p>And then connect with GDB from the build directory:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nios2-poky-elf-gdb  zephyr/zephyr.elf -ex \"target remote :1234\"</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging-with-jtag-flashed-image\">\n<h4>Debugging With JTAG Flashed Image<a class=\"headerlink\" href=\"#debugging-with-jtag-flashed-image\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order for this to work, execute-in-place must be disabled, since the GDB\n‘load’ command can only put text and data in RAM. Ensure this is in your\nconfiguration:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">CONFIG_XIP=n</span>\n</pre></div>\n</div>\n<p>It is OK for this procedure to leave the reset vector enabled, unlike\nnios2-download (which errors out if it finds sections outside of SRAM) it will\nbe ignored.</p>\n<p>In a terminal, launch the nios2 GDB server. It doesn’t matter what kernel (if\nany) is on the device, but you should have at least flashed a CPU using\nnios2-configure-sof. You can leave this process running.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nios2-gdb-server --tcpport <span class=\"m\">1234</span> --tcppersist --init-cache --reset-target\n</pre></div>\n</div>\n<p>Build your Zephyr kernel, and load it into a GDB built for Nios II (included in\nthe Zephyr SDK) from the build directory:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nios2-poky-elf-gdb zephyr/zephyr.elf\n</pre></div>\n</div>\n<p>Then connect to the GDB server:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote :1234</span>\n</pre></div>\n</div>\n<p>And then load the kernel image over the wire. The CPU will not start from the\nreset vector, instead it will boot from the __start symbol:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n<span class=\"go\">Loading section reset, size 0xc lma 0x0</span>\n<span class=\"go\">Loading section exceptions, size 0x1b0 lma 0x400020</span>\n<span class=\"go\">Loading section text, size 0x8df0 lma 0x4001d0</span>\n<span class=\"go\">Loading section devconfig, size 0x30 lma 0x408fc0</span>\n<span class=\"go\">Loading section rodata, size 0x3f4 lma 0x408ff0</span>\n<span class=\"go\">Loading section datas, size 0x888 lma 0x4093e4</span>\n<span class=\"go\">Loading section initlevel, size 0x30 lma 0x409c6c</span>\n<span class=\"go\">Loading section _k_task_list, size 0x58 lma 0x409c9c</span>\n<span class=\"go\">Loading section _k_task_ptr, size 0x8 lma 0x409cf4</span>\n<span class=\"go\">Loading section _k_event_list, size 0x10 lma 0x409cfc</span>\n<span class=\"go\">Start address 0x408f54, load size 40184</span>\n<span class=\"go\">Transfer rate: 417 KB/sec, 368 bytes/write.</span>\n<span class=\"go\">After this is done you may set breakpoints and continue execution. If you ever want to reset the CPU, issue the 'load' command again.</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/en_US/pdfs/literature/hb/nios2/n2cpu-nii5v1gen2.pdf\">CPU Documentation</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/en_US/pdfs/literature/an/an730.pdf\">Nios II Processor Booting Methods in MAX 10 FPGA Devices</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/ug/ug_embedded_ip.pdf\">Embedded Peripherals IP User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/hb/max-10/ug_m10_config.pdf\">MAX 10 FPGA Configuration User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/ug/ug-max10m50-fpga-dev-kit.pdf\">MAX 10 FPGA Development Kit User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/hb/nios2/edh_ed51004.pdf\">Nios II Command-Line Tools</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/manual/tclscriptrefmnl.pdf\">Quartus II Scripting Reference Manual</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "TCMU SYSTEM", "size": 131072}, {"label": "OCRAM SYSTEM", "size": 262144}, {"label": "OCRAM_S SYSTEM", "size": 32768}], "main_ram_size": 262144, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mimx8mm_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMX8MM EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimx8mm-evk\">\n<span id=\"mimx8mm-evk\"></span><h1>NXP MIMX8MM EVK<a class=\"headerlink\" href=\"#nxp-mimx8mm-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>i.MX8M Mini LPDDR4 EVK board is based on NXP i.MX8M Mini applications\nprocessor, composed of a quad Cortex®-A53 cluster and a single Cortex®-M4 core.\nZephyr OS is ported to run on the Cortex®-M4 core.</p>\n<ul class=\"simple\">\n<li><p>Board features:</p>\n<ul>\n<li><p>RAM: 2GB LPDDR4</p></li>\n<li><p>Storage:</p>\n<ul>\n<li><p>SanDisk 16GB eMMC5.1</p></li>\n<li><p>Micron 32MB QSPI NOR</p></li>\n<li><p>microSD Socket</p></li>\n</ul>\n</li>\n<li><p>Wireless:</p>\n<ul>\n<li><p>WiFi: 2.4/5GHz IEEE 802.11b/g/n</p></li>\n<li><p>Bluetooth: v4.1</p></li>\n</ul>\n</li>\n<li><p>USB:</p>\n<ul>\n<li><p>OTG - 2x type C</p></li>\n</ul>\n</li>\n<li><p>Ethernet</p></li>\n<li><p>PCI-E M.2</p></li>\n<li><p>Connectors:</p>\n<ul>\n<li><p>40-Pin Dual Row Header</p></li>\n</ul>\n</li>\n<li><p>LEDs:</p>\n<ul>\n<li><p>1x Power status LED</p></li>\n<li><p>1x UART LED</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 20-pin connector</p></li>\n<li><p>MicroUSB for UART debug, two COM ports for A53 and M4</p></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimx8mm_evk.jpg\"><img alt=\"MIMX8MM EVK\" class=\"align-center\" src=\"../../../../_images/mimx8mm_evk.jpg\" style=\"width: 720px; height: 405px;\"/></a>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nxp.com/design/development-boards/i.mx-evaluation-and-development-boards/evaluation-kit-for-thebr-i.mx-8m-mini-applications-processor:8MMINILPD4-EVK\">NXP website</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr mimx8mm_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/mimx8mm_evk/mimx8mm_evk_defconfig\">boards/arm/mimx8mm_evk/mimx8mm_evk_defconfig</a>.</p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MIMX8MM EVK board was tested with the following pinmux controller\nconfiguration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART4 RXD</p></td>\n<td><p>UART4_TXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART4 TXD</p></td>\n<td><p>UART4_RXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The M4 Core is configured to run at a 400 MHz clock speed.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The i.MX8M Mini SoC has four UARTs. UART_4 is configured for the console and\nthe remaining are not used/tested.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The MIMX8MM EVK board doesn’t have QSPI flash for the M4 and it needs\nto be started by the A53 core. The A53 core is responsible to load the M4 binary\napplication into the RAM, put the M4 in reset, set the M4 Program Counter and\nStack Pointer, and get the M4 out of reset. The A53 can perform these steps at\nbootloader level or after the Linux system has booted.</p>\n<p>The M4 can use up to 3 different RAMs. These are the memory mapping for A53 and M4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 24%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A53</p></th>\n<th class=\"head\"><p>Cortex-M4 (System Bus)</p></th>\n<th class=\"head\"><p>Cortex-M4 (Code Bus)</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0093FFFF</p></td>\n<td><p>0x20200000-0x2023FFFF</p></td>\n<td><p>0x00900000-0x0093FFFF</p></td>\n<td><p>256KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x0081FFFF</p></td>\n<td><p>0x20000000-0x2001FFFF</p></td>\n<td></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TCML</p></td>\n<td><p>0x007E0000-0x007FFFFF</p></td>\n<td></td>\n<td><p>0x1FFE0000-0x1FFFFFFF</p></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM_S</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>0x20180000-0x20187FFF</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n</tbody>\n</table>\n<p>For more information about memory mapping see the\n<a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX8MMRM\">i.MX 8M Applications Processor Reference Manual</a>  (section 2.1.2 and 2.1.3)</p>\n<p>At compilation time you have to choose which RAM will be used. This\nconfiguration is done in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimx8mm_evk/mimx8mm_evk.dts</span></code>\nwith “zephyr,flash” (when CONFIG_XIP=y) and “zephyr,sram” properties.\nThe available configurations are:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;tcml_code\n- &amp;ocram_code\n- &amp;ocram_s_code\n\n\"zephyr,sram\"\n- &amp;tcmu_sys\n- &amp;ocram_sys\n- &amp;ocram_s_sys\n</pre></div>\n</div>\n<p>Load and run Zephyr on M4 from A53 using u-boot by copying the compiled\n<code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code> to the first FAT partition of the SD card and plug the SD\ncard into the board. Power it up and stop the u-boot execution at prompt.</p>\n<p>Load the M4 binary onto the desired memory and start its execution using:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">fatload mmc 0:1 0x7e0000 zephyr.bin;bootaux 0x7e0000</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MIMX8MM EVK board can be debugged by connecting an external JLink\nJTAG debugger to the J902 debug connector and to the PC. Then\nthe application can be debugged using the usual way.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimx8mm_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS build zephyr-v2.0.0-1859-g292afe8533c0 *****</span>\n<span class=\"go\">Hello World! mimx8mm_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ruuvi_ruuvitag", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Ruuvi RuuviTag</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"ruuvi-ruuvitag\">\n<span id=\"id1\"></span><h1>Ruuvi RuuviTag<a class=\"headerlink\" href=\"#ruuvi-ruuvitag\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>RuuviTag is an advanced battery-operated open-source Bluetooth\nenabled sensor beacon platform capable of sending temperature, humidity,\npressure, and motion information over Bluetooth Low Energy.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ruuvitag.jpg\"><img alt=\"RUUVI RuuviTag\" src=\"../../../../_images/ruuvitag.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">RUUVI RuuviTag (Credit: <a class=\"reference external\" href=\"https://ruuvi.com/\">https://ruuvi.com/</a>)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://ruuvi.com\">ruuvitag website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>RuuviTag’s have the following physical features:</p>\n<ul class=\"simple\">\n<li><p>Nordic Semiconductor nRF52832 System-on-Chip</p></li>\n<li><p>STMicroelectronics LIS2DH12 accelerometer</p></li>\n<li><p>Bosch BME 280 temperature + relative air humidity + air pressure sensor</p></li>\n<li><p>NFC™-A tag antenna</p></li>\n<li><p>1000mAh CR2477 battery</p></li>\n<li><p>2 buttons</p></li>\n<li><p>1 Green LED</p></li>\n<li><p>1 Red LED</p></li>\n<li><p>IP67 Enclosure</p></li>\n<li><p>Long range RF antenna</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Humidity,\nTemp &amp; Air\nPressure</p></td>\n<td><p>on-board</p></td>\n<td><p>bme280</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Acc</p></td>\n<td><p>on-board</p></td>\n<td><p>lis2dh12</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (red) = P0.17</p></li>\n<li><p>LED1 (green) = P0.19</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON0 = SW1 = P0.13</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pin-descriptions\">\n<h4>Pin descriptions<a class=\"headerlink\" href=\"#pin-descriptions\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pinout.jpg\"><img alt=\"RUUVI Pinout\" src=\"../../../../_images/pinout.jpg\" style=\"width: 442px;\"/></a>\n</div>\n<ul class=\"simple\">\n<li><p>2 = P0.29 = SPI_SCK</p></li>\n<li><p>3 = P0.28 = SPI_MISO</p></li>\n<li><p>10 = P0.04 = GPIO (can be used as a GPIO / ADC pin)</p></li>\n<li><p>11 = P0.05 = GPIO (can be used as a GPIO / ADC pin)</p></li>\n<li><p>12 = P0.25 = SPI_MOSI</p></li>\n<li><p>13 = P0.19 = LED2 (green) / GPIO (can be used as a GPIO pin but the LED will blink)</p></li>\n<li><p>14 = P0.17 = LED1 (red) / GPIO (can be used as a GPIO pin but the LED will blink)</p></li>\n<li><p>15 = P0.13 = Button / GPIO (can be used as a GPIO pin)</p></li>\n<li><p>16 = GND (Battery’s negative contact)</p></li>\n<li><p>17 = Battery’s positive contact</p></li>\n<li><p>18 = Battery’s positive contact</p></li>\n<li><p>19 = SWDIO</p></li>\n<li><p>20 = SWDCLK</p></li>\n<li><p>21 = P0.18 = SWO / GPIO (can be used as a GPIO pin)</p></li>\n<li><p>22 = P0.21 = Reset / GPIO (can be used as a GPIO pin if no need to reset the device)</p></li>\n<li><p>23 = GND (Battery’s negative contact)</p></li>\n<li><p>24 = P0.31 = GPIO (can be used as a GPIO / ADC pin)</p></li>\n<li><p>25 = P0.30 = GPIO (can be used as a GPIO / ADC pin)</p></li>\n</ul>\n<p>GPIO = General Purpose Input Output pin</p>\n<p>P1 = Standard 10-pin ARM Cortex debug connector (on RuuviTag Rev.B1-B5)</p>\n<ul class=\"simple\">\n<li><p>1 = VDD</p></li>\n<li><p>2 = SWDIO</p></li>\n<li><p>3 = GND (Battery’s negative contact)</p></li>\n<li><p>4 = SWDCLK</p></li>\n<li><p>5 = GND (Battery’s negative contact)</p></li>\n<li><p>6 = SWO</p></li>\n<li><p>7 = No Connect</p></li>\n<li><p>8 = No Connect</p></li>\n<li><p>9 = GND (Battery’s negative contact)</p></li>\n<li><p>10 = Reset</p></li>\n</ul>\n<p>P1 = TC2030 TagConnect (on RuuviTag Rev.B6)</p>\n<ul class=\"simple\">\n<li><p>1 = Battery’s positive contact</p></li>\n<li><p>2 = SWDIO</p></li>\n<li><p>3 = Reset</p></li>\n<li><p>4 = SWDCLK</p></li>\n<li><p>5 = GND (Battery’s negative contact)</p></li>\n<li><p>6 = SWO</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>The easiest way to flash Zephyr onto a RuuviTag requires an external Ruuvi DEVKIT. More information about the board can be found at the\n<a class=\"reference external\" href=\"https://lab.ruuvi.com/devshield/\">ruuvitag devkit</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>.</p>\n<p>Once your tag is conencted to the DEVKIT and conencted to your PC, build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ruuvi_ruuvitag samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Advanced users may want to program the RuuviTag without the DEVKIT, this can be achieved via the SWDIO and SWDCLK pins located on the back of the RuuviTag.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If using the Ruuvi DEVKIT refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-on-the-ruuvitag\">\n<h2>Testing the LEDs and buttons on the RuuviTag<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-on-the-ruuvitag\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in <code class=\"file docutils literal notranslate\"><span class=\"pre\">boards/arm/ruuvi_ruuvitag/ruuvi_ruuvitag.dts</span></code>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://ruuvi.com\">https://ruuvi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://lab.ruuvi.com/devshield/\">https://lab.ruuvi.com/devshield/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 81920}, {"label": "sram1", "size": 8192}], "main_ram_size": 81920, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cc1352r_sensortag", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>CC1352R SensorTag</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cc1352r-sensortag\">\n<span id=\"id1\"></span><h1>CC1352R SensorTag<a class=\"headerlink\" href=\"#cc1352r-sensortag\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Texas Instruments CC1352R SensorTag™ (LPSTK-CC1352R) is a\ndevelopment kit for the SimpleLink™ multi-Standard CC1352R wireless MCU.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/tool/lpstk-cc1352r\">TI CC1352R SensorTag Product Page</a> for details.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/cc1352r_sensortag.jpg\"><img alt=\"TI CC1352R SensorTag\" src=\"../../../../_images/cc1352r_sensortag.jpg\" style=\"width: 400px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Texas Instruments CC1352R SensorTag™</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The CC1352R SensorTag™ development kit features the CC1352R wireless MCU.\nThe board is equipped with three LEDs, two push buttons and BoosterPack connectors\nfor expansion.</p>\n<p>The CC13522 wireless MCU has a 48 MHz Arm® Cortex®-M4F SoC and an\nintegrated Sub-1 and 2.4 GHz transceiver supporting multiple protocols including\nBluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/product/cc1352r\">TI CC1352R Product Page</a> for additional details.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The CC1352R SensorTag board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 27%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 44%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO23</p></td>\n<td><p>off-chip</p></td>\n<td><p>DRV5032</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>off-chip</p></td>\n<td><p>HDC2080</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>off-chip</p></td>\n<td><p>OPT3001</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>off-chip</p></td>\n<td><p>ADXL362</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>All I/O signals are accessible from the BoosterPack connectors. Pin function\naligns with the SensorTag standard.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DIO3</p></td>\n<td><p>GPIO</p></td>\n<td><p>GPIO / PWM1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO4</p></td>\n<td><p>I2C_MSSCL</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO5</p></td>\n<td><p>I2C_MSSDA</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO8</p></td>\n<td><p>SSI0_RX</p></td>\n<td><p>SPI MISO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO9</p></td>\n<td><p>SSI0_TX</p></td>\n<td><p>SPI MOSI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO10</p></td>\n<td><p>SSI0_CLK</p></td>\n<td><p>SPI CLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO11</p></td>\n<td><p>SSIO_CS</p></td>\n<td><p>SPI CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO12</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART RXD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO13</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART TXD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO14</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO15</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO16</p></td>\n<td></td>\n<td><p>JTAG TDO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO17</p></td>\n<td></td>\n<td><p>JTAG TDI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO18</p></td>\n<td><p>UART0_RTS</p></td>\n<td><p>UART RTS / JTAG SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO19</p></td>\n<td><p>UART0_CTS</p></td>\n<td><p>UART CTS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO20</p></td>\n<td><p>GPIO</p></td>\n<td><p>Flash CS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO21</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO22</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO23</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A0 (DRV5032)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO24</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO25</p></td>\n<td><p>GPIO</p></td>\n<td><p>HDC2080 INT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO26</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO27</p></td>\n<td><p>GPIO</p></td>\n<td><p>OPT3001 INT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO28</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO29</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO30</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>ADXL362 INT</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>TI’s supported method of programming and debugging the <code class=\"docutils literal notranslate\"><span class=\"pre\">CC1352R</span> <span class=\"pre\">SensorTag</span></code> is\nto use it in tandem with a <code class=\"docutils literal notranslate\"><span class=\"pre\">CC1352R</span> <span class=\"pre\">LaunchPad</span></code>, making use of the integrated\n(XDS110) debugger and serial console over USB.</p>\n<ol class=\"arabic simple\">\n<li><p>Disconnect the debug isolation jumpers on your LaunchPad</p></li>\n<li><p>Connect the ARM 10-pin JTAG cable to XDS110 OUT header on your LaunchPad</p></li>\n<li><p>Connect the other end of the ARM10-pin cable to the JTAG header on your LaunchPad SensorTag</p></li>\n<li><p>Connect the 2-pin jumper cable to the top pins of RXD and TXD (grey wire to RXD, white wire to TXD)</p></li>\n<li><p>Connect the other end of the 2-pin jumper to pins 12/RX and 13/TX on the LaunchPad SensorTag (Grey to 12/RX, white to 13/TX)</p></li>\n<li><p>Connect your XDS110 LaunchPad to your PC!</p></li>\n</ol>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/launchpad-lpstk-debug.jpg\"><img alt=\"Debugging the TI CC1352R SensorTag\" src=\"../../../../_images/launchpad-lpstk-debug.jpg\" style=\"width: 400px;\"/></a>\n</div>\n<p>See <a class=\"reference external\" href=\"https://dev.ti.com/tirex/explore/content/simplelink_academy_cc13x2_26x2sdk_4_20_03_00/modules/lpstk/lpstk_oobe/lpstk_oobe.html#-debugging-the-launchpad-sensortag-\">Debugging the LaunchPad SensorTag</a> for additional details.</p>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites:<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Ensure the XDS-110 emulation firmware on the board is updated.</p>\n<p>Download and install the latest <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/XDS_Emulation_Software_Package#XDS_Emulation_Software_.28emupack.29_Download\">XDS-110 emulation package</a>.</p>\n<p>Follow these <a class=\"reference external\" href=\"http://software-dl.ti.com/ccs/esd/documents/xdsdebugprobes/emu_xds110.html#updating-the-xds110-firmware\">xds110 firmware update directions</a></p>\n<p>Note that the emulation package install may place the xdsdfu utility\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;install_dir&gt;/ccs_base/common/uscif/xds110/</span></code>.</p>\n</li>\n<li><p>Install OpenOCD</p>\n<p>You can obtain OpenOCD by following these\n<a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">installing the latest Zephyr SDK instructions</span></a>.</p>\n<p>After the installation, add the directory containing the OpenOCD executable\nto your environment’s PATH variable. For example, use this command in Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export PATH=$ZEPHYR_SDK_INSTALL_DIR/sysroots/x86_64-pokysdk-linux/usr/bin/openocd:$PATH</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">CC1352R</span> <span class=\"pre\">SensorTag</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the XDS110 application\nserial device can be found. For example, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. Once in\nminicom Pres <code class=\"code docutils literal notranslate\"><span class=\"pre\">Ctrl+A,</span> <span class=\"pre\">U</span></code> to add a carriage return, and\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">Ctrl+A,</span> <span class=\"pre\">W</span></code> to wrap long lines.</p>\n<p>Then build and flash the application in the usual way.</p>\n<p>For the <code class=\"code docutils literal notranslate\"><span class=\"pre\">Hello,</span> <span class=\"pre\">world!</span></code> application, follow the instructions below.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc1352r_sensortag samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc1352r_sensortag samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"bootloader\">\n<h3>Bootloader<a class=\"headerlink\" href=\"#bootloader\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ROM bootloader on CC13x2 and CC26x2 devices is enabled by default. The\nbootloader will start if there is no valid application image in flash or the\nso-called backdoor is enabled (via option\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE.html#std-kconfig-CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE</span></code></a>) and BTN-1 is held\ndown during reset. See the bootloader documentation in chapter 10 of the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swcu185\">TI\nCC13x2 / CC26x2 Technical Reference Manual</a> for additional information.</p>\n</div>\n<div class=\"section\" id=\"power-management-and-uart\">\n<h3>Power Management and UART<a class=\"headerlink\" href=\"#power-management-and-uart\" title=\"Permalink to this headline\">¶</a></h3>\n<p>System and device power management are supported on this platform, and\ncan be enabled via the standard Kconfig options in Zephyr, such as\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM.html#std-kconfig-CONFIG_PM\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM_DEVICE.html#std-kconfig-CONFIG_PM_DEVICE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM_DEVICE</span></code></a>.</p>\n<p>When system power management is turned on (CONFIG_PM=y),\nsleep state 2 (standby mode) is allowed, and polling is used to retrieve input\nby calling uart_poll_in(), it is possible for characters to be missed if the\nsystem enters standby mode between calls to uart_poll_in(). This is because\nthe UART is inactive while the system is in standby mode. The workaround is to\ndisable sleep state 2 while polling:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pm_constraint_set</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">uart_poll_in</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">expects</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">pm_constraint_release</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>CC1352R1 SensorTag Quick Start Guide:</dt><dd><p><a class=\"reference external\" href=\"https://www.ti.com/lit/pdf/swau127\">https://www.ti.com/lit/pdf/swau127</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 2147483648}], "main_ram_size": 2147483648, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "minnowboard", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 229376}], "main_flash_size": 229376, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIO000_036"}, {"label": "GPIO040_076"}, {"label": "GPIO100_136"}, {"label": "GPIO140_176"}, {"label": "GPIO200_236"}, {"label": "GPIO240_276"}]}, "i2c": {"count": 5, "instances": [{"label": "I2C0"}, {"label": "I2C1"}, {"label": "I2C7"}, {"label": "I2C_SMB_3"}, {"label": "I2C_SMB_4"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 9, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mec15xxevb_assy6853", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>MEC15xxEVB ASSY6853</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"mec15xxevb-assy6853\">\n<span id=\"id1\"></span><h1>MEC15xxEVB ASSY6853<a class=\"headerlink\" href=\"#mec15xxevb-assy6853\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The MEC15xxEVB_ASSY6853 kit is a future development platform to evaluate the\nMicrochip MEC15XX series microcontrollers. This board needs to be mated with\npart number MEC1501 144WFBA SOLDER DC ASSY 6860(cpu board) in order to operate.\nThe MEC152x has superceded the MEC1501 in production. MEC152x is identical to\nMEC150x except for an enhanced Boot-ROM SPI loader. The SPI image format has\nbeen updated requiring a new SPI image tool. MEC1501 and MEC152x SPI image\nformats are not compatible with each other. Evaluation and cpu boards are\ncompatible.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mec15xxevb_assy6853.png\"><img alt=\"MEC15XX EVB ASSY 6853\" class=\"align-center\" src=\"../../../../_images/mec15xxevb_assy6853.png\" style=\"width: 600px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MEC1521HA0SZ ARM Cortex-M4 Processor</p></li>\n<li><p>256 KB RAM and 64 KB boot ROM</p></li>\n<li><p>Keyboard interface</p></li>\n<li><p>ADC &amp; GPIO headers</p></li>\n<li><p>UART0, UART1, and UART2</p></li>\n<li><p>FAN0, FAN1, FAN2 headers</p></li>\n<li><p>FAN PWM interface</p></li>\n<li><p>JTAG/SWD, ETM and MCHP Trace ports</p></li>\n<li><p>PECI interface 3.0</p></li>\n<li><p>I2C voltage translator</p></li>\n<li><p>10 SMBUS headers</p></li>\n<li><p>4 SGPIO headers</p></li>\n<li><p>VCI interface</p></li>\n<li><p>5 independent Hardware Driven PS/2 Ports</p></li>\n<li><p>eSPI header</p></li>\n<li><p>3 Breathing/Blinking LEDs</p></li>\n<li><p>2 Sockets for SPI NOR chips</p></li>\n<li><p>One reset and VCC_PWRDGD pushbuttons</p></li>\n<li><p>One external PCA9555 I/O port with jumper selectable I2C address.</p></li>\n<li><p>One external LTC2489 delta-sigma ADC with jumper selectable I2C address.</p></li>\n<li><p>Board power jumper selectable from +5V 2.1mm/5.5mm barrel connector or USB Micro A connector.</p></li>\n</ul>\n<p>For more information about the SOC’s please see <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf\">MEC152x Reference Manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mec15xxevb_assy6853 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PS/2</p></td>\n<td><p>on-chip</p></td>\n<td><p>ps2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>KSCAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>kscan</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TACH</p></td>\n<td><p>on-chip</p></td>\n<td><p>tachometer</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr (at the moment)</p>\n<p>The default configuration can be found in the\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/mec15xxevb_assy6853/mec15xxevb_assy6853_defconfig\">boards/arm/mec15xxevb_assy6853/mec15xxevb_assy6853_defconfig</a> Kconfig file.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This evaluation board kit is comprised of the following HW blocks:</p>\n<ul class=\"simple\">\n<li><p>MEC15xx EVB ASSY 6853 Rev A <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/Everglades%20EVB%20-%20Assy_6853%20Rev%20A1p1%20-%20SCH.pdf\">MEC15xx EVB Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a></p></li>\n<li><p>MEC1501 144WFBA SOLDER DC ASSY 6883 with MEC152x silicon <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Socket%20DC%20for%20EVERGLADES%20EVB%20-%20Assy_6883%20Rev%20A0p1%20-%20SCH.pdf\">MEC1501 Daughter Card Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a></p></li>\n<li><p>SPI DONGLE ASSY 6791 <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/SPI%20Dongles%20and%20Aardvark%20Interposer%20Assy%206791%20Rev%20A1p1%20-%20SCH.pdf\">SPI Dongle Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">4</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MEC1521 MCU is configured to use the 48Mhz internal oscillator with the\non-chip PLL to generate a resulting EC clock rate of 12 MHz. See Processor clock\ncontrol register in chapter 4 “4.0 POWER, CLOCKS, and RESETS” of the data sheet in\nthe references at the end of this document.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>UART2 is configured for serial logs.</p>\n</div>\n</div>\n<div class=\"section\" id=\"jumper-settings\">\n<h2>Jumper settings<a class=\"headerlink\" href=\"#jumper-settings\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Please follow the jumper settings below to properly demo this\nboard. Advanced users may deviate from this recommendation.</p>\n<div class=\"section\" id=\"jumper-setting-for-mec15xx-evb-assy-6853-rev-a1p0\">\n<h3>Jumper setting for MEC15xx EVB Assy 6853 Rev A1p0<a class=\"headerlink\" href=\"#jumper-setting-for-mec15xx-evb-assy-6853-rev-a1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"power-related-jumpers\">\n<h4>Power-related jumpers<a class=\"headerlink\" href=\"#power-related-jumpers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>If you wish to power from +5V power brick, then connect to barrel connector <code class=\"docutils literal notranslate\"><span class=\"pre\">P11</span></code>\n(5.5mm OD, 2.1mm ID) and move the jumper to <code class=\"docutils literal notranslate\"><span class=\"pre\">JP88</span> <span class=\"pre\">5-6</span></code>.</p>\n<p>If you wish to power from micro-USB type A/B connector <code class=\"docutils literal notranslate\"><span class=\"pre\">P12</span></code>, move the\njumper to <code class=\"docutils literal notranslate\"><span class=\"pre\">JP88</span> <span class=\"pre\">7-8</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>A single jumper is required in JP88.</p>\n</div>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP22</p></th>\n<th class=\"head\"><p>JP32</p></th>\n<th class=\"head\"><p>JP33</p></th>\n<th class=\"head\"><p>JP37</p></th>\n<th class=\"head\"><p>JP43</p></th>\n<th class=\"head\"><p>JP47</p></th>\n<th class=\"head\"><p>JP54</p></th>\n<th class=\"head\"><p>JP56</p></th>\n<th class=\"head\"><p>JP58</p></th>\n<th class=\"head\"><p>JP64</p></th>\n<th class=\"head\"><p>JP65</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 10%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP72</p></th>\n<th class=\"head\"><p>JP73</p></th>\n<th class=\"head\"><p>JP76</p></th>\n<th class=\"head\"><p>JP79</p></th>\n<th class=\"head\"><p>JP80</p></th>\n<th class=\"head\"><p>JP81</p></th>\n<th class=\"head\"><p>JP82</p></th>\n<th class=\"head\"><p>JP84</p></th>\n<th class=\"head\"><p>JP87</p></th>\n<th class=\"head\"><p>JP89</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP90</p></th>\n<th class=\"head\"><p>JP91</p></th>\n<th class=\"head\"><p>JP100</p></th>\n<th class=\"head\"><p>JP101</p></th>\n<th class=\"head\"><p>JP118</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n<p>These jumpers configure VCC Power good, nRESETI and JTAG_STRAP respectively.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 42%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP5\n(VCC Power good)</p></th>\n<th class=\"head\"><p>JP4\n(nRESETI)</p></th>\n<th class=\"head\"><p>JP45\n(JTAG_STRAP)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"boot-rom-straps\">\n<h4>Boot-ROM Straps.<a class=\"headerlink\" href=\"#boot-rom-straps\" title=\"Permalink to this headline\">¶</a></h4>\n<p>These jumpers configure MEC1501 Boot-ROM straps.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 25%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP93\n(CMP_STRAP)</p></th>\n<th class=\"head\"><p>JP11\n(CR_STRAP)</p></th>\n<th class=\"head\"><p>JP46\n(VTR2_STRAP)</p></th>\n<th class=\"head\"><p>JP96\n(BSS_STRAP)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>2-3</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">JP96</span> <span class=\"pre\">1-2</span></code> pulls SHD SPI CS0# up to VTR2. MEC1501 Boot-ROM samples\nSHD SPI CS0# and if high, it loads code from SHD SPI.</p>\n</div>\n<div class=\"section\" id=\"peripheral-routing-jumpers\">\n<h4>Peripheral Routing Jumpers<a class=\"headerlink\" href=\"#peripheral-routing-jumpers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Each column of the following table illustrates how to enable UART2, SWD,\nPVT SPI, SHD SPI and LED0-2 respectively.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 16%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP48\n(UART2)</p></th>\n<th class=\"head\"><p>JP9\n(UART2)</p></th>\n<th class=\"head\"><p>JP9\n(SWD)</p></th>\n<th class=\"head\"><p>JP38\n(PVT SPI)</p></th>\n<th class=\"head\"><p>JP98\n(SHD SPI)</p></th>\n<th class=\"head\"><p>JP41\n(LED0-2)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td></td>\n<td><p>2-3</p></td>\n<td><p>2-3</p></td>\n<td><p>2-3</p></td>\n<td><p>1-2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4-5</p></td>\n<td><p>4-5</p></td>\n<td></td>\n<td><p>5-6</p></td>\n<td><p>5-6</p></td>\n<td><p>3-4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7-8</p></td>\n<td></td>\n<td><p>8-9</p></td>\n<td><p>8-9</p></td>\n<td><p>8-9</p></td>\n<td><p>5-6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10-11</p></td>\n<td><p>10-11</p></td>\n<td></td>\n<td><p>11-12</p></td>\n<td><p>11-12</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td></td>\n<td></td>\n<td><p>14-15</p></td>\n<td><p>14-15</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td></td>\n<td></td>\n<td></td>\n<td><p>17-18</p></td>\n<td><p>20-21</p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>For UART2 make sure JP39 have jumpers connected 1-2, 3-4.</p>\n</div>\n<p>To receive UART2 serial output, please refer to the picture below\nto make sure that JP9 configured for UART2 output.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mec15xxevb_assy6853_jp9_1.png\"><img alt=\"JP9 header Assy6853\" class=\"align-center\" src=\"../../../../_images/mec15xxevb_assy6853_jp9_1.png\" style=\"width: 300px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"jumper-settings-for-mec1501-144wfbga-socket-dc-assy-6883-rev-b1p0\">\n<h3>Jumper settings for MEC1501 144WFBGA Socket DC Assy 6883 Rev B1p0<a class=\"headerlink\" href=\"#jumper-settings-for-mec1501-144wfbga-socket-dc-assy-6883-rev-b1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The jumper configuration explained above covers the base board. The ASSY\n6883 MEC1501 CPU board provides capability for an optional, external 32KHz\nclock source. The card includes a 32KHz crystal oscillator. The card can\nalso be configured to use an external 50% duty cycle 32KHz source on the\nXTAL2/32KHZ_IN pin. Note, firmware must set the MEC15xx clock enable\nregister to select the external source matching the jumper settings. If\nusing the MEC15xx internal silicon oscillator then the 32K jumper settings\nare don’t cares. <code class=\"docutils literal notranslate\"><span class=\"pre\">JP1</span></code> is for scoping test clock outputs. Please refer to\nthe schematic in reference section below.</p>\n<div class=\"section\" id=\"parallel-32khz-crystal-configuration\">\n<h4>Parallel 32KHz crystal configuration<a class=\"headerlink\" href=\"#parallel-32khz-crystal-configuration\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP2</p></th>\n<th class=\"head\"><p>JP3</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"external-32khz-50-duty-cycle-configuration\">\n<h4>External 32KHz 50% duty cycle configuration<a class=\"headerlink\" href=\"#external-32khz-50-duty-cycle-configuration\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP2</p></th>\n<th class=\"head\"><p>JP3</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NC</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"jumper-settings-for-mec1503-144wfbga-socket-dc-assy-6856-rev-b1p0\">\n<h3>Jumper settings for MEC1503 144WFBGA Socket DC Assy 6856 Rev B1p0<a class=\"headerlink\" href=\"#jumper-settings-for-mec1503-144wfbga-socket-dc-assy-6856-rev-b1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MEC1503 ASSY 6856 CPU card does not include an onboard external\n32K crystal or oscillator. The one jumper block <code class=\"docutils literal notranslate\"><span class=\"pre\">JP1</span></code> is for scoping\ntest clock outputs not for configuration. Please refer to schematic\nin reference section below.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"setup\">\n<h3>Setup<a class=\"headerlink\" href=\"#setup\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>If you use Dediprog SF100 programmer, then setup it.</p>\n<p>Windows version can be found at the <a class=\"reference external\" href=\"https://www.dediprog.com/product/SF100\">SF100 Product page</a> <a class=\"footnote-reference brackets\" href=\"#id17\" id=\"id18\">8</a>.</p>\n<p>Linux version source code can be found at <a class=\"reference external\" href=\"https://github.com/DediProgSW/SF100Linux\">SF100 Linux GitHub</a> <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id16\">7</a>.\nFollow the <a class=\"reference external\" href=\"https://www.dediprog.com/download/save/727.pdf\">SF100 Linux manual</a> <a class=\"footnote-reference brackets\" href=\"#id19\" id=\"id20\">9</a> to complete setup of the SF100 programmer.\nFor Linux please make sure that you copied <code class=\"docutils literal notranslate\"><span class=\"pre\">60-dediprog.rules</span></code>\nfrom the <code class=\"docutils literal notranslate\"><span class=\"pre\">SF100Linux</span></code> folder to the <code class=\"code docutils literal notranslate\"><span class=\"pre\">/etc/udev/rules.s</span></code> (or rules.d)\nthen restart service using:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>udevadm control --reload\n</pre></div>\n</div>\n<p>Add directory with program <code class=\"docutils literal notranslate\"><span class=\"pre\">dpcmd</span></code> (on Linux)\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">dpcmd.exe</span></code> (on Windows) to your <code class=\"docutils literal notranslate\"><span class=\"pre\">PATH</span></code>.</p>\n</li>\n<li><p>Clone the <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen\">MEC152x SPI Image Gen</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">5</a> repository or download the files within\nthat directory. For the pre-production MEC150x use <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen\">MEC150x SPI Image Gen</a> <a class=\"footnote-reference brackets\" href=\"#id13\" id=\"id14\">6</a>\nrepository.</p></li>\n<li><p>Make the image generation available for Zephyr, by making the tool\nsearchable by path, or by setting an environment variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">EVERGLADES_SPI_GEN</span></code>, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export EVERGLADES_SPI_GEN=&lt;path to tool&gt;/everglades_spi_gen_RomE</span>\n</pre></div>\n</div>\n<p>Note that the tools for Linux and Windows have different file names.\nFor the pre-production MEC1501 SOC use everglades_spi_gen_lin64.</p>\n</li>\n<li><p>If needed, a custom SPI image configuration file can be specified\nto override the default one.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export EVERGLADES_SPI_CFG=custom_spi_cfg.txt</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"wiring\">\n<h3>Wiring<a class=\"headerlink\" href=\"#wiring\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Connect the SPI Dongle ASSY 6791 to <code class=\"docutils literal notranslate\"><span class=\"pre\">J44</span></code> in the EVB.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/spidongle_assy6791_view1.png\"><img alt=\"SPI DONGLE ASSY 6791 Connected\" class=\"align-center\" src=\"../../../../_images/spidongle_assy6791_view1.png\" style=\"width: 400px;\"/></a>\n</li>\n<li><p>Connect programmer to the header J6 on the Assy6791 board, it will flash the SPI NOR chip <code class=\"docutils literal notranslate\"><span class=\"pre\">U3</span></code>\nMake sure that your programmer’s offset is 0x0.\nFor programming you can use Dediprog SF100 or a similar tool for flashing SPI chips.</p>\n<table class=\"docutils align-center\" id=\"id2\">\n<caption><span class=\"caption-text\">Microchip board wiring</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this table\">¶</a></caption>\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><a class=\"reference internal image-reference\" href=\"../../../../_images/spidongle_assy6791.png\"><img alt=\"SPI DONGLE ASSY 6791\" class=\"align-center\" src=\"../../../../_images/spidongle_assy6791.png\" style=\"width: 300px;\"/></a>\n</td>\n<td><a class=\"reference internal image-reference\" href=\"../../../../_images/spidongle_assy6791_view2.png\"><img alt=\"SPI DONGLE ASSY 6791 view 2\" class=\"align-center\" src=\"../../../../_images/spidongle_assy6791_view2.png\" style=\"width: 300px;\"/></a>\n<div class=\"line-block\">\n<div class=\"line\"><br/></div>\n</div>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/dediprog_connector_2.png\"><img alt=\"SPI DONGLE ASSY 6791 Connected\" class=\"align-center\" src=\"../../../../_images/dediprog_connector_2.png\" style=\"width: 300px;\"/></a>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Remember that SPI MISO/MOSI are swapped on Dediprog headers!\nUse separate wires to connect Dediprog pins with pins on the Assy6791 SPI board.\nWiring connection is described in the table below.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 44%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Dediprog\nConnector</p></th>\n<th class=\"head\"><p>Assy6791\nJ6 Connector</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>VCC</p></td>\n<td><p>1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GND</p></td>\n<td><p>2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CS</p></td>\n<td><p>3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLK</p></td>\n<td><p>4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MISO</p></td>\n<td><p>6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MOSI</p></td>\n<td><p>5</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</li>\n<li><p>Connect UART2 port of the MEC15xxEVB_ASSY_6853 board\nto your host computer using the RS232 cable.</p></li>\n<li><p>Apply power to the board via a micro-USB cable.\nConfigure this option by using a jumper between <code class=\"docutils literal notranslate\"><span class=\"pre\">JP88</span> <span class=\"pre\">7-8</span></code>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/jp88_power_options.png\"><img alt=\"SPI DONGLE ASSY 6791 Connected\" class=\"align-center\" src=\"../../../../_images/jp88_power_options.png\" style=\"width: 400px;\"/></a>\n</li>\n<li><p>Final wiring for the board should look like this:</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mec_board_setup.png\"><img alt=\"SPI DONGLE ASSY 6791 Connected\" class=\"align-center\" src=\"../../../../_images/mec_board_setup.png\" style=\"width: 600px;\"/></a>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic simple\">\n<li><p>Build <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application as you would normally do.</p></li>\n<li><p>The file <code class=\"file docutils literal notranslate\"><span class=\"pre\">spi_image.bin</span></code> will be created if the build system\ncan find the image generation tool. This binary image can be used\nto flash the SPI chip.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Run your favorite terminal program to listen for output.\nUnder Linux the terminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>. Do not close it.</p>\n<p>For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Flash your board using <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span></code> from the second terminal window.\nSplit first and second terminal windows to view both of them.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>west flash\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>When west process started press Reset button and do not release it\ntill the whole west process will not be finished successfully.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/reset_button_1.png\"><img alt=\"SPI DONGLE ASSY 6791 Connected\" class=\"align-center\" src=\"../../../../_images/reset_button_1.png\" style=\"width: 400px;\"/></a>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>If you dont’t want to press Reset button every time, you can disconnect\nSPI Dongle ASSY 6791 from the EVB during the west flash programming.\nThen connect it back to the <code class=\"docutils literal notranslate\"><span class=\"pre\">J44</span></code> header and apply power to the EVB.\nResult will be the same.</p>\n</div>\n</li>\n<li><p>You should see <code class=\"docutils literal notranslate\"><span class=\"pre\">\"Hello</span> <span class=\"pre\">World!</span> <span class=\"pre\">mec15xxevb_assy6853\"</span></code> in the first terminal window.\nIf you don’t see this message, press the Reset button and the message should appear.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This board comes with a Cortex ETM port which facilitates tracing and debugging\nusing a single physical connection.  In addition, it comes with sockets for\nJTAG only sessions.</p>\n</div>\n<div class=\"section\" id=\"troubleshooting\">\n<h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic simple\">\n<li><p>In case you don’t see your application running, please make sure <code class=\"docutils literal notranslate\"><span class=\"pre\">LED7</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">LED8</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">LED1</span></code>\nare lit. If one of these is off, then check the power-related jumpers again.</p></li>\n<li><p>If you can’t program the board using Dediprog, disconnect the Assy6791\nfrom the main board Assy6853 and try again.</p></li>\n<li><p>If Dediprog can’t detect the onboard flash, press the board’s Reset button and try again.</p></li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/Everglades%20EVB%20-%20Assy_6853%20Rev%20A1p1%20-%20SCH.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/Everglades%20EVB%20-%20Assy_6853%20Rev%20A1p1%20-%20SCH.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Socket%20DC%20for%20EVERGLADES%20EVB%20-%20Assy_6883%20Rev%20A0p1%20-%20SCH.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Socket%20DC%20for%20EVERGLADES%20EVB%20-%20Assy_6883%20Rev%20A0p1%20-%20SCH.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/SPI%20Dongles%20and%20Aardvark%20Interposer%20Assy%206791%20Rev%20A1p1%20-%20SCH.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/SPI%20Dongles%20and%20Aardvark%20Interposer%20Assy%206791%20Rev%20A1p1%20-%20SCH.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen\">https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen</a></p>\n</dd>\n<dt class=\"label\" id=\"id13\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id14\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen\">https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen</a></p>\n</dd>\n<dt class=\"label\" id=\"id15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id16\">7</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/DediProgSW/SF100Linux\">https://github.com/DediProgSW/SF100Linux</a></p>\n</dd>\n<dt class=\"label\" id=\"id17\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id18\">8</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.dediprog.com/product/SF100\">https://www.dediprog.com/product/SF100</a></p>\n</dd>\n<dt class=\"label\" id=\"id19\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id20\">9</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.dediprog.com/download/save/727.pdf\">https://www.dediprog.com/download/save/727.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52833dk_nrf52833", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52833 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52833-dk\">\n<span id=\"nrf52833dk-nrf52833\"></span><h1>nRF52833 DK<a class=\"headerlink\" href=\"#nrf52833-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52833 Development Kit (PCA10100) hardware provides\nsupport for the Nordic Semiconductor nRF52833 ARM Cortex-M4F CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52833-DK\">nRF52833 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF52833 DK has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf52833dk_nrf52833 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52833-DK\">nRF52833 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id3\">1</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id6\">2</a>\nfor a complete list of nRF52833 Development Kit board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.13</p></li>\n<li><p>LED2 (green) = P0.14</p></li>\n<li><p>LED3 (green) = P0.15</p></li>\n<li><p>LED4 (green) = P0.16</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.11</p></li>\n<li><p>BUTTON2 = SW2 = P0.12</p></li>\n<li><p>BUTTON3 = SW3 = P0.24</p></li>\n<li><p>BUTTON4 = SW4 = P0.25</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52833dk_nrf52833</span></code> board configuration can be built,\nflashed, and debugged in the usual way. See <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details on building and running.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF52 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52833dk_nrf52833 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf52833-dk\">\n<h2>Testing the LEDs and buttons in the nRF52833 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf52833-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf52833dk_nrf52833/nrf52833dk_nrf52833.dts\">boards/arm/nrf52833dk_nrf52833/nrf52833dk_nrf52833.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"using-uart1\">\n<h2>Using UART1<a class=\"headerlink\" href=\"#using-uart1\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following approach can be used when an application needs to use\nmore than one UART for connecting peripheral devices:</p>\n<ol class=\"arabic\">\n<li><p>Add devicetree overlay file to the main directory of your application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat nrf52833dk_nrf52833.overlay\n<span class=\"go\">&amp;uart1 {</span>\n<span class=\"go\">  compatible = \"nordic,nrf-uarte\";</span>\n<span class=\"go\">  current-speed = &lt;115200&gt;;</span>\n<span class=\"go\">  status = \"okay\";</span>\n<span class=\"go\">  tx-pin = &lt;14&gt;;</span>\n<span class=\"go\">  rx-pin = &lt;16&gt;;</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n<p>In the overlay file above, pin P0.16 is used for RX and P0.14 is used for TX</p>\n</li>\n<li><p>Use the UART1 as <code class=\"docutils literal notranslate\"><span class=\"pre\">device_get_binding(DT_LABEL(DT_NODELABEL(uart1)))</span></code></p></li>\n</ol>\n<p>See <a class=\"reference internal\" href=\"../../../../guides/dts/howtos.html#set-devicetree-overlays\"><span class=\"std std-ref\">Set devicetree overlays</span></a> for further details.</p>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/pdf/nRF52833_OPS_v0.7.pdf\">nRF52833 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a>, chapter 7 ‘Hardware and Layout’.\nIn the table 7.1.1 ‘aQFN73 ball assignments’ select the pins marked\n‘General purpose I/O’.  Note that pins marked as ‘low frequency I/O only’ can only be used\nin under-10KHz applications. They are not suitable for 115200 speed of UART.</p>\n<p>Translate the ‘Pin’ into number for devicetree by using the following formula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id2\">1</a>,<a href=\"#id3\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52833-DK\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52833-DK</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id5\">1</a>,<a href=\"#id6\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/pdf/nRF52833_OPS_v0.7.pdf\">https://infocenter.nordicsemi.com/pdf/nRF52833_OPS_v0.7.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32_min_dev_blue", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "adafruit_feather_m0_basic_proto", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Adafruit Feather M0 Basic Proto</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"adafruit-feather-m0-basic-proto\">\n<span id=\"id1\"></span><h1>Adafruit Feather M0 Basic Proto<a class=\"headerlink\" href=\"#adafruit-feather-m0-basic-proto\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit Feather M0 Basic Proto is a thin, light ARM development\nboard with an onboard battery connector and charger for 3.7 V lithium\npolymer batteries, charging status indicator and user LEDs, native USB\nconnector, 20 I/O pins, and a small prototyping area.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/adafruit_feather_m0_basic_proto.jpg\"><img alt=\"Adafruit Feather M0 Basic Proto\" class=\"align-center\" src=\"../../../../_images/adafruit_feather_m0_basic_proto.jpg\" style=\"width: 640px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21G18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>Battery connector and charger for 3.7 V lithium polymer batteries</p></li>\n<li><p>Charging indicator LED</p></li>\n<li><p>User LED</p></li>\n<li><p>Reset button</p></li>\n<li><p>Native USB port</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The adafruit_feather_m0_basic_proto board configuration supports the\nfollowing hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>Nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>Systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>Inter-Integrated Circuit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/adafruit_feather_m0_basic_proto/adafruit_feather_m0_basic_proto_defconfig\">boards/arm/adafruit_feather_m0_basic_proto/adafruit_feather_m0_basic_proto_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/\">Adafruit Feather M0 Basic Proto Learn site</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> has detailed\ninformation about the board including <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/pinouts\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/downloads\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs.  On the Adafruit Feather M0\nBasic Proto, SERCOM0 is the Zephyr console and is available on pins 0\n(RX) and 1 (TX).</p>\n</div>\n<div class=\"section\" id=\"i2c-port\">\n<h3>I2C Port<a class=\"headerlink\" href=\"#i2c-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs.  On the Adafruit Feather M0\nBasic Proto, SERCOM3 is available on pin 20 (SDA) and pin 21 (SCL).</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs.  On the Adafruit Feather M0\nBasic Proto, SERCOM4 is available on pin 22 (MISO), pin 23 (MOSI), and\npin 24 (SCK).</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit Feather M0 Basic Proto ships with a BOSSA compatible\nSAM-BA bootloader.  The bootloader can be entered by quickly tapping\nthe reset button twice.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_m0_basic_proto samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Adafruit Feather M0 Basic Proto to your host computer\nusing USB</p></li>\n<li><p>Connect a 3.3 V USB to serial adapter to the board and to the\nhost.  See the <a class=\"reference internal\" href=\"#serial-port\">Serial Port</a> section above for the board’s pin\nconnections.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Tap the reset button twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_m0_basic_proto samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/\">https://learn.adafruit.com/adafruit-feather-m0-basic-proto/</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/pinouts\">https://learn.adafruit.com/adafruit-feather-m0-basic-proto/pinouts</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-feather-m0-basic-proto/downloads\">https://learn.adafruit.com/adafruit-feather-m0-basic-proto/downloads</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 8388608}], "main_ram_size": 8388608, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "acrn_ehl_crb", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ram", "size": 1073741824}], "main_ram_size": 1073741824, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "xenvm", "arch": "arm64", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM64 Boards</a> »</li>\n<li>ARMv8 Xen Virtual Machine Example</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"armv8-xen-virtual-machine-example\">\n<h1>ARMv8 Xen Virtual Machine Example<a class=\"headerlink\" href=\"#armv8-xen-virtual-machine-example\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board allows to run Zephyr as Xen guest on any ARMv8 board that supports\nARM Virtualization Extensions. This is example configuration, as almost any VM\nconfiguration is unique in many aspects.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"XenVM\" src=\"../../../../_images/xen_project_logo.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">Xen virtual Guest (Credit: Xen Project)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>It provides minimal set of devices:</p>\n<ul class=\"simple\">\n<li><p>ARM Generic timer</p></li>\n<li><p>GICv2</p></li>\n<li><p>SBSA (subset of PL011) UART controller</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The following hardware features are supported:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 29%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 45%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GIC</p></td>\n<td><p>virtualized</p></td>\n<td><p>interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SBSA UART</p></td>\n<td><p>emulated</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ARM TIMER</p></td>\n<td><p>virtualized</p></td>\n<td><p>system clock</p></td>\n</tr>\n</tbody>\n</table>\n<p>The kernel currently does not support other hardware features on this platform.</p>\n</div>\n<div class=\"section\" id=\"devices\">\n<h3>Devices<a class=\"headerlink\" href=\"#devices\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>This board configuration uses a system clock frequency of 8.32 MHz. This is the\ndefault value, which should be corrected for user’s actual hardware.</p>\n<p>You can determine clock frequency of your ARM Generic Timer by inspecting Xen\nboot log:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">XEN</span><span class=\"p\">)</span> <span class=\"p\">[</span>    <span class=\"mf\">0.147541</span><span class=\"p\">]</span> <span class=\"n\">Generic</span> <span class=\"n\">Timer</span> <span class=\"n\">IRQ</span><span class=\"p\">:</span> <span class=\"n\">phys</span><span class=\"o\">=</span><span class=\"mi\">30</span> <span class=\"n\">hyp</span><span class=\"o\">=</span><span class=\"mi\">26</span> <span class=\"n\">virt</span><span class=\"o\">=</span><span class=\"mi\">27</span> <span class=\"n\">Freq</span><span class=\"p\">:</span> <span class=\"mi\">8320</span> <span class=\"n\">KHz</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>This board configuration uses a single serial communication channel using SBSA\nUART. This is a minimal UART implementation provided by Xen. Xen PV Console is\nnot supported at this moment.</p>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h4>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h4>\n<p>By default, GICv2 is selected. If your hardware is based on GICv3, you can\nconfigure Zephyr to use it, by amending device tree and Kconfig\noption in “xenvm” SoC as well as guest configuration file.</p>\n</div>\n<div class=\"section\" id=\"cpu-core-type\">\n<h4>CPU Core type<a class=\"headerlink\" href=\"#cpu-core-type\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Default core in this configuration is Cortex A72. Depending on yours actual\nhardware you might want to change this option in the same way as Interrupt\nController configuration.</p>\n</div>\n</div>\n<div class=\"section\" id=\"known-problems-or-limitations\">\n<h3>Known Problems or Limitations<a class=\"headerlink\" href=\"#known-problems-or-limitations\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Xen configures guests in runtime by providing device tree that describes guest\nenvironment. On other hand, Zephyr uses static configuration that should be know\nat build time. So there are chances, that Zephyr image created with default\nconfiguration would not boot on your hardware. In this case you need to update\nconfiguration by altering device tree and Kconfig options. This will be covered\nin detail in next section.</p>\n<p>No Xen-specific features are supported at the moment. This includes:</p>\n<ul class=\"simple\">\n<li><p>Xen Enlighten memory page</p></li>\n<li><p>XenBus</p></li>\n<li><p>Xen event channels</p></li>\n<li><p>Xen grant tables</p></li>\n<li><p>Xen PV drivers (including PV console)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"building-and-running\">\n<h2>Building and Running<a class=\"headerlink\" href=\"#building-and-running\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Use this configuration to run basic Zephyr applications and kernel tests as Xen\nguest, for example, with the <a class=\"reference internal\" href=\"../../../../samples/synchronization/README.html#synchronization-sample\"><span class=\"std std-ref\">Synchronization Sample</span></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ west build -b xenvm samples/synchronization\n</pre></div>\n</div>\n<p>This will build an image with the synchronization sample app. Next, you need to\ncreate guest configuration file <code class=\"code docutils literal notranslate\"><span class=\"pre\">zephyr.conf</span></code>. There is example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s2\">\"zephyr.bin\"</span>\n<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"zephyr\"</span>\n<span class=\"n\">vcpus</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"mi\">16</span>\n<span class=\"n\">gic_version</span><span class=\"o\">=</span><span class=\"s2\">\"v2\"</span>\n<span class=\"n\">on_crash</span><span class=\"o\">=</span><span class=\"s2\">\"preserve\"</span>\n<span class=\"n\">vuart</span><span class=\"o\">=</span><span class=\"s2\">\"sbsa_uart\"</span>\n</pre></div>\n</div>\n<p>You need to upload both <code class=\"code docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code> and <code class=\"code docutils literal notranslate\"><span class=\"pre\">zephyr.conf</span></code> to your Dom0\nand then you can run Zephyr by issuing</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ xl create zephyr.conf\n</pre></div>\n</div>\n<p>Next you need to attach to SBSA virtual console:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ xl console -t vuart zephyr\n</pre></div>\n</div>\n<p>You will see Zephyr output:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-1137-g5803ee1e8183  ***</span>\n<span class=\"go\">thread_a: Hello World from cpu 0 on xenvm!</span>\n<span class=\"go\">thread_b: Hello World from cpu 0 on xenvm!</span>\n<span class=\"go\">thread_a: Hello World from cpu 0 on xenvm!</span>\n<span class=\"go\">thread_b: Hello World from cpu 0 on xenvm!</span>\n<span class=\"go\">thread_a: Hello World from cpu 0 on xenvm!</span>\n</pre></div>\n</div>\n<p>Exit xen virtual console by pressing <kbd class=\"kbd compound docutils literal notranslate\"><kbd class=\"kbd docutils literal notranslate\">CTRL</kbd>+<kbd class=\"kbd docutils literal notranslate\">]</kbd></kbd></p>\n</div>\n<div class=\"section\" id=\"updating-configuration\">\n<h2>Updating configuration<a class=\"headerlink\" href=\"#updating-configuration\" title=\"Permalink to this headline\">¶</a></h2>\n<p>As was said earlier, Xen describes hardware using device tree and expects that\nguest will parse device tree in runtime. On other hand, Zephyr supports only\nstatic, build time configuration. While provided configuration should work on\nalmost any ARMv8 host running in aarch64 mode, there is no guarantee, that Xen\nwill not change some values (like RAM base address) in the future.</p>\n<p>Also, frequency of system timer is board specific and should be updated when running\nZephyr xenvm image on new hardware.</p>\n<p>One can make Xen to dump generated DTB by using <code class=\"code docutils literal notranslate\"><span class=\"pre\">LIBXL_DEBUG_DUMP_DTB</span></code>\nenvironment variable, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ LIBXL_DEBUG_DUMP_DTB=domu-libxl.dtb xl create zephyr.conf\n</pre></div>\n</div>\n<p>Then, generated “domu-libxl.dtb” file can be de-compiled using “dtc” tool.</p>\n<p>Use information from de-compiled DTB file to update all related entries in\nprovided “xenvm.dts” file. If memory layout is also changed, you may need to\nupdate <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_SRAM_BASE_ADDRESS</span></code> as well.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<p><a class=\"reference external\" href=\"https://wiki.xenproject.org/wiki/Xen_ARM_with_Virtualization_Extensions\">Xen ARM with Virtualization Extensions</a></p>\n<p><a class=\"reference external\" href=\"https://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html\">xl.conf (guest configuration file) manual</a></p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 1342177280}], "main_ram_size": 1342177280, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "hsdk_2cores", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 24576}], "main_ram_size": 24576, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 1, "instances": [{"label": "PWM_0"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52dk_nrf52810", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52810 emulation on nRF52 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52810-emulation-on-nrf52-dk\">\n<span id=\"nrf52dk-nrf52810\"></span><h1>nRF52810 emulation on nRF52 DK<a class=\"headerlink\" href=\"#nrf52810-emulation-on-nrf52-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nrf52dk_nrf52810 board is a modified version of the <a class=\"reference internal\" href=\"../../nrf52dk_nrf52832/doc/index.html#nrf52dk-nrf52832\"><span class=\"std std-ref\">nRF52 DK</span></a>\nthat enforces the limitations imposed by the nRF52810 IC, which is a\ncost-reduced variant of the original nRF52832. Since Nordic does not offer a\ndevelopment kit for the nRF52810 you can use this board to develop for this\nIC while using the nRF52 Development Kit (PCA10040).</p>\n<p>See <a class=\"reference internal\" href=\"../../nrf52dk_nrf52832/doc/index.html#nrf52dk-nrf52832\"><span class=\"std std-ref\">nRF52 DK</span></a> for more information about the development board and\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52810\">nRF52810 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52810\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52810</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_3"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 4, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_7"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l433rc_p", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L433RC</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l433rc\">\n<span id=\"nucleo-l433rc-board\"></span><h1>ST Nucleo L433RC<a class=\"headerlink\" href=\"#st-nucleo-l433rc\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L433RC board features an ARM Cortex-M4 based STM32L433RC MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo L433RC board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), power LED (LD3), user LED (LD4)</p></li>\n<li><p>One push-button: RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l433rc_p.png\"><img alt=\"Nucleo L433RC\" class=\"align-center\" src=\"../../../../_images/nucleo_l433rc_p.png\" style=\"width: 250px; height: 188px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l433rc-p.html\">Nucleo L433RC-P website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L433RC SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 28 nA Standby mode and 84\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 80 MHz,\n100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>2 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 21 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>11x timers:</p>\n<ul>\n<li><p>1x 16-bit advanced motor-control</p></li>\n<li><p>1x 32-bit and 2x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 83 fast I/Os, most 5 V-tolerant</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 256 KB single bank Flash, proprietary code readout protection</p></li>\n<li><p>64 KB of SRAM including 16 KB with hardware parity check</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>1x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>2x 12-bit DAC output channels, low-power sample and hold</p></li>\n<li><p>1x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>17x communication interfaces</p>\n<ul>\n<li><p>USB 2.0 full-speed crystal less solution with LPM and BCD</p></li>\n<li><p>1x SAI (serial audio interface)</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>4x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>1x LPUART (Stop 2 wake-up)</p></li>\n<li><p>3x SPIs (and 1x Quad SPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32L433RC can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32l433rc.html\">STM32L433RC on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00151940.pdf\">STM32L432 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l433rc_p board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver</p>\n</div>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l433rc_p/nucleo_l433rc_p_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L433RC-P Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l433rc_p_pinout.png\"><img alt=\"Nucleo L433RC-P\" class=\"align-center\" src=\"../../../../_images/nucleo_l433rc_p_pinout.png\" style=\"width: 960px; height: 720px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00387966.pdf\">ST Nucleo L433RC-P User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LPUART_1_TX : PA2</p></li>\n<li><p>LPUART_1_RX : PA3</p></li>\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>I2C_1_SCL : PB6</p></li>\n<li><p>I2C_1_SDA : PB7</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>LD4 : PB13</p></li>\n<li><p>SPI_1: NSS/SCK/MISO/MOSI : PA4/PA5/PA6/PA7</p></li>\n<li><p>SPI_2: NSS/SCK/MISO/MOSI : PA11/PB13/PB14/PB15 (Arduino SPI)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L433RC-P System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L433RC-P board has 4 U(S)ARTs and 1 LPUART. The Zephyr console output is assigned\nto LPUART1. Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l433rc_p</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L433RC-P board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l433rc-p\">\n<h4>Flashing an application to Nucleo L433RC-P<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l433rc-p\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo L433RC-P to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>picocom /dev/ttyACM0 -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l433rc_p samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_l433rc_p\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l433rc_p samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 831488}], "main_flash_size": 831488, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_wb55rg", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ubx_bmd380eval_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>u-blox EVK-BMD-34/48: BMD-380-EVAL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"u-blox-evk-bmd-34-48-bmd-380-eval\">\n<span id=\"ubx-bmd380eval-nrf52840\"></span><h1>u-blox EVK-BMD-34/48: BMD-380-EVAL<a class=\"headerlink\" href=\"#u-blox-evk-bmd-34-48-bmd-380-eval\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-380-EVAL hardware provides support for the\nu-blox BMD-380 Bluetooth 5.0 module, based on The\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/BMD-34-38-EVAL1.png\"><img alt=\"BMD-340-EVAL\" src=\"../../../../_images/BMD-34-38-EVAL1.png\" style=\"width: 600px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BMD-340-EVAL (Credit: u-blox AG)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The BMD-380-EVAL shares the same pin headers and assignments as the\nBMD-340-EVAL with four exceptions. The BMD-340-EVAL is shown here.\nSee the pin tables below for the exceptions.</p>\n</div>\n<p>More information about the BMD-340-EVAL and the BMD-340 module\ncan be found at the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19039467\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. All of the Nordic Semiconductor\nexamples for the nRF52840 DK (nrf52840dk_nrf52840) may be used without\nmodification.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-380 on the BMD-380-EVAL contains an internal high-frequency\noscillator at 32MHz. There is also a low frequency (slow) oscillator\nof 32.768kHz. The BMD-380 itself does not include the slow crystal;\nhowever, the BMD-380-eval does.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>When targeting a custom design without a slow crystal, be sure\nto modify code to utilize the internal RC oscillator for the\nslow clock.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The BMD-380-EVAL board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nIEEE 802.15.4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19039467\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> for a complete list of BMD-380-EVAL\nhardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (red) = P0.13</p></li>\n<li><p>LED2 (red) = P0.14</p></li>\n<li><p>LED3 (green) = P0.15</p></li>\n<li><p>LED4 (green) = P0.16</p></li>\n<li><p>D5 (red) = OB LED 1</p></li>\n<li><p>D6 (green) = OB LED 2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.11</p></li>\n<li><p>BUTTON2 = SW2 = P0.12</p></li>\n<li><p>BUTTON3 = SW3 = P0.24</p></li>\n<li><p>BUTTON4 = SW4 = P0.25</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/bmd-340-eval_pin_out1.png\"><img alt=\"BMD-340-EVAL pin-out\" src=\"../../../../_images/bmd-340-eval_pin_out1.png\" style=\"width: 800px;\"/></a>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The BMD-380-EVAL shares the same pin headers and assignments as the\nBMD-340-EVAL with four exceptions. The BMD-340-EVAL is shown here.\nSee the pin tables below for the exceptions.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The pin numbers noted below are referenced to\nthe pin 1 markings on the BMD-380-EVAL\nfor each header</p>\n</div>\n<p>J-Link Prog Connector (J2)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 67%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>IMCU_TMSS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>IMCU_TCKS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>IMCU_TDOS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>IMCU_TDIS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>IMCU_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug OUT (J3)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>EXT_VTG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>EXT_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>EXT_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>EXT_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>EXT_GND_DETECT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>EXT_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug IN (J26)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>BMD-340_VCC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>BMD-340_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>BMD-340_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>BMD-340_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>BMD-340_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary (J9)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.10 / NFC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.09 / NFC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.05 / AIN3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.01 / XL2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.00 / XL1</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary (J10)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 27%\"/>\n<col style=\"width: 73%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.11 / TRACED[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.12 / TRACED[1]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.16</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.17 / QSPI_CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.18 / RESET</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>P0.19 / QSPI_CLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>P0.20 / QSPI_D0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>P0.21 / QSPI_D1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>P0.22 / QSPI_D2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>P0.23 / QSPI_D3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>P1.00 / TRACED[0]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>P1.09 / TRACED[3]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>No connection</p></td>\n</tr>\n</tbody>\n</table>\n<p>Power (J5)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-380 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>RESET</p></td>\n<td><p>P0.18 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>Analog in (J8)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-380 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>A0</p></td>\n<td><p>P0.03 / AIN1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>A1</p></td>\n<td><p>P0.04 / AIN2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>A2</p></td>\n<td><p>P0.28 / AIN4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>A3</p></td>\n<td><p>P0.29 / AIN5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>A4</p></td>\n<td><p>P0.30 / AIN6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>A5</p></td>\n<td><p>P0.31 / AIN7</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J7)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-380 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D7</p></td>\n<td><p>P1.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>No connection</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D5</p></td>\n<td><p>P1.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D4</p></td>\n<td><p>No connection</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>No connection</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>No connection</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D1 (TX)</p></td>\n<td><p>P1.02</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>No connection</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J6)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-380 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>SCL</p></td>\n<td><p>P0.27</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>SDA</p></td>\n<td><p>P0.26</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>AREF</p></td>\n<td><p>P0.02 / AIN0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P1.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P1.14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P1.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D10 (SS)</p></td>\n<td><p>P1.12</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>D9</p></td>\n<td><p>P1.11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>D8</p></td>\n<td><p>P1.10</p></td>\n</tr>\n</tbody>\n</table>\n<p>J11</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-380 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>RESET</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the BMD-380-EVAL board configurations can\nbe built and flashed in the usual way\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>\nfor more details); however, the standard debugging targets\nare not currently available.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the BMD-380-EVAL\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ubx_bmd380eval_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging\nu-blox boards with a Segger J-LINK-OB IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-bmd-380-eval\">\n<h2>Testing the LEDs and buttons in the BMD-380-EVAL<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-bmd-380-eval\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons\n(switches) and LEDs on the board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running\ncorrectly on your board. The button and LED definitions can be found\nin\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/ubx_bmd340eval_nrf52840/ubx_bmd340eval_nrf52840.dts\">boards/arm/ubx_bmd340eval_nrf52840/ubx_bmd340eval_nrf52840.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"using-uart1\">\n<h2>Using UART1<a class=\"headerlink\" href=\"#using-uart1\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following approach can be used when an application needs to use\nmore than one UART for connecting peripheral devices:</p>\n<ol class=\"arabic\">\n<li><p>Add device tree overlay file to the main directory of your\napplication:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat ubx_bmd380eval_nrf52840.overlay\n<span class=\"go\">&amp;uart1 {</span>\n<span class=\"go\">  compatible = \"nordic,nrf-uarte\";</span>\n<span class=\"go\">  current-speed = &lt;115200&gt;;</span>\n<span class=\"go\">  status = \"okay\";</span>\n<span class=\"go\">  tx-pin = &lt;14&gt;;</span>\n<span class=\"go\">  rx-pin = &lt;16&gt;;</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n<p>In the overlay file above, pin P0.16 is used for RX and P0.14 is\nused for TX</p>\n</li>\n<li><p>Use the UART1 as <code class=\"docutils literal notranslate\"><span class=\"pre\">device_get_binding(\"UART_1\")</span></code></p></li>\n</ol>\n<div class=\"section\" id=\"overlay-file-naming\">\n<h3>Overlay file naming<a class=\"headerlink\" href=\"#overlay-file-naming\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The file has to be named <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;board&gt;.overlay</span></code> and placed in the app\nmain directory to be picked up automatically by the device tree\ncompiler.</p>\n</div>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the data sheet for the BMD-380 at the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19039467\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id5\">1</a>, Section 2\n‘Pin definition’. In the table 3 select the pins marked ‘GPIO’.\nNote that pins marked as ‘Standard drive, low frequency I/O only\n(&lt;10 kH’ can only be used in under-10KHz applications.\nThey are not suitable for 115200 speed of UART.</p>\n<p>Translate ‘Pin’ into number for Device tree by using the following\nformula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>,<a href=\"#id5\">3</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19039467\">https://www.u-blox.com/docs/UBX-19039467</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_E70", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 393216}], "main_ram_size": 393216, "gpio": {"count": 5, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}, {"label": "PORTE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "sam_e70b_xplained", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 16384}], "main_flash_size": 16384, "memory": [{"label": "sram0", "size": 4096}], "main_ram_size": 4096, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f030_demo", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>STM32F030 DEMO BOARD</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"stm32f030-demo-board\">\n<span id=\"stm32f030-demo\"></span><h1>STM32F030 DEMO BOARD<a class=\"headerlink\" href=\"#stm32f030-demo-board\" title=\"Permalink to this headline\">¶</a></h1>\n<p>This board has the bare minimum components required to power on\nthe STM32F030F4P6 MCU. Most of the GPIOs on the STM32 SoC have\nbeen exposed in the external headers with silk screen labels\nthat match the SoC’s pin names.</p>\n<p>For practical use, you’ll need to add additional components\nand circuits using a breadboard, for example.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f030_demo.png\"><img alt=\"STM32F030 DEMO BOARD\" class=\"align-center\" src=\"../../../../_images/stm32f030_demo.png\" style=\"width: 275px; height: 484px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://stm32-base.org/boards/STM32F030F4P6-STM32F030-DEMO-BOARD-V1.1\">stm32-base.org website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n<p>More information about STM32F030F4P6 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00091010.pdf\">STM32F030 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f030f4.pdf\">STM32F030 data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n</ul>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>STM32F030F4P6 ARM Cortex-M0 processor, frequency up to 48 MHz</p></li>\n<li><p>16 KiB of flash memory and 4 KiB of RAM</p></li>\n<li><p>8 MHz quartz crystal</p></li>\n<li><p>1 user LED</p></li>\n<li><p>One reset button</p></li>\n<li><p>2-way jumper (BOOT0)</p></li>\n<li><p>Serial (1x4 male dupont (2.54mm))</p></li>\n<li><p>SWD (1x4 male dupont (2.54mm))</p></li>\n<li><p>USB port (power only)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f030_demo board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f030_demo/stm32f030_demo_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>LED : PA4</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f030_demo</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board can be flashed by using ST-LINKV2 in-circuit debugger and programmer.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f030-demo-board\">\n<h4>Flashing an application to STM32F030 DEMO BOARD<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f030-demo-board\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f030_demo samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f030_demo samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://stm32-base.org/boards/STM32F030F4P6-STM32F030-DEMO-BOARD-V1.1\">https://stm32-base.org/boards/STM32F030F4P6-STM32F030-DEMO-BOARD-V1.1</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00091010.pdf\">https://www.st.com/resource/en/reference_manual/dm00091010.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f030f4.pdf\">https://www.st.com/resource/en/datasheet/stm32f030f4.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 134217728}], "main_ram_size": 134217728, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "em_starterkit_em11d", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "arduino_zero", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Arduino/Genuino Zero</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arduino-genuino-zero\">\n<span id=\"arduino-zero\"></span><h1>Arduino/Genuino Zero<a class=\"headerlink\" href=\"#arduino-genuino-zero\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Arduino Zero is a maker-friendly development board with\nAtmel’s Embedded Debugger (EDBG), which provides a full\ndebug interface without the need for additional hardware.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/arduino_zero.png\"><img alt=\"Arduino Zero\" class=\"align-center\" src=\"../../../../_images/arduino_zero.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21G18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>One reset button</p></li>\n<li><p>On-board USB based EDBG unit with serial console</p></li>\n<li><p>Native USB port</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The arduino_zero board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>Digital to analogue converter</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/arduino_zero/arduino_zero_defconfig\">boards/arm/arduino_zero/arduino_zero_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://store.arduino.cc/genuino-zero\">Arduino store</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed information about board\nconnections. Download the <a class=\"reference external\" href=\"https://www.arduino.cc/en/uploads/Main/Zero_V1.0.pdf\">Arduino Zero Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.  The internal\nAPB and GCLK unit are set up in the same way as the upstream Arduino\nlibraries.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs. One of the USARTs\n(SERCOM5) is connected to the onboard Atmel Embedded Debugger (EDBG).\nSERCOM0 is available on the D0/D1 pins.</p>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 3 TCC based PWM units with up to 4 outputs each and a period\nof 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then LED0 is\ndriven by TCC2 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs.  On the Arduino Zero, SERCOM4\nis available on the 6 pin connector at the edge of the board.</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n<div class=\"section\" id=\"dac\">\n<h3>DAC<a class=\"headerlink\" href=\"#dac\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a single channel DAC with 10 bits of resolution. On the\nArduino Zero, the DAC is available on pin A0.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Arduino Zero comes with a Atmel Embedded Debugger (EDBG).  This\nprovides a debug interface to the SAMD21 chip and is supported by\nOpenOCD.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b arduino_zero samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Arduino Zero to your host computer using the USB debug\nport.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>To flash an image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b arduino_zero samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://store.arduino.cc/genuino-zero\">https://store.arduino.cc/genuino-zero</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.arduino.cc/en/uploads/Main/Zero_V1.0.pdf\">https://www.arduino.cc/en/uploads/Main/Zero_V1.0.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}, {"label": "sram1", "size": 2048}, {"label": "sram2", "size": 2048}], "main_ram_size": 16384, "gpio": {"count": 3, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "faze", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Seagate FireCuda Gaming SSD (FaZe) board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"seagate-firecuda-gaming-ssd-faze-board\">\n<span id=\"faze\"></span><h1>Seagate FireCuda Gaming SSD (FaZe) board<a class=\"headerlink\" href=\"#seagate-firecuda-gaming-ssd-faze-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The FaZe board can be found in the Seagate FireCuda Gaming SSD devices. A NVMe\nSSD and two chips are embedded: an ASMedia ASM2364 USB-to-PCIe bridge controller\nand a NXP LPC11U67 MCU. The former is handling the USB type-C to SSD I/Os while\nthe latter is dedicated to the LED effects. The two chips are connected together\nthrough I2C and GPIOs.</p>\n<p>This Zephyr port is running on the NXP LPC11U67 MCU.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/firecuda-gaming-ssd.jpg\"><img alt=\"Seagate FireCuda Gaming SSD\" class=\"align-center\" src=\"../../../../_images/firecuda-gaming-ssd.jpg\" style=\"width: 1000px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>NXP LPC11U67 MCU (LQFP48 package):</p>\n<ul>\n<li><p>ARM Cortex-M0+</p></li>\n<li><p>20 KB SRAM: 16 KB (SRAM0) + 2 KB (SRAM1) + 2KB (USB SRAM)</p></li>\n<li><p>128 KB on-chip flash</p></li>\n<li><p>4 KB on-chip EEPROM</p></li>\n</ul>\n</li>\n<li><p>External devices connected to the NXP LPC11U67 MCU:</p>\n<ul>\n<li><p>ASMedia ASM2364 USB-to-PCIe bridge (I2C master on port O).</p></li>\n<li><p>6 RGB LEDs connected connected to a TI LP5030 LED controller (I2C device on\nport 1).</p></li>\n<li><p>1 white LED (SSD activity blinking).</p></li>\n</ul>\n</li>\n</ul>\n<p>More information can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1100-cortex-m0-plus-m0/scalable-entry-level-32-bit-microcontroller-mcu-based-on-arm-cortex-m0-plus-and-cortex-m0-cores:LPC11U00\">LPC11UXX SoC Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/LPC11U6X.pdf\">LPC11U6X Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM10732\">LPC11U6X Reference Manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>All the hardware features available on the FaZe board are supported in Zephyr.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IOCON</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock and reset control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c master/slave controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The IOCON controller can be used to configure the LPC11U67 pins.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PIO0_2</p></td>\n<td><p>GPIO</p></td>\n<td><p>ASM2364 interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO0_4</p></td>\n<td><p>I2C0</p></td>\n<td><p>I2C0 SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO0_5</p></td>\n<td><p>I2C0</p></td>\n<td><p>I2C0 SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO0_7</p></td>\n<td><p>I2C1</p></td>\n<td><p>I2C1 SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO0_18</p></td>\n<td><p>UART</p></td>\n<td><p>USART0 RX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO0_19</p></td>\n<td><p>UART</p></td>\n<td><p>USART0 TX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO0_20</p></td>\n<td><p>GPIO</p></td>\n<td><p>USB sleep</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO1_23</p></td>\n<td><p>GPIO</p></td>\n<td><p>SSD activity white LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO1_24</p></td>\n<td><p>I2C1</p></td>\n<td><p>I2C1 SDA</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The NXP LPC11U67 MCU can be flashed by connecting an external debug probe to\nthe SWD port (on-board 4-pins J2 header). In the default OpenOCD configuration\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/faze/support/openocd.cfg</span></code>) the ST Link interface is selected.\nYou may need to replace it with the interface of your debug probe.</p>\n<p>Once the debug probe is connected to both the FaZe board and your host computer\nthen you can simply run the <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code> command to write a firmware image you\nbuilt into flash.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Please refer to the <a class=\"reference internal\" href=\"#flashing\">Flashing</a> section and run the <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> command\ninstead of <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1100-cortex-m0-plus-m0/scalable-entry-level-32-bit-microcontroller-mcu-based-on-arm-cortex-m0-plus-and-cortex-m0-cores:LPC11U00\">LPC11UXX SoC Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/LPC11U6X.pdf\">LPC11U6X Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM10732\">LPC11U6X Reference Manual</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_5"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 7, "instances": [{"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "96b_avenger96", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Avenger96</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-avenger96\">\n<span id=\"b-avenger96\"></span><h1>96Boards Avenger96<a class=\"headerlink\" href=\"#boards-avenger96\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Avenger96 board is based on ST Microelectronics STM32MP157A\nmulti-core processor, composed of a dual Cortex®-A7 and a single Cortex®-M4\ncore. Zephyr OS is ported to run on the Cortex®-M4 core.</p>\n<ul class=\"simple\">\n<li><p>Board features:</p>\n<ul>\n<li><p>PMIC: STPMIC1A</p></li>\n<li><p>RAM: 1024 Mbyte @ 533MHz</p></li>\n<li><p>Storage:</p>\n<ul>\n<li><p>eMMC: v4.51: 8 Gbyte</p></li>\n<li><p>QSPI: 2Mbyte</p></li>\n<li><p>EEPROM: 128 byte</p></li>\n<li><p>microSD Socket: UHS-1 v3.01</p></li>\n</ul>\n</li>\n<li><p>Ethernet: 10/100/1000 Mbit/s, IEEE 802.3 Compliant</p></li>\n<li><p>Wireless:</p>\n<ul>\n<li><p>WiFi: 5 GHz &amp; 2.4GHz IEEE 802.11a/b/g/n/ac</p></li>\n<li><p>Bluetooth: v4.2 (BR/EDR/BLE)</p></li>\n</ul>\n</li>\n<li><p>USB:</p>\n<ul>\n<li><p>Host - 2x type A, 2.0 high-speed</p></li>\n<li><p>OTG: - 1x type micro-AB, 2.0 high-speed</p></li>\n</ul>\n</li>\n<li><p>HDMI: WXGA (1366x768)@ 60 fps, HDMI 1.4</p></li>\n<li><p>Connectors:</p>\n<ul>\n<li><p>40-Pin Low Speed Header</p></li>\n<li><p>60-Pin High Speed Header</p></li>\n</ul>\n</li>\n<li><p>LEDs:</p>\n<ul>\n<li><p>4x Green user LEDs</p></li>\n<li><p>1x Blue Bluetooth LED</p></li>\n<li><p>1x Yellow WiFi LED</p></li>\n<li><p>1x Red power supply LED</p></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_avenger96.png\"><img alt=\"96Boards Avenger96\" class=\"align-center\" src=\"../../../../_images/96b_avenger96.png\" style=\"width: 1027px; height: 1217px;\"/></a>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.96boards.org/product/avenger96/\">96Boards website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32MP157A SoC provides the following hardware capabilities:</p>\n<ul class=\"simple\">\n<li><p>Core:</p>\n<ul>\n<li><p>32-bit dual-core Arm® Cortex®-A7</p>\n<ul>\n<li><p>L1 32-Kbyte I / 32-Kbyte D for each core</p></li>\n<li><p>256-Kbyte unified level 2 cache</p></li>\n<li><p>Arm® NEON™</p></li>\n</ul>\n</li>\n<li><p>32-bit Arm® Cortex®-M4 with FPU/MPU</p>\n<ul>\n<li><p>Up to 209 MHz (Up to 703 CoreMark®)</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Memories:</p>\n<ul>\n<li><p>External DDR memory up to 1 Gbyte.</p></li>\n<li><p>708 Kbytes of internal SRAM: 256 KB of AXI SYSRAM + 384 KB of AHB SRAM +\n64 KB of AHB SRAM in backup domain.</p></li>\n<li><p>Dual mode Quad-SPI memory interface</p></li>\n<li><p>Flexible external memory controller with up to 16-bit data bus</p></li>\n</ul>\n</li>\n<li><p>Clock management:</p>\n<ul>\n<li><p>Internal oscillators: 64 MHz HSI oscillator, 4 MHz CSI oscillator, 32 kHz\nLSI oscillator</p></li>\n<li><p>External oscillators: 8-48 MHz HSE oscillator, 32.768 kHz LSE oscillator</p></li>\n<li><p>6 × PLLs with fractional mode</p></li>\n</ul>\n</li>\n<li><p>General-purpose input/outputs:</p>\n<ul>\n<li><p>Up to 176 I/O ports with interrupt capability</p></li>\n</ul>\n</li>\n<li><p>Interconnect matrix</p></li>\n<li><p>3 DMA controllers</p></li>\n<li><p>Communication peripherals:</p>\n<ul>\n<li><p>6 × I2C FM+ (1 Mbit/s, SMBus/PMBus)</p></li>\n<li><p>4 × UART + 4 × USART (12.5 Mbit/s, ISO7816 interface, LIN, IrDA, SPI slave)</p></li>\n<li><p>6 × SPI (50 Mbit/s, including 3 with full duplex I2S audio class accuracy)</p></li>\n<li><p>4 × SAI (stereo audio: I2S, PDM, SPDIF Tx)</p></li>\n<li><p>SPDIF Rx with 4 inputs</p></li>\n<li><p>HDMI-CEC interface</p></li>\n<li><p>MDIO Slave interface</p></li>\n<li><p>3 × SDMMC up to 8-bit (SD / e•MMC™ / SDIO)</p></li>\n<li><p>2 × CAN controllers supporting CAN FD protocol, TTCAN capability</p></li>\n<li><p>2 × USB 2.0 high-speed Host+ 1 × USB 2.0 full-speed OTG simultaneously</p></li>\n<li><p>10/100M or Gigabit Ethernet GMAC (IEEE 1588v2 hardware, MII/RMII/GMII/RGMI)</p></li>\n<li><p>8- to 14-bit camera interface up to 140 Mbyte/s</p></li>\n<li><p>6 analog peripherals</p></li>\n<li><p>2 × ADCs with 16-bit max. resolution.</p></li>\n<li><p>1 × temperature sensor</p></li>\n<li><p>2 × 12-bit D/A converters (1 MHz)</p></li>\n<li><p>1 × digital filters for sigma delta modulator (DFSDM) with 8 channels/6\nfilters</p></li>\n<li><p>Internal or external ADC/DAC reference VREF+</p></li>\n</ul>\n</li>\n<li><p>Graphics:</p>\n<ul>\n<li><p>3D GPU: Vivante® - OpenGL® ES 2.0</p></li>\n<li><p>LCD-TFT controller, up to 24-bit // RGB888, up to WXGA (1366 × 768) @60 fps</p></li>\n<li><p>MIPI® DSI 2 data lanes up to 1 GHz each</p></li>\n</ul>\n</li>\n<li><p>Timers:</p>\n<ul>\n<li><p>2 × 32-bit timers with up to 4 IC/OC/PWM or pulse counter and quadrature\n(incremental) encoder input</p></li>\n<li><p>2 × 16-bit advanced motor control timers</p></li>\n<li><p>10 × 16-bit general-purpose timers (including 2 basic timers without PWM)</p></li>\n<li><p>5 × 16-bit low-power timers</p></li>\n<li><p>RTC with sub-second accuracy and hardware calendar</p></li>\n<li><p>2 × 4 Cortex®-A7 system timers (secure, non-secure, virtual, hypervisor)</p></li>\n<li><p>1 × SysTick Cortex®-M4 timer</p></li>\n</ul>\n</li>\n<li><p>Hardware acceleration:</p>\n<ul>\n<li><p>HASH (MD5, SHA-1, SHA224, SHA256), HMAC</p></li>\n<li><p>2 × true random number generator (3 oscillators each)</p></li>\n<li><p>2 × CRC calculation unit</p></li>\n</ul>\n</li>\n<li><p>Debug mode:</p>\n<ul>\n<li><p>Arm® CoreSight™ trace and debug: SWD and JTAG interfaces</p></li>\n<li><p>8-Kbyte embedded trace buffer</p></li>\n<li><p>3072-bit fuses including 96-bit unique ID, up to 1184-bit available for user</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32P157A can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/content/st_com/en/products/microcontrollers-microprocessors/stm32-arm-cortex-mpus/stm32mp1-series/stm32mp157/stm32mp157a.html\">STM32MP157A on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/DM00327659.pdf\">STM32MP157A reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_avenger96 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_avenger96/96b_avenger96_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Avenger96 Board schematic is available here:\n<a class=\"reference external\" href=\"https://www.96boards.org/documentation/consumer/avenger96/hardware-docs/files/avenger96-schematics.pdf\">Avenger96 board schematics</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_7 TX/RX/RTS/CTS : PE8/PE7/PE9/PE10 (UART console)</p></li>\n<li><p>UART_4 TX/RX : PD1/PB2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Cortex®-M4 Core is configured to run at a 209 MHz clock speed. This value\nmust match the configured mlhclk_ck frequency.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Avenger96 board has 3 U(S)ARTs. The Zephyr console output is assigned\nby default to the RAM console to be dumped by the Linux Remoteproc Framework\non Cortex®-A7 core. Alternatively, Zephyr console output can be assigned to\nUART7 which is disabled by default. UART console can be enabled through\nboard’s devicetree and 96b_avenger96_defconfig board file (or prj.conf\nproject files), and will disable existing RAM console output. Default UART\nconsole settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32MP157A doesn’t have QSPI flash for the Cortex®-M4  and it needs to be\nstarted by the Cortex®-A7 core. The Cortex®-A7 core is responsible to load the\nCortex®-M4 binary application into the RAM, and get the Cortex®-M4 out of reset.\nThe Cortex®-A7 can perform these steps at bootloader level or after the Linux\nsystem has booted.</p>\n<p>The Cortex®-M4 can use up to 2 different RAMs. The program pointer starts at\naddress 0x00000000 (RETRAM), the vector table should be loaded at this address\nThese are the memory mappings for Cortex®-A7 and Cortex®-M4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 16%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 32%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex®-A7</p></th>\n<th class=\"head\"><p>Cortex®-M4</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>RETRAM</p></td>\n<td><p>0x38000000-0x3800FFFF</p></td>\n<td><p>0x00000000-0x0000FFFF</p></td>\n<td><p>64KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MCUSRAM</p></td>\n<td><p>0x10000000-0x1005FFFF</p></td>\n<td><p>0x10000000-0x1005FFFF</p></td>\n<td><p>384KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0xC0000000-0xFFFFFFFF</p></td>\n<td></td>\n<td><p>up to 1 GB</p></td>\n</tr>\n</tbody>\n</table>\n<p>Refer to <a class=\"reference external\" href=\"https://wiki.st.com/stm32mpu/index.php/Linux_remoteproc_framework_overview#How_to_use_the_framework\">stm32mp157 boot Cortex-M4 firmware</a> wiki page for instruction\nto load and start the Cortex-M4 firmware.</p>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application using OpenOCD and GDB. The Solution proposed below\nis based on the Linux STM32MP1 SDK OpenOCD and is available only for a Linux\nenvironment. The firmware must first be loaded by the Cortex®-A7. Developer\nthen attaches the debugger to the running Zephyr using OpenOCD.</p>\n<div class=\"section\" id=\"prerequisite\">\n<h4>Prerequisite<a class=\"headerlink\" href=\"#prerequisite\" title=\"Permalink to this headline\">¶</a></h4>\n<p>install <a class=\"reference external\" href=\"https://wiki.st.com/stm32mpu/index.php/STM32MP1_Developer_Package#Installing_the_SDK\">stm32mp1 developer package</a>.</p>\n<ol class=\"arabic\">\n<li><p>start OpenOCD in a dedicated terminal</p>\n<ul>\n<li><p>Start up the  sdk environment:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">source</span> <span class=\"o\">&lt;</span><span class=\"n\">SDK</span> <span class=\"n\">installation</span> <span class=\"n\">directory</span><span class=\"o\">&gt;/</span><span class=\"n\">environment</span><span class=\"o\">-</span><span class=\"n\">setup</span><span class=\"o\">-</span><span class=\"n\">cortexa7hf</span><span class=\"o\">-</span><span class=\"n\">neon</span><span class=\"o\">-</span><span class=\"n\">vfpv4</span><span class=\"o\">-</span><span class=\"n\">openstlinux_weston</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnueabi</span>\n</pre></div>\n</div>\n</li>\n<li><p>Start OpenOCD:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>${OECORE_NATIVE_SYSROOT}/usr/bin/openocd -s ${OECORE_NATIVE_SYSROOT}/usr/share/openocd/scripts -f board/stm32mp15x_ev1_jlink_jtag.cfg\n</pre></div>\n</div>\n</li>\n</ul>\n</li>\n<li><p>run gdb in Zephyr environment</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>On Linux\n<span class=\"go\">cd $ZEPHYR_BASE/samples/hello_world</span>\n<span class=\"go\">mkdir -p build &amp;&amp; cd build</span>\n\n<span class=\"gp\"># </span>Use cmake to configure a Ninja-based build system:\n<span class=\"go\">cmake -GNinja -DBOARD=96b_avenger96 ..</span>\n\n<span class=\"gp\"># </span>Now run ninja on the generated build system:\n<span class=\"go\">ninja debug</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 393216}, {"label": "FLASH_1", "size": 655360}], "main_flash_size": 655360, "memory": [{"label": "sram0", "size": 143360}, {"label": "sram1", "size": 4096}, {"label": "sram2", "size": 114688}], "main_ram_size": 143360, "gpio": {"count": 15, "instances": [{"label": "P0"}, {"label": "P1"}, {"label": "P2"}, {"label": "P3"}, {"label": "P4"}, {"label": "P5"}, {"label": "P6"}, {"label": "P7"}, {"label": "P8"}, {"label": "P9"}, {"label": "P10"}, {"label": "P11"}, {"label": "P12"}, {"label": "P13"}, {"label": "P14"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "uart_5"}, {"label": "uart_6"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cy8ckit_062_wifi_bt_m0", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_em7d_v22", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 7, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32wg_stk3800", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFM32WG-STK3800</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efm32wg-stk3800\">\n<span id=\"id1\"></span><h1>EFM32WG-STK3800<a class=\"headerlink\" href=\"#efm32wg-stk3800\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFM32 Wonder Gecko Starter Kit EFM32WG-STK3800 contains a MCU from the\nEFM32WG family built on ARM® Cortex®-M4F processor with excellent low\npower capabilities.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/efm32wg_stk3800.jpg\"><img alt=\"EFM32WG-STK3800\" src=\"../../../../_images/efm32wg_stk3800.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">EFM32WG-STK3800 (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring provides real-time information about the energy\nconsumption of an application or prototype design.</p></li>\n<li><p>32MByte parallel NAND Flash</p></li>\n<li><p>160 segment Energy Micro LCD</p></li>\n<li><p>2 user buttons, 2 LEDs and a touch slider</p></li>\n<li><p>Ambient Light Sensor and Inductive-capacitive metal sensor</p></li>\n<li><p>On-board Segger J-Link USB debugger</p></li>\n</ul>\n<p>For more information about the EFM32WG SoC and EFM32WG-STK3800 board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/products/mcu/32-bit/efm32-wonder-gecko\">EFM32WG Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/documents/public/data-sheets/EFM32WG990.pdf\">EFM32WG Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/documents/public/reference-manuals/EFM32WG-RM.pdf\">EFM32WG Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/products/development-tools/mcu/32-bit/efm32-wonder-gecko-starter-kit\">EFM32WG-STK3800 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/documents/public/user-guides/efm32wg-stk3800-ug.pdf\">EFM32WG-STK3800 User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.silabs.com/documents/public/schematic-files/BRD2400A_A00.pdf\">EFM32WG-STK3800 Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32wg_stk3800oard configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32wg_stk3800/efm32wg_stk3800_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are currently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32WG SoC has six gpio controllers (PORTA to PORTF), but only three are\ncurrently enabled (PORTB, PORTE and PORTF) for the EFM32WG-STK3800 board.</p>\n<p>In the following table, the column Name contains Pin names. For example, PE2\nmeans Pin number 2 on PORTE, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PE2</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PE3</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB9</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB10</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Board Controller Enable\nEFM_BC_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PE0</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console EFM_BC_TX U0_TX #1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PE1</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console EFM_BC_RX U0_RX #1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32WG SoC is configured to use the 48 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32WG SoC has three USARTs, two UARTs and two Low Energy UARTs (LEUART).\nUART0 is connected to the board controller and is used for the console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32WG-STK3800 includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and a\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efm32-stk3800\">\n<h4>Flashing an application to EFM32-STK3800<a class=\"headerlink\" href=\"#flashing-an-application-to-efm32-stk3800\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32wg_stk3800 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFM32WG-STK3800 to your host computer using the USB port and you\nshould see a USB connection which exposes a Mass Storage (STK3800) and a\nUSB Serial Port. Copy the generated zephyr.bin in the STK3800 drive.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you should be able to see on the corresponding Serial Port\nthe following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 645120}, {"label": "flash_reserved", "size": 10240}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 645120, "memory": [{"label": "sramx", "size": 32768}, {"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 65536}, {"label": "sram3", "size": 65536}, {"label": "sram4", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s69_cpu0", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 4, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "96b_argonkey", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Argonkey</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-argonkey\">\n<span id=\"b-argonkey\"></span><h1>96Boards Argonkey<a class=\"headerlink\" href=\"#boards-argonkey\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Argonkey board is based on the ST Microelectronics STM32F412CG\nCortex M4 CPU.</p>\n<p>This board acts as a sensor hub platform for all 96Boards compliant\nfamily products. It can also be used as a standalone board.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_argonkey.jpg\"><img alt=\"96Boards Argonkey\" src=\"../../../../_images/96b_argonkey.jpg\" style=\"width: 540px; height: 558px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Argonkey</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Argonkey provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F412CG in UFQFPN48 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>1.8V work voltage</p></li>\n<li><p>1024 KB Flash</p></li>\n<li><p>256 KB SRAM</p></li>\n<li><p>On board sensors:</p>\n<ul>\n<li><p>Humidity: STMicro HTS221</p></li>\n<li><p>Temperature/Pressure: STMicro LPS22HB</p></li>\n<li><p>ALS: Intersil ISL29034</p></li>\n<li><p>Proximity: STMicro VL53L0X</p></li>\n<li><p>Acclerometer/Gyroscope: STMicro LSM6DSL</p></li>\n<li><p>Geomagnetic: STMicro LIS2MDL</p></li>\n<li><p>AMR Hall sensor: MRMS501A</p></li>\n<li><p>Microphone: STMicro MP34DT05</p></li>\n</ul>\n</li>\n<li><p>2 User LEDs</p></li>\n<li><p>16 General purpose LEDs</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>UART</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (1)</p></li>\n<li><p>I2S (1)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_argonkey board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n</tbody>\n</table>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/steval-mki187v1.html\">ARGONKEY website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n<p>The default board configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_argonkey/96b_argonkey_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User1 LED = PB2</p></li>\n<li><p>LED2 / User2 LED = PC13</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = RST (BT1)</p></li>\n<li><p>BUTTON = USR (BT2)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Argonkey can be driven by an internal oscillator as well as the main\nPLL clock. In default board configuration, the 16MHz external oscillator is\nused to drive the main PLL clock to generate a System Clock (SYSCLK) at 84MHz.\nOn the bus side, AHB clock runs at 84MHz, while APB1/APB2 clock runs at 42MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>On 96Boards Argonkey, Zephyr console output is assigned to USART1.\nDefault settings are 115200 8N1.</p>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Argonkey board has up to 3 I2Cs. The default I2C mapping is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL  : PB6</p></li>\n<li><p>I2C1_SDA  : PB7</p></li>\n<li><p>I2C2_SCL  : PB10</p></li>\n<li><p>I2C2_SDA  : PB9</p></li>\n<li><p>I2C3_SCL  : PA8</p></li>\n<li><p>I2C3_SCL  : PB4</p></li>\n</ul>\n<p>I2C3 goes to the P2 connector and can be used to attach external sensors.\nIt goes to 100Kbit maximum.</p>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Argonkey board has 2 SPIs. SPI1 is used in slave mode as the communication\nbus with the AP. SPI2 is used in master mode to control the LSM6DSL sensor.\nThe default SPI mapping is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS  : PB12</p></li>\n<li><p>SPI2_SCK  : PB13</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for building the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_argonkey samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Argonkey can be flashed by two methods, one using the ROM\nbootloader and another using the SWD debug port (which requires additional\nhardware).</p>\n<p>Flashing using the ROM bootloader requires a special activation pattern,\nwhich can be triggered by using the BOOT0 pin. The ROM bootloader supports\nflashing via USB (DFU), UART, I2C and SPI, but this document describes the\nUART case only. You can read more about how to enable and use the ROM\nbootloader by checking the application note <a class=\"reference external\" href=\"https://www.st.com/resource/en/application_note/cd00167594.pdf\">AN2606</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> .</p>\n<div class=\"section\" id=\"using-rom-bootloader\">\n<h4>Using ROM bootloader:<a class=\"headerlink\" href=\"#using-rom-bootloader\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Hereafter the documents describes basic steps to perform ArgonKey firmware\nflashing on a Linux PC using UART as communication channel.</p>\n<ol class=\"arabic\">\n<li><p>Connect ArgonKey UART to your Linux PC using, for example, a USB-TTL serial\ncable. The flashing procedure has been tested using a <a class=\"reference external\" href=\"http://www.ftdichip.com/Support/Documents/DataSheets/Cables/DS_TTL-232RG_CABLES.pdf\">TTL-232RG</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">5</a> cable with\nFTDI chip. The UART pins on ArgonKey can be found on the P3 low speed\nexpansion connector on the back of the board.</p>\n<ul class=\"simple\">\n<li><p>GND (black)  to ArgonKey GND (P3.1)</p></li>\n<li><p>TXD (orange) to ArgonKey UART0_TXD (P3.5)</p></li>\n<li><p>RXD (yellow) to ArgonKey UART0_RXD (P3.7)</p></li>\n</ul>\n<p>When the USB cable is inserted to the Linux PC the following device will be\ncreated: /dev/ttyUSBx (x is usually ‘0’).</p>\n</li>\n<li><p>Force STM32F412CG to enter in Bootloader mode</p>\n<ul class=\"simple\">\n<li><p>Connect BOOT0 to 1V8 (link P2.1 to P3.30)</p></li>\n<li><p>Press and release the RST button</p></li>\n</ul>\n</li>\n<li><p>Use stm32flash utility to flash the ArgonKey:</p></li>\n</ol>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>stm32flash  -w zephyr.bin -v -g 0x08000000 /dev/ttyUSB0\n</pre></div>\n</div>\n<p>See References section for more info on <a class=\"reference external\" href=\"https://sourceforge.net/p/stm32flash/wiki/Home/\">stm32flash</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"using-swd-debugger\">\n<h4>Using SWD debugger:<a class=\"headerlink\" href=\"#using-swd-debugger\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Select a commercial JTAG/SWD h/w tool and connect it to ArgonKey P4 connector.</p>\n<p>The ArgonKey has been tested using the <a class=\"reference external\" href=\"http://www.st.com/en/development-tools/st-link-v2.html\">ST-LINK/V2</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">4</a> tool. Once that the tool\nis connected to the PC through USB, it presents itself as a USB composite\ndevice with mass storage capability. The device can be then mounted in linux\nand the f/w can be actually copied there and will be automatically flashed by\nthe ST-LINK onto the ArgonKey.</p>\n<p>Example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>mount /dev/sdb /mnt\n<span class=\"gp\">$ </span>cp zephyr.bin /mnt\n<span class=\"gp\">$ </span>umount /mnt\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/steval-mki187v1.html\">https://www.st.com/en/evaluation-tools/steval-mki187v1.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/application_note/cd00167594.pdf\">https://www.st.com/resource/en/application_note/cd00167594.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://sourceforge.net/p/stm32flash/wiki/Home/\">https://sourceforge.net/p/stm32flash/wiki/Home/</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/development-tools/st-link-v2.html\">http://www.st.com/en/development-tools/st-link-v2.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id11\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.ftdichip.com/Support/Documents/DataSheets/Cables/DS_TTL-232RG_CABLES.pdf\">http://www.ftdichip.com/Support/Documents/DataSheets/Cables/DS_TTL-232RG_CABLES.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 36864}], "main_ram_size": 36864, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 7, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_14"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}, {"label": "PWM_15"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_g071rb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo G071RB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-g071rb\">\n<span id=\"nucleo-g071rb-board\"></span><h1>ST Nucleo G071RB<a class=\"headerlink\" href=\"#st-nucleo-g071rb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo G071RB board features an ARM Cortex-M0+ based STM32G071RB MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo G071RB board:</p>\n<ul>\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul class=\"simple\">\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD4), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_g071rb.jpg\"><img alt=\"Nucleo G071RB\" class=\"align-center\" src=\"../../../../_images/nucleo_g071rb.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g071rb.html\">Nucleo G071RB website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo G071RB provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD4), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32G071RB can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g071rb.html\">G071RB on www.st.com</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00371828.pdf\">STM32G071 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_g071rb board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arm memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_g071rb/nucleo_g071rb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PC4/PC5</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PA11/PA12</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PB0/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI : PB12/PB13/PB14/PB15</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD4       : PA5</p></li>\n<li><p>PWM       : PA6</p></li>\n<li><p>ADC1 IN0  : PA0</p></li>\n<li><p>ADC1 IN1  : PA1</p></li>\n<li><p>DAC1_OUT1 : PA4</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00452640.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_g071rb</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G071RB board includes an ST-LINK/V3 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-g071rb\">\n<h4>Flashing an application to Nucleo G071RB<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-g071rb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g071rb samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g071rb samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g071rb.html\">http://www.st.com/en/evaluation-tools/nucleo-g071rb.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00371828.pdf\">http://www.st.com/resource/en/reference_manual/dm00371828.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00452640.pdf\">http://www.st.com/resource/en/user_manual/dm00452640.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g071rb.html\">http://www.st.com/en/microcontrollers/stm32g071rb.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_E70", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 393216}], "main_ram_size": 393216, "gpio": {"count": 5, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}, {"label": "PORTE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "sam_v71_xult", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM V71(B) Xplained Ultra</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-v71-b-xplained-ultra\">\n<span id=\"sam-v71-xplained-ultra\"></span><h1>SAM V71(B) Xplained Ultra<a class=\"headerlink\" href=\"#sam-v71-b-xplained-ultra\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM V71 Xplained Ultra evaluation kit is a development platform to\nevaluate the Atmel SAM V71 series microcontrollers. The current version\nallows to use both IC variations ATSAMV71Q21A(B).</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/sam_v71_xult.jpg\"><img alt=\"SAM V71 Xplained Ultra\" class=\"align-center\" src=\"../../../../_images/sam_v71_xult.jpg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMV71Q21A(B) ARM Cortex-M7 Processor</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Supercap backup</p></li>\n<li><p>AT24MAC402 EEPROM</p></li>\n<li><p>IS42S16100E 16 Mb SDRAM</p></li>\n<li><p>S25FL116K 16 Mb QSPI</p></li>\n<li><p>WM8904 low power stereo audio codec</p></li>\n<li><p>ATA6561 CAN Transceiver</p></li>\n<li><p>SD card connector with SDIO support</p></li>\n<li><p>Camera interface connector</p></li>\n<li><p>MediaLB connector</p></li>\n<li><p>Ethernet port</p></li>\n<li><p>Micro-AB USB device</p></li>\n<li><p>Micro-AB USB debug interface supporting CMSIS-DAP, Virtual COM Port and Data\nGateway Interface (DGI)</p></li>\n<li><p>JTAG interface connector</p></li>\n<li><p>One reset and two user pushbuttons</p></li>\n<li><p>Two yellow user LEDs</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sam_v71_xplained_ultra board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC via AFEC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/sam_v71_xult/sam_v71_xult_defconfig\">boards/arm/sam_v71_xult/sam_v71_xult_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42408-SAMV71-Xplained-Ultra_User-Guide.pdf\">SAMV71-XULT User Guide</a> has detailed information about board\nconnections.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM V71 MCU is configured to use the 12 MHz external oscillator on the\nboard with the on-chip PLL to generate a 300 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ATSAMV71Q21 MCU has five UARTs and three USARTs. USART1 is configured\nfor the console and is available as a Virtual COM Port via EDBG USB chip.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Flashing the Zephyr project onto SAM V71 MCU requires the <a class=\"reference external\" href=\"http://openocd.org/\">OpenOCD tool</a>.\nBy default a factory new SAM V71 chip will boot the <a class=\"reference external\" href=\"https://www.microchip.com/developmenttools/ProductDetails/PartNO/SAM-BA%20In-system%20Programmer\">SAM-BA</a> boot loader\nlocated in the ROM, not the flashed image. This is determined by the value\nof GPNVM1 (General-Purpose NVM bit 1). The flash procedure will ensure that\nGPNVM1 is set to 1 changing the default behavior to boot from Flash.</p>\n<p>If your chip has a security bit GPNVM0 set you will be unable to program flash\nmemory or connect to it via a debug interface. The only way to clear GPNVM0\nis to perform a chip erase procedure that will erase all GPNVM bits and the\nfull contents of the SAM V71 flash memory:</p>\n<ul class=\"simple\">\n<li><p>With the board power off, set a jumper on the J200 header.</p></li>\n<li><p>Turn the board power on. The jumper can be removed soon after the power is\non (flash erasing procedure is started when the erase line is asserted for\nat least 230ms)</p></li>\n</ul>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Connect the SAM V71 Xplained Ultra board to your host computer using the\nUSB debug port. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>\napplication.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_v71_xult samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n<li><p>To use the SoC variation B IC, you need type “sam_v71b_xult”.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_v71b_xult samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n<p>You can flash the image using an external debug adapter such as J-Link\nor ULINK, connected to the 20-pin JTAG header. Supply the name of the\ndebug adapter (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">jlink</span></code>) via an OPENOCD_INTERFACE environment\nvariable. OpenOCD will look for the appropriate interface\nconfiguration in an <code class=\"docutils literal notranslate\"><span class=\"pre\">interface/$(OPENOCD_INTERFACE).cfg</span></code> file on its\ninternal search path.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_v71_xult samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>SAM V71 Product Page:</dt><dd><p><a class=\"reference external\" href=\"https://www.microchip.com/design-centers/32-bit/sam-32-bit-mcus/sam-v-mcus\">https://www.microchip.com/design-centers/32-bit/sam-32-bit-mcus/sam-v-mcus</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l552ze_q", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "96b_neonkey", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Neonkey</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-neonkey\">\n<span id=\"b-neonkey\"></span><h1>96Boards Neonkey<a class=\"headerlink\" href=\"#boards-neonkey\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Neonkey board is based on the STMicroelectronics STM32F411CE\nCortex M4 CPU.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_neonkey.jpg\"><img alt=\"96Boards Neonkey\" src=\"../../../../_images/96b_neonkey.jpg\" style=\"width: 500px; height: 330px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Neonkey</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>This board acts as a sensor hub platform for all 96Boards compliant\nfamily products. It can also be used as a standalone board.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Neonkey provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F411CE in UFQFPN48 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>84 MHz max CPU frequency</p></li>\n<li><p>1.8V work voltage</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>On board sensors:</p>\n<ul>\n<li><p>Temperature/Humidity: SI7034-A10</p></li>\n<li><p>Pressure: BMP280</p></li>\n<li><p>ALS/Proximity: RPR-0521RS</p></li>\n<li><p>Geomagnetic: BMM150</p></li>\n<li><p>Acclerometer/Gyroscope: BMI160</p></li>\n<li><p>AMR Hall sensor: MRMS501A</p></li>\n<li><p>Microphone: SPK0415HM4H-B</p></li>\n</ul>\n</li>\n<li><p>4 User LEDs</p></li>\n<li><p>15 General purpose LEDs</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (1)</p></li>\n<li><p>I2S (1)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_neonkey board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n</tbody>\n</table>\n<p>More details about the board can be found at <a class=\"reference external\" href=\"https://www.96boards.org/product/neonkey/\">96Boards website</a>.</p>\n<p>The default board configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_neonkey/96b_neonkey_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User1 LED = PB12</p></li>\n<li><p>LED2 / User2 LED = PB13</p></li>\n<li><p>LED3 / User3 LED = PB14</p></li>\n<li><p>LED4 / User4 LED = PB15</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = RST (SW1)</p></li>\n<li><p>BUTTON = USR (SW2)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Neonkey can be driven by an internal oscillator as well as the main\nPLL clock. By default System clock is sourced by PLL clock at 84MHz, driven\nby internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>On 96Boards Neonkey Zephyr console output is assigned to USART1.\nDefault settings are 115200 8N1.</p>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Neonkey board has up to 3 I2Cs. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB3</p></li>\n<li><p>I2C3_SCL : PA8</p></li>\n<li><p>I2C3_SCL : PB4</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Neonkey board has one SPI. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for building the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_neonkey samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Neonkey can be flashed by two methods, one using the ROM\nbootloader and another using the SWD debug port (which requires additional\nhardware).</p>\n<div class=\"section\" id=\"using-rom-bootloader\">\n<h4>Using ROM bootloader:<a class=\"headerlink\" href=\"#using-rom-bootloader\" title=\"Permalink to this headline\">¶</a></h4>\n<p>ROM bootloader can be triggered by the following pattern:</p>\n<ol class=\"arabic simple\">\n<li><p>Connect BOOT0 to VDD (link JTAG pins 1 and 5 on P4 header)</p></li>\n<li><p>Press and hold the USR button</p></li>\n<li><p>Press and release the RST button</p></li>\n</ol>\n<p>More detailed information on activating the ROM bootloader can be found in\nChapter 29 of Application note <a class=\"reference external\" href=\"https://www.st.com/resource/en/application_note/cd00167594.pdf\">AN2606</a>. The ROM bootloader supports flashing\nvia UART, I2C and SPI protocols.</p>\n<p>For flashing, <a class=\"reference external\" href=\"https://sourceforge.net/p/stm32flash/wiki/Home/\">stm32flash</a> command line utility can be used. The following\ncommand will flash the <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code> binary to the Neonkey board using UART\nand starts its execution:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>stm32flash -w zephyr.bin -v -g 0x08000000 /dev/ttyS0\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The above command assumes that Neonkey board is connected to\nserial port <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyS0</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-swd-debugger\">\n<h4>Using SWD debugger:<a class=\"headerlink\" href=\"#using-swd-debugger\" title=\"Permalink to this headline\">¶</a></h4>\n<p>For flashing via SWD debug port, 0.1” male header must be soldered at P4\nheader available at the bottom of the board, near RST button.</p>\n<p>Use the <a class=\"reference external\" href=\"https://github.com/blacksphere/blackmagic/wiki\">Black Magic Debug Probe</a> as an SWD programmer, which can\nbe connected to the P4 header using its flying leads and its 20 Pin\nJTAG Adapter Board Kit. When plugged into your host PC, the Black\nMagic Debug Probe enumerates as a USB serial device as documented on\nits <a class=\"reference external\" href=\"https://github.com/blacksphere/blackmagic/wiki/Getting-Started\">Getting started page</a>.</p>\n<p>It also uses the GDB binary provided with the Zephyr SDK,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">arm-zephyr-eabi-gdb</span></code>. Other GDB binaries, such as the GDB from GCC\nARM Embedded, can be used as well.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>arm-zephyr-eabi-gdb -q zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target extended-remote /dev/ttyACM0</span>\n<span class=\"go\">Remote debugging using /dev/ttyACM0</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">monitor swdp_scan</span>\n<span class=\"go\">Target voltage: 1.8V</span>\n<span class=\"go\">Available Targets:</span>\n<span class=\"go\">No. Att Driver</span>\n<span class=\"go\"> 1      STM32F4xx</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">attach 1</span>\n<span class=\"go\">Attaching to Remote target</span>\n<span class=\"go\">0x080005d0 in ?? ()</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>After flashing 96Boards Neonkey, it can be debugged using the same\nGDB instance. To reattach, just follow the same steps above, till\n“attach 1”. You can then debug as usual with GDB. In particular, type\n“run” at the GDB prompt to restart the program you’ve flashed.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 229376}], "main_flash_size": 229376, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIO000_036"}, {"label": "GPIO040_076"}, {"label": "GPIO100_136"}, {"label": "GPIO140_176"}, {"label": "GPIO200_236"}, {"label": "GPIO240_276"}]}, "i2c": {"count": 5, "instances": [{"label": "I2C0"}, {"label": "I2C1"}, {"label": "I2C_SMB_2"}, {"label": "I2C_SMB_3"}, {"label": "I2C_SMB_4"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 9, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mec1501modular_assy6885", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>MEC1501 Modular card ASSY6885</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"mec1501-modular-card-assy6885\">\n<span id=\"mec1501modular-assy6885\"></span><h1>MEC1501 Modular card ASSY6885<a class=\"headerlink\" href=\"#mec1501-modular-card-assy6885\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The MEC1501 Modular card ASSY6885 is a development board to evaluate the Microchip\nMEC152X series microcontrollers. This board can work standalone or be mated with\nany platform that complies with MECC specification.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mec1501modular_assy6885.png\"><img alt=\"MEC1501 Modular ASSY 6885\" class=\"align-center\" src=\"../../../../_images/mec1501modular_assy6885.png\" style=\"width: 600px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MEC1521HA0SZ ARM Cortex-M4 Processor</p></li>\n<li><p>256 KB RAM and 64 KB boot ROM</p></li>\n<li><p>GPIO headers</p></li>\n<li><p>UART1 using microUSB</p></li>\n<li><p>PECI interface 3.0</p></li>\n<li><p>10 SMBUS instances</p></li>\n<li><p>FAN, PMW and TACHO pins</p></li>\n<li><p>VCI interface</p></li>\n<li><p>Independent Hardware Driven PS/2 Ports</p></li>\n</ul>\n<p>At difference from MEC15xx evaluation board, modular MEC1521 exposes the pins\nin 2 different ways:</p>\n<ol class=\"arabic simple\">\n<li><p>Standalone mode via headers</p>\n<ul class=\"simple\">\n<li><p>GPIOs</p></li>\n<li><p>PWM5</p></li>\n<li><p>JTAG/SWD, ETM and MCHP Trace ports</p></li>\n<li><p>eSPI bus</p></li>\n<li><p>SMB0</p></li>\n</ul>\n</li>\n<li><p>Mated mode with another platform that has a high density MECC connector.</p>\n<ul class=\"simple\">\n<li><p>FAN0, PWM0, SMB0, SMB1, SMB4 and SMB5</p></li>\n<li><p>eSPI bus</p></li>\n<li><p>Breathing/Blinking LEDs</p></li>\n</ul>\n</li>\n</ol>\n<p>The board is powered through the +5V USB Micro A connector or from the MECC connector.</p>\n<p>For more information about the SOC please see the <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf\">MEC152x Reference Manual</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mec1501modular_assy6885 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ESPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>espi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTOS</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PS2</p></td>\n<td><p>on-chip</p></td>\n<td><p>ps2</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr (at the moment)</p>\n<p>The default configuration can be found in the\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/mec1501modular_assy6885/mec1501modular_assy6885_defconfig\">boards/arm/mec1501modular_assy6885/mec1501modular_assy6885_defconfig</a>\nKconfig file.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This evaluation board kit is comprised of the following HW blocks:</p>\n<ul class=\"simple\">\n<li><p>MEC1501 Modular Card ASSY 6885 Rev A0 <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Modular%20EC%20Card%20-%20Assy_6885%20Rev%20A0p1%20-%20SCH.pdf\">MEC1501 Modular EC Card - Assy_6885 Rev A0p1</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MEC1501 MCU is configured to use the 48Mhz internal oscillator with the\non-chip PLL to generate a resulting EC clock rate of 12 MHz. See Processor clock\ncontrol register in chapter 4 “4.0 POWER, CLOCKS, and RESETS” of the data sheet in\nthe references at the end of this document.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>UART1 is configured for serial logs.</p>\n</div>\n</div>\n<div class=\"section\" id=\"jumper-settings\">\n<h2>Jumper settings<a class=\"headerlink\" href=\"#jumper-settings\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Please follow the jumper settings below to properly demo this\nboard. Advanced users may deviate from this recommendation.</p>\n<div class=\"section\" id=\"jumper-setting-for-mec1501-modular-assy-6885-rev-a1p0\">\n<h3>Jumper setting for MEC1501 Modular Assy 6885 Rev A1p0<a class=\"headerlink\" href=\"#jumper-setting-for-mec1501-modular-assy-6885-rev-a1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"power-related-jumpers\">\n<h4>Power-related jumpers<a class=\"headerlink\" href=\"#power-related-jumpers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>If you wish to power from type A/B connector <code class=\"docutils literal notranslate\"><span class=\"pre\">P10</span></code> set the jumper <code class=\"docutils literal notranslate\"><span class=\"pre\">JP35</span> <span class=\"pre\">1-2</span></code>.</p>\n<p>If you wish to power through MECC connector <code class=\"docutils literal notranslate\"><span class=\"pre\">P1</span></code> and mate to external platform,\nset the jumper to <code class=\"docutils literal notranslate\"><span class=\"pre\">JP35</span> <span class=\"pre\">3-4</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>A single jumper is required in JP35.</p>\n</div>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 19%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP30\nVTR3</p></th>\n<th class=\"head\"><p>JP31\nVTR_PLL</p></th>\n<th class=\"head\"><p>JP32\nVTR_REG</p></th>\n<th class=\"head\"><p>JP33\nVTR1</p></th>\n<th class=\"head\"><p>JP34\nVTR2</p></th>\n<th class=\"head\"><p>JP40\n3.3V</p></th>\n<th class=\"head\"><p>JP21\nVREF_ADC</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 35%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 29%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP6\nVBAT</p></th>\n<th class=\"head\"><p>JP36\nVTR_ANALOG</p></th>\n<th class=\"head\"><p>JP27\nPECI</p></th>\n<th class=\"head\"><p>JP4\nVREF_VTT</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>2-3</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n<td><p>open</p></td>\n</tr>\n</tbody>\n</table>\n<p>These jumpers configure nRESETI and JTAG_STRAP respectively.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 42%\"/>\n<col style=\"width: 58%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP22\n(nRESETI)</p></th>\n<th class=\"head\"><p>JP29\n(JTAG_STRAP)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>11-12</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"boot-rom-straps\">\n<h4>Boot-ROM Straps<a class=\"headerlink\" href=\"#boot-rom-straps\" title=\"Permalink to this headline\">¶</a></h4>\n<p>These jumpers configure MEC1501 Boot-ROM straps.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 25%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP37\n(CMP_STRAP)</p></th>\n<th class=\"head\"><p>J6\n(CR_STRAP)</p></th>\n<th class=\"head\"><p>JP41\n(VTR2_STRAP)</p></th>\n<th class=\"head\"><p>JP23\n(BSS_STRAP)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>3-4</p></td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">JP23</span> <span class=\"pre\">3-4</span></code> pulls SHD SPI CS0# up to VTR2. MEC1501 Boot-ROM samples\nSHD SPI CS0# and if high, it loads code from SHD SPI.\nThis is the recommended setup.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>CR_STRAP</p></td>\n<td><p>BSS_STRAP</p></td>\n<td><p>SOURCE</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>0</p></td>\n<td><p>X</p></td>\n<td><p>Use 3.3V Private SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>Use eSPI Flash channel</p></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td><p>1</p></td>\n<td><p>Use 3.3V Shared channel(R)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"power-management\">\n<h4>Power management<a class=\"headerlink\" href=\"#power-management\" title=\"Permalink to this headline\">¶</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">JP20</span> <span class=\"pre\">2-3</span></code> is required so all GPIOs powered by VTR3 rail worked at 1.8V.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>External 1.8V needs to be connected to JP13.1</p>\n</div>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 53%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP20\n(VTR3 selection)</p></th>\n<th class=\"head\"><p>JP13\n(1.8V source)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>2-3</p></td>\n<td><p>1.8V to pin 1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"jumper-location-map\">\n<h4>Jumper location map<a class=\"headerlink\" href=\"#jumper-location-map\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>+--------------------------------------------------------------------------------------+\n|                  |------------|                     +----------+ J10              || |\n|  [BT1]       +   +------------+ J50                                      ++   ++  || |\n|              |                                           JP38 JP43       ++   ||  || |\n|              +         +      +       +-+ JP4              +    +       JP26  ||  || |\n|             JP6        +      +                  +      +  + +  + +           ||  || |\n|    JP31 ++            JP32   JP36     +-+ JP27   +      +    +    +           J6  || |\n|                                                 JP18  JP37 JP41 JP42              ++ |\n|         ++                  +   +    +--------+                                  J48 |\n|         ||  JP21            +   +    +--------+ JP22    +----------+                 |\n|      J2 ||   +            JP34 JP30                         J11              ++      |\n|         ++   +                                                  J44          ||      |\n|                            ++                         +----------------+     ||      |\n|       +---------------+    ||  +        JP24          |----------------|     ++      |\n|       |---------------|    ++  +    +----------+      +----------------+    J47      |\n| JP20  +---------------+  JP23  JP40 +----------+                                  ++ |\n|                                                     +           ++ JP29           || |\n|                             +  +    +----------+    +                             || |\n|    J52+---------------+     +  +    +----------+   J5   +-------------+           ++ |\n|    J45+---------------+  JP33 TP57      JP25            +-------------+ J4       J49 |\n|                                                                                      |\n| ++                                           TP4   +----------+   ++                 |\n| ++     +    +      +    +    +       +  TP61         +----------+   ++               |\n| JP28   +    +      +    +    +  TP65 +  TP60            J51        JP35              |\n|      TP58 JP16   JP11 JP13 JP15     JP10                                             |\n| TP5                                                                                  |\n| TP6                                        TP1                                       |\n+--------------------------------------------------------------------------------------+\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"setup\">\n<h3>Setup<a class=\"headerlink\" href=\"#setup\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Clone the <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen\">MEC152x SPI Image Gen</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a> repository or download the files within\nthat directory. For the pre-production MEC150x use the <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen\">MEC150x SPI Image Gen</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">4</a>\nrepository.</p></li>\n<li><p>Make the image generation available for Zephyr, by making the tool\nsearchable by path, or by setting an environment variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">EVERGLADES_SPI_GEN</span></code>, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export EVERGLADES_SPI_GEN=&lt;path to tool&gt;/everglades_spi_gen_RomE</span>\n</pre></div>\n</div>\n<p>Note that the tools for Linux and Windows have different file names.\nFor the pre-production MEC1501 SOC use everglades_spi_gen_lin64.</p>\n</li>\n<li><p>If needed, a custom SPI image configuration file can be specified\nto override the default one.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export EVERGLADES_SPI_CFG=custom_spi_cfg.txt</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic simple\">\n<li><p>Build <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application as you would normally do.</p></li>\n<li><p>Once you have <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code>, use the <a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen\">MEC152x SPI Image Gen</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">3</a> microchip tool\nto create the final binary. You need the output from this tool to flash\nin the SHD SPI memory.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Connect Dediprog into header <code class=\"docutils literal notranslate\"><span class=\"pre\">J2</span></code>.</p></li>\n<li><p>Flash the SPI NOR <code class=\"docutils literal notranslate\"><span class=\"pre\">U3</span></code> at offset 0x0 using Dediprog SF100\nor a similar tool for flashing SPI chips.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Connect the MEC1501MODULAR_ASSY6885 board to your host computer using the\nUART1 port and apply power.</p>\n<p>You should see <code class=\"docutils literal notranslate\"><span class=\"pre\">\"Hello</span> <span class=\"pre\">World!</span> <span class=\"pre\">mec1501modular_assy6885\"</span></code> in your terminal.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This board comes with a Cortex ETM port which facilitates tracing and debugging\nusing a single physical connection.  In addition, it comes with sockets for\nJTAG only sessions.</p>\n</div>\n<div class=\"section\" id=\"hw-issues\">\n<h3>HW Issues<a class=\"headerlink\" href=\"#hw-issues\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In case you don’t see your application running, please make sure <code class=\"docutils literal notranslate\"><span class=\"pre\">LED1</span></code> is lit.\nIf is off, then check the power related jumpers again.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC152x/MEC152x_Datasheet.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Modular%20EC%20Card%20-%20Assy_6885%20Rev%20A0p1%20-%20SCH.pdf\">https://github.com/MicrochipTech/CPGZephyrDocs/blob/master/MEC1501/MEC1501%20Modular%20EC%20Card%20-%20Assy_6885%20Rev%20A0p1%20-%20SCH.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">3</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen\">https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC152x/SPI_image_gen</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen\">https://github.com/MicrochipTech/CPGZephyrDocs/tree/master/MEC1501/SPI_image_gen</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 5, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efr32_radio_brd4180a", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f103rb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F103RB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f103rb\">\n<span id=\"nucleo-f103rb-board\"></span><h1>ST Nucleo F103RB<a class=\"headerlink\" href=\"#st-nucleo-f103rb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32F103RB MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f103rb.jpg\"><img alt=\"Nucleo F103RB\" class=\"align-center\" src=\"../../../../_images/nucleo_f103rb.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f103rb.html\">Nucleo F103RB website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F103RB provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F103RB can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/cd00171190.pdf\">STM32F103 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f103rb.pdf\">STM32F103 data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f103rb board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f103rb/nucleo_f103rb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f103rb_connectors.png\"><img alt=\"Nucleo F103RB connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f103rb_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 SCK/MISO/MOSI : PB12/PB13/PB14/PB15</p></li>\n<li><p>I2C1 SDA/SCL: PB9/PB8 (Arduino I2C)</p></li>\n<li><p>PWM1_CH1: PA8</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PA5</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f103rb</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F103RB board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f103rb\">\n<h4>Flashing an application to Nucleo F103RB<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f103rb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f103rb samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f103rb samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f103rb.html\">http://www.st.com/en/evaluation-tools/nucleo-f103rb.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/cd00171190.pdf\">http://www.st.com/resource/en/reference_manual/cd00171190.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f103rb.pdf\">http://www.st.com/resource/en/datasheet/stm32f103rb.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32_min_dev_black", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f070rb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F070RB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f070rb\">\n<span id=\"nucleo-f070rb-board\"></span><h1>ST Nucleo F070RB<a class=\"headerlink\" href=\"#st-nucleo-f070rb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32F070RB MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f070rb.jpg\"><img alt=\"Nucleo F070RB\" class=\"align-center\" src=\"../../../../_images/nucleo_f070rb.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f070rb.html\">Nucleo F070RB website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F070RB provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F070RB can be found in\nthe <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">STM32F070 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> .</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f070rb board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>SPI controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f070rb/nucleo_f070rb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f070rb_connectors.png\"><img alt=\"Nucleo F070RB connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f070rb_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB11</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 SCK/MISO/MOSI : PB13/PB14/PB15</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PA5</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f070rb</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F070RB board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f070rb\">\n<h4>Flashing an application to Nucleo F070RB<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f070rb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f070rb samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f070rb samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f070rb.html\">http://www.st.com/en/evaluation-tools/nucleo-f070rb.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">http://www.st.com/resource/en/reference_manual/dm00031936.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 196608}, {"label": "ccm0", "size": 65536}], "main_ram_size": 196608, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32f429i_disc1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F429I Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f429i-discovery\">\n<span id=\"stm32f429i-disc1-board\"></span><h1>ST STM32F429I Discovery<a class=\"headerlink\" href=\"#st-stm32f429i-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F429I-DISC1 Discovery kit features an ARM Cortex-M4 based STM32F429ZI MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the STM32F429I-DISC1 board:</p>\n<ul>\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Extension header for all LQFP144 I/Os for quick connection to prototyping board and easy probing</p></li>\n<li><p>On-board ST-LINK/V2-B debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>ST-LINK/V2-1 USB connector</p></li>\n<li><p>User USB FS connector</p></li>\n<li><p>VIN from Arduino* compatible connectors</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB OTG FS with micro-AB connector</p></li>\n<li><p>2.4-inch QVGA LCD with MIPI DSI interface and capacitive touch screen</p></li>\n<li><p>64Mbit SDRAM</p></li>\n<li><p>L3GD20, ST-MEMS motion sensor 3-axis digital output gyroscope</p></li>\n<li><p>Six LEDs</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>LD1 (red/green) for USB communication</p></li>\n<li><p>LD2 (red) for 3.3 V power-on</p></li>\n<li><p>Two user LEDs: LD3 (green), LD4 (red)</p></li>\n<li><p>Two USB OTG LEDs: LD5 (green) VBUS and LD6 (red) OC (over-current)</p></li>\n</ul>\n</div></blockquote>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f429i_disc1.png\"><img alt=\"STM32F429I-DISC1\" class=\"align-center\" src=\"../../../../_images/stm32f429i_disc1.png\" style=\"width: 350px; height: 631px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f429idiscovery.html\">STM32F429I-DISC1 website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F429I-DISC1 Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F429ZIT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>180 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>256+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (17)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (4/4)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (6)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>8- to 14-bit parallel camera</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F429ZI can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f429-439.html\">STM32F429ZI on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/content/ccc/resource/technical/document/reference_manual/3d/6d/5a/66/b4/99/40/d4/DM00031020.pdf/files/DM00031020.pdf/jcr:content/translations/en.DM00031020.pdf\">STM32F429 Reference Manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f429i_disc1 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FMC</p></td>\n<td><p>on-chip</p></td>\n<td><p>memc (SDRAM)</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f429i_disc1/stm32f429i_disc1_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F429I-DISC1 Discovery kit has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/web/en/resource/technical/document/user_manual/DM00097320.pdf\">STM32F429I-DISC1 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PG13</p></li>\n<li><p>LD4 : PG12</p></li>\n<li><p>I2C_1_SCL : PB8</p></li>\n<li><p>I2C_1_SDA : PB9</p></li>\n<li><p>I2C_2_SCL : PB10</p></li>\n<li><p>I2C_2_SDA : PB11</p></li>\n<li><p>I2C_3_SCL : PA8</p></li>\n<li><p>I2C_3_SDA : PC9</p></li>\n<li><p>SPI_5_CS : PF6</p></li>\n<li><p>SPI_5_SCK : PF7</p></li>\n<li><p>SPI_5_MISO : PF8</p></li>\n<li><p>SPI_5_MOSI : PF9</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F429I-DISC1 System Clock could be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default the system clock is driven by the PLL clock at 168MHz,\ndriven by an 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F429I-DISC1 Discovery kit has up to 8 UARTs. The Zephyr console output is assigned to UART1.\nThe default communication settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f429i_disc1</span></code> board configuration can be built\nand flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F429I-DISC1 Discovery kit includes a ST-LINK/V2-B embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f429i-disc1\">\n<h4>Flashing an application to STM32F429I-DISC1<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f429i-disc1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F429I-DISC1 Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f429i_disc1 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then, press the RESET button (The black one), you should see the following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f429i_disc1 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 4, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f412zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F412ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f412zg\">\n<span id=\"nucleo-f412zg-board\"></span><h1>ST Nucleo F412ZG<a class=\"headerlink\" href=\"#st-nucleo-f412zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F412ZG board features an ARM Cortex-M4 based STM32F412ZG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F412ZG board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>ST Zio connector including: support for Arduino* Uno V3 connectivity\n(A0 to A5, D0 to D15) and additional signals exposing a wide range of\nperipherals</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>Three user LEDs</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<img alt=\"Nucleo F412ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_f412zg.png\"/>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f412zg.html\">Nucleo F412ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F412ZG provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F412ZGT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>256 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels, with FIFO and burst support</p></li>\n<li><p>RTC</p></li>\n<li><p>14 General purpose timers</p></li>\n<li><p>2 watchdog timers (independent and window)</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>USART/UART (4)</p></li>\n<li><p>I2C (4)</p></li>\n<li><p>SPI (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>CRC calculation unit</p></li>\n</ul>\n<p>More information about STM32F412ZG can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f412zg.html\">STM32F412ZG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00180369.pdf\">STM32F412 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_412zg board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f412zg/nucleo_f412zg_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F412ZG Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f412zg_zio_left.png\"><img alt=\"Nucleo F412ZG ZIO connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f412zg_zio_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f412zg_zio_right.png\"><img alt=\"Nucleo F412ZG ZIO connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f412zg_zio_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f412zg_morpho_left.png\"><img alt=\"Nucleo F412ZG Morpho connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f412zg_morpho_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f412zg_morpho_right.png\"><img alt=\"Nucleo F412ZG Morpho connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f412zg_morpho_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For more details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F412ZG System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 96MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F412ZG board has 4 UARTs. The Zephyr console output is assigned to UART3.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"network-interface\">\n<h4>Network interface<a class=\"headerlink\" href=\"#network-interface\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Ethernet over USB is configured as the default network interface</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F412ZG board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "96b_wistrio", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 645120}, {"label": "flash_reserved", "size": 10240}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 645120, "memory": [{"label": "sramx", "size": 32768}, {"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 65536}, {"label": "sram3", "size": 65536}, {"label": "sram4", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s69_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "dtcm", "size": 131072}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "OTG_FS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_h753zi", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo H753ZI</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-h753zi\">\n<span id=\"nucleo-h753zi-board\"></span><h1>ST Nucleo H753ZI<a class=\"headerlink\" href=\"#st-nucleo-h753zi\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 boards offer combinations of performance and power that\nprovide an affordable and flexible way for users to build prototypes and try\nout new concepts. For compatible boards, the SMPS (Switched-Mode Power Supply)\nsignificantly reduces power consumption in Run mode.</p>\n<p>The Arduino-compatible ST Zio connector expands functionality of the Nucleo\nopen development platform, with a wide choice of specialized Arduino* Uno V3\nshields.</p>\n<p>The STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK/V2-1 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p></li>\n</ul>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB with Micro-AB</p></li>\n<li><p>SWD</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>ST Zio connector including Arduino* Uno V3</p></li>\n<li><p>ST morpho</p></li>\n</ul>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources.</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration</p></li>\n<li><p>capability: mass storage, virtual COM port and debug port.</p></li>\n<li><p>Comprehensive free software libraries and examples available with the\nSTM32Cube MCU package.</p></li>\n<li><p>Arm* Mbed Enabled* compliant (only for some Nucleo part numbers)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_h753zi.jpg\"><img alt=\"Nucleo H753ZI\" class=\"align-center\" src=\"../../../../_images/nucleo_h753zi.jpg\" style=\"width: 720px; height: 533px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-h753zi.html\">Nucleo H753ZI website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo H753ZI provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32H753ZI in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>Hardware JPEG Codec</p></li>\n<li><p>480 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.62 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>1 MB SRAM</p></li>\n<li><p>High-resolution timer (2.1 ns)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>16-bit timers(12)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN-FD(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO (up to 114) with external interrupt capability</p></li>\n<li><p>16-bit ADC(3) with 36 channels / 3.6 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n<li><p>Cryptographic acceleration: AES 128, 192, 256, TDES, HASH (MD5, SHA-1, SHA-2), HMAC</p></li>\n<li><p>Secure firmware upgrade support, Secure access mode</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_h753zi board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random number generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb_device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_h753zi/nucleo_h753zi_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo H753ZI board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n<li><p>ADC1_INP15 : PA3</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14PA5/PA6/PB5 (Arduino SPI)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H753ZI System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 96MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H753ZI board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_h753zi</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>If using OpenOCD you will need a recent development version as the last\nofficial release does not support H7 series yet. You can also choose the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stm32cubeprogrammer</span></code> runner.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo H753ZI board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-h753zi\">\n<h4>Flashing an application to Nucleo H753ZI<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-h753zi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h753zi samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_h753zi\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h753zi samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_hs", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "steval_fcu001v1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32 Flight Controller Unit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32-flight-controller-unit\">\n<span id=\"steval-fcu001v1\"></span><h1>ST STM32 Flight Controller Unit<a class=\"headerlink\" href=\"#st-stm32-flight-controller-unit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STEVAL-FCU001V1 is a Cortex M4 MCU-based flight controller unit for toy quad-copter drones.</p>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/steval_fcu001v1.jpg\"><img alt=\"STM32 Flight Controller Unit\" src=\"../../../../_images/steval_fcu001v1.jpg\" style=\"width: 753px; height: 699px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32 Flight Controller Unit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F401CC in UFQFPN48 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 MCU with FPU</p></li>\n<li><p>84MHz max MCU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>256 KB FLASH</p></li>\n<li><p>64 KB SRAM</p></li>\n<li><p>General Purpose Timers</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>On board sensors:</p>\n<ul>\n<li><p>3D Accelerometer and 3D Gyroscope: LSM6DSL</p></li>\n<li><p>3D Magnetometer: LIS2MDL</p></li>\n<li><p>MEMS Pressure sensor: LPS22HD</p></li>\n</ul>\n</li>\n<li><p>2 User LEDS</p></li>\n<li><p>USART/UART (1)</p></li>\n<li><p>I2C (1)</p></li>\n<li><p>Bluetooth LE over SPI</p></li>\n</ul>\n<p>More information about the STM32 Flight Controller Unit\ncan be found in these documents:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/steval-fcu001v1.html\">STEVAL_FCU001V1 website</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00096844.pdf\">STM32F401 reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32f401cc.html\">STM32F401CC on www.st.com</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr steval_fcu001v1 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/steval_fcu001v1/steval_fcu001v1_defconfig</span></code></p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB3</p></li>\n<li><p>PWM_2_CH1    : PA0</p></li>\n<li><p>LD1          : PB5</p></li>\n<li><p>LD2          : PB4</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The steval_fcu001v1 system clock can be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default, the system clock is driven by the PLL clock at 84MHz,\ndriven by a 16MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The steval_fcu001v1 board has one UART. The Zephyr console output is assigned to UART1.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h3>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The steval_fcu001v1 board has one I2C. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB3</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">steval_fcu001v1</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Flashing Zephyr onto the steval_fcu001v1 board requires an external ST-LINK/V2-1 programmer.\nThe programmer is attached to the P8 programming header with ARM-JTAG-20-10-Plug-in Adapter.</p>\n<div class=\"section\" id=\"flashing-an-application-to-steval-fcu001v1\">\n<h4>Flashing an application to STEVAL_FCU001V1<a class=\"headerlink\" href=\"#flashing-an-application-to-steval-fcu001v1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the FT232-to-USB port to host system, and RX, TX, Gnd pins to\nthe P7 header of the steval_fcu001v1 board.  Then run a serial host\nprogram to connect with your steval_fcu001v1 via the FT232 board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b steval_fcu001v1 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! steval_fcu001v1</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b steval_fcu001v1 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "v2m_musca_s1_nonsecure", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f0_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F0 Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f0-discovery\">\n<span id=\"stm32f0-disco-board\"></span><h1>ST STM32F0 Discovery<a class=\"headerlink\" href=\"#st-stm32f0-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F0 Discovery development board uses an STM32F051R8T6 MCU and\nintegrates the ST-LINK/V2-1 debugger and programmer.  It also comes with a\ncomprehensive STM32 software HAL library and various packaged software\nexamples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f0_disco.jpg\"><img alt=\"STM32F0DISCOVERY\" class=\"align-center\" src=\"../../../../_images/stm32f0_disco.jpg\" style=\"width: 350px; height: 404px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32f0discovery.html\">STM32F0DISCOVERY website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Discovery board features:</p>\n<ul>\n<li><p>STM32F051R8T6 microcontroller featuring 64 KB Flash memory, 8 KB RAM in an\nLQFP64 package</p></li>\n<li><p>On-board ST-LINK/V2 with selection mode switch to use the kit as a standalone\nST-LINK/V2 (with SWD connector for programming and debugging)</p></li>\n<li><p>Board power supply: through USB bus or from an external 5 V supply voltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>Four LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>LD1 (red) for 3.3 V power on</p></li>\n<li><p>LD2 (red/green) for USB communication</p></li>\n<li><p>LD3 (green) for PC9 output</p></li>\n<li><p>LD4 (blue) for PC8 output</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push buttons (user and reset)</p></li>\n<li><p>Extension header for all LQFP64 I/Os for quick connection to prototyping board\nand easy probing</p></li>\n<li><p>An additional board is provided which can be connected to the extension\nconnector for even easier prototyping and probing.</p></li>\n<li><p>Comprehensive free software including a variety of examples, part of\nSTM32CubeF0 package or STSW-STM32049 for legacy Standard Libraries usage</p></li>\n</ul>\n<p>More information about STM32F051R8 can be found in the <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">STM32F0x8 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f0_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f0_disco/stm32f0_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00050135.pdf\">STM32F0DISCOVERY board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f0_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F0DISCOVERY board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f030r8\">\n<h4>Flashing an application to Nucleo F030R8<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f030r8\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f0_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f0_disco samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32f0discovery.html\">http://www.st.com/en/evaluation-tools/stm32f0discovery.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">http://www.st.com/resource/en/reference_manual/dm00031936.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00050135.pdf\">http://www.st.com/resource/en/user_manual/dm00050135.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 7, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}]}, "dac": {"count": 2, "instances": [{"label": "DAC_1"}, {"label": "DAC_3"}]}, "pwm": {"count": 10, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_g431rb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo G431RB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-g431rb\">\n<span id=\"nucleo-g431rb-board\"></span><h1>ST Nucleo G431RB<a class=\"headerlink\" href=\"#st-nucleo-g431rb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo G431RB board features an ARM Cortex-M4 based STM32G431RB MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo G431RB board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>On-board ST-LINK/V3E debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), power LED (LD3), user LED (LD2)</p></li>\n<li><p>Two push-buttons: RESET and USER</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_g431rb.jpg\"><img alt=\"Nucleo G431RB\" class=\"align-center\" src=\"../../../../_images/nucleo_g431rb.jpg\" style=\"width: 426px; height: 256px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g431rb.html\">Nucleo G431RB website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32G431RB SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 28 nA Standby mode and 84\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 170 MHz</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator (HSE)</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>2 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>14x timers:</p>\n<ul>\n<li><p>1x 32-bit timer and 2x 16-bit timers with up to four IC/OC/PWM or pulse counter and quadrature (incremental) encoder input</p></li>\n<li><p>2x 16-bit 8-channel advanced motor control timers, with up to 8x PWM channels, dead time generation and emergency stop</p></li>\n<li><p>1x 16-bit timer with 2x IC/OCs, one OCN/PWM, dead time generation and emergency stop</p></li>\n<li><p>2x 16-bit timers with IC/OC/OCN/PWM, dead time generation and emergency stop</p></li>\n<li><p>2x watchdog timers (independent, window)</p></li>\n<li><p>2x 16-bit basic timers</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>1x low-power timer</p></li>\n</ul>\n</li>\n<li><p>Up to 86 fast I/Os, most 5 V-tolerant</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 128 KB single bank Flash, proprietary code readout protection</p></li>\n<li><p>Up to 22 KB of SRAM including 16 KB with hardware parity check</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>2x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>4x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>3x operational amplifiers with built-in PGA</p></li>\n<li><p>4x ultra-fast rail-to-rail analog comparators</p></li>\n</ul>\n</li>\n<li><p>16x communication interfaces</p>\n<ul>\n<li><p>1 x FDCAN controller supporting flexible data rate</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>4x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>1x LPUART</p></li>\n<li><p>3x SPIs (2x with multiplexed half duplex I2S interface)</p></li>\n<li><p>1x SAI (serial audio interface)</p></li>\n<li><p>USB 2.0 full-speed interface with LPM and BCD support</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n<li><p>USB Type-C™ /USB power delivery controller (UCPD)</p></li>\n</ul>\n</li>\n<li><p>12-channel DMA controller</p></li>\n<li><p>True random number generator (RNG)</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32G431RB can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g431rb.html\">STM32G431RB on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00355726.pdf\">STM32G4 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_g431rb board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_g431rb/nucleo_g431rb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G431RB Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00556337.pdf\">STM32G4 Nucleo-64 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PC4</p></li>\n<li><p>UART_1_RX : PC5</p></li>\n<li><p>LPUART_1_TX : PA2</p></li>\n<li><p>LPUART_1_RX : PA3</p></li>\n<li><p>I2C_1_SCL : PB8</p></li>\n<li><p>I2C_1_SDA : PB9</p></li>\n<li><p>SPI_1_NSS : PB6</p></li>\n<li><p>SPI_1_SCK : PA5</p></li>\n<li><p>SPI_1_MISO : PA6</p></li>\n<li><p>SPI_1_MOSI : PA7</p></li>\n<li><p>SPI_2_NSS : PB12</p></li>\n<li><p>SPI_2_SCK : PB13</p></li>\n<li><p>SPI_2_MISO : PB14</p></li>\n<li><p>SPI_2_MOSI : PB15</p></li>\n<li><p>SPI_3_NSS : PA15</p></li>\n<li><p>SPI_3_SCK : PC10</p></li>\n<li><p>SPI_3_MISO : PC11</p></li>\n<li><p>SPI_3_MOSI : PC12</p></li>\n<li><p>PWM_3_CH1 : PB4</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD2 : PA5</p></li>\n<li><p>DAC1_OUT1 : PA4</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo G431RB System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 150MHz,\ndriven by 16MHz high speed internal oscillator. The clock can be boosted to 170MHz if boost mode\nis selected.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo G431RB board has 3 U(S)ARTs and one LPUART. The Zephyr console output is assigned to LPUART1.\nDefault settings are 115200 8N1.</p>\n<p>Please note that LPUART1 baudrate is limited to 9600 if the MCU is clocked by LSE (32.768 kHz) in\nlow power mode.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_g431rb</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G431RB board includes an ST-LINK/V3E embedded debug tool interface.</p>\n<p>This interface is not yet supported by the openocd version included in the Zephyr SDK.</p>\n<p>Instead, support can be enabled on pyocd by adding “pack” support with\nthe following pyocd command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd pack --update\n<span class=\"gp\">$ </span>pyocd pack --install stm32g431rb\n</pre></div>\n</div>\n<p>Note:\nTo manually enable the openocd interface, You can still update, compile and install\na ‘local’ openocd from the official openocd repo <a class=\"reference external\" href=\"http://openocd.zylin.com\">http://openocd.zylin.com</a> .\nThen run the following openocd command where the ‘/usr/local/bin/openocd’is your path\nfor the freshly installed openocd, given by “$ which openocd” :</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>west flash --openocd /usr/local/bin/openocd\n</pre></div>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-g431rb\">\n<h4>Flashing an application to Nucleo G431RB<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-g431rb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo G431RB to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g431rb samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g431rb samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 33554432}], "main_flash_size": 33554432, "memory": [{"label": "sram0", "size": 67108864}], "main_ram_size": 67108864, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mercury_xu", "arch": "arm", "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32f4_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F4 Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f4-discovery\">\n<span id=\"stm32f4-disco-board\"></span><h1>ST STM32F4 Discovery<a class=\"headerlink\" href=\"#st-stm32f4-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F4DISCOVERY Discovery kit features an ARM Cortex-M4 based STM32F407VG MCU\nwith a wide range of connectivity support and configurations Here are\nsome highlights of the STM32F4DISCOVERY board:</p>\n<ul>\n<li><p>STM32 microcontroller in LQFP100 package</p></li>\n<li><p>Extension header for all LQFP100 I/Os for quick connection to prototyping board and easy probing</p></li>\n<li><p>On-board ST-LINK/V2 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Eight LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB communication (LD1)</p></li>\n<li><p>3.3 V power on (LD2)</p></li>\n<li><p>Four user LEDs: orange (LD3), green (LD4), red (LD5), and blue (LD6)</p></li>\n<li><p>2 USB OTG LEDs for VBUS (LD7) and over-current (LD8)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB OTG FS with micro-AB connector</p></li>\n<li><p>LIS302DL or LIS3DSH ST MEMS 3-axis accelerometer</p></li>\n<li><p>MP45DT02 ST-MEMS audio sensor omni-directional digital microphone</p></li>\n<li><p>CS43L22 audio DAC with integrated class D speaker driver</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f4_disco.jpg\"><img alt=\"STM32F4DISCOVERY\" class=\"align-center\" src=\"../../../../_images/stm32f4_disco.jpg\" style=\"width: 350px; height: 550px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32f4discovery.html\">STM32F4DISCOVERY website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F4DISCOVERY Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F407VGT6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>168 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>192+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (17)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (6)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>8- to 14-bit parallel camera</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F407VG can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f407vg.html\">STM32F407VG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031020.pdf\">STM32F407 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f4_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>CAN controller</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver, such as <a class=\"reference external\" href=\"http://skpang.co.uk/catalog/canbus-can-fd-breakout-board-5v-p-242.html\">SK Pang CAN breakout board</a>.\nZephyr default configuration uses CAN_2 exclusively, as simultaneous use\nof CAN_1 and CAN_2 is not yet supported.</p>\n</div>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f4_disco/stm32f4_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F4DISCOVERY Discovery kit has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00039084.pdf\">STM32F4DISCOVERY board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PD13</p></li>\n<li><p>LD4 : PD12</p></li>\n<li><p>LD5 : PD14</p></li>\n<li><p>LD6 : PD15</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>CAN1_RX : PB8</p></li>\n<li><p>CAN1_TX : PB9</p></li>\n<li><p>CAN2_RX : PB5</p></li>\n<li><p>CAN2_TX : PB13</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F4DISCOVERY System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 168MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F4DISCOVERY Discovery kit has up to 6 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.\nPlease note that ST-Link Virtual Com Port is not wired to chip serial port. In order to\nenable console output you should use a serial cable and connect it to UART2 pins (PA2/PA3).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f4_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F4DISCOVERY Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f4discovery\">\n<h4>Flashing an application to STM32F4DISCOVERY<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f4discovery\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f4_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see user led “LD4” blinking.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f4_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 3, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_5"}, {"label": "GPIO_2"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1010_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1010-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1010-evk\">\n<span id=\"mimxrt1010-evk\"></span><h1>NXP MIMXRT1010-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1010-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1010 offers a new entry-point into the i.MX RT crossover processor\nseries by providing the lowest-cost LQFP package option, combined with the\nhigh performance and ease-of-use known throughout the entire i.MX RT series.\nThis device is fully supported by NXP’s MCUXpresso Software and Tools.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1010_evk.jpg\"><img alt=\"MIMXRT1010-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1010_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1011DAE5A MCU</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>128 Mbit QSPI Flash</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>Micro USB host and OTG connectors</p></li>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>Audio Codec</p></li>\n<li><p>4-pole audio headphone jack</p></li>\n<li><p>External speaker connection</p></li>\n<li><p>Microphone</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 10-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the MIMXRT1010 SoC and MIMXRT1010-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/imxrt1010\">i.MX RT1010 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMXRT1010CEC.pdf\">i.MX RT1010 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1010RM\">i.MX RT1010 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/MIMXRT1010-EVK\">MIMXRT1010-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1010EVKHUG\">MIMXRT1010-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/printed-circuit-boards/IMXRT1010-EVK-DESIGN-FILES.7z\">MIMXRT1010-EVK Design Files</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1010_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1010_evk/mimxrt1010_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1010 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_11</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_10</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_09</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_01</p></td>\n<td><p>LPI2C1_SDA</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_02</p></td>\n<td><p>LPI2C1_CLK</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1010 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 500 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1010 SoC has four UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console,\nand the remaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"jlink-external-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 10-pin connector to J55. Check that jumpers J61 and J62 are\n<strong>off</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are disconnected from the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J31 and J32 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J41.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1010_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW9 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! mimxrt1010_evk</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "olimex_stm32_p405", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>OLIMEX-STM32-P405</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"olimex-stm32-p405\">\n<span id=\"id1\"></span><h1>OLIMEX-STM32-P405<a class=\"headerlink\" href=\"#olimex-stm32-p405\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-P405 board is based on the STMicroelectronics STM32F405RG ARM\nCortex-M4 CPU.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex_stm32_p405.png\"><img alt=\"OLIMEX-STM32-P405\" src=\"../../../../_images/olimex_stm32_p405.png\" style=\"width: 540px; height: 454px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-P405</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-P405/\">OLIMEX-STM32-P405 website</a> and <a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-P405/resources/STM32-P405_UM.pdf\">OLIMEX-STM32-P405 user manual</a>.\nThe <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031020.pdf\">ST STM32F405RG Datasheet</a> contains the processor’s\ninformation and the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The olimex_stm32_p405 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex-stm32-p405-front.png\"><img alt=\"OLIMEX-STM32-P405 connectors\" src=\"../../../../_images/olimex-stm32-p405-front.png\" style=\"width: 739px; height: 530px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-P405 connectors</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>USER_LED (red) = PC12</p></li>\n<li><p>PWR_LED (red) = power</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>USER_BUTTON = PA0</p></li>\n<li><p>RST = NRST</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>JTAG debug</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>+3.3V</p></td>\n<td><p>12</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PB4 / TRST</p></td>\n<td><p>13</p></td>\n<td><p>PB3 / TDO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>14</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PA15 / TDI</p></td>\n<td><p>15</p></td>\n<td><p>PB4 / TRST</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PA13 / TMS</p></td>\n<td><p>17</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>GND</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA14 / TCK</p></td>\n<td><p>19</p></td>\n<td><p>+5V_JTAG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>GND</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>UEXT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 50%\"/>\n<col style=\"width: 35%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Wire   Name</p></th>\n<th class=\"head\"><p>STM32F405 port</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PA9/USART1_TX</p></td>\n<td><p>PA9</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PA10/USART1_RX</p></td>\n<td><p>PA10</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PB6/I2C1_SCL</p></td>\n<td><p>PB6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PB7/I2C1_SDA</p></td>\n<td><p>PB7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PA6/SPI1_MISO</p></td>\n<td><p>PA6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PA7/SPI1_MOSI</p></td>\n<td><p>PA7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA5/SPI1_SCK</p></td>\n<td><p>PA5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PA4/SPI1_NSS</p></td>\n<td><p>PA4</p></td>\n</tr>\n</tbody>\n</table>\n<p>GPIO row of pins</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 16%\"/>\n<col style=\"width: 84%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>STM32F405 Pin Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>3V3</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PA1</p></td>\n<td><p>PA1/USART2_RTS/ADC1/TIM2_CH2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA8</p></td>\n<td><p>PA8/USART1_CK/TIM1_CH1/MCO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB0</p></td>\n<td><p>PB0/ADC8/TIM3_CH3/TIM1_CH2N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB1</p></td>\n<td><p>PB1/ADC9/TIM3_CH4/TIM1_CH3N</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB2</p></td>\n<td><p>PB2/BOOT1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB5</p></td>\n<td><p>PB5/I2C1_SMBAI/TIM3_CH2/SPI1_MOSI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB8</p></td>\n<td><p>PB8/TIM4_CH3/I2C1_SCL/CANRX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB9</p></td>\n<td><p>PB9/TIM4_CH4/I2C1_SDA/CANTX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VDDA</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GNDA</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB10</p></td>\n<td><p>PB10/I2C2_SCL/USART3_TX/TIM2_CH3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB11</p></td>\n<td><p>PB11/I2C2_SDA/USART3_RX/TIM2_CH4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB12</p></td>\n<td><p>PB12/SPI2_NSS/I2C2_SMBAL/USART3_CK/TIM1_BKIN</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB13</p></td>\n<td><p>PB13/SPI2_SCK/USART3_CTS/TIM1_CH1N</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB14</p></td>\n<td><p>PB14/SPI2_MISO/USART3_RTS/TIM1_CH2N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB15</p></td>\n<td><p>PB15/SPI2_MOSI/TIM1_CH3N</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RST</p></td>\n<td><p>NRST</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC0</p></td>\n<td><p>PC0/ADC10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC1</p></td>\n<td><p>PC1/ADC11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC2</p></td>\n<td><p>PC2/ADC12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC3</p></td>\n<td><p>PC3/ADC13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC4</p></td>\n<td><p>PC4/ADC14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC5</p></td>\n<td><p>PC5/ADC15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC6</p></td>\n<td><p>PC6/TIM3_CH1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC7</p></td>\n<td><p>PC7/TIM3_CH2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC8</p></td>\n<td><p>PC8/TIM3_CH3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC9</p></td>\n<td><p>PC9/TIM3_CH4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC10</p></td>\n<td><p>PC10/USART3_TX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC12</p></td>\n<td><p>PC12/USART3_CK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC13</p></td>\n<td><p>PC13/ANTI_TAMP</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD2</p></td>\n<td><p>PD2/TIM3_ETR</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>+5V_USB</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VIN</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEX-STM32-P405 has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 8 MHz. The processor can setup HSE to drive the master clock,\nwhich can be set as high as 168 MHz.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-P405 board does not include an embedded debug tool\ninterface. You will need to use ST tools or an external JTAG probe.\nIn the following examples a ST-Link V2 USB dongle is used.</p>\n<div class=\"section\" id=\"flashing-an-application-to-the-olimex-stm32-p405\">\n<h3>Flashing an application to the Olimex-STM32-P405<a class=\"headerlink\" href=\"#flashing-an-application-to-the-olimex-stm32-p405\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is being used in this tutorial.</p>\n<p>Connect the ST-Link USB dongle to your host computer and to the JTAG port of\nthe OLIMEX-STM32-P405 board.</p>\n<p>Now build and flash the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_p405 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>After resetting the board, you should see the following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** BOOTING ZEPHYR OS v1.8.99 - BUILD: Aug  4 2017 14:54:40 *****</span>\n<span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_p405 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 393216}, {"label": "FLASH_1", "size": 655360}], "main_flash_size": 655360, "memory": [{"label": "sram0", "size": 143360}, {"label": "sram1", "size": 4096}, {"label": "sram2", "size": 114688}], "main_ram_size": 143360, "gpio": {"count": 15, "instances": [{"label": "P0"}, {"label": "P1"}, {"label": "P2"}, {"label": "P3"}, {"label": "P4"}, {"label": "P5"}, {"label": "P6"}, {"label": "P7"}, {"label": "P8"}, {"label": "P9"}, {"label": "P10"}, {"label": "P11"}, {"label": "P12"}, {"label": "P13"}, {"label": "P14"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "uart_5"}, {"label": "uart_6"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cy8ckit_062_wifi_bt_m4", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ubx_bmd300eval_nrf52832", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>u-blox EVK-BMD-30/35: BMD-300-EVAL, BMD-301-EVAL, and BMD-350-EVAL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"u-blox-evk-bmd-30-35-bmd-300-eval-bmd-301-eval-and-bmd-350-eval\">\n<span id=\"ubx-bmd300eval-nrf52832\"></span><h1>u-blox EVK-BMD-30/35: BMD-300-EVAL, BMD-301-EVAL, and BMD-350-EVAL<a class=\"headerlink\" href=\"#u-blox-evk-bmd-30-35-bmd-300-eval-bmd-301-eval-and-bmd-350-eval\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-300-EVAL, BMD-301-EVAL, and BMD-350-EVAL hardware provides\nsupport for the u-blox BMD-300, BMD-301, and BMD-350 Bluetooth 5\nmodules, based on the Nordic Semiconductor nRF52832 ARM Cortex-M4F\nCPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/BMD-30-33-35-36-EVAL.png\"><img alt=\"BMD-300-EVAL\" src=\"../../../../_images/BMD-30-33-35-36-EVAL.png\" style=\"width: 593px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BMD-300-EVAL (Credit: u-blox AG)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The BMD-300-EVAL, BMD-301-EVAL, and BMD-350-EVAL share the same\npin headers and assignments. The boards are different only in\nthe module used on the board. The BMD-300 and BMD-301 modules\nshare the same footprint and differ only in the antenna. The\nBMD-350 module utilizes the nRF52832 CIAA WLCSP package.</p>\n</div>\n<p>More information about the BMD-300-EVAL, BMD-301-EVAL, and\nBMD-350-EVAL and the respective modules can be found at the\n<a class=\"reference external\" href=\"https://www.u-blox.com/en/product/bmd-3035-series-open-cpu\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>. All of the Nordic Semiconductor examples for\nthe nRF52 DK (nrf52dk_nrf52832) may be used without modification.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-300/301/350 module on the board contains an internal\nhigh-frequency oscillator at 32MHz. There is also a low frequency\n(slow) oscillator of 32.768kHz. The module itself does not include\nthe slow crystal; however, the EVAL boards do.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>When targeting a custom design without a slow crystal,\nbe sure to modify code to utilize the internal RC\noscillator for the slow clock.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The BMD-300/301/350-EVAL configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee the <a class=\"reference external\" href=\"https://www.u-blox.com/en/product/bmd-3035-series-open-cpu\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id5\">1</a> for a complete list of\nBMD-300/301/350-EVAL hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (red) = P0.17</p></li>\n<li><p>LED2 (red) = P0.18</p></li>\n<li><p>LED3 (green) = P0.19</p></li>\n<li><p>LED4 (green) = P0.20</p></li>\n<li><p>D5 (red) = OB LED 1</p></li>\n<li><p>D6 (green) = OB LED 2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.13</p></li>\n<li><p>BUTTON2 = SW2 = P0.14</p></li>\n<li><p>BUTTON3 = SW3 = P0.15</p></li>\n<li><p>BUTTON4 = SW4 = P0.16</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/bmd-300-eval_pin_out.png\"><img alt=\"BMD-300-EVAL pin-out\" src=\"../../../../_images/bmd-300-eval_pin_out.png\" style=\"width: 659px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BMD-300-EVAL pin-out (Credit: u-blox AG)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The BMD-300-EVAL, BMD-301-EVAL, and BMD-350-EVAL share\nthe same pin headers and assignments.\nThe BMD-300-EVAL is shown here.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The pin numbers noted below are referenced to\nthe pin 1 markings on the BMD-300/301/350-EVAL\nfor each header</p>\n</div>\n<p>J-Link Prog Connector (J2)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 67%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>IMCU_TMSS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>IMCU_TCKS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>IMCU_TDOS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>IMCU_TDIS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>IMCU_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug OUT (J3)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>EXT_VTG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>EXT_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>EXT_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>EXT_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>EXT_GND_DETECT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>EXT_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary (J9)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.09</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.05 / AIN3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.01 / XL2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>P0.00 / XL1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Power (J5)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-300/301/350 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>RESET</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>Analog in (J8)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-300/301/350 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>A0</p></td>\n<td><p>P0.03 / AIN1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>A1</p></td>\n<td><p>P0.04 / AIN2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>A2</p></td>\n<td><p>P0.28 / AIN4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>A3</p></td>\n<td><p>P0.29 / AIN5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>A4</p></td>\n<td><p>P0.30 / AIN6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>A5</p></td>\n<td><p>P0.31 / AIN7</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J7)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-300/301/350 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D7</p></td>\n<td><p>P0.18/TRACEDATA[0]/SWO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D6</p></td>\n<td><p>P0.17</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D5</p></td>\n<td><p>P0.16/TRACEDATA[1]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D4</p></td>\n<td><p>P0.15/TRACEDATA[2]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D3</p></td>\n<td><p>P0.14/TRACEDATA[3]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D2</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D1 (TX)</p></td>\n<td><p>P0.12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D0 (RX)</p></td>\n<td><p>P0.11</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J6)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-300/301/350 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>SCL</p></td>\n<td><p>P0.27</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>SDA</p></td>\n<td><p>P0.26</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>AREF</p></td>\n<td><p>P0.02/AIN0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.23</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D10 (SS)</p></td>\n<td><p>P0.22</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>D9</p></td>\n<td><p>P0.20/TRACECLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>D8</p></td>\n<td><p>P0.19</p></td>\n</tr>\n</tbody>\n</table>\n<p>J11</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-300/301/350 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.23</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>RESET</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the\nBMD-300/301/350-EVAL can be found. For example, under Linux,\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ubx_bmd300eval_nrf52832 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging\nu-blox boards with a Segger J-LINK-OB IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-bmd-330-eval\">\n<h2>Testing the LEDs and buttons in the BMD-330-EVAL<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-bmd-330-eval\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons\n(switches) and LEDs on the board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is\nrunning correctly on your board. The button and LED definitions\ncan be found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/ubx_bmd300eval_nrf52832/ubx_bmd300eval_nrf52832.dts\">boards/arm/ubx_bmd300eval_nrf52832/ubx_bmd300eval_nrf52832.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id4\">1</a>,<a href=\"#id5\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.u-blox.com/en/product/bmd-3035-series-open-cpu\">https://www.u-blox.com/en/product/bmd-3035-series-open-cpu</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 67108864}], "main_flash_size": 67108864, "memory": [{"label": "sram0", "size": 3145728}], "main_ram_size": 3145728, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 2, "instances": [{"label": "FLEXSPI"}, {"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mimxrt685_evk_cm33", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 3, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 2, "instances": [{"label": "USART_0"}, {"label": "USART_1"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "sam4s_xplained", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM4S Xplained</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam4s-xplained\">\n<span id=\"id1\"></span><h1>SAM4S Xplained<a class=\"headerlink\" href=\"#sam4s-xplained\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM4S Xplained evaluation kit is a development platform to evaluate the\nAtmel SAM4S series microcontrollers.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/sam4s_xplained.png\"><img alt=\"SAM4S Xplained\" class=\"align-center\" src=\"../../../../_images/sam4s_xplained.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAM4S16C ARM Cortex-M4 Processor</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>internal 32.768 kHz crystal oscillator</p></li>\n<li><p>IS66WV51216DALL 8 Mb SRAM</p></li>\n<li><p>Micro-AB USB device</p></li>\n<li><p>Micro-AB USB debug interface supporting SEGGER OB and Virtual COM Port and\nData</p></li>\n<li><p>One reset and one user pushbutton</p></li>\n<li><p>2 yellow user LEDs</p></li>\n<li><p>IC pads for external flash chip</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sam4s_xplained board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/sam4s_xplained/sam4s_xplained_defconfig\">boards/arm/sam4s_xplained/sam4s_xplained_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Download the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4S-XPLD__KitsFiles.zip\">SAM4S Xplained Design Files</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> for more information. It has\nfull schematic and gerbers files.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM4S MCU is configured to use the 12 MHz internal oscillator on the board\nwith the on-chip PLL to generate an 84 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ATSAM4S16C MCU has 2 UARTs and 2 USARTs. One of the UARTs (UART0) is\nconnected to the Segger J-Link OB chip (the AT91SAM3U4 is programmed to be\nSegger J-Link OB). Segger J-Link OB brings the UART out as a virtual COM port.\nThe section flashing uses the UART from the Segger USB debug connection.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM4S Xplained board comes with Segger <a class=\"reference external\" href=\"https://www.segger.com/jlink-ob.html\">J-Link OB</a>. This provides a debug\ninterface to the SAM4S16C chip. You can use Ozone or JLink to communicate with\nthe SAM4S16C.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>For flash the board Zephyr provides two paths.  One uses the default JLink\ntool and the second one uses <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#atmel-sam-ba-bootloader\"><span class=\"std std-ref\">SAM Boot Assistant (SAM-BA)</span></a>.</p>\n<div class=\"section\" id=\"using-jlink\">\n<h4>Using JLink<a class=\"headerlink\" href=\"#using-jlink\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Download JLink from the Segger <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">JLink Downloads Page</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. Go to the section\n“J-Link Software and Documentation Pack” and install the “J-Link Software\nand Documentation pack for Linux”. The application JLinkExe needs to be\naccessible from your path.</p></li>\n<li><p>Connect the SAM4S Xplained board to your host computer using the USB debug\nport. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4s_xplained samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"using-sam-ba-bootloader\">\n<h4>Using SAM-BA bootloader<a class=\"headerlink\" href=\"#using-sam-ba-bootloader\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Close the <code class=\"docutils literal notranslate\"><span class=\"pre\">J25</span></code> jumper on the SAM4S Xplained board.  Power on the board\nfor 10s.</p></li>\n<li><p>Open the <code class=\"docutils literal notranslate\"><span class=\"pre\">J25</span></code> jumper.</p></li>\n<li><p>Connect the SAM4S Xplained board to your host computer using the SoC USB\nport. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4s_xplained samples/hello_world</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>west flash -r bossac\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"visualizing-the-message\">\n<h4>Visualizing the message<a class=\"headerlink\" href=\"#visualizing-the-message\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization string.\nConnection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Press reset button</p>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4s_xplained samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">https://www.segger.com/downloads/jlink</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4S-XPLD__KitsFiles.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4S-XPLD__KitsFiles.zip</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 524288}], "main_ram_size": 524288, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "CRMU_UART"}, {"label": "CCG_UART0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bcm958402m2_a72", "arch": "arm64", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM64 Boards</a> »</li>\n<li>Broadcom BCM958402M2 (Cortex-A72)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"broadcom-bcm958402m2-cortex-a72\">\n<span id=\"bcm958402m2-a72\"></span><h1>Broadcom BCM958402M2 (Cortex-A72)<a class=\"headerlink\" href=\"#broadcom-bcm958402m2-cortex-a72\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Broadcom bcm958402m2_a72 board utilizes the Viper BCM58402_A72 SoC\nto provide support for PCIe offload engine functionality.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The bcm958402m2_a72 is a PCIe card with the following physical features:</p>\n<ul class=\"simple\">\n<li><p>PCIe Gen4 interface</p></li>\n<li><p>RS232 UART (optionally populated)</p></li>\n<li><p>JTAG (optionally populated)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Broadcom bcm958402m2_a72 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GIC-500</p></td>\n<td><p>on-chip</p></td>\n<td><p>GICv3 interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>NS16550 compatible serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/bcm958402m2_a72/bcm958402m2_a72_defconfig</span></code></p>\n</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The flash on board is not supported by Zephyr at this time.\nBoard is booted over PCIe interface.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The bcm958402m2_a72 board includes pads for soldering a JTAG connector.\nZephyr applications running on the Cortex-A72 core can also be tested\nby observing UART console output.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "dtcm", "size": 131072}, {"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 10, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}, {"label": "UART_9"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_h723zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo H723ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-h723zg\">\n<span id=\"nucleo-h723zg-board\"></span><h1>ST Nucleo H723ZG<a class=\"headerlink\" href=\"#st-nucleo-h723zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 board provides an affordable and flexible way for users\nto try out new concepts and build prototypes by choosing from the various combinations\nof performance and power consumption features, provided by the STM32 microcontroller.\nFor the compatible boards, the internal or external SMPS significantly reduces power\nconsumption in Run mode.</p>\n<p>The ST Zio connector, which extends the ARDUINO® Uno V3 connectivity, and\nthe ST morpho headers provide an easy means of expanding the functionality of the Nucleo\nopen development platform with a wide choice of specialized shields.\nThe STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK V3 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p></li>\n</ul>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB with Micro-AB</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>SWDST Zio connector including Arduino* Uno V3ST</p></li>\n<li><p>ST morpho expansion</p></li>\n</ul>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources</p></li>\n<li><p>External or internal SMPS to generate Vcore logic supply</p></li>\n<li><p>On-board ST-LINK/V3 debugger/programmer with USB re-enumeration</p></li>\n<li><p>capability: mass storage, virtual COM port and debug port</p></li>\n<li><p>USB OTG full speed or device only</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_h723zg.jpg\"><img alt=\"Nucleo H723ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_h723zg.jpg\" style=\"width: 720px; height: 560px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-h723zg.html\">Nucleo H723ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo H723ZG provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32H723ZG in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>Hardware JPEG Codec</p></li>\n<li><p>550 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.62 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>562 kB SRAM max (376 kb used currently)</p></li>\n<li><p>High-resolution timer (2.1 ns)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>16-bit timers(12)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN-FD(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO (up to 114) with external interrupt capability</p></li>\n<li><p>16-bit ADC(3) with 36 channels / 3.6 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_h723zg board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 60%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random number generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Backup SRAM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Backup SRAM</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration per core can be found in the defconfig files:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_h723zg/nucleo_h723zg_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00499160-stm32h7-nucleo144-boards-mb1364-stmicroelectronics.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo H723ZG board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H723ZG System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 550MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H723ZG board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"backup-sram\">\n<h4>Backup SRAM<a class=\"headerlink\" href=\"#backup-sram\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to test backup SRAM you may want to disconnect VBAT from VDD. You can\ndo it by removing <code class=\"docutils literal notranslate\"><span class=\"pre\">SB52</span></code> jumper on the back side of the board.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Currently the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_h723zg</span></code> board supports stm32cubeprogrammer (default), OpenOCD and J-Link debuggers.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Official OpenOCD support for this board was added on October ‘20.\nMake sure your openocd version is older than that.\nFollowing links may be helpful: <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/openocd\">OpenOCD installing Debug Version</a>\nand <a class=\"reference external\" href=\"https://mbd.kleier.net/integrating-st-link-v3.html\">OpenOCD installing with ST-LINK V3 support</a></p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Check if your ST-LINK V3 has newest FW version. It can be done with <a class=\"reference external\" href=\"https://www.st.com/en/development-tools/stm32cubeide.html\">STM32CubeIDE</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo H723ZG board includes an ST-LINK/V3 embedded debug tool interface.</p>\n<p>First, connect the NUCLEO-H723ZG to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your NUCLEO-H723ZG board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>or use screen:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>screen /dev/ttyACM0 <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h723zg samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_h723zg\n</pre></div>\n</div>\n<p>Blinky example can also be used:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h723zg samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h723zg samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 67108864}], "main_ram_size": 67108864, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "xt-sim", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>Xtensa simulator</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"xtensa-simulator\">\n<span id=\"xt-sim\"></span><h1>Xtensa simulator<a class=\"headerlink\" href=\"#xtensa-simulator\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Xtensa processor architecture is a configurable, extensible, and\nsynthesizable 32-bit RISC processor core. Processor and SOC vendors can select\nfrom various processor options and even create customized instructions in\naddition to a base ISA to tailor the processor for a particular application.</p>\n<p>For more information, see <a class=\"reference external\" href=\"https://ip.cadence.com/ipportfolio/tensilica-ip/xtensa-customizable\">https://ip.cadence.com/ipportfolio/tensilica-ip/xtensa-customizable</a></p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/xt-sim.png\"><img alt=\"Xtensa Xplorer (Eclipse base frontend for xt-sim)\" src=\"../../../../_images/xt-sim.png\" style=\"width: 612px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Xtensa Xplorer</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following Xtensa cores are officially supported:</p>\n<ul class=\"simple\">\n<li><p>Intel S1000</p></li>\n<li><p>sample_controller</p></li>\n</ul>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Xtensa cores can be configured to use either internal or external timers.\nThe frequency of the clock under simulation is set to 25MHz.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-requirements\">\n<h2>System requirements<a class=\"headerlink\" href=\"#system-requirements\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A Linux host system is required for Xtensa development work.\nWe recommend using a __``Debian 9.x (Stretch)``__ or recent __``Ubuntu``__\nreleases (with multilib support).</p>\n<p>Only Xtensa tools version <code class=\"docutils literal notranslate\"><span class=\"pre\">RF-2016.4-linux</span></code> or later are officially\nsupported. Other versions may work but are not supported by Cadence Systems Inc.</p>\n<p>In order to set up the Zephyr OS build system, a Linux 32-bit GCC compiler must\nbe installed on the building linux box. Install GCC if needed either by\ndownloading <code class=\"docutils literal notranslate\"><span class=\"pre\">Zephyr</span> <span class=\"pre\">SDK</span></code> or by using your distribution package manager.</p>\n<p>On Debian/Ubuntu systems, you can install <code class=\"docutils literal notranslate\"><span class=\"pre\">gcc-multilib</span></code> package as follows:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">#</span>aptitude install gcc-multilib <span class=\"c1\"># Or what ever package manager (apt, apt-get, ...)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"set-up-build-environment\">\n<h3>Set up build environment<a class=\"headerlink\" href=\"#set-up-build-environment\" title=\"Permalink to this headline\">¶</a></h3>\n<p>We recommend you create a <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.zephyrrc</span></code> file, a shell script that shall be\nsourced each time before you start working on Zephyr.\nYou can use the following code to create that file:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat &gt; ~/.zephyrrc\n<span class=\"go\">if test \"${CROSS}\" = xcc</span>\n<span class=\"go\">then</span>\n<span class=\"go\">    export ARCH=xtensa</span>\n<span class=\"go\">    export BOARD=xt-sim</span>\n<span class=\"go\">    export ZEPHYR_TOOLCHAIN_VARIANT=xcc</span>\n<span class=\"go\">    export XTENSA_TOOLS_PATH=/opt/xtensa/XtDevTools/install/tools/RG-2016.4-linux/XtensaTools</span>\n<span class=\"go\">    export XTENSA_BUILDS_PATH=/opt/xtensa/XtDevTools/install/builds/RG-2016.4-linux</span>\n<span class=\"gp\">    #</span><span class=\"nb\">export</span> <span class=\"nv\">XTENSA_BUILD_DIR</span><span class=\"o\">=</span> <span class=\"c1\">#Keep empty to use default directory</span>\n<span class=\"go\">    export EMU_PLATFORM=xt-run</span>\n<span class=\"go\">elif test \"${CROSS}\" = zephyr-xtensa</span>\n<span class=\"go\">then</span>\n<span class=\"go\">    export ARCH=xtensa</span>\n<span class=\"go\">    export BOARD=qemu</span>\n<span class=\"go\">    export ZEPHYR_TOOLCHAIN_VARIANT=zephyr</span>\n<span class=\"go\">    export ZEPHYR_SDK_INSTALL_DIR=/opt/xtensa/zephyr-sdk-64-INTERNAL-11-22-2016</span>\n<span class=\"go\">elif test \"${CROSS}\" = zephyr-x86</span>\n<span class=\"go\">then</span>\n<span class=\"go\">    export ARCH=x86</span>\n<span class=\"go\">    export BOARD=qemu_x86</span>\n<span class=\"go\">    export ZEPHYR_TOOLCHAIN_VARIANT=zephyr</span>\n<span class=\"go\">    export ZEPHYR_SDK_INSTALL_DIR=/opt/xtensa/zephyr-sdk-64-INTERNAL-11-22-2016</span>\n<span class=\"go\">else</span>\n<span class=\"go\">    echo \"Unsupported compiler '${CROSS}' defined by environment variable CROSS\"</span>\n<span class=\"go\">fi</span>\n</pre></div>\n</div>\n<p>Once the <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.zephyrrc</span></code> file is created, you can start working. However, each\ntime you start a new shell you will need to execute the following commands\nbefore you can compile anything:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> path/to/zephyr <span class=\"c1\"># replace path/to by a real path</span>\n<span class=\"gp\">$ </span><span class=\"nv\">CROSS</span><span class=\"o\">=</span>xcc <span class=\"nb\">source</span> zephyr-env.sh <span class=\"c1\"># Select xcc as compiler</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"adding-a-user-defined-xtensa-core\">\n<h3>Adding a user-defined Xtensa core<a class=\"headerlink\" href=\"#adding-a-user-defined-xtensa-core\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Add your own core to the list of supported cores as follows:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nv\">XTENSA_CORE</span><span class=\"o\">=</span>myCore\n<span class=\"gp\">$ </span><span class=\"k\">$(</span>which <span class=\"nb\">echo</span><span class=\"k\">)</span> -e <span class=\"s2\">\"config </span><span class=\"si\">${</span><span class=\"nv\">XTENSA_CORE</span><span class=\"si\">}</span><span class=\"s2\">\\n\\tbool \\\"</span><span class=\"si\">${</span><span class=\"nv\">XTENSA_CORE</span><span class=\"si\">}</span><span class=\"s2\"> core\\\"\\n\"</span> &gt;&gt; <span class=\"s2\">\"soc/xtensa/Kconfig.cores\"</span>\n</pre></div>\n</div>\n<p>Create a folder for that core:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>mkdir soc/xtensa/<span class=\"si\">${</span><span class=\"nv\">XTENSA_CORE</span><span class=\"si\">}</span>\n</pre></div>\n</div>\n<p>Create and copy to that folder a custom linker script (more on linker script in next section):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cp  linker.ld  soc/xtensa/<span class=\"si\">${</span><span class=\"nv\">XTENSA_CORE</span><span class=\"si\">}</span>/linker.ld\n</pre></div>\n</div>\n<p>Add a Makefile:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">echo</span> <span class=\"s2\">\"obj-y = soc.o\"</span> &gt; soc/xtensa/<span class=\"si\">${</span><span class=\"nv\">XTENSA_CORE</span><span class=\"si\">}</span>/Makefile\n</pre></div>\n</div>\n<p>Add Zephyr specific sections to the linker script.\nThe file “soc/xtensa/linker_more.ld” contains Zephyr-specific linker\nsections that should be added to the default linker script linker.ld (inside\nSECTIONS region). If you are not using a linker script, you must create one\nand add these sections. The memory segment and PHDR should be replaced by\nappropriate values.</p>\n<p>The linker script should be named <code class=\"docutils literal notranslate\"><span class=\"pre\">linker.ld</span></code> and placed in the directory\n<code class=\"docutils literal notranslate\"><span class=\"pre\">soc/xtensa/${XTENSA_CORE}</span></code>.</p>\n</div>\n<div class=\"section\" id=\"configuring-build\">\n<h3>Configuring build<a class=\"headerlink\" href=\"#configuring-build\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b None samples/hello_world</span>\n<span class=\"go\">west build -t menuconfig</span>\n</pre></div>\n</div>\n<p>Below is an example of usage for typical configuration:</p>\n<ol class=\"arabic simple\">\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Architecture</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Xtensa</span> <span class=\"pre\">architecture</span></code></p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">XTENSA</span> <span class=\"pre\">core</span> <span class=\"pre\">Selection</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Select appropriate core (example <code class=\"docutils literal notranslate\"><span class=\"pre\">hifi3_bd5</span> <span class=\"pre\">core</span></code>)</p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">XTENSA</span> <span class=\"pre\">Options</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">Hardware</span> <span class=\"pre\">clock</span> <span class=\"pre\">cycles</span> <span class=\"pre\">per</span> <span class=\"pre\">second</span></code> to appropriate value</p></li>\n<li><p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">The</span> <span class=\"pre\">path</span> <span class=\"pre\">to</span> <span class=\"pre\">Xtensa</span> <span class=\"pre\">tool</span></code> to appropriate value</p></li>\n<li><p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">The</span> <span class=\"pre\">version</span> <span class=\"pre\">of</span> <span class=\"pre\">Xtensa</span> <span class=\"pre\">tool</span></code> to appropriate version</p></li>\n<li><p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">Xtensa</span> <span class=\"pre\">build</span> <span class=\"pre\">directory</span></code> to appropriate  value</p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Board</span> <span class=\"pre\">Selection</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Xtensa</span> <span class=\"pre\">Development</span> <span class=\"pre\">ISS</span></code></p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Device</span> <span class=\"pre\">Drivers</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Uncheck <code class=\"docutils literal notranslate\"><span class=\"pre\">Serial</span> <span class=\"pre\">Drivers</span></code></p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Select <code class=\"docutils literal notranslate\"><span class=\"pre\">Compile</span> <span class=\"pre\">and</span> <span class=\"pre\">Link</span> <span class=\"pre\">Features</span></code></dt><dd><ol class=\"loweralpha simple\">\n<li><p>Set compiler configuration and build options correctly to project requirements</p></li>\n</ol>\n</dd>\n</dl>\n</li>\n<li><p>Hit <code class=\"docutils literal notranslate\"><span class=\"pre\">Exit</span></code> and confirm saving the changes.</p></li>\n</ol>\n<p>You may need to change other options in menuconfig depending on his project\nspecific needs.</p>\n</div>\n<div class=\"section\" id=\"compiling-and-running\">\n<h3>Compiling and running<a class=\"headerlink\" href=\"#compiling-and-running\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Xtensa executable can be run in the simulator either with a standalone core,\nor with a core connected to simulated peripherals.</p>\n<p>Build and run as follows:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b None</span>\n<span class=\"go\">west build -t run</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 134217728}], "main_ram_size": 134217728, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "em_starterkit_em7d", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em4", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "adafruit_feather_stm32f405", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Adafruit Feather STM32F405 Express</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"adafruit-feather-stm32f405-express\">\n<span id=\"adafruit-feather-stm32f405\"></span><h1>Adafruit Feather STM32F405 Express<a class=\"headerlink\" href=\"#adafruit-feather-stm32f405-express\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit Feather STM32F405 is an ARM Development board in the\nFeather standard layout, sharing peripheral placement with other\ndevices labeled as Feathers or FeatherWings. The board is equipped\nwith a lithium ion battery charger, native USB C connector, 2MB of\nexternal flash memory, and SD card socket.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/adafruit_feather_stm32f405.jpg\"><img alt=\"Adafruit Feather STM32F405 Express\" class=\"align-center\" src=\"../../../../_images/adafruit_feather_stm32f405.jpg\" style=\"width: 640px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>STM32F405 Cortex M4 with FPU and 1MB Flash, 168MHz speed</p></li>\n<li><p>192KB RAM total - 128 KB RAM + 64 KB program-only/cache RAM</p></li>\n<li><p>USB C power and data</p></li>\n<li><p>LiPo connector and charger</p></li>\n<li><p>SD socket on the bottom, connected to SDIO port</p></li>\n<li><p>2 MB SPI Flash chip</p></li>\n<li><p>Built in NeoPixel indicator</p></li>\n<li><p>I2C, UART, GPIO, ADCs, DACs</p></li>\n<li><p>Qwiic/STEMMA-QT connector for fast I2C connectivity</p></li>\n<li><p>SWD SMT mount region on board underside.</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Adafruit Feather STM32F405 board configuration supports the\nfollowing hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/\">Adafruit Feather STM32F405 Express Learn site</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed\ninformation about the board including <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/pinouts\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/downloads\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F405 is configured to use the 12MHz HSE Oscillator to produce\na 168MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F405 UART 3 peripheral is available on the TX (PB10) and RX\n(PB11) pins.</p>\n</div>\n<div class=\"section\" id=\"i2c-port\">\n<h3>I2C Port<a class=\"headerlink\" href=\"#i2c-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F405 I2C1 peripheral is available on the SDA (PB7) and SCL\n(PB6) pins.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F405 SPI2 peripheral is available on the SCK (PB13), MI\n(PB14) and MO (PB15) pins.</p>\n<p>SPI1 uses SCK (PB3), MI (PB4), MO (PB5) and SS (PA15) pins and is\ndedicated to the 2 MB SPI Flash chip.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>DFU-Util programming is supported through Zephyr by default. Set up\nof the built in DFU-Util bootloader is possible by following the\n<a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/dfu-bootloader-details\">instructions on the Learn website</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>#. Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> sample\napplication:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_stm32f405 samples/basic/blinky</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>#. On the Adafruit Feather STM32F405, connect the 3.3V pin to the B0\nboot pin with a jumper wire.</p>\n<ol class=\"arabic\">\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_stm32f405 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the D13 LED blinking.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/\">https://learn.adafruit.com/adafruit-stm32f405-feather-express/</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/pinouts\">https://learn.adafruit.com/adafruit-stm32f405-feather-express/pinouts</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/downloads\">https://learn.adafruit.com/adafruit-stm32f405-feather-express/downloads</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-stm32f405-feather-express/dfu-bootloader-details\">https://learn.adafruit.com/adafruit-stm32f405-feather-express/dfu-bootloader-details</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52dk_nrf52832", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52-dk\">\n<span id=\"nrf52dk-nrf52832\"></span><h1>nRF52 DK<a class=\"headerlink\" href=\"#nrf52-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52 Development Kit (PCA10040) hardware provides\nsupport for the Nordic Semiconductor nRF52832 ARM Cortex-M4F CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52dk_nrf52832.jpg\"><img alt=\"nRF52 DK\" src=\"../../../../_images/nrf52dk_nrf52832.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF52 DK (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52-DK\">nRF52 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF52 DK has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf52dk_nrf52832 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52-DK\">nRF52 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a>\nfor a complete list of nRF52 Development Kit board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.17</p></li>\n<li><p>LED2 (green) = P0.18</p></li>\n<li><p>LED3 (green) = P0.19</p></li>\n<li><p>LED4 (green) = P0.20</p></li>\n<li><p>LD5 (red/green) = OB LED 1/2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.13</p></li>\n<li><p>BUTTON2 = SW2 = P0.14</p></li>\n<li><p>BUTTON3 = SW3 = P0.15</p></li>\n<li><p>BUTTON4 = SW4 = P0.16</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>J-Link Prog Connector</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 67%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>IMCU_TMSS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>IMCU_TCKS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>IMCU_TDOS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>IMCU_TDIS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>IMCU_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug IN</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>SWDIO</p></td>\n<td><p>SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>SWDCLK</p></td>\n<td><p>SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.18</p></td>\n<td><p>P0.18 / TRACEDATA[0] /\nSWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>Cut off</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>P0.21</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug OUT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>EXT_VTG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>EXT_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>EXT_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>EXT_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>EXT_GND_DETECT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>EXT_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Shield Debug and Current measurement</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD_nRF</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>SH_VTG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>SH_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>SH_SWDCLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>SH_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>SH_RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>SH_GND_DETECT</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.00</p></td>\n<td><p>P0.00 / XL1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.01</p></td>\n<td><p>P0.01 / XL2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.21</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.05_C</p></td>\n<td><p>P0.05 / AIN3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.06_C</p></td>\n<td><p>P0.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.07_C</p></td>\n<td><p>P0.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.08_C</p></td>\n<td><p>P0.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.09</p></td>\n<td><p>P0.09 / NFC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>P0.10</p></td>\n<td><p>P0.10 / NFC2</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>P1/P7 Power</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VDD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>RESET</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>VDD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>VIN</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>P2/P8 Analog in</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>A0</p></td>\n<td><p>P0.03 / AIN1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>A1</p></td>\n<td><p>P0.04 / AIN2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>A2</p></td>\n<td><p>P0.28 / AIN4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>A3</p></td>\n<td><p>P0.29 / AIN5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>A4</p></td>\n<td><p>P0.30 / AIN6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>A5</p></td>\n<td><p>P0.31 / AIN7</p></td>\n</tr>\n</tbody>\n</table>\n<p>P3/P9 Digital I/O</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D0 (RX)</p></td>\n<td><p>P0.11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D1 (TX)</p></td>\n<td><p>P0.12</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D2</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D3</p></td>\n<td><p>P0.14 / TRACEDATA[3]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D4</p></td>\n<td><p>P0.15 / TRACEDATA[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D5</p></td>\n<td><p>P0.16 / TRACEDATA[1]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D6</p></td>\n<td><p>P0.17</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D7</p></td>\n<td><p>P0.18 / TRACEDATA[3]  /\nSWO</p></td>\n</tr>\n</tbody>\n</table>\n<p>P4/P10 Digital I/O</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D8</p></td>\n<td><p>P0.19</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D9</p></td>\n<td><p>P0.20 / TRACECLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D10 (SS)</p></td>\n<td><p>P0.22</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.23</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>AREF</p></td>\n<td><p>P0.02 / AIN0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>SDA</p></td>\n<td><p>P0.26</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>SCL</p></td>\n<td><p>P0.27</p></td>\n</tr>\n</tbody>\n</table>\n<p>P5/P11</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>NRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.23</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>RESET</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF52 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52dk_nrf52832 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf52-dk\">\n<h2>Testing the LEDs and buttons in the nRF52 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf52-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf52dk_nrf52832/nrf52dk_nrf52832.dts\">boards/arm/nrf52dk_nrf52832/nrf52dk_nrf52832.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52-DK\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52-DK</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bbc_microbit_v2", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>BBC MicroBit V2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"bbc-microbit-v2\">\n<span id=\"id1\"></span><h1>BBC MicroBit V2<a class=\"headerlink\" href=\"#bbc-microbit-v2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Micro Bit (also referred to as BBC Micro Bit, stylized as micro:bit) is an\nARM-based embedded system designed by the BBC for use in computer education in\nthe UK.</p>\n<p>The board is 4 cm × 5 cm and has an ARM Cortex-M4F processor, accelerometer and\nmagnetometer sensors, Bluetooth and USB connectivity, a display consisting of\n25 LEDs, a microphone, two programmable buttons, and can be powered by either\nUSB or an external battery pack. The device inputs and outputs are through five\nring connectors that are part of the 23-pin edge connector.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/bbc_microbit2.png\"><img alt=\"BBC Micro Bit V2\" src=\"../../../../_images/bbc_microbit2.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BBC Micro Bit V2 (Credit: <a class=\"reference external\" href=\"http://microbit.org/\">http://microbit.org/</a>)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.microbit.org/\">microbit website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The micro:bit-v2 has the following physical features:</p>\n<ul class=\"simple\">\n<li><p>25 individually-programmable LEDs</p></li>\n<li><p>2 programmable buttons</p></li>\n<li><p>Microphone sensors</p></li>\n<li><p>Physical connection pins</p></li>\n<li><p>Light and temperature sensors</p></li>\n<li><p>Motion sensors (accelerometer and compass)</p></li>\n<li><p>Wireless Communication, via Radio and Bluetooth 5</p></li>\n<li><p>USB interface</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The bbc_microbit_v2 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the micro:bit board\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b bbc_microbit_v2 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.microbit.org/\">http://www.microbit.org/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em6", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}, {"label": "sram1", "size": 2048}, {"label": "sram2", "size": 2048}], "main_ram_size": 32768, "gpio": {"count": 3, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso11u68", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP LPCXpresso11U68</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-lpcxpresso11u68\">\n<span id=\"lpcxpresso11u68\"></span><h1>NXP LPCXpresso11U68<a class=\"headerlink\" href=\"#nxp-lpcxpresso11u68\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The LPCXpresso11u68 development board uses an NXP LPC11U68 MCU based\non an ARM Cortex-M0+ core.</p>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/lpcxpresso11u68.png\"><img alt=\"LPCXpresso11U68\" src=\"../../../../_images/lpcxpresso11u68.png\" style=\"width: 800px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The LPCxpresso 11U68 board provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>LPC11U68 microcontroller in LQFP100 package</p></li>\n<li><p>ARM Cortex-M0+</p></li>\n<li><p>Memory:</p>\n<ul>\n<li><p>256KB of flash memory</p></li>\n<li><p>32KB of SRAM</p></li>\n<li><p>2x2KB of additional SRAM</p></li>\n<li><p>4 KB EEPROM</p></li>\n</ul>\n</li>\n<li><p>USB:</p>\n<ul>\n<li><p>USB 2.0 Full-Speed device controller</p></li>\n</ul>\n</li>\n<li><p>DMA controller</p></li>\n<li><p>5x USART</p></li>\n<li><p>2x I2C</p></li>\n<li><p>2x SSP with DMA support</p></li>\n<li><p>Board power supply: through USB bus or external power supply (3V and 5V)</p></li>\n<li><p>Arduino connectors compatible with the ‘Arduino UNO’ platform</p></li>\n<li><p>Tri-color user LED, Power On Led, Reset LED</p></li>\n<li><p>Three push buttons: target reset, ISP and user</p></li>\n</ul>\n<p>More information can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1100-cortex-m0-plus-m0/scalable-entry-level-32-bit-microcontroller-mcu-based-on-arm-cortex-m0-plus-and-cortex-m0-cores:LPC11U00\">LPC11UXX SoC Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/LPC11U6X.pdf\">LPC11U6X Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM10732\">LPC11U6X Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/design/microcontrollers-developer-resources/lpc-microcontroller-utilities/lpcxpresso-board-for-lpc11u68:OM13058\">LPCXPRESSO11U68 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/schematics/LPC11U68_Xpresso_v2_Schematic_RevC_1.pdf\">LPCXPRESSO11U68 Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The lpcxpresso11U68 supports the following features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IOCON</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock and reset control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c master/slave controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware is not yet supported on Zephyr.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The IOCON controller can be used to configure the LPC11U68 pins.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PIO2_11</p></td>\n<td><p>UART</p></td>\n<td><p>USART RX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO2_12</p></td>\n<td><p>UART</p></td>\n<td><p>USART TX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO2_16</p></td>\n<td><p>GPIO</p></td>\n<td><p>GREEN LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO2_17</p></td>\n<td><p>GPIO</p></td>\n<td><p>RED LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO2_18</p></td>\n<td><p>GPIO</p></td>\n<td><p>BLUE_LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PIO0_4</p></td>\n<td><p>I2C</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PIO0_5</p></td>\n<td><p>I2C</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The LPCXpresso11U68 board can be flashed by using the on-board LPC-Link2 debug\nprobe (based on a NXP LPC43xx MCU). This MCU provides either a CMSIS-DAP or\na J-Link interface. It depends on the embedded firmware image. The default\nOpenOCD configuration supports the the CMSIS-DAP interface. If you want to\nswitch to J-Link, then you need to edit the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/lpcxpresso11u68/support/openocd.cfg</span></code> file and to replace:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">source</span> <span class=\"p\">[</span><span class=\"n\">find</span> <span class=\"n\">interface</span><span class=\"o\">/</span><span class=\"n\">cmsis</span><span class=\"o\">-</span><span class=\"n\">dap</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">source</span> <span class=\"p\">[</span><span class=\"n\">find</span> <span class=\"n\">interface</span><span class=\"o\">/</span><span class=\"n\">jlink</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The firmware image of the LPC-Link2 can be updated using the\n<a class=\"reference external\" href=\"https://www.nxp.com/design/microcontrollers-developer-resources/lpc-microcontroller-utilities/lpcscrypt-v2-1-1:LPCSCRYPT\">LPCScrypt tool</a>.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The <a class=\"reference external\" href=\"https://os.mbed.com\">Mbed project</a> also provides some firmware images\n<a class=\"reference external\" href=\"https://os.mbed.com/teams/NXP/wiki/Updating-LPCXpresso-firmware\">here</a>.\nIn addition to a CMSIS-DAP interface, they also provide a convenient update\nmechanism through a pseudo USB disk.</p>\n</div>\n<p>Here are the steps to flash a firmware you built into a LPCXpresso11U68 board:</p>\n<ol class=\"arabic simple\">\n<li><p>Connect the “Link” micro-B USB port to your host computer.</p></li>\n<li><p>Next, simply run the <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code> command</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Please refer to the <a class=\"reference internal\" href=\"#flashing\">Flashing</a> section and run the <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> command\ninstead of <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1100-cortex-m0-plus-m0/scalable-entry-level-32-bit-microcontroller-mcu-based-on-arm-cortex-m0-plus-and-cortex-m0-cores:LPC11U00\">LPC11UXX SoC Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/LPC11U6X.pdf\">LPC11U6X Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=UM10732\">LPC11U6X Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/design/microcontrollers-developer-resources/lpc-microcontroller-utilities/lpcxpresso-board-for-lpc11u68:OM13058\">LPCXPRESSO11U68 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/schematics/LPC11U68_Xpresso_v2_Schematic_RevC_1.pdf\">LPCXPRESSO11U68 Schematics</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "contextualelectronics_abc", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Contextual Eletronics Advanced BLE Cell</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"contextual-eletronics-advanced-ble-cell\">\n<span id=\"contextualelectronics-abc\"></span><h1>Contextual Eletronics Advanced BLE Cell<a class=\"headerlink\" href=\"#contextual-eletronics-advanced-ble-cell\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Contextual Eletronics ABC (PCA10056) hardware provides support for the\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p>Quectel BG95 Modem</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/contextualelectronics_abc.jpg\"><img alt=\"Contextual Electronics Advanced BLE Cell\" src=\"../../../../_images/contextualelectronics_abc.jpg\" style=\"width: 2046px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Contextual Electronics Advanced BLE Cell (Credit: Chris Gamell)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://contextualelectronics.com/courses/advanced-ble-cell-abc-board/\">ABC Board website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.\nThe <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a> contains the processor’s information\nand the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ABC board has two external oscillators. The frequency of the slow clock\nis 32.768 kHz. The frequency of the main clock is 32 MHz.</p>\n<ul class=\"simple\">\n<li><p>nRF52840 ARM Cortex-M4F processor at 64 MHz</p></li>\n<li><p>1 MB flash memory and 256 KB of SRAM</p></li>\n<li><p>SWD connector</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The contextualelectronics_abc board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Modem</p></td>\n<td><p>on-board</p></td>\n<td><p>quectel_bg9x</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://contextualelectronics.com/courses/advanced-ble-cell-abc-board/\">ABC Board website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> for more details on this board, and\n<a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a> for a complete list of SoC\nfeatures.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">contextualelectronics_abc</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Flashing Zephyr onto the <code class=\"docutils literal notranslate\"><span class=\"pre\">contextualelectronics_abc</span></code> board requires\nan external programmer. The programmer is attached to the SWD header.</p>\n<p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b contextualelectronics_abc samples/hello_world</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Flash the image.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b contextualelectronics_abc samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>To see the output, run your favorite terminal program.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the ABC board\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">nRF52840 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">3</a>, chapter 7 ‘Hardware and Layout’.\nIn the table 7.1.1 ‘aQFN73 ball assignments’ select the pins marked\n‘General purpose I/O’.  Note that pins marked as ‘low frequency I/O only’ can only be used\nin under-10KHz applications. They are not suitable for 115200 speed of UART.</p>\n<p>Translate the ‘Pin’ into number for devicetree by using the following formula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://contextualelectronics.com/courses/advanced-ble-cell-abc-board/\">https://contextualelectronics.com/courses/advanced-ble-cell-abc-board/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 24576}], "main_ram_size": 24576, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 1, "instances": [{"label": "PWM_0"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840dk_nrf52811", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52811 emulation on nRF52840 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52811-emulation-on-nrf52840-dk\">\n<span id=\"nrf52840dk-nrf52811\"></span><h1>nRF52811 emulation on nRF52840 DK<a class=\"headerlink\" href=\"#nrf52811-emulation-on-nrf52840-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nrf52840dk_nrf52811 board is a modified version of the\n<a class=\"reference internal\" href=\"../../nrf52840dk_nrf52840/doc/index.html#nrf52840dk-nrf52840\"><span class=\"std std-ref\">nRF52840 DK</span></a> that enforces the limitations imposed by the nRF52811\nIC, which is a variant of the original nRF52840. Since Nordic does not offer a\ndevelopment kit for the nRF52811 you can use this board to develop for this IC\nwhile using the nRF52840 Development Kit (PCA10056).</p>\n<p>See <a class=\"reference internal\" href=\"../../nrf52840dk_nrf52840/doc/index.html#nrf52840dk-nrf52840\"><span class=\"std std-ref\">nRF52840 DK</span></a> for more information about the development board\nand <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52811\">nRF52811 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52811\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52811</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr4", "size": 268435456}], "main_ram_size": 268435456, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 5, "instances": [{"label": "I2C_TOUCH"}, {"label": "I2C_AUDIO_CONF"}, {"label": "I2C_SHIELD0"}, {"label": "I2C_SHIELD1"}, {"label": "DDR4_EEPROM"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 6, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mps3_an547", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM MPS3 AN547</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-mps3-an547\">\n<span id=\"mps3-an547-board\"></span><h1>ARM MPS3 AN547<a class=\"headerlink\" href=\"#arm-mps3-an547\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The mps3_an547 board configuration is used by Zephyr applications that run\non the MPS3 AN547 board. It provides support for the MPS3 AN547 ARM Cortex-M55\nCPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit GPIO</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n<li><p>Ethos-U55 NPU</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mps3_an547.png\"><img alt=\"ARM MPS3 AN547\" class=\"align-center\" src=\"../../../../_images/mps3_an547.png\" style=\"width: 666px; height: 546px;\"/></a>\n<p>This board configuration also supports using the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/open-source-software/arm-platforms-software/arm-ecosystem-fvps\">Corstone-300 FVP</a> to emulate\na MPS3 AN547 hardware platform.</p>\n<p>The Corstone-300 FVP (Fixed Virtual Platform) is a complete simulation of the\nArm system, including processor, memory and peripherals. It is a available free\nof charge for Linux and Windows systems. The FVP has been selected for\nsimulation since it provides access to the Ethos-U55 NPU, which is unavailable\nin QEMU or other simulation platforms.</p>\n<p>To run the Fixed Virtual Platform simulation tool you must download “FVP model\nfor the Corstone-300 MPS3” from Arm and install it on your host PC. This board\nhas been tested with version 11.12.57 (Nov  2 2020).</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM MPS3 AN547 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M55</p></li>\n<li><p>Soft Macro Model (SMM) implementation of SSE-300 subsystem</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>8MB BRAM</p></li>\n<li><p>4GB DDR4 SODIMM (by default, upgradeable to 8GB)</p></li>\n<li><p>16GB eMMC</p></li>\n<li><p>8MB QSPI Flash</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>P‐JTAG, F-JTAG, SWD, 4-bit trace, 16-bit trace</p></li>\n<li><p>Four serial ports over USB</p></li>\n</ul>\n</li>\n<li><p>Interface</p>\n<ul>\n<li><p>AHB GPIO</p></li>\n<li><p>UART</p></li>\n<li><p>SPI</p></li>\n<li><p>I2C</p></li>\n<li><p>I2S</p></li>\n<li><p>Color LCD serial interface</p></li>\n<li><p>Ethernet</p></li>\n<li><p>VGA</p></li>\n</ul>\n</li>\n<li><p>On-board Peripherals</p>\n<ul>\n<li><p>Color LCD</p></li>\n<li><p>10 LEDs</p></li>\n<li><p>8 Switches</p></li>\n<li><p>2 user push buttons</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mps3_an547 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/development-boards/fpga-prototyping-boards/mps3\">MPS3 FPGA Website</a> for a complete list of MPS3 AN547 board hardware\nfeatures.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mps3_an547/mps3_an547_defconfig</span></code>.</p>\n<p>For mode details refer to <a class=\"reference external\" href=\"https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/DAI0547B_SSE300_PLUS_U55_FPGA_for_mps3.pdf\">MPS3 AN547 Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MPS3 AN547 has six UARTs. The Zephyr console output by default, uses\nUART0, which is exposed over the Debug USB interface (J8).</p>\n<p>Serial port 0 on the Debug USB interface is the MCC board control console.</p>\n<p>Serial port 1 on the Debug USB interface is connected to UART 0.</p>\n<p>Serial port 2 on the Debug USB interface is connected to UART 1.</p>\n<p>Serial port 3 on the Debug USB interface is connected to UART 2.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS3 AN547 provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes Mass Storage and\nCMSIS-DAP, and serial ports.</p></li>\n</ul>\n<div class=\"section\" id=\"building-an-application\">\n<h4>Building an application<a class=\"headerlink\" href=\"#building-an-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build applications in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mps3_an547 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! mps3_an547</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"uploading-an-application-to-mps3-an547\">\n<h4>Uploading an application to MPS3 AN547<a class=\"headerlink\" href=\"#uploading-an-application-to-mps3-an547\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Applications can be in elf, hex or bin format. The binaries are flashed when\nthe board boots up, using files stored on the on-board Micro SD card. The\nMotherboard Configuration Controller (MCC) is responsible for loading the FPGA\nimage and binaries.</p>\n<p>Connect the MPS3 to your host computer using the USB port. You should see a\nUSB connection exposing a Mass Storage (<code class=\"docutils literal notranslate\"><span class=\"pre\">V2M-MPS3</span></code> by default).</p>\n<p>The update requires 3 steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Copy application files to <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;MPS3</span> <span class=\"pre\">device</span> <span class=\"pre\">name&gt;/SOFTWARE/</span></code>.</p></li>\n<li><p>Open <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;MPS3</span> <span class=\"pre\">device</span> <span class=\"pre\">name&gt;/MB/HBI0309C/AN547/images.txt</span></code>.</p></li>\n<li><p>Update the <code class=\"docutils literal notranslate\"><span class=\"pre\">AN547/images.txt</span></code> file as follows:</p></li>\n</ol>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>TITLE: Versatile Express Images Configuration File\n\n<span class=\"o\">[</span>IMAGES<span class=\"o\">]</span>\nTOTALIMAGES: <span class=\"m\">1</span> <span class=\"p\">;</span>Number of Images <span class=\"o\">(</span>Max: <span class=\"m\">32</span><span class=\"o\">)</span>\n\nIMAGE0ADDRESS: 0x01000000 <span class=\"p\">;</span>Please <span class=\"k\">select</span> the required executable program\n\nIMAGE0FILE: <span class=\"se\">\\S</span>OFTWARE<span class=\"se\">\\z</span>ephyr.elf\n</pre></div>\n</div>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! mps3_an547</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"fvp-usage\">\n<h3>FVP Usage<a class=\"headerlink\" href=\"#fvp-usage\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run with the FVP, first set environment variable <code class=\"docutils literal notranslate\"><span class=\"pre\">ARMFVP_BIN_PATH</span></code> before\nusing it. Then you can run it with <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span> <span class=\"pre\">-t</span> <span class=\"pre\">run</span></code>.</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">export</span> <span class=\"nv\">ARMFVP_BIN_PATH</span><span class=\"o\">=</span>/path/to/fvp/directory\nwest build -t run\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"qemu-usage\">\n<h3>QEMU Usage<a class=\"headerlink\" href=\"#qemu-usage\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run with QEMU instead of the default FVP, override the emulator selection\nat build time via:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ west build -b mps3_an547 samples/hello°world -DEMU_PLATFORM<span class=\"o\">=</span>qemu -t run\n</pre></div>\n</div>\n<p>Note, however, that the Ethos-U55 NPU is not available in QEMU. If you require\nthe use of the NPU, please use the default FVP for device emulation.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 81920}, {"label": "sram1", "size": 8192}], "main_ram_size": 81920, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cc1352r1_launchxl", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>CC1352R1 LaunchXL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cc1352r1-launchxl\">\n<span id=\"id1\"></span><h1>CC1352R1 LaunchXL<a class=\"headerlink\" href=\"#cc1352r1-launchxl\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Texas Instruments CC1352R LaunchPad™ (LAUNCHXL-CC1352R1) is a\ndevelopment kit for the SimpleLink™ multi-Standard CC1352R wireless MCU.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/tool/launchxl-cc1352r1\">TI CC1352R LaunchPad Product Page</a> for details.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/cc1352r1_launchxl.png\"><img alt=\"TI CC1352R LaunchPad\" src=\"../../../../_images/cc1352r1_launchxl.png\" style=\"width: 400px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Texas Instruments CC1352R LaunchPad™</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The CC1352R LaunchPad™ development kit features the CC1352R wireless MCU.\nThe board is equipped with two LEDs, two push buttons and BoosterPack connectors\nfor expansion. It also includes an integrated (XDS110) debugger.</p>\n<p>The CC13522 wireless MCU has a 48 MHz Arm® Cortex®-M4F SoC and an\nintegrated Sub-1 and 2.4 GHz transceiver supporting multiple protocols including\nBluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/product/cc1352r\">TI CC1352R Product Page</a> for additional details.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The CC1352R LaunchPad board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>All I/O signals are accessible from the BoosterPack connectors. Pin function\naligns with the LaunchPad standard.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DIO3</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO4</p></td>\n<td><p>I2C_MSSCL</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO5</p></td>\n<td><p>I2C_MSSDA</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO8</p></td>\n<td><p>SSI0_RX</p></td>\n<td><p>SPI MISO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO9</p></td>\n<td><p>SSI0_TX</p></td>\n<td><p>SPI MOSI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO10</p></td>\n<td><p>SSI0_CLK</p></td>\n<td><p>SPI CLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO11</p></td>\n<td><p>SSIO_CS</p></td>\n<td><p>SPI CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO12</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART RXD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO13</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART TXD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO14</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO15</p></td>\n<td><p>GPIO</p></td>\n<td><p>Button 1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO16</p></td>\n<td></td>\n<td><p>JTAG TDO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO17</p></td>\n<td></td>\n<td><p>JTAG TDI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO18</p></td>\n<td><p>UART0_RTS</p></td>\n<td><p>UART RTS / JTAG SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO19</p></td>\n<td><p>UART0_CTS</p></td>\n<td><p>UART CTS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO20</p></td>\n<td><p>GPIO</p></td>\n<td><p>Flash CS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO21</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO22</p></td>\n<td><p>GPIO</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO23</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO24</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO25</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO26</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO27</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO28</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DIO29</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DIO30</p></td>\n<td><p>AUX_IO</p></td>\n<td><p>A7</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Before flashing or debugging ensure the RESET, TMS, TCK, TDO, and TDI jumpers\nare in place. Also place jumpers on the the TXD and RXD signals for a serial\nconsole using the XDS110 application serial port.</p>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites:<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Ensure the XDS-110 emulation firmware on the board is updated.</p>\n<p>Download and install the latest <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/XDS_Emulation_Software_Package#XDS_Emulation_Software_.28emupack.29_Download\">XDS-110 emulation package</a>.</p>\n<p>Follow these <a class=\"reference external\" href=\"http://software-dl.ti.com/ccs/esd/documents/xdsdebugprobes/emu_xds110.html#updating-the-xds110-firmware\">xds110 firmware update directions</a></p>\n<p>Note that the emulation package install may place the xdsdfu utility\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;install_dir&gt;/ccs_base/common/uscif/xds110/</span></code>.</p>\n</li>\n<li><p>Install OpenOCD</p>\n<p>You can obtain OpenOCD by following these\n<a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">installing the latest Zephyr SDK instructions</span></a>.</p>\n<p>After the installation, add the directory containing the OpenOCD executable\nto your environment’s PATH variable. For example, use this command in Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export PATH=$ZEPHYR_SDK_INSTALL_DIR/sysroots/x86_64-pokysdk-linux/usr/bin/openocd:$PATH</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">CC1352R</span> <span class=\"pre\">LaunchPad</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>screen &lt;tty_device&gt; <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the XDS110 application\nserial device can be found. For example, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc1352r1_launchxl samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc1352r1_launchxl samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"bootloader\">\n<h3>Bootloader<a class=\"headerlink\" href=\"#bootloader\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ROM bootloader on CC13x2 and CC26x2 devices is enabled by default. The\nbootloader will start if there is no valid application image in flash or the\nso-called backdoor is enabled (via option\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE.html#std-kconfig-CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_CC13X2_CC26X2_BOOTLOADER_BACKDOOR_ENABLE</span></code></a>) and BTN-1 is held\ndown during reset. See the bootloader documentation in chapter 10 of the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swcu185\">TI\nCC13x2 / CC26x2 Technical Reference Manual</a> for additional information.</p>\n</div>\n<div class=\"section\" id=\"power-management-and-uart\">\n<h3>Power Management and UART<a class=\"headerlink\" href=\"#power-management-and-uart\" title=\"Permalink to this headline\">¶</a></h3>\n<p>System and device power management are supported on this platform, and\ncan be enabled via the standard Kconfig options in Zephyr, such as\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM.html#std-kconfig-CONFIG_PM\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_PM_DEVICE.html#std-kconfig-CONFIG_PM_DEVICE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_PM_DEVICE</span></code></a>.</p>\n<p>When system power management is turned on (CONFIG_PM=y),\nsleep state 2 (standby mode) is allowed, and polling is used to retrieve input\nby calling uart_poll_in(), it is possible for characters to be missed if the\nsystem enters standby mode between calls to uart_poll_in(). This is because\nthe UART is inactive while the system is in standby mode. The workaround is to\ndisable sleep state 2 while polling:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pm_constraint_set</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">uart_poll_in</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">expects</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">pm_constraint_release</span><span class=\"p\">(</span><span class=\"n\">PM_STATE_STANDBY</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>CC1352R1 LaunchPad Quick Start Guide:</dt><dd><p><a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru525\">http://www.ti.com/lit/pdf/swru525</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1572864}], "main_flash_size": 1572864, "memory": [{"label": "sram0", "size": 327680}], "main_ram_size": 327680, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 10, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "UART_9"}, {"label": "UART_10"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f413zh", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F413ZH</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f413zh\">\n<span id=\"nucleo-f413zh-board\"></span><h1>ST Nucleo F413ZH<a class=\"headerlink\" href=\"#st-nucleo-f413zh\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F413ZH board features an ARM Cortex-M4 based STM32F413ZH MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F413ZH board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>ST Zio connector including: support for Arduino* Uno V3 connectivity\n(A0 to A5, D0 to D15) and additional signals exposing a wide range of\nperipherals</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>Three user LEDs</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f413zh.png\"><img alt=\"Nucleo F413ZH\" class=\"align-center\" src=\"../../../../_images/nucleo_f413zh.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f413zh.html\">Nucleo F413ZH website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F413ZH provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F413ZHT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1.5 MB Flash</p></li>\n<li><p>320 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>2 12-bit ADC with 16 channels, with FIFO and burst support</p></li>\n<li><p>RTC</p></li>\n<li><p>14 General purpose timers</p></li>\n<li><p>2 watchdog timers (independent and window)</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>USART/UART (10)</p></li>\n<li><p>I2C (4)</p></li>\n<li><p>SPI (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>CRC calculation unit</p></li>\n</ul>\n<p>More information about STM32F413ZH can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f413zh.html\">STM32F413ZH on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00305666.pdf\">STM32F413/423 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_413zh board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f413zh/nucleo_f413zh_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F413ZH Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f413zh_zio_left.png\"><img alt=\"Nucleo F413ZH ZIO connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f413zh_zio_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f413zh_zio_right.png\"><img alt=\"Nucleo F413ZH ZIO connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f413zh_zio_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f413zh_morpho_left.png\"><img alt=\"Nucleo F413ZH Morpho connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f413zh_morpho_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f413zh_morpho_right.png\"><img alt=\"Nucleo F413ZH Morpho connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f413zh_morpho_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>USB_DM : PA11</p></li>\n<li><p>USB_DP : PA12</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F413ZH System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 96MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F413ZH board has 10 UARTs. The Zephyr console output is assigned to UART3.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F413ZH board has a USB OTG dual-role device (DRD) controller that\nsupports both device and host functions through its micro USB connector\n(USB USER). Only USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F413ZH board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "blackpill_f411ce", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>WeAct Studio Black Pill V2.0</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"weact-studio-black-pill-v2-0\">\n<span id=\"blackpill-f411ce\"></span><h1>WeAct Studio Black Pill V2.0<a class=\"headerlink\" href=\"#weact-studio-black-pill-v2-0\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The WeAct Black Pill V2.0 Board is an extremely low cost and bare-bones\ndevelopment board featuring the STM32F411CE, see <a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f411ce.html\">STM32F411CE website</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">5</a>.\nThis is the 48-pin variant of the STM32F411x series,\nsee <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00119316.pdf\">STM32F411x reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">6</a>. More info about the board available\n<a class=\"reference external\" href=\"stm32-base-board-page\">here</a> and on <a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1\">WeAct Github</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n<img alt=\"Black Pill V2.0+\" class=\"align-center\" src=\"../../../../_images/blackpill-v2.jpg\"/>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F411CE based Black Pill V2.0+ Board provides the following\nhardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F411CEU6 in UFQFPN48 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>1x12-bit, 2.4 MSPS ADC with 16 channels</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Up to 11 Timers (six 16-bit, two 32-bit, two watchdog timers and a SysTick timer)</p></li>\n<li><p>USART/UART (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI/I2S (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 full-speed device/host/OTG controller with on-chip PHY</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>96-bit unique ID</p></li>\n<li><p>RTC</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr blackpill_f411ce board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB OTG FS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32_blackpill_v2/stm32_blackpill_v2_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<img alt=\"Black Pill V2.0+ Pinout\" class=\"align-center\" src=\"../../../../_images/Blackpill_Pinout1.png\"/>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PA4/PA5/PA6/PA7 (Routed to footprint for external flash)</p></li>\n<li><p>PWM_4_CH1 : PB6</p></li>\n<li><p>PWM_4_CH2 : PB7</p></li>\n<li><p>ADC_1 : PA1</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>USER_LED : PC13</p></li>\n</ul>\n<p>Note on SPI pin mapping: According to the <a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md\">board release notes</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>, there was a brief\nchange for V2.0 specifically where MISO was routed to PB4 for the flash footprint.\nThis was reverted for V2.1+ so that the flash DO pin was routed back to PA6. If using\nV2.0 and en external flash, the pinmux will need to be modified accordingly.</p>\n</div>\n<div class=\"section\" id=\"clock-sources\">\n<h4>Clock Sources<a class=\"headerlink\" href=\"#clock-sources\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board has two external oscillators. The frequency of the slow clock (LSE) is\n32.768 kHz. The frequency of the main clock (HSE) is 25 MHz.</p>\n<p>The default configuration sources the system clock from the PLL, which is\nderived from HSE, and is set at 96MHz, which is the maximum possible frequency\nto achieve a stable USB clock (48MHz).</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 main entry points for flashing STM32F4X SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware). Flashing using the ROM bootloader requires a special activation\npattern, which can be triggered by using the BOOT0 pin.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"installing-dfu-util\">\n<h4>Installing dfu-util<a class=\"headerlink\" href=\"#installing-dfu-util\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is recommended to use at least v0.8 of <a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">dfu-util</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>. The package available in\ndebian/ubuntu can be quite old, so you might have to build dfu-util from source.</p>\n<p>There is also a Windows version which works, but you may have to install the\nright USB drivers with a tool like <a class=\"reference external\" href=\"https://zadig.akeo.ie/\">Zadig</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n</div>\n<div class=\"section\" id=\"flashing-an-application\">\n<h4>Flashing an Application<a class=\"headerlink\" href=\"#flashing-an-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect a USB-C cable and the board should power ON. Force the board into DFU mode\nby keeping the BOOT0 switch pressed while pressing and releasing the NRST switch.</p>\n<p>The dfu-util runner is supported on this board and so a sample can be built and\ntested easily.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b blackpill_f411ce samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board can be debugged by installing the included 100 mil (0.1 inch) header,\nand attaching an SWD debugger to the 3V3 (3.3V), GND, SCK, and DIO\npins on that header.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md\">https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://zadig.akeo.ie/\">https://zadig.akeo.ie/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1\">https://github.com/WeActTC/MiniF4-STM32F4x1</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">http://dfu-util.sourceforge.net/build.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f411ce.html\">http://www.st.com/en/microcontrollers/stm32f411ce.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00119316.pdf\">http://www.st.com/resource/en/reference_manual/dm00119316.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 524288}, {"label": "sram1", "size": 65536}, {"label": "sram0_shared", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf5340dk_nrf5340_cpuappns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp", "arch": "arc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARC Boards</a> »</li>\n<li>DesignWare(R) ARC(R) EM Software Development Platform</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"designware-r-arc-r-em-software-development-platform\">\n<span id=\"emsdp\"></span><h1>DesignWare(R) ARC(R) EM Software Development Platform<a class=\"headerlink\" href=\"#designware-r-arc-r-em-software-development-platform\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The DesignWare® ARC® EM Software Development Platform (SDP) is a flexible platform\nfor rapid software development on ARC EM processor-based subsystems. It is intended\nto accelerate software development and debug of ARC EM processors and subsystems for\na wide range of ultra-low power embedded applications such as IoT, sensor fusion,\nand voice applications.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/emsdp.jpg\"><img alt=\"DesignWare(R) ARC(R) EM Software Development Platform (synopsys.com)\" class=\"align-center\" src=\"../../../../_images/emsdp.jpg\" style=\"width: 442px;\"/></a>\n<p>For details about the board, see: <a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc-em-software-development-platform\">DesignWare ARC EM Software Development Platform\n(EM SDP)</a></p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EM Software Development Platform supports different core configurations, such as EM4,\nEM5D, EM6, EM7D, EM9D, EM9D+ESP, EM11D, the default core configuration is EM11D. Use\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM4.html#std-kconfig-CONFIG_SOC_EMSDP_EM4\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM4</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM5D.html#std-kconfig-CONFIG_SOC_EMSDP_EM5D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM5D</span></code></a>,\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM6.html#std-kconfig-CONFIG_SOC_EMSDP_EM6\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM6</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM7D.html#std-kconfig-CONFIG_SOC_EMSDP_EM7D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM7D</span></code></a>,\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM7D_ESP.html#std-kconfig-CONFIG_SOC_EMSDP_EM7D_ESP\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM7D_ESP</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM9D.html#std-kconfig-CONFIG_SOC_EMSDP_EM9D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM9D</span></code></a> or\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSDP_EM11D.html#std-kconfig-CONFIG_SOC_EMSDP_EM11D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSDP_EM11D</span></code></a> to select different core configuration.</p>\n<p>The following table shows the hardware features supported for different core configuration:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 11%\"/>\n<col style=\"width: 11%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 11%\"/>\n<col style=\"width: 13%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Features</p></th>\n<th class=\"head\"><p>EM4</p></th>\n<th class=\"head\"><p>EM6</p></th>\n<th class=\"head\"><p>EM5D</p></th>\n<th class=\"head\"><p>EM7D</p></th>\n<th class=\"head\"><p>EM7D_ESP</p></th>\n<th class=\"head\"><p>EM9D</p></th>\n<th class=\"head\"><p>EM11D</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Caches</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DSP</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>XY Memory</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Secure</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>Y</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n</tr>\n</tbody>\n</table>\n<p>For hardware feature details, refer to : <a class=\"reference external\" href=\"https://embarc.org/embarc_osp/doc/build/html/board/emsdp.html\">ARC EM Software Development Platform</a></p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"required-hardware-and-software\">\n<h3>Required Hardware and Software<a class=\"headerlink\" href=\"#required-hardware-and-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To use Zephyr RTOS applications on the EM Software Development Platform board,\na few additional pieces of hardware are required.</p>\n<ul class=\"simple\">\n<li><p>A micro USB cable to connect the computer.</p></li>\n<li><p>A universal switching power adaptor (110-240V AC to 12 DC),\nprovided in the package, which used to power the board.</p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">The Zephyr SDK</span></a></p></li>\n<li><p>Terminal emulator software for use with the USB-UART. Suggestion:\n<a class=\"reference external\" href=\"http://www.putty.org\">Putty Website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p></li>\n<li><p>(optional) A collection of Pmods, Arduino modules, or Mikro modules.\nSee <a class=\"reference external\" href=\"http://store.digilentinc.com/pmod-modules\">Digilent Pmod Modules</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> or develop your custom interfaces to attach\nto the Pmod connector.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-the-em-software-development-platform\">\n<h3>Set up the EM Software Development Platform<a class=\"headerlink\" href=\"#set-up-the-em-software-development-platform\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run Zephyr application on EM Software Development Platform, you need to\nsetup the board correctly.</p>\n<ul class=\"simple\">\n<li><p>Connect the 12V DC power supply to your board.</p></li>\n<li><p>Connect the digilent usb cable from your host to the board.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-zephyr-software\">\n<h3>Set up Zephyr Software<a class=\"headerlink\" href=\"#set-up-zephyr-software\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n<div class=\"section\" id=\"building-sample-applications\">\n<h3>Building Sample Applications<a class=\"headerlink\" href=\"#building-sample-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can try many of the sample applications or tests, but let us discuss\nthe one called <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.\nIt is found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/hello_world\">samples/hello_world</a>.</p>\n<div class=\"section\" id=\"configuring\">\n<h4>Configuring<a class=\"headerlink\" href=\"#configuring\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You may need to write a prj_arc.conf file if the sample doesn’t have one.\nNext, you can use the menuconfig rule to configure the target. By specifying\n<code class=\"docutils literal notranslate\"><span class=\"pre\">emsdp</span></code> as the board configuration, you can select the ARC EM Software\nDevelopment Platform board support for Zephyr.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b emsdp samples/hello_world</span>\n<span class=\"go\">west build -t menuconfig</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building\">\n<h4>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build an application in the usual way.  Refer to\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b emsdp samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"connecting-serial-output\">\n<h3>Connecting Serial Output<a class=\"headerlink\" href=\"#connecting-serial-output\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the default configuration, Zephyr’s EM Software Development Platform images\nsupport serial output via the USB-UART on the board. To enable serial output:</p>\n<ul class=\"simple\">\n<li><p>Open a serial port emulator (i.e. on Linux minicom, putty, screen, etc)</p></li>\n<li><p>Specify the tty driver name, for example, on Linux this may be\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code></p></li>\n<li><p>Set the communication settings to:</p></li>\n</ul>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Parameter</p></th>\n<th class=\"head\"><p>Value</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Baud:</p></td>\n<td><p>115200</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Data:</p></td>\n<td><p>8 bits</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Parity:</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Stopbits:</p></td>\n<td><p>1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using the latest version of Zephyr SDK(&gt;=0.9), you can debug and flash IoT\nDevelopment Kit directly.</p>\n<p>One option is to build and debug the application using the usual\nZephyr build system commands.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b emsdp &lt;my app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>At this point you can do your normal debug session. Set breakpoints and then\n‘c’ to continue into the program.</p>\n<p>The other option is to launch a debug server, as follows.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b emsdp &lt;my app&gt;</span>\n<span class=\"go\">west debugserver</span>\n</pre></div>\n</div>\n<p>Then connect to the debug server at the EM Software Development Platform from a\nsecond console, from the build directory containing the output <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> &lt;my app&gt;\n<span class=\"gp\">$ </span><span class=\"nv\">$ZEPHYR_SDK_INSTALL_DIR</span>/sysroots/x86_64-pokysdk-linux/usr/bin/ <span class=\"se\">\\</span>\n   arc-zephyr-elf/arc-zephyr-elf-gdb zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote localhost:3333</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b main</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">c</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you just want to download the application to the EM Software Development\nPlatform’s CCM and run, you can do so in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b emsdp &lt;my app&gt;</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This command still uses openocd and gdb to load the application elf file to EM\nSoftware Development Platform, but it will load the application and immediately run.\nIf power is removed, the application will be lost since it wasn’t written to flash.</p>\n<p>Most of the time you will not be flashing your program but will instead debug\nit using openocd and gdb. The program can be download via the USB cable into\nthe code and data memories.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://store.digilentinc.com/pmod-modules\">http://store.digilentinc.com/pmod-modules</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.putty.org\">http://www.putty.org</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf51dk_nrf51422", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF51 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf51-dk\">\n<span id=\"nrf51dk-nrf51422\"></span><h1>nRF51 DK<a class=\"headerlink\" href=\"#nrf51-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF51 Development Kit (PCA10028) hardware provides support for the Nordic\nSemiconductor nRF51422 ARM Cortex-M0 CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf51dk_nrf51422.jpg\"><img alt=\"nRF51 DK\" src=\"../../../../_images/nrf51dk_nrf51422.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF51 DK (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF51-DK\">nRF51 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF51 DK has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 16 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf51dk_nrf51422 board configuration supports the following nRF51\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF51-DK\">nRF51 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a>\nfor a complete list of nRF51 Development Kit board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.21</p></li>\n<li><p>LED2 (green) = P0.22</p></li>\n<li><p>LED3 (green) = P0.23</p></li>\n<li><p>LED4 (green) = P0.24</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.17</p></li>\n<li><p>BUTTON2 = SW2 = P0.18</p></li>\n<li><p>BUTTON3 = SW3 = P0.19</p></li>\n<li><p>BUTTON4 = SW4 = P0.20</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF51 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51dk_nrf51422 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf51-dk\">\n<h2>Testing the LEDs and buttons in the nRF51 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf51-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf51dk_nrf51422/nrf51dk_nrf51422.dts\">boards/arm/nrf51dk_nrf51422/nrf51dk_nrf51422.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF51-DK\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF51-DK</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 645120}, {"label": "flash_reserved", "size": 10240}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 645120, "memory": [{"label": "sramx", "size": 32768}, {"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 65536}, {"label": "sram3", "size": 65536}, {"label": "sram4", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s69_cpu1", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "particle_argon", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Particle Argon</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"particle-argon\">\n<span id=\"id1\"></span><h1>Particle Argon<a class=\"headerlink\" href=\"#particle-argon\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Particle Argon is a Wi-Fi enabled development board with a Nordic\nSemiconductor nRF52840 for mesh support and an ESP32 for Wi-Fi.  The\nboard was developed by Particle Industries and has a SWD connector on it\nfor programming.</p>\n<p>It is equipped with a onboard LIPO circuit and conforms to the\nAdafruit Feather formfactor.</p>\n<p>The Particle Argon provides support for the Nordic Semiconductor nRF52840 ARM® Cortex®-M4F SoC with an integrated 2.4 GHz transceiver supporting\nBluetooth® Low Energy and IEEE® 802.15.4.</p>\n<p>For more information about the Particle Argon board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://docs.particle.io/datasheets/wi-fi/argon-datasheet/\">Argon Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/particle-iot/argon\">Argon Hardware Files</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>On the front of the board are RGB-LED, LED and LIPO circuitry.\nThe RGB-LED is controlled by the nRF52840 via GPIO pins.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/particle_argon.png\"><img alt=\"Particle Argon\" src=\"../../../../_images/particle_argon.png\" style=\"width: 150px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Particle Argon (Credit: Particle Industries)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"power-supply\">\n<h3>Power supply<a class=\"headerlink\" href=\"#power-supply\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board is optimized for low power applications and supports two\npower source configurations: battery and micro USB connector.</p>\n<p>It contains circuitry for LIPO usage and can be charged via the USB port.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The particle_argon board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Please see the <a class=\"reference external\" href=\"https://docs.particle.io/datasheets/wi-fi/argon-datasheet/\">Argon Datasheet</a> for header pin assignments, which are\ncommon to all Feather-compatible Particle boards.  Some peripherals are\navailable to applications through DTS overlay include directives:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_i2c1_twi1.dtsi</span></code> exposes TWI1 on labeled Feather\nSDA1/SCL1 pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi_spi1.dtsi</span></code> exposes SPI1 on labeled Feather\nSPI pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_spi1_spi3.dtsi</span></code> exposes SPI3 on labeled Feather\nSPI1 pins</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mesh_feather_uart1_rtscts.dtsi</span></code> adds hardware flow control to\nlabeled Feather UART pins</p></li>\n</ul>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (blue)</p></li>\n<li><p>LED1 (red)</p></li>\n<li><p>LED2 (green)</p></li>\n<li><p>LED3 (blue)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SW0 via MODE</p></li>\n<li><p>SW1 via RESET</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>TWI0 enabled on labeled header (SDA/SCL)</p></li>\n<li><p>TWI1 selectable with overlay (SDA1/SCL1)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SPI0 disabled due to TWI0 conflict</p></li>\n<li><p>SPI1 selectable with overlay (SPI)</p></li>\n<li><p>SPI2 internal to 32 Mb CFI flash chip</p></li>\n<li><p>SPI3 selectable with overlay (SPI or SPI1)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uart\">\n<h4>UART<a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UARTE0 enabled RX/TX on labeled header (UART1); add RTS/CTS with overlay</p></li>\n<li><p>UARTE1 internal to ESP32</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">particle_argon</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash an application in the usual way, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_argon samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b particle_argon samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons\">\n<h2>Testing the LEDs and buttons<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and\nLEDs on the board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 7, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 2, "instances": [{"label": "USART_0"}, {"label": "USART_1"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 1, "instances": [{"label": "PWM_0"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efr32_radio_brd4250b", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "v2m_beetle", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM V2M Beetle</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-v2m-beetle\">\n<span id=\"v2m-beetle-board\"></span><h1>ARM V2M Beetle<a class=\"headerlink\" href=\"#arm-v2m-beetle\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The v2m_beetle board configuration is used by Zephyr applications that run on\nthe V2M Beetle board. It provides support for the Beetle ARM Cortex-M3 CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit GPIO</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/v2m_beetle.png\"><img alt=\"ARM V2M Beetle\" class=\"align-center\" src=\"../../../../_images/v2m_beetle.png\" style=\"width: 442px; height: 335px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.arm.com/products/tools/development-boards/versatile-express/beetle_iot_evaluation_platform.php\">V2M Beetle Website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM V2M BEETLE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M3</p></li>\n<li><p>ARM IoT Subsystem for Cortex-M</p></li>\n<li><p>CORDIO Bluetooth Smart radio</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256KB of embedded flash</p></li>\n<li><p>128KB SRAM</p></li>\n<li><p>2MB of external QSPI flash.</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG, SWD &amp; 4 bit TRACE</p></li>\n<li><p>CMSIS-DAP with a virtual UART port</p></li>\n</ul>\n</li>\n<li><p>Arduino interface</p>\n<ul>\n<li><p>GPIO, UART, SPI, I2C</p></li>\n<li><p>Analog signals</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The v2m_beetle board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://www.arm.com/products/tools/development-boards/versatile-express/beetle_iot_evaluation_platform.php\">V2M Beetle Website</a> for a complete list of V2M Beetle board hardware\nfeatures.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">boards/arm/v2m_beetle/v2m_beetle_defconfig</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Beetle is a Cortex-M3 based SoC and has 15 fixed exceptions and 45 IRQs.</p>\n<p>A Cortex-M3/4-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Handlers are provided for exceptions 1-6, 11-12, and 14-15. The table here\nidentifies the handlers used for each exception.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM V2M Beetle Board has 4 GPIO controllers. These controllers are responsible for pin muxing, input/output, pull-up, etc.</p>\n<p>All GPIO controller pins are exposed via the following sequence of pin numbers:</p>\n<ul class=\"simple\">\n<li><p>Pins 0 - 15 are for GPIO 0</p></li>\n<li><p>Pins 16 - 31 are for GPIO 1</p></li>\n</ul>\n<p>Mapping from the ARM V2M Beetle Board pins to GPIO controllers:</p>\n<ul class=\"rst-columns simple\">\n<li><p>D0 : P0_0</p></li>\n<li><p>D1 : P0_1</p></li>\n<li><p>D2 : P0_2</p></li>\n<li><p>D3 : P0_3</p></li>\n<li><p>D4 : P0_4</p></li>\n<li><p>D5 : P0_5</p></li>\n<li><p>D6 : P0_6</p></li>\n<li><p>D7 : P0_7</p></li>\n<li><p>D8 : P0_8</p></li>\n<li><p>D9 : P0_9</p></li>\n<li><p>D10 : P0_10</p></li>\n<li><p>D11 : P0_11</p></li>\n<li><p>D12 : P0_12</p></li>\n<li><p>D13 : P0_13</p></li>\n<li><p>D14 : P0_14</p></li>\n<li><p>D15 : P0_15</p></li>\n<li><p>D16 : P1_0</p></li>\n<li><p>D17 : P1_1</p></li>\n<li><p>D18 : P1_2</p></li>\n<li><p>D19 : P1_3</p></li>\n<li><p>D20 : P1_4</p></li>\n<li><p>D21 : P1_5</p></li>\n<li><p>D22 : P1_6</p></li>\n<li><p>D23 : P1_7</p></li>\n<li><p>D24 : P1_8</p></li>\n<li><p>D25 : P1_9</p></li>\n<li><p>D26 : P1_10</p></li>\n<li><p>D27 : P1_11</p></li>\n<li><p>D28 : P1_12</p></li>\n<li><p>D29 : P1_13</p></li>\n<li><p>D30 : P1_14</p></li>\n<li><p>D31 : P1_15</p></li>\n</ul>\n<p>Peripheral Mapping:</p>\n<ul class=\"rst-columns simple\">\n<li><p>UART_0_RX : D0</p></li>\n<li><p>UART_0_TX : D1</p></li>\n<li><p>SPI_0_CS : D10</p></li>\n<li><p>SPI_0_MOSI : D11</p></li>\n<li><p>SPI_0_MISO : D12</p></li>\n<li><p>SPI_0_SCLK : D13</p></li>\n<li><p>I2C_0_SCL : D14</p></li>\n<li><p>I2C_0_SDA : D15</p></li>\n<li><p>UART_1_RX : D16</p></li>\n<li><p>UART_1_TX : D17</p></li>\n<li><p>SPI_1_CS : D18</p></li>\n<li><p>SPI_1_MOSI : D19</p></li>\n<li><p>SPI_1_MISO : D20</p></li>\n<li><p>SPI_1_SCK : D21</p></li>\n<li><p>I2C_1_SDA : D22</p></li>\n<li><p>I2C_1_SCL : D23</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://developer.arm.com/-/media/developer/products/system-design-tools/versatile-express-family/V2M-Beetle_TRM_draft.pdf?la=en\">Beetle Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>V2M Beetle has one external and two on-chip oscillators. The slow clock is\n32.768 kHz, and the main clock is 24 MHz. The processor can set up PLL to drive\nthe master clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM Beetle processor has two UARTs. Both the UARTs have only two wires for\nRX/TX and no flow control (CTS/RTS) or FIFO. The Zephyr console output, by\ndefault, is utilizing UART1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"cmsis-dap\">\n<h4>CMSIS DAP<a class=\"headerlink\" href=\"#cmsis-dap\" title=\"Permalink to this headline\">¶</a></h4>\n<p>V2M Beetle provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and an\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<p>This interfaces are exposed via CMSIS DAP. For more details please refer\nto <a class=\"reference external\" href=\"https://github.com/mbedmicro/CMSIS-DAP\">CMSIS-DAP Website</a>.</p>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-v2m-beetle\">\n<h4>Flashing an application to V2M Beetle<a class=\"headerlink\" href=\"#flashing-an-application-to-v2m-beetle\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build applications in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b v2m_beetle samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the V2M Beetle to your host computer using the USB port and you should\nsee a USB connection which exposes a Mass Storage (MBED) and a USB Serial Port.\nCopy the generated zephyr.bin in the MBED drive.\nReset the board and you should be able to see on the corresponding Serial Port\nthe following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "rak5010_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>RAK5010</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"rak5010\">\n<span id=\"rak5010-nrf52840\"></span><h1>RAK5010<a class=\"headerlink\" href=\"#rak5010\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>WisTrio NB-IoT Tracker Pro (RAK5010) is a tracker\nwith integrated LTE CAT M1 &amp; NB1, GPS, BLE, and sensors.\nIt is built on the Quectel BG96 LTE CAT M1 &amp; NB1 module,\nwhich has an integrated GPS receiver. The MCU running\nthe board is a Nordic nRF52840 controller.</p>\n<p>As it has both GPS and BLE it can be used for outdoor\nand indoor scenarios, where location-based services need be present.</p>\n<p>The built-in sensors for RAK5010 are temperature and\nhumidity sensor, motion sensor, pressure sensor, and light sensor.\nThe extension IOs allow adding more sensors in addition to the on-board ones.</p>\n<p>This board is particularly suitable to be used as a\nquick testing and prototyping tool for applications\nrequiring NB-IoT connectivity. Application development\nsupports the GCC environment.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/rak5010-front-parts.jpeg\"><img alt=\"RAK5010-NRF52840\" class=\"align-center\" src=\"../../../../_images/rak5010-front-parts.jpeg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>nRF52840 ARM Cortex-M4F Processor</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>1 Micro-AB USB OTG host/device</p></li>\n<li><p>Quectel BG96, with LTE CAT M1, LTE NB1, and GNSS</p></li>\n<li><p>iPEX connectors for the LTE and GPS antenna and an on-board ceramic antenna for the BLE.</p></li>\n<li><p>nano-SIM and ESIM options.</p></li>\n<li><p>Multiple interfaces, I2C, UART, GPIO, ADC</p></li>\n<li><p>1 user LED</p></li>\n<li><p>1 SHTC3 Humidity and Temperature Sensor</p></li>\n<li><p>1 OPT3001DNPR Ambient Light Sensor</p></li>\n<li><p>1 LPS22HB Pressure Sensor</p></li>\n<li><p>1 LIS3DH Motion Sensor</p></li>\n<li><p>Powered by either Micro USB, 3.7V rechargeable battery or a 5V Solar Panel Port</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The rak5010_nrf52840 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (green) = P0.12</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The RAK5010 board shall be connected to a Segger Embedded Debugger Unit\n<a class=\"reference external\" href=\"https://www.segger.com/jlink-ob.html\">J-Link OB</a>.  This provides a debug\ninterface to the NRF52840 chip. You can use JLink to communicate with\nthe NRF52840.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Download JLink from the Segger <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">JLink Downloads Page</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.  Go to the section\n“J-Link Software and Documentation Pack” and install the “J-Link Software\nand Documentation pack for Linux”.  The application JLinkExe needs to be\naccessible from your path.</p></li>\n<li><p>Run your favorite terminal program to listen for output.  Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization string.\nConnection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n</ol>\n<p>#. Connect the RAK5010 board to your host computer using the USB debug port.\nThen build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b rak5010_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! rak5010_nrf52840” in your terminal.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b rak5010_nrf52840 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">https://www.segger.com/downloads/jlink</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bl652_dvk", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "reel_board_v2", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 61440}], "main_ram_size": 61440, "gpio": {"count": 3, "instances": [{"label": "GPDRB"}, {"label": "GPDRF"}, {"label": "GPDRM"}]}, "i2c": {"count": 6, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}, {"label": "I2C_5"}]}, "spi": {"count": 2, "instances": [{"label": "SPI0"}, {"label": "SPI1"}]}, "uart": {"count": 2, "instances": [{"label": "console"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "it8xxx2_evb", "arch": "riscv", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">RISCV Boards</a> »</li>\n<li>ITE IT8XXX2 series</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"ite-it8xxx2-series\">\n<span id=\"it8xxx2-evb\"></span><h1>ITE IT8XXX2 series<a class=\"headerlink\" href=\"#ite-it8xxx2-series\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The IT8XXX2 is a 32-bit RISC-V Micro-controller.\nAnd a highly integrated embedded controller with system functions.\nIt is suitable for mobile system applications.</p>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/it81302_board.jpg\"><img alt=\"IT81302 EVB\" src=\"../../../../_images/it81302_board.jpg\" style=\"width: 550px; height: 452px;\"/></a>\n</div>\n<p>To find out more about ITE, visit our World Wide Web at:<a class=\"reference external\" href=\"http://www.ite.com.tw/en/product/view?mid=149\">ITE’s website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a></p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The IT8XXX2 series contains different chip types(ex, it81302, it83202),\nand they support different hardware features.\nListing the IT81302 hardware features as following:</p>\n<ul class=\"simple\">\n<li><p>RISC-V RV32IMAFC instruction set</p></li>\n<li><p>4KB instruction cache size</p></li>\n<li><p>60KB SDRAM in total</p></li>\n<li><p>Built-in 32.768 kHz clock generator</p></li>\n<li><p>PWM, eSPI, LPC, FLASH, UART, GPIO, Timer, Watchdog, ADC, JTAG</p></li>\n<li><p>6 SMBus channels, with 3 DMA controllers, compatiable with I2C</p></li>\n<li><p>SPI master/slave</p></li>\n<li><p>USB Type-c CC Logic</p></li>\n<li><p>USB Power Delivery</p></li>\n<li><p>Support KB scan</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>currently supports the following hardware features:</p>\n<table class=\"colwidths-auto docutils align-default\" id=\"id1\">\n<caption><span class=\"caption-text\">Supported Features</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this table\">¶</a></caption>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">it8xxx2_evb</span></code> board configuration can be built as usual\n(see :<a class=\"reference external\" href=\"https://docs.zephyrproject.org/latest/getting_started/index.html\">Zephyr Getting Started Guide</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b it8xxx2_evb</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In order to upload the application to the device,\nyou’ll need our winflash tool and download board.\nYou can get the winflash tool at here:<a class=\"reference external\" href=\"http://www.ite.com.tw/en/product/view?mid=149\">Download Link</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id6\">1</a>\nUse the winflash.exe tool to program a zephyr application\nto the it8xxx2 board flash.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Supporting uart debug, currently.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id6\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.ite.com.tw/en/product/view?mid=149\">http://www.ite.com.tw/en/product/view?mid=149</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.zephyrproject.org/latest/getting_started/index.html\">https://docs.zephyrproject.org/latest/getting_started/index.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_1", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 4, "instances": [{"label": "GPIO_A0"}, {"label": "GPIO_A1"}, {"label": "GPIO_A2"}, {"label": "GPIO_A3"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cc3220sf_launchxl", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>CC3220SF LaunchXL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cc3220sf-launchxl\">\n<span id=\"id1\"></span><h1>CC3220SF LaunchXL<a class=\"headerlink\" href=\"#cc3220sf-launchxl\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Wi-Fi CC3220SF LaunchPad development kit (CC3220SF-LAUNCHXL)\nhighlights CC3220SF, a single-chip wireless microcontroller (MCU) with\n1MB internal flash, 4MB external serial flash, 256KB of RAM and enhanced\nsecurity features.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/product/cc3220\">TI CC3220 Product Page</a> for details.</p>\n<div class=\"section\" id=\"features\">\n<h3>Features:<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Two separate execution environments: a user application dedicated ARM\nCortex-M4 MCU and a network processor MCU to run all Wi-Fi and\ninternet logical layers</p></li>\n<li><p>40-pin LaunchPad standard leveraging the BoosterPack ecosystem</p></li>\n<li><p>On-board accelerometer and temperature sensor</p></li>\n<li><p>Two buttons and three LEDs for user interaction</p></li>\n<li><p>UART through USB to PC</p></li>\n<li><p>BoosterPack plug-in module for adding graphical displays, audio\ncodecs, antenna selection, environmental sensing, and more</p></li>\n<li><p>Power from USB for the LaunchPad and optional external BoosterPack</p></li>\n<li><p>XDS110-based JTAG emulation with serial port for flash programming</p></li>\n</ul>\n<p>Details on the CC3220SF LaunchXL development board can be found in the\n<a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru463\">CC3220SF LaunchPad Dev Kit Hardware User’s Guide</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The CC3220SF SoC has two MCUs:</p>\n<ol class=\"arabic simple\">\n<li><p>Applications MCU - an ARM® Cortex®-M4 Core at 80 MHz, with 256Kb RAM,\nand access to external serial 4MB flash with bootloader and peripheral\ndrivers in ROM.</p></li>\n<li><p>Network Coprocessor (NWP) - a dedicated ARM MCU, which completely\noffloads Wi-Fi and internet protocols from the application MCU.</p></li>\n</ol>\n<p>Complete details of the CC3220SF SoC can be found in the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru465\">CC3220 TRM</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Zephyr has been ported to the Applications MCU, with basic peripheral\ndriver support.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI_0</p></td>\n<td><p>on-chip</p></td>\n<td><p>Wi-Fi host driver</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>For consistency with TI SimpleLink SDK and BoosterPack examples,\nthe I2C driver defaults to I2C_BITRATE_FAST mode (400 kHz) bus speed\non bootup.</p>\n</div>\n<p>The accelerometer, temperature sensors, or other peripherals\naccessible through the BoosterPack, are not currently supported.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Peripherals on the CC3220SF LaunchXL are mapped to the following pins in\nthe file <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3220sf_launchxl/pinmux.c\">boards/arm/cc3220sf_launchxl/pinmux.c</a>.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 46%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 27%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>PIN</p></th>\n<th class=\"head\"><p>GPIO</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART0_TX</p></td>\n<td><p>55</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART0_RX</p></td>\n<td><p>57</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED D7 (R)</p></td>\n<td><p>64</p></td>\n<td><p>9</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED D6 (O)</p></td>\n<td><p>01</p></td>\n<td><p>10</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED D5 (G)</p></td>\n<td><p>02</p></td>\n<td><p>11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Switch SW2</p></td>\n<td><p>15</p></td>\n<td><p>22</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Switch SW3</p></td>\n<td><p>04</p></td>\n<td><p>13</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the Kconfig file at\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3220sf_launchxl/cc3220sf_launchxl_defconfig\">boards/arm/cc3220sf_launchxl/cc3220sf_launchxl_defconfig</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>TI officially supports development on the CC3220SF using the TI\n<a class=\"reference external\" href=\"http://www.ti.com/tool/download/SIMPLELINK-CC3220-SDK\">CC3220 SDK</a> on Windows and Linux using TI tools: Code Composer\nStudio for debugging and <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/Category:CCS_UniFlash\">UniFlash</a> for flashing.</p>\n<p>For Windows developers, see the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru461\">CC3220 Getting Started Guide</a> for\ninstructions on installation of tools, and how to flash the board using\nUniFlash.</p>\n<p>Note that zephyr.bin produced by the Zephyr SDK may not load via\nUniFlash tool.  If encountering difficulties, use the zephyr.elf\nfile and openocd instead (see below).</p>\n<p>The following instructions are geared towards Linux developers who\nprefer command line tools to an IDE.</p>\n<p>Before flashing and debugging the board, there are a few one-time board\nsetup steps to follow.</p>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites:<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Download and install the latest version of <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/Category:CCS_UniFlash\">UniFlash</a>.</p></li>\n<li><p>Jumper SOP[2..0] (J15) to [010], and connect the USB cable to the PC.</p>\n<p>This should result in a new device “Texas Instruments XDS110 Embed\nwith CMSIS-DAP” appearing at /dev/ttyACM1 and /dev/ttyACM0.</p>\n</li>\n<li><p>Update the service pack, and place the board in “Development Mode”.</p>\n<p>Setting “Development Mode” enables the JTAG interface, necessary\nfor subsequent use of OpenOCD and updating XDS110 firmware.</p>\n<p>Follow the instructions in Section 2.4 “Download the Application”,\nin the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru461\">CC3220 Getting Started Guide</a>, except for steps 5 and 6 in\nSection 2.4.1 which select an MCU image.</p>\n</li>\n<li><p>Ensure the XDS-110 emulation firmware is updated.</p>\n<p>Download and install the latest <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/XDS_Emulation_Software_Package#XDS_Emulation_Software_.28emupack.29_Download\">XDS-110 emulation package</a>.</p>\n<p>Follow these <a class=\"reference external\" href=\"http://software-dl.ti.com/ccs/esd/documents/xdsdebugprobes/emu_xds110.html#updating-the-xds110-firmware\">xds110 firmware update directions</a></p>\n<p>Note that the emulation package install may place the xdsdfu utility\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;install_dir&gt;/ccs_base/common/uscif/xds110/</span></code>.</p>\n</li>\n<li><p>Switch Jumper SOP[2..0] (J15) back to [001].</p>\n<p>Remove power from the board (disconnect USB cable) before switching jumpers.</p>\n</li>\n<li><p>Install OpenOCD</p>\n<p>You can obtain OpenOCD by following these\n<a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">installing the latest Zephyr SDK instructions</span></a>.</p>\n<p>After the installation, add the directory containing the OpenOCD executable\nto your environment’s PATH variable. For example, use this command in Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export PATH=$ZEPHYR_SDK_INSTALL_DIR/sysroots/x86_64-pokysdk-linux/usr/bin/openocd:$PATH</span>\n</pre></div>\n</div>\n<p>If you had previously installed TI OpenOCD, you can simply switch to use\nthe one in the Zephyr SDK. If for some reason you wish to continue to use\nyour TI OpenOCD installation, you can set the OPENOCD and\nOPENOCD_DEFAULT_PATH variables in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3220sf_launchxl/board.cmake\">boards/arm/cc3220sf_launchxl/board.cmake</a> to point the build\nto the paths of the OpenOCD binary and its scripts, before\nincluding the common openocd.board.cmake file:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>set(OPENOCD \"/usr/local/bin/openocd\" CACHE FILEPATH \"\" FORCE)\nset(OPENOCD_DEFAULT_PATH /usr/local/share/openocd/scripts)\ninclude(${ZEPHYR_BASE}/boards/common/openocd.board.cmake)\n</pre></div>\n</div>\n</li>\n<li><p>Ensure CONFIG_XIP=y (default) is set.</p>\n<p>This locates the program into flash, and sets CONFIG_CC3220SF_DEBUG=y,\nwhich prepends a debug header enabling the flash to persist over\nsubsequent reboots, bypassing the bootloader flash signature\nverification.</p>\n<p>See Section 21.10 “Debugging Flash User Application Using JTAG” of the\n<a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru465\">CC3220 TRM</a> for details on the secure flash boot process.</p>\n</li>\n</ol>\n<p>Once the above prerequisites are met, applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">_cc3220sf_launchxl</span></code>\nboard can be built, flashed, and debugged with openocd and gdb per the Zephyr\nApplication Development Primer (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>).</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To build and flash an application, execute the following commands for &lt;my_app&gt;:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc3220sf_launchxl &lt;my_app&gt;</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This will load the image into flash.</p>\n<p>To see program output from UART0, connect a separate terminal window:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">% </span>screen /dev/ttyACM0 <span class=\"m\">115200</span> 8N1\n</pre></div>\n</div>\n<p>Then press the reset button (SW1) on the board to run the program.</p>\n<p>When using OpenOCD from Zephyr SDK to flash the device, you may notice\nthe program hangs when starting the network processor on the device, if the\nprogram uses it. There is a known issue with how that version of OpenOCD\nresets the network processor. You would need to manually hit the reset button\non the board to properly reset the device after flashing.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To debug a previously flashed image, after resetting the board, use the ‘debug’\nbuild target:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc3220sf_launchxl &lt;my_app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"wi-fi-support\">\n<h2>Wi-Fi Support<a class=\"headerlink\" href=\"#wi-fi-support\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Host Driver, imported from the SimpleLink SDK, has been ported\nto Zephyr, and communicates over a dedicated SPI to the network co-processor.\nIt is available as a Zephyr Wi-Fi device driver in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/drivers/wifi/simplelink\">drivers/wifi/simplelink</a>.</p>\n<div class=\"section\" id=\"usage\">\n<h3>Usage:<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Set <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_WIFI_SIMPLELINK.html#std-kconfig-CONFIG_WIFI_SIMPLELINK\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_WIFI_SIMPLELINK</span></code></a> and <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_WIFI.html#std-kconfig-CONFIG_WIFI\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_WIFI</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>\nto enable Wi-Fi.\nSee <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/net/wifi/boards/cc3220sf_launchxl.conf\">samples/net/wifi/boards/cc3220sf_launchxl.conf</a>.</p>\n</div>\n<div class=\"section\" id=\"provisioning\">\n<h3>Provisioning:<a class=\"headerlink\" href=\"#provisioning\" title=\"Permalink to this headline\">¶</a></h3>\n<p>SimpleLink provides a few rather sophisticated Wi-Fi provisioning methods.\nTo keep it simple for Zephyr development and demos, the SimpleLink\n“Fast Connect” policy is enabled, with one-shot scanning.\nThis enables the cc3220sf_launchxl to automatically reconnect to the last\ngood known access point (AP), without having to restart a scan, and\nre-specify the SSID and password.</p>\n<p>To connect to an AP, first run the Zephyr Wi-Fi shell sample application,\nand connect to a known AP with SSID and password.</p>\n<p>See <a class=\"reference internal\" href=\"../../../../samples/net/wifi/README.html#wifi-sample\"><span class=\"std std-ref\">Wi-Fi sample</span></a></p>\n<p>Once the connection succeeds, the network co-processor keeps the AP identity in\nits persistent memory.  Newly loaded Wi-Fi applications then need not explicitly\nexecute any Wi-Fi scan or connect operations, until the need to change to a new AP.</p>\n</div>\n</div>\n<div class=\"section\" id=\"secure-socket-offload\">\n<h2>Secure Socket Offload<a class=\"headerlink\" href=\"#secure-socket-offload\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Wi-Fi driver provides socket operations to the Zephyr socket\noffload point, enabling Zephyr BSD socket API calls to be directed to the\nSimpleLink Wi-Fi driver, by setting <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NET_SOCKETS_OFFLOAD.html#std-kconfig-CONFIG_NET_SOCKETS_OFFLOAD\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NET_SOCKETS_OFFLOAD</span></code></a>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>.</p>\n<p>Secure socket (TLS) communication is handled as part of the socket APIs,\nand enabled by:</p>\n<ul class=\"simple\">\n<li><p>setting both <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NET_SOCKETS_SOCKOPT_TLS.html#std-kconfig-CONFIG_NET_SOCKETS_SOCKOPT_TLS\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NET_SOCKETS_SOCKOPT_TLS</span></code></a>\nand <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_TLS_CREDENTIAL_FILENAMES.html#std-kconfig-CONFIG_TLS_CREDENTIAL_FILENAMES\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_TLS_CREDENTIAL_FILENAMES</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>,</p></li>\n<li><p>using the TI Uniflash tool to program the required certificates and\nkeys to the secure flash filesystem, and enabling the TI Trusted\nRoot-Certificate Catalog.</p></li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"../../../../samples/net/sockets/http_get/README.html#sockets-http-get\"><span class=\"std std-ref\">Socket HTTP GET Example</span></a> and\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/net/sockets/http_get/boards/cc3220sf_launchxl.conf\">samples/net/sockets/http_get/boards/cc3220sf_launchxl.conf</a> for an\nexample.</p>\n<p>See the document <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swpu332\">Simplelink Wi-Fi Certificates Handling</a> for details on\nusing the TI UniFlash tool for certificate programming.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>CC32xx Wiki:</dt><dd><p><a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/CC31xx_%26_CC32xx\">http://processors.wiki.ti.com/index.php/CC31xx_%26_CC32xx</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 9, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "google_kukui", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Google Kukui EC</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"google-kukui-ec\">\n<span id=\"google-kukui-board\"></span><h1>Google Kukui EC<a class=\"headerlink\" href=\"#google-kukui-ec\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Kukui is a reference board for Chromium OS-based devices Krane and\nKodama. These are known as the Lenovo Chromebook Duet and 10e Chromebook\nTablet, respectively.</p>\n<p>Zephyr has support for the STM32-based embedded controller (EC) on-board.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>STM32F098RCH6</p></li>\n<li><p>MT6370 battery charger</p></li>\n<li><p>BMM150 compass</p></li>\n<li><p>BMM160 gyroscope</p></li>\n<li><p>Connections to the MediaTek AP</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The following features are supported:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other features (such as I2C) are not available in Zephyr.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/google_kukui/google_kukui_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output\n(push-pull or open-drain), as input (with or without pull-up or\npull-down), or as peripheral alternate function.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA10/PA9</p></li>\n<li><p>I2C_1 SCL/SDA : PB8/PB9</p></li>\n<li><p>I2C_2 SCL/SDA : PA11/PA12</p></li>\n<li><p>Volume down : GPIOB pin 11</p></li>\n<li><p>Volume up : GPIOB pin 10</p></li>\n<li><p>Power : GPIOA pin 0</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build application as usual for the <code class=\"docutils literal notranslate\"><span class=\"pre\">google_kukui</span></code> board, and flash\nusing Servo V2, μServo, or Servo V4 (CCD). See the\n<a class=\"reference external\" href=\"https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board\">Chromium EC Flashing Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for more information.</p>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Use SWD with a J-Link or ST-Link.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board\">https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mm_swiftio", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>MadMachine SwiftIO</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"madmachine-swiftio\">\n<span id=\"mm-swiftio\"></span><h1>MadMachine SwiftIO<a class=\"headerlink\" href=\"#madmachine-swiftio\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SwiftIO board, designed by MadMachine is the world’s first board\ndesigned with support for the modern <a class=\"reference external\" href=\"https://docs.swift.org/swift-book/\">Swift language</a>.  Zephyr provides basic\nlow-level capabilities for the SwiftIO board. Swift application would\nrun on top of Zephyr. More information about the board can be found\nat:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://madmachine.io\">MadMachine Homepage</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://madmachine.io/docs\">SwiftIO API Reference</a></p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mm_swiftio.jpg\"><img alt=\"SwiftIO Board\" class=\"align-center\" src=\"../../../../_images/mm_swiftio.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>i.MX RT1052 Cortex-M7 processor at 600MHz</p></li>\n<li><p>8MB QSPI Flash, 32MB SDRAM</p></li>\n<li><p>On-board DAPLink debugger with serial port</p></li>\n<li><p>User RGB LED, USB 2.0 Connector, microSD slot</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mm_swiftio board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DISPLAY</p></td>\n<td><p>on-chip</p></td>\n<td><p>display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Note:\nThe following SwiftIO pinout diagram is used for Swift programming.\nThe Swift ID is not the same as the Zephyr driver ID.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 13%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 13%\"/>\n<col style=\"width: 20%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\" colspan=\"2\"><p>Name</p></th>\n<th class=\"head\" colspan=\"2\"><p>GPIO</p></th>\n<th class=\"head\" colspan=\"2\"><p>Other peripherals</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Swift ID</p></td>\n<td><p>Pin name</p></td>\n<td><p>Swift ID</p></td>\n<td><p>Zephyr driver</p></td>\n<td><p>Swift ID</p></td>\n<td><p>Zephyr driver</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0</p></td>\n<td><p>GPIO_AD_B1_03</p></td>\n<td><p>D0</p></td>\n<td><p>GPIO1_IO19</p></td>\n<td rowspan=\"2\"><p>UART0</p></td>\n<td rowspan=\"2\"><p>UART_2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P1</p></td>\n<td><p>GPIO_AD_B1_02</p></td>\n<td><p>D1</p></td>\n<td><p>GPIO1_IO18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P2</p></td>\n<td><p>GPIO_AD_B0_03</p></td>\n<td><p>D2</p></td>\n<td><p>GPIO1_IO03</p></td>\n<td rowspan=\"2\"><p>UART1</p></td>\n<td rowspan=\"2\"><p>UART_6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P3</p></td>\n<td><p>GPIO_AD_B0_02</p></td>\n<td><p>D3</p></td>\n<td><p>GPIO1_IO02</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P4</p></td>\n<td><p>GPIO_B1_14</p></td>\n<td><p>D4</p></td>\n<td><p>GPIO2_IO30</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P5</p></td>\n<td><p>GPIO_B1_15</p></td>\n<td><p>D5</p></td>\n<td><p>GPIO2_IO31</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P6</p></td>\n<td><p>GPIO_B0_03</p></td>\n<td><p>D6</p></td>\n<td><p>GPIO2_IO03</p></td>\n<td rowspan=\"4\"><p>SPI0</p></td>\n<td rowspan=\"4\"><p>SPI_4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P7</p></td>\n<td><p>GPIO_B0_02</p></td>\n<td><p>D7</p></td>\n<td><p>GPIO2_IO02</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P8</p></td>\n<td><p>GPIO_B0_01</p></td>\n<td><p>D8</p></td>\n<td><p>GPIO2_IO01</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P9</p></td>\n<td><p>GPIO_B0_00</p></td>\n<td><p>D9</p></td>\n<td><p>GPIO2_IO00</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P10</p></td>\n<td><p>GPIO_B1_03</p></td>\n<td><p>D10</p></td>\n<td><p>GPIO2_IO19</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P11</p></td>\n<td><p>GPIO_B1_02</p></td>\n<td><p>D11</p></td>\n<td><p>GPIO2_IO18</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P12</p></td>\n<td><p>GPIO_B1_01</p></td>\n<td><p>D12</p></td>\n<td><p>GPIO2_IO17</p></td>\n<td rowspan=\"2\"><p>UART2</p></td>\n<td rowspan=\"2\"><p>UART_4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P13</p></td>\n<td><p>GPIO_B1_00</p></td>\n<td><p>D13</p></td>\n<td><p>GPIO2_IO16</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P14</p></td>\n<td><p>GPIO_AD_B1_15</p></td>\n<td><p>D14</p></td>\n<td><p>GPIO1_IO31</p></td>\n<td rowspan=\"4\"><p>SPI1</p></td>\n<td rowspan=\"4\"><p>SPI_3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P15</p></td>\n<td><p>GPIO_AD_B1_14</p></td>\n<td><p>D15</p></td>\n<td><p>GPIO1_IO30</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P16</p></td>\n<td><p>GPIO_AD_B1_13</p></td>\n<td><p>D16</p></td>\n<td><p>GPIO1_IO29</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P17</p></td>\n<td><p>GPIO_AD_B1_12</p></td>\n<td><p>D17</p></td>\n<td><p>GPIO1_IO28</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P18</p></td>\n<td><p>GPIO_AD_B1_11</p></td>\n<td><p>D18</p></td>\n<td><p>GPIO1_IO27</p></td>\n<td rowspan=\"2\"><p>UART3</p></td>\n<td rowspan=\"2\"><p>UART_8</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P19</p></td>\n<td><p>GPIO_AD_B1_10</p></td>\n<td><p>D19</p></td>\n<td><p>GPIO1_IO26</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P20</p></td>\n<td><p>GPIO_AD_B1_09</p></td>\n<td><p>D20</p></td>\n<td><p>GPIO1_IO25</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P21</p></td>\n<td><p>GPIO_AD_B1_08</p></td>\n<td><p>D21</p></td>\n<td><p>GPIO1_IO24</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P22</p></td>\n<td><p>GPIO_AD_B1_05</p></td>\n<td><p>D22</p></td>\n<td><p>GPIO1_IO21</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P23</p></td>\n<td><p>GPIO_AD_B1_04</p></td>\n<td><p>D23</p></td>\n<td><p>GPIO1_IO20</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P24</p></td>\n<td><p>GPIO_AD_B0_15</p></td>\n<td><p>D24</p></td>\n<td><p>GPIO1_IO15</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P25</p></td>\n<td><p>GPIO_AD_B0_14</p></td>\n<td><p>D25</p></td>\n<td><p>GPIO1_IO14</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P26</p></td>\n<td><p>GPIO_B0_04</p></td>\n<td><p>D26</p></td>\n<td><p>GPIO2_IO04</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P27</p></td>\n<td><p>GPIO_B0_05</p></td>\n<td><p>D27</p></td>\n<td><p>GPIO2_IO05</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P28</p></td>\n<td><p>GPIO_B0_06</p></td>\n<td><p>D28</p></td>\n<td><p>GPIO2_IO06</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P29</p></td>\n<td><p>GPIO_B0_07</p></td>\n<td><p>D29</p></td>\n<td><p>GPIO2_IO07</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P30</p></td>\n<td><p>GPIO_B0_08</p></td>\n<td><p>D30</p></td>\n<td><p>GPIO2_IO08</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P31</p></td>\n<td><p>GPIO_B0_09</p></td>\n<td><p>D31</p></td>\n<td><p>GPIO2_IO09</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P32</p></td>\n<td><p>GPIO_B0_10</p></td>\n<td><p>D32</p></td>\n<td><p>GPIO2_IO10</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P33</p></td>\n<td><p>GPIO_B0_11</p></td>\n<td><p>D33</p></td>\n<td><p>GPIO2_IO11</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P34</p></td>\n<td><p>GPIO_B0_12</p></td>\n<td><p>D34</p></td>\n<td><p>GPIO2_IO12</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P35</p></td>\n<td><p>GPIO_B0_13</p></td>\n<td><p>D35</p></td>\n<td><p>GPIO2_IO13</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P36</p></td>\n<td><p>GPIO_B0_14</p></td>\n<td><p>D36</p></td>\n<td><p>GPIO2_IO14</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P37</p></td>\n<td><p>GPIO_B0_15</p></td>\n<td><p>D37</p></td>\n<td><p>GPIO2_IO15</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P38</p></td>\n<td><p>GPIO_B1_11</p></td>\n<td><p>D38</p></td>\n<td><p>GPIO2_IO27</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P39</p></td>\n<td><p>GPIO_B1_10</p></td>\n<td><p>D39</p></td>\n<td><p>GPIO2_IO26</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P40</p></td>\n<td><p>GPIO_B1_9</p></td>\n<td><p>D40</p></td>\n<td><p>GPIO2_IO25</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P41</p></td>\n<td><p>GPIO_B1_8</p></td>\n<td><p>D41</p></td>\n<td><p>GPIO2_IO24</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P42</p></td>\n<td><p>GPIO_B1_7</p></td>\n<td><p>D42</p></td>\n<td><p>GPIO2_IO23</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P43</p></td>\n<td><p>GPIO_B1_6</p></td>\n<td><p>D43</p></td>\n<td><p>GPIO2_IO22</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P44</p></td>\n<td><p>GPIO_B1_5</p></td>\n<td><p>D44</p></td>\n<td><p>GPIO2_IO21</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P45</p></td>\n<td><p>GPIO_B1_4</p></td>\n<td><p>D45</p></td>\n<td><p>GPIO2_IO20</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td></td>\n<td><p>GPIO_AD_B1_07</p></td>\n<td></td>\n<td></td>\n<td rowspan=\"2\"><p>I2C0</p></td>\n<td rowspan=\"2\"><p>I2C_3</p></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td><p>GPIO_AD_B1_06</p></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td></td>\n<td><p>GPIO_AD_B1_00</p></td>\n<td></td>\n<td></td>\n<td rowspan=\"2\"><p>I2C1</p></td>\n<td rowspan=\"2\"><p>I2C_1</p></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td><p>GPIO_AD_B1_01</p></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-flash\">\n<h2>Programming and Flash<a class=\"headerlink\" href=\"#programming-and-flash\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build  applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This board is configured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must flash the device by copying files</p>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a USB-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to Serial of SwiftIO.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Connect a USB cable from your PC to “Serial” port of SwiftIO.\nOn Ubuntu, DAPLink debug probes appear on the host\ncomputer as a USB disk mounted to <code class=\"docutils literal notranslate\"><span class=\"pre\">/media/&lt;user&gt;/SWIFTIODBGR/</span></code>,\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;user&gt;</span></code> is your login name.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b mm_swiftio samples/hello_world</span>\n<span class=\"go\">cp build/zephyr/zephyr.bin /media/&lt;user&gt;/SWIFTIODBGR/</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the “reset” button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.1.0-rc1 *****</span>\n<span class=\"go\">Hello World! mm_swiftio</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 6, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "twr_kv58f220m", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP TWR-KV58F220M</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-twr-kv58f220m\">\n<span id=\"twr-kv58f220m\"></span><h1>NXP TWR-KV58F220M<a class=\"headerlink\" href=\"#nxp-twr-kv58f220m\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The TWR-KV58F220M is a development board for NXP Kinetis KV5x 32-bit\nMCU-based platforms. The onboard OpenSDAv2 serial and debug adapter,\nrunning an open source bootloader, offers options for serial\ncommunication, flash programming, and run-control debugging.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/twr_kv58f220m.jpg\"><img alt=\"TWR-KV58F220M\" src=\"../../../../_images/twr_kv58f220m.jpg\" style=\"width: 700px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">TWR-KV58F220M (Credit: NXP)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MKV58F1M0VLQ24 MCU (up to 240 MHz, 1 MB flash memory, 256 KB RAM,\nand 144 Low profile Quad Flat Package (LQFP))</p></li>\n<li><p>1.8 V or 3.3 V MCU operation</p></li>\n<li><p>6-axis FXOS8700CQ digital accelerometer and magnetometer</p></li>\n<li><p>Four user LEDs</p></li>\n<li><p>Four user push-buttons</p></li>\n<li><p>Potentiometer</p></li>\n<li><p>Two general purpose TWRPI headers</p></li>\n<li><p>Motor pin header</p></li>\n</ul>\n<p>For more information about the KV5x SoC and the TWR-KV58F220M board, see\nthese NXP reference documents:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/general-purpose-mcus/kv-series-cortex-m4-m0-plus-m7/kinetis-kv5x-240-mhz-motor-control-and-power-conversion-ethernet-mcus-based-on-arm-cortex-m7:KV5x\">KV5x Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/KV5XP144M240.pdf\">KV5x Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=KV5XP144M240RM\">KV5x Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/TWR-KV58F220M\">TWR-KV58F220M Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=TWRKV58F220MUG\">TWR-KV58F220M User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=TWR-KV58F220M-SCH\">TWR-KV58F220M Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The twr_kv58f220m board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/twr_kv58f220m/twr_kv58f220m_defconfig</span></code>.</p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KV58 SoC is configured to use the 50 MHz external oscillator on the\nboard with the on-chip PLL to generate a 237.5 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KV58 SoC has six UARTs. UART0 is configured for the console. The\nremaining UARTs are not used.</p>\n</div>\n<div class=\"section\" id=\"accelerometer-and-magnetometer\">\n<h3>Accelerometer and magnetometer<a class=\"headerlink\" href=\"#accelerometer-and-magnetometer\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The TWR-KV58F220M board by default only supports polling the FXOS8700\naccelerometer and magnetometer for sensor values\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_FXOS8700_TRIGGER_NONE=y</span></code>).</p>\n<p>In order to support FXOS8700 triggers (interrupts), shunts must be placed on\nthe jumpers <code class=\"docutils literal notranslate\"><span class=\"pre\">J2</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">J9</span></code>. A trigger option also must be enabled in Kconfig\n(either <code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_FXOS8700_TRIGGER_GLOBAL_THREAD=y</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_FXOS8700_TRIGGER_OWN_THREAD=y</span></code>).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This board integrates an OpenSDA debug probe. However, it can currently only be\nused for flashing the KV58 SoC by copying the compiled firmware to the USB Mass\nStorage Device. The board cannot be debugged using the OpenSDA probe, since\npyOCD does not support the target. The OpenSDA J-Link firmware (as of release\n2019-06-03) also cannot be used, since the flash algorithm for the KV58 seems to\nbe broken at the time of writing.</p>\n<p>An external J-Link debug probe connected to the JTAG header J13 is used to debug\nthe target.</p>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Using west:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_kv58f220m samples/hello_world</span>\n</pre></div>\n</div>\n<p>Using CMake and ninja:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"gp\"># </span>Use cmake to configure a Ninja-based buildsystem:\n<span class=\"go\">cmake -B build -GNinja -DBOARD=twr_kv58f220m samples/hello_world</span>\n\n<span class=\"gp\"># </span>Now run ninja on the generated build system:\n<span class=\"go\">ninja -C build</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Even though the OpenSDA probe cannot be used for debugging, we will use it as a\nUSB-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J22.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_kv58f220m samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! twr_kv58f220m</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_kv58f220m samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! twr_kv58f220m</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 196608}, {"label": "ccm0", "size": 65536}], "main_ram_size": 196608, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_f429zi", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F429ZI</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f429zi\">\n<span id=\"nucleo-f429zi-board\"></span><h1>ST Nucleo F429ZI<a class=\"headerlink\" href=\"#st-nucleo-f429zi\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F429ZI board features an ARM Cortex-M4 based STM32F429ZI MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F429ZI board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>LSE crystal: 32.768 kHz crystal oscillator</p></li>\n<li><p>USB OTG</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>ST Zio connector including: support for Arduino* Uno V3 connectivity\n(A0 to A5, D0 to D15) and additional signals exposing a wide range of\nperipherals</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>Three user LEDs</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f429zi.png\"><img alt=\"Nucleo F429ZI\" class=\"align-center\" src=\"../../../../_images/nucleo_f429zi.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f429zi.html\">Nucleo F429ZI website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F429ZI provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F429ZIT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>180 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>256+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (17)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (4/4)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (6)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>8- to 14-bit parallel camera</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<p>More information about STM32F429ZI can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f429zi.html\">STM32F429ZI on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031020.pdf\">STM32F429 reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/DM00071990.pdf\">STM32F429 datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f429zi board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f429zi/nucleo_f429zi_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Nucleo F429ZI Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f429zi_cn8.png\"><img alt=\"Nucleo F429ZI ZIO connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f429zi_cn8.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f429zi_cn7.png\"><img alt=\"Nucleo F429ZI ZIO connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f429zi_cn7.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f429zi_cn11.png\"><img alt=\"Nucleo F429ZI Morpho connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f429zi_cn11.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f429zi_cn12.png\"><img alt=\"Nucleo F429ZI Morpho connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f429zi_cn12.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F429ZI board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows</p>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>PWM_2_CH1 : PE13</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>ADC1 : PA0</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F429ZI System Clock could be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default System clock is driven by PLL clock at 180MHz,\ndriven by an 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F429ZI board has 8 UARTs. The Zephyr console output is assigned to UART3.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F429ZI board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n<div class=\"section\" id=\"flash-partitions-for-mcuboot-bootloader\">\n<h2>Flash partitions for MCUBoot bootloader<a class=\"headerlink\" href=\"#flash-partitions-for-mcuboot-bootloader\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The on-board STM32F429ZI MCU has 2MBs of internal flash memory. To use <a class=\"reference external\" href=\"https://github.com/JuulLabs-OSS/mcuboot/blob/master/README.md\">MCUboot</a>,\ndefine a <a class=\"reference internal\" href=\"../../../../reference/storage/flash_map/flash_map.html#flash-map-api\"><span class=\"std std-ref\">Zephyr partition table</span></a> for the flash memory in\nits devicetree file <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f429zi.dts</span></code>. As a reference, a partition table for\nMCUBoot is already defined in the devicetree file, with these settings:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://github.com/JuulLabs-OSS/mcuboot/blob/master/README.md\">MCUBoot</a> bootloader partition takes 64K bytes.</p></li>\n<li><p>Zephyr settings partition takes 64K bytes.</p></li>\n<li><p>Application image takes 256K bytes in Slot 0 partition.</p></li>\n<li><p>Updating image takes another 256K bytes in Slot 1 partition.</p></li>\n<li><p>A scratch partition with 128K is required for image swap.</p></li>\n</ul>\n<p>A specific application can adjust each partition size based on its needs.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram0_bsd", "size": 65536}, {"label": "sram0_ns", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160_innblue21ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52_vbluno52", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52-VBLUno52</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52-vbluno52\">\n<span id=\"id1\"></span><h1>nRF52-VBLUno52<a class=\"headerlink\" href=\"#nrf52-vbluno52\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Zephyr can use the nrf52_vbluno52 board configuration to run on the VBLUno52 board,\na VNG Bluetooth Low Energy UNO using an nRF52832 ARM Cortex-M4F processor.\nIt provides support for the Nordic Semiconductor nRF52832 ARM Cortex-M4F CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>UART</p></li>\n<li><p>GPIO</p></li>\n<li><p>FLASH</p></li>\n<li><p>RADIO (Bluetooth Low Energy 5.0)</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"nRF52 VBLUno52\" src=\"../../../../_images/nrf52_vbluno52.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">nRF52_VBLUno52 board</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The VBLUno52 board has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 64 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf52_vbluno52 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED = LED0 (green) = P0.12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = BUT = SW0 = P0.17</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The VBLUno52 board has an on-board DAPLink (CMSIS-DAP) interface for flashing and debugging.\nYou do not need any other programming device.\nYou only need to install the pyOCD tool (<a class=\"reference external\" href=\"https://pypi.python.org/pypi/pyOCD\">https://pypi.python.org/pypi/pyOCD</a>)</p>\n<p>See the <a class=\"reference internal\" href=\"../../../../getting_started/index.html#getting-started\"><span class=\"std std-ref\">Getting Started Guide</span></a> for general information on setting up\nyour development environment.</p>\n<p>You can build and flash applications in the usual way. Here is an\nexample for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52_vbluno52 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-vbluno52-with-zephyr-buttons-leds-uart-ble\">\n<h2>Testing the VBLUno52 with Zephyr: buttons, LEDs, UART, BLE<a class=\"headerlink\" href=\"#testing-the-vbluno52-with-zephyr-buttons-leds-uart-ble\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Here are some sample applications that you can use to test different\ncomponents on the VBLUno52 board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/beacon/README.html#bluetooth-beacon-sample\"><span class=\"std std-ref\">Bluetooth: Beacon</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/peripheral_hr/README.html#peripheral-hr\"><span class=\"std std-ref\">Bluetooth: Peripheral HR</span></a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52_blenano2", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Redbear Labs Nano v2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"redbear-labs-nano-v2\">\n<span id=\"nrf52-blenano2\"></span><h1>Redbear Labs Nano v2<a class=\"headerlink\" href=\"#redbear-labs-nano-v2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nano v2 is a development board equipped with Nordic’s next generation nRF52832 Bluetooth Low Energy SOC.\nThis board was designed as a ‘drop-in’ replacement of BLE Nano with exactly the same form factor.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>nRF52832 SoC is built around a 32-bit ARM Cortex-M4F CPU with 512kB flash + 64kB RAM</p></li>\n<li><p>11 x Digital I/0</p></li>\n<li><p>1 UART with hardware flow control ( 4 I/O pins occupied )</p></li>\n<li><p>1 I2C ( 2 I/O pins occupied )</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The BLE Nano v2 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLE nano v2 pinout</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52_blenano2.png\"><img alt=\"NANO2\" class=\"align-center\" src=\"../../../../_images/nrf52_blenano2.png\" style=\"width: 680px;\"/></a>\n<p>DAPLink board</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/dap.jpg\"><img alt=\"DAP\" class=\"align-center\" src=\"../../../../_images/dap.jpg\" style=\"width: 680px;\"/></a>\n<p>The DAPLink USB board acts as a dongle. DAPLink debug probes appear on the host computer as a USB disk.\nIt also regulates 5V from USB to 3.3V via the onboard LDO to power Nano v2.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52_blenano2</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To flash an application, you’ll need to connect your BLE Nano 2 with the\nDAPLink board, then attach that to your computer via USB.</p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>Be careful to mount the BLE Nano 2 correctly! The side of the board\nwith the VIN and GND pins should face <strong>towards</strong> the USB\nconnector.</p>\n</div>\n<p>Now build and flash applications as usual. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52_blenano2 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>After mounting the BLE Nano 2 on its DAPLink board as described above,\nyou can debug an application in the usual way.  Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52_blenano2 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram0_bsd", "size": 65536}, {"label": "sram0_ns", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160_innblue22", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF9160 INNBLUE22</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf9160-innblue22\">\n<span id=\"id1\"></span><h1>nRF9160 INNBLUE22<a class=\"headerlink\" href=\"#nrf9160-innblue22\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF9160 innblue22 is a cellular IoT sensor development board, which\nis based on the nRF9160 SiP, and features NB-IoT and LTE-M connectivity.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf9160_innblue22.png\"><img alt=\"nRF9160 innblue22\" src=\"../../../../_images/nrf9160_innblue22.png\" style=\"width: 1024px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF9160 innblue22 (Credit: innblue)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following parts are built into the board:</p>\n<ul class=\"simple\">\n<li><p>Accelerometer: ST LIS2DH12</p></li>\n<li><p>CryptoElement: Atmel ATECC608a</p></li>\n<li><p>Humidity Sensor: ST HTS221</p></li>\n<li><p>Qi charger: TI BQ51013</p></li>\n<li><p>Battery fuel gauge: TI BQ27421</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf9160_innblue22 board configuration supports the following\nhardware (as of nRF9160) features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Interface</p></td>\n<td><p>Controller</p></td>\n<td><p>Driver/Component</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>system protection</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UARTE</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 ( red ) = P0.7</p></li>\n<li><p>LED2 (green) = P0.6</p></li>\n<li><p>LED3 ( blue) = P0.5</p></li>\n<li><p>LED4 ( red ) = P0.4</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons-and-switches\">\n<h4>Push buttons and Switches<a class=\"headerlink\" href=\"#push-buttons-and-switches\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = P0.31</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit. The IDAU is implemented\nwith the System Protection Unit and is used to define secure and non-secure\nmemory maps.  By default, all of the memory space  (Flash, SRAM, and\nperipheral address space) is defined to be secure accessible only.</p></li>\n<li><p>Secure boot.</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nrf9160_innblue22 supports the Armv8m Security Extension, and by default boots\nin the Secure state.</p>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications\">\n<h3>Building Secure/Non-Secure Zephyr applications<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The process requires the following steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build the Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue22</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_TRUSTED_EXECUTION_SECURE=y</span></code> in the the application project configuration file.</p></li>\n<li><p>Build the Non-Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue22_ns</span></code>.</p></li>\n<li><p>Merge the two binaries together.</p></li>\n</ol>\n<p>When building a Secure/Non-Secure application, the Secure application will\nhave to set the IDAU (SPU) configuration to allow Non-Secure access to all\nCPU resources utilized by the Non-Secure application firmware. SPU\nconfiguration shall take place before jumping to the Non-Secure application.</p>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application\">\n<h3>Building a Secure only application<a class=\"headerlink\" href=\"#building-a-secure-only-application\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build the Zephyr app in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>), using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=nrf9160_innblue22</span></code>.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF9160 innblue22\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf9160_innblue22 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 7, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32hg_slstk3400a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFM32HG-SLSTK3400A</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efm32hg-slstk3400a\">\n<span id=\"id1\"></span><h1>EFM32HG-SLSTK3400A<a class=\"headerlink\" href=\"#efm32hg-slstk3400a\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFM32 Happy Gecko Starter Kit EFM32HG-SLSTK3400A contains a MCU from the\nEFM32HG family built on ARM® Cortex®-M0+ processor with excellent low\npower capabilities.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/efm32hg_slstk3400a.jpg\"><img alt=\"EFM32HG-SLSTK3400A\" src=\"../../../../_images/efm32hg_slstk3400a.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">EFM32HG-SLSTK3400A (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring system for precise current tracking</p></li>\n<li><p>Real-time energy and power profiling</p></li>\n<li><p>ARM Cortex M0+ with 64 kB Flash and 8 kB RAM</p></li>\n<li><p>128 X 128 pixel Memory LCD</p></li>\n<li><p>2 user buttons, 2 user LEDs and 2 touch buttons</p></li>\n<li><p>20 pin expansion header</p></li>\n<li><p>Silicon Labs Si7021 Relative Humidity/Temperature sensor</p></li>\n<li><p>USB device interface</p></li>\n<li><p>Integrated SEGGER J-Link USB debugger/emulator with debug out functionality</p></li>\n</ul>\n<p>See these documents for more information</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/mcu/32-bit/efm32-happy-gecko\">EFM32HG Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/EFM32HG322.pdf\">EFM32HG Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/EFM32HG-RM.pdf\">EFM32HG Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/development-tools/mcu/32-bit/efm32-happy-gecko-starter-kit\">EFM32HG-SLSTK3400A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug255-stk3400-user-guide.pdf\">EFM32HG-SLSTK3400A User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/schematic-files/EFM32HG_BRD2012A_B01_schematic.PDF\">EFM32HG-SLSTK3400A Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32hg_slstk3400 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32hg_slstk3400a/efm32hg_slstk3400a_defconfig</span></code></p>\n<p>Other hardware features are currently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32HG SoC has six GPIO controllers (PORTA to PORTF), but only three are\ncurrently enabled (PORTB, PORTE and PORTF) for the EFM32HG-SLSTK3400A board.</p>\n<p>In the following table, the column Name contains Pin names. For example, PF4\nmeans Pin number 4 on PORTF, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PF4</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF5</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC9</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC10</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Board Controller Enable\nEFM_BC_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF2</p></td>\n<td><p>USART0_TX</p></td>\n<td><p>USART Console EFM_BC_TX U0_TX #4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA9</p></td>\n<td><p>USART0_RX</p></td>\n<td><p>USART Console EFM_BC_RX U0_RX #4</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32HG SoC is configured to use the 24 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32HG SoC has two USARTs, two UARTs and two Low Energy UARTs (LEUART).\nUSART1 is connected to the board controller and is used for the console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32HG-SLSTK3400 includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and a\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efm32-slstk3400a\">\n<h4>Flashing an application to EFM32-SLSTK3400A<a class=\"headerlink\" href=\"#flashing-an-application-to-efm32-slstk3400a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32hg_slstk3400a samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFM32HG-SLSTK3400A to your host computer using the USB port and\nyou should see a USB connection that exposes a mass storage device (STK3400)\nand a USB Serial Port. Copy the generated <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code> in the STK3400 drive.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you will see this message written to the serial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 2147483648}], "main_ram_size": 2147483648, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 15, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}, {"label": "I2C_5"}, {"label": "I2C_6"}, {"label": "I2C_7"}, {"label": "I2C_PSE_0"}, {"label": "I2C_PSE_1"}, {"label": "I2C_PSE_2"}, {"label": "I2C_PSE_3"}, {"label": "I2C_PSE_4"}, {"label": "I2C_PSE_5"}, {"label": "I2C_PSE_6"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 11, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_PSE_0"}, {"label": "UART_PSE_1"}, {"label": "UART_PSE_2"}, {"label": "UART_PSE_3"}, {"label": "UART_PSE_4"}, {"label": "UART_PSE_5"}, {"label": "UART_1_FIXED"}, {"label": "UART_2_FIXED"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ehl_crb", "arch": "x86", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">x86 Boards</a> »</li>\n<li>Elkhart Lake CRB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"elkhart-lake-crb\">\n<span id=\"ehl-crb\"></span><h1>Elkhart Lake CRB<a class=\"headerlink\" href=\"#elkhart-lake-crb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Elkhart Lake Reference Board (EHL CRB) is an example implementation of a\ncompact single board computer with high performance for IoT edge devices.</p>\n<p>This board configuration enables kernel support for the <a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a> board.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board configuration works on the variant of <a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a>\nboards containing Intel® Atom™ SoC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>General information about the board can be found at the <a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a> website.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In addition to the standard architecture devices (HPET, local and I/O APICs,\netc.), Zephyr supports the following Elkhart Lake-specific SoC devices:</p>\n<ul class=\"simple\">\n<li><p>I2C</p></li>\n</ul>\n<div class=\"section\" id=\"uart-serial-port-support\">\n<h4>UART Serial Port Support<a class=\"headerlink\" href=\"#uart-serial-port-support\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Elkhart Lake UARTs are NS16550-compatible. Baud rate of\n115.2kbps is supported.</p>\n</div>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a> website for more information.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Use the following procedures for booting an image on a EHL CRB board.</p>\n<div class=\"contents local topic\" id=\"contents\">\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#build-zephyr-application\" id=\"id1\">Build Zephyr application</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#preparing-the-boot-device\" id=\"id2\">Preparing the Boot Device</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#booting-the-elkhart-lake-crb-board\" id=\"id3\">Booting the Elkhart Lake CRB Board</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#booting-the-elkhart-lake-crb-board-over-network\" id=\"id4\">Booting the Elkhart Lake CRB Board over network</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"build-zephyr-application\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Build Zephyr application</a><a class=\"headerlink\" href=\"#build-zephyr-application\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build a Zephyr application; for instance, to build the <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code>\napplication on Elkhart Lake CRB:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ehl_crb samples/hello_world</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>A Zephyr EFI image file named <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.efi</span></code> is automatically\ncreated in the build directory after the application is built.</p>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"preparing-the-boot-device\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Preparing the Boot Device</a><a class=\"headerlink\" href=\"#preparing-the-boot-device\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Prepare a USB flash drive to boot the Zephyr application image on\nan Elkhart Lake CRB board.</p>\n<ol class=\"arabic\">\n<li><p>Format the USB flash drive as FAT32.</p>\n<p>On Windows, open <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">Explorer</span></code>, and right-click on the USB flash drive.\nSelect <code class=\"docutils literal notranslate\"><span class=\"pre\">Format...</span></code>. Make sure in <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">System</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">FAT32</span></code> is selected.\nClick on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Format</span></code> button and wait for it to finish.</p>\n<p>On Linux, graphical utilities such as <code class=\"docutils literal notranslate\"><span class=\"pre\">gparted</span></code> can be used to format\nthe USB flash drive as FAT32. Alternatively, under terminal, find out\nthe corresponding device node for the USB flash drive (for example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/sdd</span></code>). Execute the following command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>mkfs.vfat -F <span class=\"m\">32</span> &lt;device-node&gt;\n</pre></div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>Make sure the device node is the actual device node for\nthe USB flash drive. Or else you may erase other storage devices\non your system, and will render the system unusable afterwards.</p>\n</div>\n</li>\n<li><p>Copy the Zephyr EFI image file <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr/zephyr.efi</span></code> to the USB drive.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-the-elkhart-lake-crb-board\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Booting the Elkhart Lake CRB Board</a><a class=\"headerlink\" href=\"#booting-the-elkhart-lake-crb-board\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Boot the Elkhart Lake CRB board to the EFI shell with USB flash drive connected.</p>\n<ol class=\"arabic\">\n<li><p>Insert the prepared boot device (USB flash drive) into the Elkhart Lake CRB board.</p></li>\n<li><p>Connect the board to the host system using the serial cable and\nconfigure your host system to watch for serial data.  See\n<a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a> website for more information.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>On Windows, PuTTY has an option to set up configuration for\nserial data.  Use a baud rate of 115200.</p>\n</div>\n</li>\n<li><p>Power on the Elkhart Lake CRB board.</p></li>\n<li><p>When the following output appears, press <kbd class=\"kbd docutils literal notranslate\">F7</kbd>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Press &lt;DEL&gt; or &lt;ESC&gt; to enter setup.</span>\n</pre></div>\n</div>\n</li>\n<li><p>From the menu that appears, select the menu entry that describes\nthat particular EFI shell.</p></li>\n<li><p>From the EFI shell select Zephyr EFI image to boot.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Shell&gt; fs0:zephyr.efi</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-the-elkhart-lake-crb-board-over-network\">\n<h3><a class=\"toc-backref\" href=\"#contents\">Booting the Elkhart Lake CRB Board over network</a><a class=\"headerlink\" href=\"#booting-the-elkhart-lake-crb-board-over-network\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"build-zephyr-image\">\n<h4>Build Zephyr image<a class=\"headerlink\" href=\"#build-zephyr-image\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic simple\">\n<li><p>Follow <a class=\"reference internal\" href=\"#build-zephyr-application\">Build Zephyr application</a> steps to build Zephyr image.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"prepare-linux-host\">\n<h4>Prepare Linux host<a class=\"headerlink\" href=\"#prepare-linux-host\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Install DHCP, TFTP servers. For example <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo apt-get install dnsmasq\n</pre></div>\n</div>\n</li>\n<li><p>Configure DHCP server. Configuration for <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code> is below:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>Only listen to this interface\n<span class=\"go\">interface=eno2</span>\n<span class=\"go\">dhcp-range=10.1.1.20,10.1.1.30,12h</span>\n</pre></div>\n</div>\n</li>\n<li><p>Configure TFTP server.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>tftp\n<span class=\"go\">enable-tftp</span>\n<span class=\"go\">tftp-root=/srv/tftp</span>\n<span class=\"go\">dhcp-boot=zephyr.efi</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.efi</span></code> is a Zephyr EFI binary created above.</p>\n</li>\n<li><p>Copy the Zephyr EFI image <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr/zephyr.efi</span></code> to the\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/srv/tftp</span></code> folder.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cp zephyr/zephyr.efi /srv/tftp/\n</pre></div>\n</div>\n</div></blockquote>\n</li>\n<li><p>Restart <code class=\"docutils literal notranslate\"><span class=\"pre\">dnsmasq</span></code> service:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo systemctl restart dnsmasq.service\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"prepare-elkhart-lake-crb-board-for-network-boot\">\n<h4>Prepare Elkhart Lake CRB board for network boot<a class=\"headerlink\" href=\"#prepare-elkhart-lake-crb-board-for-network-boot\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Enable boot from PXE. Go to EFI shell and make sure that the first boot\noption is <code class=\"docutils literal notranslate\"><span class=\"pre\">UEFI</span> <span class=\"pre\">PXEv4</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Shell&gt; bcfg boot dump</span>\n<span class=\"go\">Option: 00. Variable: Boot0007</span>\n<span class=\"go\">  Desc    - UEFI PXEv4 (MAC:6805CABC1997)</span>\n<span class=\"go\">  DevPath - PciRoot(0x0)/Pci(0x1C,0x0)/Pci(0x0,0x0)/MAC(6805CABC1997,0x0)/IPv4(0.0.0.0)</span>\n<span class=\"go\">  Optional- Y</span>\n<span class=\"go\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p>If UEFI PXEv4 is not the first boot option use <code class=\"docutils literal notranslate\"><span class=\"pre\">bcfg</span> <span class=\"pre\">boot</span> <span class=\"pre\">mv</span></code> command to\nchange boot order</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Shell&gt; bcfg boot mv 7 0</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"booting-elkhart-lake-crb\">\n<h4>Booting Elkhart Lake CRB<a class=\"headerlink\" href=\"#booting-elkhart-lake-crb\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Connect the board to the host system using the serial cable and\nconfigure your host system to watch for serial data.</p></li>\n<li><p>Power on the Elkhart Lake CRB board.</p></li>\n<li><p>Verify that the board got an IP address:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>journalctl -f -u dnsmasq\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPDISCOVER(eno2) 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPOFFER(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPREQUEST(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n<span class=\"go\">dnsmasq-dhcp[5386]: DHCPACK(eno2) 10.1.1.28 00:07:32:52:25:88</span>\n</pre></div>\n</div>\n</li>\n<li><p>Verify that network booting is started:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>journalctl -f -u dnsmasq\n<span class=\"go\">dnsmasq-tftp[5386]: sent /srv/tftp/zephyr.efi to 10.1.1.28</span>\n</pre></div>\n</div>\n</li>\n<li><p>When the boot process completes, you have finished booting the\nZephyr application image.</p></li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "adafruit_trinket_m0", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Adafruit Trinket M0</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"adafruit-trinket-m0\">\n<span id=\"id1\"></span><h1>Adafruit Trinket M0<a class=\"headerlink\" href=\"#adafruit-trinket-m0\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit Trinket M0 is a tiny (27 mm x 15 mm) ARM development\nboard with an onboard RGB LED, USB port, and range of I/O broken out\nonto 5 pins.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/adafruit_trinket_m0.png\"><img alt=\"Adafruit Trinket M0\" class=\"align-center\" src=\"../../../../_images/adafruit_trinket_m0.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21E18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>Internal trimmed 8 MHz oscillator</p></li>\n<li><p>A user LED</p></li>\n<li><p>An RGB DotStar LED</p></li>\n<li><p>Native USB port</p></li>\n<li><p>One reset button</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The adafruit_trinket_m0 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/adafruit_trinket_m0/adafruit_trinket_m0_defconfig\">boards/arm/adafruit_trinket_m0/adafruit_trinket_m0_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-trinket-m0-circuitpython-arduino\">Adafruit Trinket M0 Learn site</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> has detailed information about\nthe board including <a class=\"reference external\" href=\"https://learn.adafruit.com/assets/49778\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/assets/45723\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 8 MHz internal oscillator\nwith the on-chip PLL generating the 48 MHz system clock.  The internal\nAPB and GCLK unit are set up in the same way as the upstream Arduino\nlibraries.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs.  On the Trinket, SERCOM0 is\nthe Zephyr console and is available on pins 3 (RX) and 4 (TX).\nSERCOM2 is available on pins 2 (RX) and 0 (TX).</p>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 3 TCC based PWM units with up to 4 outputs each and a period\nof 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then LED0 is\ndriven by TCC0 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs.  On the Trinket, SERCOM1 is\nused to drive the DotStar RGB LED.  SERCOM0 can be put into SPI mode\nand used to connect to devices over pin 2 (MISO), pin 4 (MOSI), and\npin 3 (SCK).</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Trinket M0 ships the BOSSA compatible UF2 bootloader.  The\nbootloader can be entered by quickly tapping the reset button twice.</p>\n<p>Additionally, if <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_USB_CDC_ACM</span></code> is enabled then the bootloader\nwill be entered automatically when you run <code class=\"code docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_trinket_m0 samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Trinket M0 to your host computer using USB</p></li>\n<li><p>Connect a 3.3 V USB to serial adapter to the board and to the\nhost.  See the <a class=\"reference internal\" href=\"#serial-port\">Serial Port</a> section above for the board’s pin\nconnections.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Tap the reset button twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_trinket_m0 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/adafruit-trinket-m0-circuitpython-arduino\">https://learn.adafruit.com/adafruit-trinket-m0-circuitpython-arduino</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/assets/49778\">https://learn.adafruit.com/assets/49778</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/assets/45723\">https://learn.adafruit.com/assets/45723</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "actinius_icarus_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 3, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "NO_LABEL"}, {"label": "NO_LABEL"}, {"label": "NO_LABEL"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "hexiwear_kw40z", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Hexiwear KW40Z</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"hexiwear-kw40z\">\n<span id=\"id1\"></span><h1>Hexiwear KW40Z<a class=\"headerlink\" href=\"#hexiwear-kw40z\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>See <a class=\"reference internal\" href=\"../../hexiwear_k64/doc/index.html#hexiwear-k64\"><span class=\"std std-ref\">Hexiwear</span></a> for a general overview of the Hexiwear board and the\nmain application SoC, the K64. The KW40Z is a secondary SoC on the board that\nprovides wireless connectivity with a multimode BLE and 802.15.4 radio.</p>\n<p>For more information about the KW40Z SoC:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/w-serieswireless-conn.m0-plus-m4/kinetis-kw40z-2.4-ghz-dual-mode-ble-and-802.15.4-wireless-radio-microcontroller-mcu-based-on-arm-cortex-m0-plus-core:KW40Z\">KW40Z Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/MKW40Z160.pdf\">KW40Z Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/MKW40Z160RM.pdf\">KW40Z Reference Manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The hexiwear_kw40z board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>on-chip</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/hexiwear_kw40z/hexiwear_kw40z_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW40Z SoC has three pairs of pinmux/gpio controllers, but only one is\ncurrently enabled (PORTC/GPIOC) for the hexiwear_kw40z board.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTB1</p></td>\n<td><p>ADC</p></td>\n<td><p>ADC0 channel 1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC6</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC7</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW40Z SoC is configured to use the 32 MHz external oscillator on the board\nwith the on-chip FLL to generate a 40 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW40Z SoC has one UART, which is used for BT HCI. There is no UART\navailable for a console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nbut because Segger RTT is required for a console, you must reconfigure the\nboard for one of the following debug probes instead.</p>\n<div class=\"section\" id=\"opensda-jlink-onboard-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_V2_1\">OpenSDA J-Link Generic Firmware for V2.1 Bootloader</a>. Check that switches\nSW1 and SW2 are <strong>off</strong>, and SW3 and SW4 are <strong>on</strong>  to ensure KW40Z SWD signals\nare connected to the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The console is available using <a class=\"reference external\" href=\"https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/\">Segger RTT</a>.</p>\n<p>Connect a USB cable from your PC to CN1.</p>\n<p>Once you have started a debug session, run telnet:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>telnet localhost <span class=\"m\">19021</span>\n<span class=\"go\">Trying 127.0.0.1...</span>\n<span class=\"go\">Connected to localhost.</span>\n<span class=\"go\">Escape character is '^]'.</span>\n<span class=\"go\">SEGGER J-Link V6.44 - Real time terminal output</span>\n<span class=\"go\">J-Link OpenSDA 2 compiled Feb 28 2017 19:27:57 V1.0, SN=621000000</span>\n<span class=\"go\">Process: JLinkGDBServerCLExe</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_kw40z samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>The Segger RTT console is only available during a debug session. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">attach</span></code>\nto start one:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_kw40z samples/hello_world</span>\n<span class=\"go\">west attach</span>\n</pre></div>\n</div>\n<p>Run telnet as shown earlier, and you should see the following message in the\nterminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! hexiwear_kw40z</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_kw40z samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Run telnet as shown earlier, step through the application in your debugger, and\nyou should see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! hexiwear_kw40z</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 3080192}, {"label": "sram1", "size": 131072}], "main_ram_size": 3080192, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "intel_adsp_cavs18", "arch": "xtensa", "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "TCML", "size": 32768}, {"label": "TCMU", "size": 32768}, {"label": "OCRAM_S", "size": 16384}, {"label": "OCRAM", "size": 131072}, {"label": "DDR", "size": 1610612736}, {"label": "flash", "size": 524288}, {"label": "sram", "size": 131072}], "main_ram_size": 1610612736, "gpio": {"count": 7, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "udoo_neo_full_m4", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>UDOO Neo Full</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"udoo-neo-full\">\n<span id=\"udoo-neo-full-m4\"></span><h1>UDOO Neo Full<a class=\"headerlink\" href=\"#udoo-neo-full\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>UDOO Neo Full is an open source Arduino Uno compatible single board computer.\nIt is equipped with an NXP® i.MX 6SoloX hybrid multicore processor\ncomposed of one ARM® Cortex-A9 core running up to 1 GHz and one Cortex-M4\ncore running up to 227 MHz for high CPU performance and real-time response.\nZephyr was ported to run on the Cortex-M4 core only. In a future release, it\nwill also communicate with the Cortex-A9 core (running Linux) via OpenAMP.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/udoo_neo_full_m4.jpg\"><img alt=\"UDOO-Neo-Full\" src=\"../../../../_images/udoo_neo_full_m4.jpg\" style=\"width: 1715px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">UDOO Neo Full (Credit: udoo.org)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MCIMX6X MCU with a single Cortex-A9 (1 GHz) core and single Cortex-M4 (227 MHz) core</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>1 GB RAM</p></li>\n<li><p>128 KB OCRAM</p></li>\n<li><p>256 KB L2 cache (can be switched into OCRAM instead)</p></li>\n<li><p>16 KB OCRAM_S</p></li>\n<li><p>32 KB TCML</p></li>\n<li><p>32 KB TCMU</p></li>\n<li><p>32 KB CAAM (secure RAM)</p></li>\n</ul>\n</li>\n<li><p>A9 Boot Devices</p>\n<ul>\n<li><p>NOR flash</p></li>\n<li><p>NAND flash</p></li>\n<li><p>OneNAND flash</p></li>\n<li><p>SD/MMC</p></li>\n<li><p>Serial (I2C/SPI) NOR flash and EEPROM</p></li>\n<li><p>QuadSPI (QSPI) flash</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>Micro HDMI connector</p></li>\n<li><p>LVDS display connector</p></li>\n<li><p>Touch (I2C signals)</p></li>\n</ul>\n</li>\n<li><p>Multimedia</p>\n<ul>\n<li><p>Integrated 2d/3d graphics controller</p></li>\n<li><p>8-bit parallel interface for analog camera supporting NTSC and PAL</p></li>\n<li><p>HDMI audio transmitter</p></li>\n<li><p>S/PDIF</p></li>\n<li><p>I2S</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>USB 2.0 Type A port</p></li>\n<li><p>USB OTG (micro-AB connector)</p></li>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n<li><p>Wi-Fi 802.11 b/g/n</p></li>\n<li><p>Bluetooth 4.0 Low Energy</p></li>\n<li><p>3x UART ports</p></li>\n<li><p>2x CAN Bus interfaces</p></li>\n<li><p>8x PWM signals</p></li>\n<li><p>3x I2C interface</p></li>\n<li><p>1x SPI interface</p></li>\n<li><p>6x multiplexable signals</p></li>\n<li><p>32x GPIO (A9)</p></li>\n<li><p>22x GPIO (M4)</p></li>\n</ul>\n</li>\n<li><p>Other</p>\n<ul>\n<li><p>MicroSD card slot (8-bit SDIO interface)</p></li>\n<li><p>Power status LED (green)</p></li>\n<li><p>2x user LED (red and orange)</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC Micro USB</p></li>\n<li><p>6-15 V DC jack</p></li>\n<li><p>RTC battery connector</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>pads for soldering of JTAG 14-pin connector</p></li>\n</ul>\n</li>\n<li><p>Sensor</p>\n<ul>\n<li><p>3-Axis Accelerometer</p></li>\n<li><p>3-Axis Magnetometer</p></li>\n<li><p>3-Axis Digital Gyroscope</p></li>\n<li><p>1x Sensor Snap-In I2C connector</p></li>\n</ul>\n</li>\n<li><p>Expansion port</p>\n<ul>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the MCIMX6X SoC and UDOO Neo Full board,\nsee these references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-6-processors/i.mx-6solox-processors-heterogeneous-processing-with-arm-cortex-a9-and-cortex-m4-cores:i.MX6SX\">NXP i.MX 6SoloX Website</a> <a class=\"footnote-reference brackets\" href=\"#id17\" id=\"id18\">8</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX6SXCEC.pdf\">NXP i.MX 6SoloX Datasheet</a> <a class=\"footnote-reference brackets\" href=\"#id19\" id=\"id20\">9</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/IMX6SXRM.pdf\">NXP i.MX 6SoloX Reference Manual</a> <a class=\"footnote-reference brackets\" href=\"#id21\" id=\"id22\">10</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.udoo.org/udoo-neo/\">UDOO Neo Website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.udoo.org/get-started-neo/\">UDOO Neo Getting Started</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.udoo.org/docs-neo\">UDOO Neo Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.udoo.org/download/files/datasheets/datasheet_udoo_neo.pdf\">UDOO Neo Datasheet</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">4</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf\">UDOO Neo Schematics</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">5</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The UDOO Neo Full board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>general purpose input/output</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/udoo_neo_full_m4/udoo_neo_full_m4_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The UDOO Neo Full board was tested with the following pinmux\ncontroller configuration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>J4 RX</p></td>\n<td><p>UART5_RX_DATA</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>J4 TX</p></td>\n<td><p>UART5_TX_DATA</p></td>\n<td><p>UART Console</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MCIMX6X SoC is configured to use the 24 MHz external oscillator\non the board with the on-chip PLL to generate core clock.\nPLL settings for M4 core are set via code running on the A9 core.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MCIMX6X SoC has six UARTs. UART5 is configured for the M4 core and the\nremaining are used by the A9 core or not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The M4 core does not have a flash memory and is not provided a clock\nat power-on-reset. Therefore it needs to be started by the A9 core.\nThe A9 core is responsible to load the M4 binary application into the RAM,\nput the M4 in reset, set the M4 Program Counter and Stack Pointer, and get\nthe M4 out of reset. The A9 can perform these steps at the bootloader level\nor after the Linux system has booted.</p>\n<p>The M4 core can use up to 5 different RAMs (some other types of memory like\na secure RAM are not currently implemented in Zephyr).\nThese are the memory mappings for A9 and M4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 28%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A9</p></th>\n<th class=\"head\"><p>Cortex-M4</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>TCML</p></td>\n<td><p>0x007F8000-0x007FFFFF</p></td>\n<td><p>0x1FFF8000-0x1FFFFFFF</p></td>\n<td><p>32 KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x00807FFF</p></td>\n<td><p>0x20000000-0x20007FFF</p></td>\n<td><p>32 KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>OCRAM_S</p></td>\n<td><p>0x008F8000-0x008FBFFF</p></td>\n<td><p>0x208F8000-0x208FBFFF</p></td>\n<td><p>16 KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>0x20900000-0x2091FFFF</p></td>\n<td><p>128 KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0x80000000-0xFFFFFFFF</p></td>\n<td><p>0x80000000-0xDFFFFFFF</p></td>\n<td><p>2048 MB (1536 for M4)</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/IMX6SXRM.pdf\">NXP i.MX 6SoloX Reference Manual</a> <a class=\"footnote-reference brackets\" href=\"#id21\" id=\"id23\">10</a> Chapter 2 - Memory Maps</p></li>\n</ul>\n<p>You have to choose which RAM will be used at compilation time. This configuration\nis done in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/udoo_neo_full_m4/udoo_neo_full_m4.dts</span></code>.</p>\n<p>If you want to have the code placed in the subregion of a memory, which will\nlikely be the case when using DDR, select “zephyr,flash=&amp;flash” and set the\nDT_FLASH_SIZE macro to determine the region size and DT_FLASH_ADDR to determine\nthe address where the region begins.</p>\n<p>If you want to have the data placed in the subregion of a memory, which will\nlikely be the case when using DDR, select “zephyr,sram = &amp;sram”, which sets the\nCONFIG_SRAM_SIZE macro to determine the region size and\nCONFIG_SRAM_BASE_ADDRESS to determine the address where the region begins.</p>\n<p>Otherwise set “zephyr,flash” and/or “zephyr,sram” to one of the predefined\nregions:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;tcml\n- &amp;ocram_s\n- &amp;ocram\n- &amp;ddr\n\n\"zephyr,sram\"\n- &amp;tcmu\n- &amp;ocram_s\n- &amp;ocram\n- &amp;ddr\n</pre></div>\n</div>\n<p>Below you will find the instructions how a Linux user space application running\non the A9 core can be used to load and run Zephyr application on the M4 core.</p>\n<p>The UDOOBuntu Linux distribution contains a <a class=\"reference external\" href=\"https://github.com/ektor5/udooneo-m4uploader\">udooneo-m4uploader</a> <a class=\"footnote-reference brackets\" href=\"#id13\" id=\"id14\">6</a> utility,\nbut its purpose is to load UDOO Neo “Arduino-like” sketches, so it doesn’t\nwork with Zephyr applications in most cases. The reason is that there is\nan exchange of information between this utility and the program running on the\nM4 core using hardcoded shared memory locations. The utility writes a flag which\nis read by the program running on the M4 core. The program is then supposed to\nend safely and write the status to the shared memory location for the main core.\nThe utility then loads the new application and reads its status from the shared\nmemory location to determine if it has successfully launched. Since this\nfunctionality is specific for the UDOO Neo “Arduino-like” sketches, it is not\nimplemented in Zephyr. However Zephyr applications can support it on their own\nif planned to be used along with the UDOOBuntu Linux running on the A9 core.\nThe udooneo-uploader utility calls another executable named\nmqx_upload_on_m4SoloX which can be called directly to load Zephyr applications.\nCopy the Zephyr binary image into the Linux filesystem and invoke the utility\nas a root user:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mqx_upload_on_m4SoloX zephyr.bin</span>\n</pre></div>\n</div>\n<p>If the output looks like below, the mqx_upload_on_m4SoloX could not read\nthe status of the stopped application. This is expected if the previously\nloaded application is not a UDOO Neo “Arduino-like” sketch and ignores the\nshared memory communication:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">UDOONeo - mqx_upload_on_m4SoloX 1.1.0</span>\n<span class=\"go\">UDOONeo - Waiting M4 Stop, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Stop, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Stop, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Stop, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Failed to Stop M4 sketch: reboot system !</span>\n</pre></div>\n</div>\n<p>In such situation, the mqx_upload_on_m4SoloX utility has reset the trace flags,\nso it will succeed when called again. Then it can have this output below:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">UDOONeo - mqx_upload_on_m4SoloX 1.1.0</span>\n<span class=\"go\">UDOONeo - FILENAME = zephyr.bin; loadaddr = 0x84000000</span>\n<span class=\"go\">UDOONeo - start - end (0x84000000 - 0x84080000)</span>\n<span class=\"go\">UDOONeo - Waiting M4 Run, m4TraceFlags: 000001E0</span>\n<span class=\"go\">UDOONeo - M4 sketch is running</span>\n</pre></div>\n</div>\n<p>Or the one below, if the utility cannot read the status flag that the M4 core\napplications has started. It can be ignored as the application should be\nrunning, the utility just doesn’t know it:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">UDOONeo - mqx_upload_on_m4SoloX 1.1.0</span>\n<span class=\"go\">UDOONeo - FILENAME = zephyr.bin; loadaddr = 0x84000000</span>\n<span class=\"go\">UDOONeo - start - end (0x84000000 - 0x84080000)</span>\n<span class=\"go\">UDOONeo - Waiting M4 Run, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Run, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Run, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Waiting M4 Run, m4TraceFlags: 00000000</span>\n<span class=\"go\">UDOONeo - Failed to Start M4 sketch: reboot system !</span>\n</pre></div>\n</div>\n<p>The stack pointer and the program counter values are read from the binary.\nThe memory address where binary will be placed is calculated from the program\ncounter as its value aligned to 64 KB down, or it can be provided as a second\ncommand line argument:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mqx_upload_on_m4SoloX zephyr.bin 0x84000000</span>\n</pre></div>\n</div>\n<p>It is necessary to provide the address if the binary is copied into a memory\nregion which has different mapping between the A9 and the M4 core. The address\ncalculated from the stack pointer value in the binary file would be wrong.</p>\n<p>It is possible to modify the mqx_upload_on_m4SoloX utility source code\nto not exchange the information with the M4 core application using shared\nmemory.</p>\n<p>It is also possible to use the <a class=\"reference external\" href=\"https://github.com/codeauroraforum/imx-m4fwloader\">imx-m4fwloader</a> <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id16\">7</a> utility to load the M4 core\napplication.</p>\n<p>One option applicable in UDOOBuntu Linux is to copy the binary file into the\nfile /var/opt/m4/m4last.fw in the Linux filesystem. The next time the system is\nbooted, Das U-Boot will load it from there.</p>\n<p>Another option is to directly use Das U-Boot to load the code.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The UDOO Neo Full board includes pads for soldering the 14-pin JTAG\nconnector. Zephyr applications running on the M4 core have only been\ntested by observing UART console output.</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h3>References<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h3>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.udoo.org/udoo-neo/\">https://www.udoo.org/udoo-neo/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.udoo.org/get-started-neo/\">https://www.udoo.org/get-started-neo/</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.udoo.org/docs-neo\">https://www.udoo.org/docs-neo</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.udoo.org/download/files/datasheets/datasheet_udoo_neo.pdf\">https://www.udoo.org/download/files/datasheets/datasheet_udoo_neo.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf\">https://www.udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id13\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id14\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/ektor5/udooneo-m4uploader\">https://github.com/ektor5/udooneo-m4uploader</a></p>\n</dd>\n<dt class=\"label\" id=\"id15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id16\">7</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/codeauroraforum/imx-m4fwloader\">https://github.com/codeauroraforum/imx-m4fwloader</a></p>\n</dd>\n<dt class=\"label\" id=\"id17\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id18\">8</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-6-processors/i.mx-6solox-processors-heterogeneous-processing-with-arm-cortex-a9-and-cortex-m4-cores:i.MX6SX\">https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-6-processors/i.mx-6solox-processors-heterogeneous-processing-with-arm-cortex-a9-and-cortex-m4-cores:i.MX6SX</a></p>\n</dd>\n<dt class=\"label\" id=\"id19\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id20\">9</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX6SXCEC.pdf\">https://www.nxp.com/docs/en/data-sheet/IMX6SXCEC.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id21\"><span class=\"brackets\">10</span><span class=\"fn-backref\">(<a href=\"#id22\">1</a>,<a href=\"#id23\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/IMX6SXRM.pdf\">https://www.nxp.com/docs/en/reference-manual/IMX6SXRM.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840_papyr", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 3, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "frdm_kw41z", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP FRDM-KW41Z</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-frdm-kw41z\">\n<span id=\"frdm-kw41z\"></span><h1>NXP FRDM-KW41Z<a class=\"headerlink\" href=\"#nxp-frdm-kw41z\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The FRDM-KW41Z is a development kit enabled by the Kinetis® W series\nKW41Z/31Z/21Z (KW41Z) family built on ARM® Cortex®-M0+ processor with\nintegrated 2.4 GHz transceiver supporting Bluetooth® Smart/Bluetooth® Low Energy\n(BLE) v4.2, Generic FSK, IEEE® 802.15.4 and Thread.</p>\n<p>The FRDM-KW41Z kit contains two Freedom boards that can be used as a\ndevelopment board or a shield to connect to a host processor. The FRDM-KW41Z is\nform-factor compatible with the Arduino™ R3 pin layout for more expansion\noptions.</p>\n<p>The FRDM-KW41Z highly-sensitive, optimized 2.4 GHz radio features a PCB\nF-antenna which can be bypassed to test via SMA connection, multiple power\nsupply options, push/capacitive touch buttons, switches, LEDs and integrated\nsensors.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/frdm_kw41z.jpg\"><img alt=\"FRDM-KW41Z\" class=\"align-center\" src=\"../../../../_images/frdm_kw41z.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Can be configured as Host or Shield for connection to Host Processor</p></li>\n<li><p>Supports all DC-DC configurations (Buck, Boost, Bypass)</p></li>\n<li><p>PCB inverted F-type antenna</p></li>\n<li><p>SMA RF Connector</p></li>\n<li><p>RF regulatory certified</p></li>\n<li><p>Serial Flash for OTA firmware upgrades</p></li>\n<li><p>On board NXP FXOS8700CQ digital sensor, 3D Accelerometer ( ±2g/\n±4g/ ±8g) + 3D\nMagnetometer</p></li>\n<li><p>OpenSDA and JTAG debug</p></li>\n</ul>\n<p>For more information about the KW41Z SoC and FRDM-KW41Z board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/wireless/zigbee/kinetis-kw41z-2.4-ghz-dual-mode-bluetooth-low-energy-and-802.15.4-wireless-radio-microcontroller-mcu-based-on-arm-cortex-m0-plus-core:KW41Z\">KW41Z Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/MKW41Z512.pdf\">KW41Z Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MKW41Z512RM\">KW41Z Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/w-serieswireless-conn.m0-plus-m4/freedom-development-kit-for-kinetis-kw41z-31z-21z-mcus:FRDM-KW41Z\">FRDM-KW41Z Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDMKW41ZUG\">FRDM-KW41Z User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDM-KW41Z-SCH\">FRDM-KW41Z Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The frdm_kw41z board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling:\nfxos8700 trigger</p></td>\n</tr>\n<tr class=\"row-odd\"><td colspan=\"3\"><p>PWM       | on-chip    | tpm</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/frdm_kw41z/frdm_kw41z_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW41Z SoC has three pairs of pinmux/gpio controllers, but only two are\ncurrently enabled (PORTA/GPIOA and PORTC/GPIOC) for the FRDM-KW41Z board.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 57%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTC1</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED / FXOS8700 INT1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA19</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA18</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB2</p></td>\n<td><p>ADC</p></td>\n<td><p>ADC0 channel 3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC2</p></td>\n<td><p>I2C1_SCL</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC3</p></td>\n<td><p>I2C1_SDA</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC4</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC5</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC6</p></td>\n<td><p>LPUART0_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC7</p></td>\n<td><p>LPUART0_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC16</p></td>\n<td><p>SPI0_SCK</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC17</p></td>\n<td><p>SPI0_SOUT</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC18</p></td>\n<td><p>SPI0_SIN</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC19</p></td>\n<td><p>SPI0_PCS0</p></td>\n<td><p>SPI</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW41Z SoC is configured to use the 32 MHz external oscillator on the board\nwith the on-chip FLL to generate a 40 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW41Z SoC has one UART, which is used for the console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<div class=\"section\" id=\"option-1-opensda-daplink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-daplink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.nxp.com/assets/downloads/data/en/reference-applications/OpenSDAv2.2_DAPLink_frdmkw41z_rev0241.zip\">OpenSDA DAPLink FRDM-KW41Z Firmware</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-jlink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_FRDM-KW41Z\">OpenSDA J-Link FRDM-KW41Z Firmware</a>.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kw41z samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J6.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kw41z samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_kw41z</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kw41z samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_kw41z</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 262144}, {"label": "dtcm", "size": 65536}], "main_ram_size": 262144, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_f746zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F746ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f746zg\">\n<span id=\"nucleo-f746zg-board\"></span><h1>ST Nucleo F746ZG<a class=\"headerlink\" href=\"#st-nucleo-f746zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 boards offer combinations of performance and power that\nprovide an affordable and flexible way for users to build prototypes and try\nout new concepts. For compatible boards, the SMPS significantly reduces power\nconsumption in Run mode.</p>\n<p>The Arduino-compatible ST Zio connector expands functionality of the Nucleo\nopen development platform, with a wide choice of specialized Arduino* Uno V3\nshields.</p>\n<p>The STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK/V2-1 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p></li>\n</ul>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB with Micro-AB</p></li>\n<li><p>SWD</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>ST Zio connector including Arduino* Uno V3</p></li>\n<li><p>ST morpho</p></li>\n</ul>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources.</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration</p></li>\n<li><p>capability: mass storage, virtual COM port and debug port.</p></li>\n<li><p>Comprehensive free software libraries and examples available with the\nSTM32Cube MCU package.</p></li>\n<li><p>Arm* Mbed Enabled* compliant (only for some Nucleo part numbers)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f746zg.jpg\"><img alt=\"Nucleo F746ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_f746zg.jpg\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-f746zg.html\">Nucleo F746ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F746ZG provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F746ZG in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>ART Accelerator</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>320 KB SRAM</p></li>\n<li><p>16-bit timers(10)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO(up to 168) with external interrupt capability</p></li>\n<li><p>12-bit ADC(3) with 24 channels / 2.4 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f746zg board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 60%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb_device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Backup SRAM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Backup SRAM</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f746zg/nucleo_f746zg_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F746ZG board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX/RTS/CTS : PD5/PD6/PD4/PD3</p></li>\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino UART)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n<li><p>PWM : PE13</p></li>\n<li><p>SPI : PD14, PA5, PA6, PA7</p></li>\n</ul>\n<p>Note. The Arduino Uno v3 specified SPI device conflicts with the on-board ETH\ndevice on pin PA7.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F746ZG System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 72MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F746ZG board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"backup-sram\">\n<h4>Backup SRAM<a class=\"headerlink\" href=\"#backup-sram\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to test backup SRAM you may want to disconnect VBAT from VDD. You can\ndo it by removing <code class=\"docutils literal notranslate\"><span class=\"pre\">SB156</span></code> jumper on the back side of the board.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f746zg</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F746ZG board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f746zg\">\n<h4>Flashing an application to Nucleo F746ZG<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f746zg\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f746zg samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_f746zg\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f746zg samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 33554432}], "main_flash_size": 33554432, "memory": [{"label": "sram0", "size": 524288}], "main_ram_size": 524288, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "v2m_musca_s1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM V2M Musca-S1</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-v2m-musca-s1\">\n<span id=\"v2m-musca-s1-board\"></span><h1>ARM V2M Musca-S1<a class=\"headerlink\" href=\"#arm-v2m-musca-s1\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The v2m_musca_s1 board configuration is used by Zephyr applications that run\non the V2M Musca-S1 board. It provides support for the Musca-S1 ARM Cortex-M33\nCPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit GPIO</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/v2m_musca_s1.png\"><img alt=\"ARM V2M Musca-S1\" class=\"align-center\" src=\"../../../../_images/v2m_musca_s1.png\" style=\"width: 440px; height: 386px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/development-boards/iot-test-chips-and-boards/musca-s1-test-chip-board\">V2M Musca-S1 Website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM V2M MUSCA-S1 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M33 (with FPU and DSP)</p></li>\n<li><p>ARM IoT Subsystem for Cortex-M33</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>512KB on-chip system memory SRAM.</p></li>\n<li><p>2MB on-chip eMRAM (non-volatile).</p></li>\n<li><p>32MB of external QSPI flash.</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG, SWD &amp; P-JTAG.</p></li>\n<li><p>DAPLink with a virtual UART port.</p></li>\n</ul>\n</li>\n<li><p>Arduino interface</p>\n<ul>\n<li><p>16 3V3 or 1V8 GPIO.</p></li>\n<li><p>UART.</p></li>\n<li><p>SPI.</p></li>\n<li><p>I2C.</p></li>\n<li><p>I2S.</p></li>\n<li><p>3-channel PWM.</p></li>\n<li><p>6-channel analog interface.</p></li>\n</ul>\n</li>\n<li><p>On-board Peripherals</p>\n<ul>\n<li><p>User RGB LED.</p></li>\n<li><p>Gyro sensor.</p></li>\n<li><p>Combined ADC/DAC/temperature sensor.</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"user-push-buttons\">\n<h3>User push buttons<a class=\"headerlink\" href=\"#user-push-buttons\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The v2m_musca_s1 board provides the following user push buttons:</p>\n<ul class=\"simple\">\n<li><p>PBON: power on/off.</p></li>\n<li><p>nSRST: Cortex-M33 system reset and CoreSight debug reset.</p></li>\n<li><p>ISP: Updates DAPLink firmware.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The v2m_musca_s1 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TrustZone</p></td>\n<td><p>on-chip</p></td>\n<td><p>Trusted Firmware-M</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://developer.arm.com/tools-and-software/development-boards/iot-test-chips-and-boards/musca-s1-test-chip-board\">V2M Musca-S1 Website</a> for a complete list of V2M Musca-S1 board\nhardware features.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/v2m_musca_s1/v2m_musca_s1_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Musca-S1 is a Cortex-M33 based SoC and has 15 fixed exceptions and 77 IRQs.</p>\n<p>A Cortex-M33-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Zephyr provides handlers for exceptions 1-7, 11, 12, 14, and 15, as listed\nin the following table:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>Undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>SecureFault</p></td>\n<td><p>Unauthorized\naccess to\nsecure region\nfrom ns space</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM V2M Musca-S1 board’s GPIO controller is responsible for pin-muxing,\ninput/output, pull-up, etc.\nAll GPIO controller pins are exposed via pins 0 - 15.</p>\n<p>Mapping from the ARM V2M Musca-S1 Board pins to GPIO controller pins:</p>\n<ul class=\"rst-columns simple\">\n<li><p>D0 : P0_0</p></li>\n<li><p>D1 : P0_1</p></li>\n<li><p>D2 : P0_2</p></li>\n<li><p>D3 : P0_3</p></li>\n<li><p>D4 : P0_4</p></li>\n<li><p>D5 : P0_5</p></li>\n<li><p>D6 : P0_6</p></li>\n<li><p>D7 : P0_7</p></li>\n<li><p>D8 : P0_8</p></li>\n<li><p>D9 : P0_9</p></li>\n<li><p>D10 : P0_10</p></li>\n<li><p>D11 : P0_11</p></li>\n<li><p>D12 : P0_12</p></li>\n<li><p>D13 : P0_13</p></li>\n<li><p>D14 : P0_14</p></li>\n<li><p>D15 : P0_15</p></li>\n</ul>\n<p>Peripheral Mapping:</p>\n<ul class=\"rst-columns simple\">\n<li><p>UART_0_RX : D0</p></li>\n<li><p>UART_0_TX : D1</p></li>\n<li><p>SPI_0_CS : D10</p></li>\n<li><p>SPI_0_MOSI : D11</p></li>\n<li><p>SPI_0_MISO : D12</p></li>\n<li><p>SPI_0_SCLK : D13</p></li>\n<li><p>I2C_0_SDA : D14</p></li>\n<li><p>I2C_0_SCL : D15</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://developer.arm.com/documentation/101835/latest\">Musca-S1 Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"rgb-led\">\n<h3>RGB LED<a class=\"headerlink\" href=\"#rgb-led\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Musca-S1 has a built-in RGB LED connected to GPIO[4:2] pins.</p>\n<ul class=\"simple\">\n<li><p>Red LED connected at GPIO[2] pin,with optional PWM0.</p></li>\n<li><p>Green LED connected at GPIO[3] pin,with optional PWM1.</p></li>\n<li><p>Blue LED connected at GPIO[4] pin,with optional PWM2.</p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The SCC registers select the functions of pins GPIO[4:2].</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>V2M Musca-S1 has a 32.768kHz crystal clock. The clock goes to a PLL and is\nmultiplied to drive the Cortex-M33 processors and SSE-200 subsystem. The\ndefault is 50MHz but can be increased to 200MHz maximum for the secondary\nprocessor (CPU1) via software configuration. The maximum clock frequency\nfor the primary processor (CPU0) is 50MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM Musca-S1 processor has two UARTs. Both the UARTs have only two wires\nfor RX/TX and no flow control (CTS/RTS) or FIFO. The Zephyr console output,\nby default, uses UART1.</p>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit (<a class=\"reference external\" href=\"https://developer.arm.com/documentation/100690/0201/Attribution-units--SAU-and-IDAU-\">IDAU</a>). The IDAU is used to define\nsecure and non-secure memory maps. By default, all of the memory space is\ndefined to be secure accessible only.</p></li>\n<li><p>Secure and Non-secure peripherals via the Peripheral Protection Controller\n(PPC). Peripherals can be assigned as secure or non-secure accessible.</p></li>\n<li><p>Secure boot.</p></li>\n<li><p>Secure <a class=\"reference external\" href=\"https://developer.arm.com/architectures/system-architectures/amba\">AMBA®</a> interconnect.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"serial-configuration-controller-scc\">\n<h3>Serial Configuration Controller (SCC)<a class=\"headerlink\" href=\"#serial-configuration-controller-scc\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM Musca-S1 test chip implements a Serial Configuration Control (SCC)\nregister. The purpose of this register is to allow individual control of\nclocks, reset-signals and interrupts to peripherals, and pin-muxing.</p>\n</div>\n<div class=\"section\" id=\"boot-memory\">\n<h3>Boot memory<a class=\"headerlink\" href=\"#boot-memory\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Normal Musca-S1 test chip boot operation is from 2MB eMRAM by default, and\nit offers the fastest boot method. Musca-S1 test chip also support to boot from\n32MB off-chip QSPI flash. You can update the DAPLink firmware and set the boot\nselector slider switch for either QSPI or eMRAM for booting.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Musca-S1 supports the v8m security extension, and by default boots to the\nsecure state.</p>\n<p>When building a secure/non-secure application, the secure application will\nhave to set the IDAU/SAU and MPC configuration to permit access from the\nnon-secure application before jumping.</p>\n<p>The following system components are required to be properly configured during\nthe secure firmware:</p>\n<ul class=\"simple\">\n<li><p>AHB5 TrustZone Memory Protection Controller (MPC).</p></li>\n<li><p>AHB5 TrustZone Peripheral Protection Controller (PPC).</p></li>\n<li><p>Implementation-Defined Attribution Unit (IDAU).</p></li>\n</ul>\n<p>For more details please refer to <a class=\"reference external\" href=\"https://developer.arm.com/ip-products/subsystem/corelink-subsystem/corelink-sse-200-subsystem\">Corelink SSE-200 Subsystem</a>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"daplink\">\n<h4>DAPLink<a class=\"headerlink\" href=\"#daplink\" title=\"Permalink to this headline\">¶</a></h4>\n<p>V2M Musca-S1 provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and an\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<p>This interfaces are exposed via DAPLink which provides:</p>\n<ul class=\"simple\">\n<li><p>Serial Wire Debug (SWD).</p></li>\n<li><p>USB Mass Storage Device (USBMSD).</p></li>\n<li><p>UART.</p></li>\n<li><p>Remote reset.</p></li>\n</ul>\n<p>For more details please refer\nto the <a class=\"reference external\" href=\"https://github.com/ARMmbed/DAPLink\">DAPLink Website</a>.</p>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application\">\n<h4>Building a secure only application<a class=\"headerlink\" href=\"#building-a-secure-only-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build applications in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b v2m_musca_s1 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uploading-an-application-to-v2m-musca-s1\">\n<h4>Uploading an application to V2M Musca-S1<a class=\"headerlink\" href=\"#uploading-an-application-to-v2m-musca-s1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>To upload the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application to the board, no extra steps are\nrequired. You can directly upload <code class=\"docutils literal notranslate\"><span class=\"pre\">build/zephyr/zephyr.hex</span></code>, which is\ngenerated by Zephyr’s build system.</p>\n<p>In other situations, applications must first be converted to Intel’s hex\nformat before being flashed to a V2M Musca-S1. An optional bootloader can also\nbe prepended to the image.</p>\n<p>The eMRAM base address alias is <code class=\"docutils literal notranslate\"><span class=\"pre\">0xA000000</span></code>, and the QSPI flash base address\nalias is <code class=\"docutils literal notranslate\"><span class=\"pre\">0x0</span></code>. The image offset is calculated by adding the flash offset to the\nbootloader partition size (when there is one).</p>\n<p>A third-party tool (srecord) can be used to concatenate the images and generate\nthe Intel formatted hex image.</p>\n<p>For more information refer to the <a class=\"reference external\" href=\"http://srecord.sourceforge.net/man/man1/srec_cat.html\">Srecord Manual</a>.</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>srec_cat <span class=\"nv\">$BIN_BOOLOADER</span> -Binary -offset <span class=\"nv\">$FLASH_OFFSET</span> <span class=\"nv\">$BIN_APP</span> -Binary -offset <span class=\"nv\">$IMAGE_OFFSET</span> -o zephyr.hex -Intel\n\n<span class=\"c1\"># For a 128K bootloader IMAGE_OFFSET = $FLASH_OFFSET + 0x20000</span>\nsrec_cat <span class=\"nv\">$BIN_BOOLOADER</span> -Binary -offset 0xA000000 <span class=\"nv\">$BIN_APP</span> -Binary -offset 0xA020000 -o zephyr.hex -Intel\n</pre></div>\n</div>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/v2m_musca_s1_powered.png\"><img alt=\"The Musca-S1 with the USB connected and powered-on\" class=\"align-center\" src=\"../../../../_images/v2m_musca_s1_powered.png\" style=\"width: 600px; height: 404px;\"/></a>\n<p>To upload the application, connect the V2M Musca-S1 to your host computer using\nthe USB port and power-on the board by pressing the PBON button as seen on the\npicture above. The 3 LEDs should be lit (PWR, ON and 5VON) and you should see a\nUSB connection exposing a Mass Storage (MUSCA_S) and a USB Serial Port.\nNow copy the generated <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.hex</span></code> to the MUSCA_S drive.</p>\n<p>Reset the board, and if you were building the hello_world application you should\nsee the following message on the corresponding serial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Musca-S1 Dual Firmware Version 1.9</span>\n<span class=\"go\">*** Booting Zephyr OS build zephyr-v2.4.0-2314-gadc81d188323  ***</span>\n<span class=\"go\">Hello World! musca_s1</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building-a-secure-non-secure-image-with-trusted-firmware-m\">\n<h4>Building a secure/non-secure image with Trusted Firmware-M<a class=\"headerlink\" href=\"#building-a-secure-non-secure-image-with-trusted-firmware-m\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process requires five steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build Trusted Firmware-M (TF-M).</p></li>\n<li><p>Import it as a library to the Zephyr source folder.</p></li>\n<li><p>Build Zephyr with a non-secure configuration.</p></li>\n<li><p>Merge the two binaries together and sign them.</p></li>\n<li><p>Concatenate the bootloader with the signed image blob.</p></li>\n</ol>\n<p>In order to build tfm please refer to <a class=\"reference external\" href=\"https://ci.trustedfirmware.org/view/TF-M/job/tf-m-nightly/lastStableBuild/artifact/docs/trusted-firmware-m/build/install/doc/user_guide/html/docs/getting_started/tfm_build_instruction.html\">Trusted Firmware-M Guide</a>.\nFollow the build steps for AN521 target while replacing the platform with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DTFM_PLATFORM=musca_s1</span></code> and compiler (if required) with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DTFM_TOOLCHAIN_FILE=toolchain_GNUARM.cmake</span></code>.</p>\n<p>Copy over TF-M as a library to the Zephyr project source and create a shortcut\nfor the secure veneers and necessary header files. All files are in the install\nfolder after TF-M built.</p>\n</div>\n<div class=\"section\" id=\"building-the-tf-m-integration-sample-for-musca-s1\">\n<h4>Building the TF-M integration sample for Musca-S1<a class=\"headerlink\" href=\"#building-the-tf-m-integration-sample-for-musca-s1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The TF-M integration samples can be run using the <code class=\"docutils literal notranslate\"><span class=\"pre\">v2m_musca_s1_ns</span></code>\ntarget. Please make sure all the requirements listed in the sample’s\ndescription are met before building.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b v2m_musca_s1_ns samples/tfm_integration/psa_crypto</span>\n</pre></div>\n</div>\n<p>To upload the build artifact to the board, first connect the Musca-S1 to your\ncomputer using the USB port, press the PBON button, and copy\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">build/tfm_zephyr.hex</span></code> file onto the MUSCA_S mass storage device.\n(For a more detailed description of these steps, please read the ‘Uploading\nan application to V2M Musca-S1’ section.)</p>\n<p>Once the file transfer has completed, you may reset the board.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">tfm_zephyr.hex</span></code> file was generated by concatenating the signed TF-M and\nZephyr binaries with the MCUboot image, and converting it to Intel’s hex format.\nThese steps are all performed automatically by CMake.</p>\n<p>For alternative build options and more information, please read the\ncorresponding TF-M integration example’s README file.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}, {"label": "sram1", "size": 4096}], "main_ram_size": 32768, "gpio": {"count": 3, "instances": [{"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 4, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "sam4l_ek", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM4L-EK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam4l-ek\">\n<span id=\"id1\"></span><h1>SAM4L-EK<a class=\"headerlink\" href=\"#sam4l-ek\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM4L series embeds picoPower technology for ultra-low power consumption.\nCombined power control techniques are used to bring active current consumption\ndown to 90μA/MHz.  The device allows a wide range of configurations giving the\nuser the ability to balance between the lowest possible power consumption and\nthe feature set selected for the application.  The WAIT and RETENTION modes\nprovide full logic and RAM retention, associated with fast wake-up capability\n(&lt;1.5μs) and a very low consumption of, respectively, 3 μA and 1.5 μA.  In\naddition, WAIT mode supports SleepWalking features.  In BACKUP mode, CPU,\nperipherals and RAM are powered off consuming less than 0.9μA with external\ninterrupt wake-up support.</p>\n<p>The SAM4L-EK is a full featured design to develop for Atmel SAM4L SoC series.\nThe kit is equipped with a rich set of peripherals that make the ATSAM4L-EK a\nperfect evaluation platform.  Download the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42026-ATSAM4L-EK-User-Guide_ApplicationNote_AVR32850.pdf\">SAM4L-EK Online User Guide</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> for\nmore details.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/atmel-sam4l-ek-callouts.jpeg\"><img alt=\"SAM4L-EK\" class=\"align-center\" src=\"../../../../_images/atmel-sam4l-ek-callouts.jpeg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAM4LC4C ARM Cortex-M4 Processor</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>1 Micro-AB USB OTG host/device</p></li>\n<li><p>1 AT86RF2xx IEEE 802.15.4 transceiver connector</p></li>\n<li><p>1 RS-485 full duplex interface</p></li>\n<li><p>1 Sensor Xplained board connector</p></li>\n<li><p>1 Audio Jack connector 3.5mm</p></li>\n<li><p>1 Dedicated Board Monitor MCU</p>\n<ul>\n<li><p>Power measurement (VDDIN, VDDIO, VDDANA)</p></li>\n<li><p>1 OLED Display (128x64)</p></li>\n<li><p>5 LEDs</p></li>\n<li><p>1 Joystick</p></li>\n<li><p>1 USART</p></li>\n<li><p>1 TWI</p></li>\n</ul>\n</li>\n<li><p>1 40x4 LCD Segment Display</p></li>\n<li><p>1 user touch button and One user pushbutton</p></li>\n<li><p>1 user LED</p></li>\n<li><p>1 QTouch Slider</p></li>\n<li><p>1 QTouch Button</p></li>\n<li><p>1 TEMT6000 Light Sensor</p></li>\n<li><p>1 AT25DF641A Serial NOR Flash</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sam4l_ek board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HWINFO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Unique 120 bit serial number</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TRNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>32-bit True Random Number Generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TWIM</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c master port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/sam4l_ek/sam4l_ek_defconfig\">boards/arm/sam4l_ek/sam4l_ek_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/doc42027_SAM4L-EK_Design_Documentation.PDF\">SAM4L-EK Design Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> has detailed information about board\nconnections.  Download the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/doc42027_SAM4L-EK_Design_Documentation.PDF\">SAM4L-EK Design Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id6\">2</a> for more details.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM4L MCU is configured to use the 12 MHz internal oscillator on the board\nwith the on-chip PLL to generate an 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ATSAM4LC4C MCU has 4 USARTs.  One of the USARTs (USART2) is connected on\nthe embedded debug unit and can works as a console.  The USART0 is shared\nbetween all others headers and RS-485 port.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM4L-EK board have a Segger Embedded Debugger Unit\n<a class=\"reference external\" href=\"https://www.segger.com/jlink-ob.html\">J-Link OB</a>.  This provides a debug\ninterface to the SAM4LC4C chip. You can use Ozone or JLink to communicate with\nthe SAM4LC4C.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Download JLink from the Segger <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">JLink Downloads Page</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a>.  Go to the section\n“J-Link Software and Documentation Pack” and install the “J-Link Software\nand Documentation pack for Linux”.  The application JLinkExe needs to be\naccessible from your path.</p></li>\n<li><p>Run your favorite terminal program to listen for output.  Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization string.\nConnection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n</ol>\n<p>#. Connect the SAM4L-EK board to your host computer using the USB debug port.\nThen build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4l_ek samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! sam4l_ek” in your terminal.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4l_ek samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42026-ATSAM4L-EK-User-Guide_ApplicationNote_AVR32850.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42026-ATSAM4L-EK-User-Guide_ApplicationNote_AVR32850.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id5\">1</a>,<a href=\"#id6\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/doc42027_SAM4L-EK_Design_Documentation.PDF\">http://ww1.microchip.com/downloads/en/DeviceDoc/doc42027_SAM4L-EK_Design_Documentation.PDF</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">https://www.segger.com/downloads/jlink</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 12288}, {"label": "ccm0", "size": 4096}], "main_ram_size": 12288, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_1"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f334r8", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F334R8</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f334r8\">\n<span id=\"nucleo-f334r8-board\"></span><h1>ST Nucleo F334R8<a class=\"headerlink\" href=\"#st-nucleo-f334r8\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32 Nucleo-64 development board with STM32F334R8 MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board does not require any separate probe as it integrates the ST-LINK/V2-1\ndebugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f334r8.jpg\"><img alt=\"Nucleo F334R8\" class=\"align-center\" src=\"../../../../_images/nucleo_f334r8.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f334r8.html\">Nucleo F334R8 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F334R8 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F334R8 can be found in the\n<a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00093941.pdf\">STM32F334 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f334r8 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f334r8/nucleo_f334r8_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f334r8_connectors.png\"><img alt=\"Nucleo F334R8 connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f334r8_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_3 TX/RX : PB10/PB11</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>PWM_1_CH1 : PA8</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f334r8</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F334R8 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f334r8\">\n<h4>Flashing an application to Nucleo F334R8<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f334r8\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo F334R8 to your host computer using the USB port,\nthen build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f334r8 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f334r8 samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f334r8.html\">http://www.st.com/en/evaluation-tools/nucleo-f334r8.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00093941.pdf\">http://www.st.com/resource/en/reference_manual/dm00093941.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 524288}], "main_ram_size": 524288, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "v2m_musca_b1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM V2M Musca B1</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-v2m-musca-b1\">\n<span id=\"v2m-musca-b1-board\"></span><h1>ARM V2M Musca B1<a class=\"headerlink\" href=\"#arm-v2m-musca-b1\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The v2m_musca_b1 board configuration is used by Zephyr applications that run\non the V2M Musca B1 board. It provides support for the Musca B1 ARM Cortex-M33\nCPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit GPIO</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/v2m_musca_b1.png\"><img alt=\"ARM V2M Musca B1\" class=\"align-center\" src=\"../../../../_images/v2m_musca_b1.png\" style=\"width: 435px; height: 362px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://developer.arm.com/products/system-design/development-boards/iot-test-chips-and-boards/musca-b-test-chip-board\">V2M Musca B1 Website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM V2M MUSCA B1 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M33</p></li>\n<li><p>ARM IoT Subsystem for Cortex-M33</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>512KB on-chip system memory SRAM.</p></li>\n<li><p>8MB of external QSPI flash.</p></li>\n<li><p>4MB on-chip boot eFlash.</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG, SWD &amp; 4 bit TRACE.</p></li>\n<li><p>DAPLink with a virtual UART port.</p></li>\n</ul>\n</li>\n<li><p>Arduino interface</p>\n<ul>\n<li><p>16 3V3 GPIO.</p></li>\n<li><p>UART.</p></li>\n<li><p>SPI.</p></li>\n<li><p>I2C.</p></li>\n<li><p>I2S.</p></li>\n<li><p>3-channel PWM.</p></li>\n<li><p>6-channel analog interface.</p></li>\n</ul>\n</li>\n<li><p>On-board Peripherals</p>\n<ul>\n<li><p>User RGB LED.</p></li>\n<li><p>Gyro sensor.</p></li>\n<li><p>Combined ADC/DAC/temperature sensor.</p></li>\n<li><p>Secure Digital I/O (SDIO) microSD card.</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"user-push-buttons\">\n<h3>User push buttons<a class=\"headerlink\" href=\"#user-push-buttons\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The v2m_musca_b1 board provides the following user push buttons:</p>\n<ul class=\"simple\">\n<li><p>PBON power on/off.</p></li>\n<li><p>nSRST: Cortex-M33 system reset and CoreSight debug reset.</p></li>\n<li><p>ISP: Updates DAPLink firmware.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The v2m_musca_b1 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>timer</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://developer.arm.com/products/system-design/development-boards/iot-test-chips-and-boards/musca-b-test-chip-board\">V2M Musca B1 Website</a> for a complete list of V2M Musca board hardware\nfeatures.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/v2m_musca_b1/v2m_musca_b1_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Musca B1 is a Cortex-M33 based SoC and has 15 fixed exceptions and 77 IRQs.</p>\n<p>A Cortex-M33-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Zephyr provides handlers for exceptions 1-7, 11, 12, 14, and 15, as listed\nin the following table:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>Undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>SecureFault</p></td>\n<td><p>Unauthorized\naccess to\nsecure region\nfrom ns space</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>Reserved</p></td>\n<td></td>\n<td><p>not handled</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM V2M Musca B1 Board has 4 GPIO controllers. These controllers are\nresponsible for pin-muxing, input/output, pull-up, etc.</p>\n<p>All GPIO controller pins are exposed via the following sequence of pin numbers:</p>\n<ul class=\"simple\">\n<li><p>Pins 0 - 15 are for GPIO</p></li>\n</ul>\n<p>Mapping from the ARM V2M Musca B1 Board pins to GPIO controllers:</p>\n<ul class=\"rst-columns simple\">\n<li><p>D0 : P0_0</p></li>\n<li><p>D1 : P0_1</p></li>\n<li><p>D2 : P0_2</p></li>\n<li><p>D3 : P0_3</p></li>\n<li><p>D4 : P0_4</p></li>\n<li><p>D5 : P0_5</p></li>\n<li><p>D6 : P0_6</p></li>\n<li><p>D7 : P0_7</p></li>\n<li><p>D8 : P0_8</p></li>\n<li><p>D9 : P0_9</p></li>\n<li><p>D10 : P0_10</p></li>\n<li><p>D11 : P0_11</p></li>\n<li><p>D12 : P0_12</p></li>\n<li><p>D13 : P0_13</p></li>\n<li><p>D14 : P0_14</p></li>\n<li><p>D15 : P0_15</p></li>\n</ul>\n<p>Peripheral Mapping:</p>\n<ul class=\"rst-columns simple\">\n<li><p>UART_0_RX : D0</p></li>\n<li><p>UART_0_TX : D1</p></li>\n<li><p>SPI_0_CS : D10</p></li>\n<li><p>SPI_0_MOSI : D11</p></li>\n<li><p>SPI_0_MISO : D12</p></li>\n<li><p>SPI_0_SCLK : D13</p></li>\n<li><p>I2C_0_SDA : D14</p></li>\n<li><p>I2C_0_SCL : D15</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://infocenter.arm.com/help/topic/com.arm.doc.101312_0000_00_en/arm_musca_b1_test_chip_and_board_technical_reference_manual_101312_0000_00_en.pdf\">Musca B1 Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"rgb-led\">\n<h3>RGB LED<a class=\"headerlink\" href=\"#rgb-led\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Musca B1 has a built-in RGB LED connected to GPIO[4:2] pins.</p>\n<ul class=\"simple\">\n<li><p>Red LED connected at GPIO[2] pin,with optional PWM0.</p></li>\n<li><p>Green LED connected at GPIO[3] pin,with optional PWM1.</p></li>\n<li><p>Blue LED connected at GPIO[4] pin,with optional PWM2.</p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The SCC registers select the functions of pins GPIO[4:2].</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>V2M Musca B1 has a 32.768kHz crystal clock. The clock goes to a PLL and is\nmultiplied to drive the Cortex-M33 processors and SSE-200 subsystem. The\ndefault is 40MHz but can be increased to 160MHz maximum for the secondary\nprocessor (CPU1) via software configuration. The maximum clock frequency\nfor the primary processor (CPU0) is 40MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM Musca B1 processor has two UARTs. Both the UARTs have only two wires\nfor RX/TX and no flow control (CTS/RTS) or FIFO. The Zephyr console output,\nby default, uses UART1.</p>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit (<a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">IDAU</a>). The IDAU is used to define\nsecure and non-secure memory maps. By default, all of the memory space is\ndefined to be secure accessible only.</p></li>\n<li><p>Secure and Non-secure peripherals via the Peripheral Protection Controller\n(PPC). Peripherals can be assigned as secure or non-secure accessible.</p></li>\n<li><p>Secure boot.</p></li>\n<li><p>Secure <a class=\"reference external\" href=\"https://developer.arm.com/products/architecture/system-architectures/amba\">AMBA®</a> interconnect.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"serial-configuration-controller-scc\">\n<h3>Serial Configuration Controller (SCC)<a class=\"headerlink\" href=\"#serial-configuration-controller-scc\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM Musca B1 test chip implements a Serial Configuration Control (SCC)\nregister. The purpose of this register is to allow individual control of\nclocks, reset-signals and interrupts to peripherals, and pin-muxing.</p>\n</div>\n<div class=\"section\" id=\"boot-memory\">\n<h3>Boot memory<a class=\"headerlink\" href=\"#boot-memory\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Normal Musca-B1 test chip boot operation is from 4MB eFlash by default, and\nit offers the fastest boot method.\nMusca-B1 test chip also support to boot from 8MB QSPI. You can update the\nDAPLink firmware for either QSPI or eFlash for booting.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Musca B1 supports the v8m security extension, and by default boots to the\nsecure state.</p>\n<p>When building a secure/non-secure application, the secure application will\nhave to set the idau/sau and mpc configuration to permit access from the\nnon-secure application before jumping.</p>\n<p>The following system components are required to be properly configured during the\nsecure firmware:</p>\n<ul class=\"simple\">\n<li><p>AHB5 TrustZone Memory Protection Controller (MPC).</p></li>\n<li><p>AHB5 TrustZone Peripheral Protection Controller (PPC).</p></li>\n<li><p>Implementation-Defined Attribution Unit (IDAU).</p></li>\n</ul>\n<p>For more details please refer to <a class=\"reference external\" href=\"https://developer.arm.com/products/system-design/subsystems/corelink-sse-200-subsystem\">Corelink SSE-200 Subsystem</a>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"daplink\">\n<h4>DAPLink<a class=\"headerlink\" href=\"#daplink\" title=\"Permalink to this headline\">¶</a></h4>\n<p>V2M Musca B1 provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and an\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<p>This interfaces are exposed via DAPLink which provides:</p>\n<ul class=\"simple\">\n<li><p>Serial Wire Debug (SWD).</p></li>\n<li><p>USB Mass Storage Device (USBMSD).</p></li>\n<li><p>UART.</p></li>\n<li><p>Remote reset.</p></li>\n</ul>\n<p>For more details please refer\nto the <a class=\"reference external\" href=\"https://github.com/ARMmbed/DAPLink\">DAPLink Website</a>.</p>\n</div>\n<div class=\"section\" id=\"building-a-secure-only-application\">\n<h4>Building a secure only application<a class=\"headerlink\" href=\"#building-a-secure-only-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build applications in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b v2m_musca_b1 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! musca_b1</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building-a-secure-non-secure-with-trusted-firmware\">\n<h4>Building a secure/non-secure with Trusted Firmware<a class=\"headerlink\" href=\"#building-a-secure-non-secure-with-trusted-firmware\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The process requires five steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build Trusted Firmware (tfm).</p></li>\n<li><p>Import it as a library to the Zephyr source folder.</p></li>\n<li><p>Build Zephyr with a non-secure configuration.</p></li>\n<li><p>Merge the two binaries together and sign them.</p></li>\n<li><p>Concatenate the bootloader with the signed image blob.</p></li>\n</ol>\n<p>In order to build tfm please refer to <a class=\"reference external\" href=\"https://git.trustedfirmware.org/trusted-firmware-m.git/about/docs/user_guides/tfm_build_instruction.md\">Trusted Firmware M Guide</a>.\nFollow the build steps for AN521 target while replacing the platform with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DTARGET_PLATFORM=MUSCA_B1</span></code> and compiler (if required) with <code class=\"docutils literal notranslate\"><span class=\"pre\">-DCOMPILER=GNUARM</span></code></p>\n<p>Copy over tfm as a library to the Zephyr project source and create a shortcut\nfor the secure veneers and necessary header files. All files are in the install\nfolder after TF-M built.</p>\n</div>\n<div class=\"section\" id=\"uploading-an-application-to-v2m-musca-b1\">\n<h4>Uploading an application to V2M Musca B1<a class=\"headerlink\" href=\"#uploading-an-application-to-v2m-musca-b1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Applications must be converted to Intel’s hex format before being flashed to a\nV2M Musca B1. An optional bootloader can be prepended to the image.\nThe QSPI flash base address alias is 0x0, and the eFlash base address alias is\n0xA000000.\nThe image offset is calculated by adding the flash offset to the\nbootloader partition size.</p>\n<p>A third-party tool (srecord) is used to generate the Intel formatted hex image.\nFor more information refer to the <a class=\"reference external\" href=\"http://srecord.sourceforge.net/man/man1/srec_cat.html\">Srecord Manual</a>.</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>srec_cat <span class=\"nv\">$BIN_BOOLOADER</span> -Binary -offset <span class=\"nv\">$FLASH_OFFSET</span> <span class=\"nv\">$BIN_SNS</span> -Binary -offset <span class=\"nv\">$IMAGE_OFFSET</span> -o <span class=\"nv\">$HEX_FLASHABLE</span> -Intel\n\n<span class=\"c1\"># For a 128K bootloader IMAGE_OFFSET = $FLASH_OFFSET + 0x20000</span>\nsrec_cat <span class=\"nv\">$BIN_BOOLOADER</span> -Binary -offset 0xA000000 <span class=\"nv\">$BIN_SNS</span> -Binary -offset 0xA020000 -o <span class=\"nv\">$HEX_FLASHABLE</span> -Intel\n</pre></div>\n</div>\n<p>Connect the V2M Musca B1 to your host computer using the USB port. You should\nsee a USB connection exposing a Mass Storage (MUSCA_B) and a USB Serial Port.\nCopy the generated <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.hex</span></code> in the MUSCA_B drive.</p>\n<p>Reset the board, and you should see the following message on the corresponding\nserial port:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! musca_b1</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 196608}, {"label": "flash1", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 63488}], "main_ram_size": 63488, "gpio": {"count": 16, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}, {"label": "GPIO_8"}, {"label": "GPIO_9"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}]}, "i2c": {"count": 8, "instances": [{"label": "I2CCTRL_0"}, {"label": "I2CCTRL_1"}, {"label": "I2CCTRL_2"}, {"label": "I2CCTRL_3"}, {"label": "I2CCTRL_4"}, {"label": "I2CCTRL_5"}, {"label": "I2CCTRL_6"}, {"label": "I2CCTRL_7"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "npcx7m6fb_evb", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NPCX7M6FB_EVB</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"npcx7m6fb-evb\">\n<span id=\"id1\"></span><h1>NPCX7M6FB_EVB<a class=\"headerlink\" href=\"#npcx7m6fb-evb\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The NPCX7M6FB_EVB kit is a development platform to evaluate the\nNuvoton NPCX7 series microcontrollers. This board needs to be mated with\npart number NPCX796FB.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/npcx7m6fb_evb.png\"><img alt=\"NPCX7M6FB Evaluation Board\" class=\"align-center\" src=\"../../../../_images/npcx7m6fb_evb.png\" style=\"width: 800px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M4F Processor</p></li>\n<li><p>256 KB RAM and 64 KB boot ROM</p></li>\n<li><p>ADC &amp; GPIO headers</p></li>\n<li><p>UART0 and UART1</p></li>\n<li><p>FAN PWM interface</p></li>\n<li><p>Jtag interface</p></li>\n<li><p>Intel Modular Embedded Controller Card (MECC) headers</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The following features are supported:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr (at the moment)</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/npcx7m6fb_evb/npcx7m6fb_evb_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nuvoton to provide the schematic for this board.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The NPCX7M6FB MCU is configured to use the 90Mhz internal oscillator with the\non-chip PLL to generate a resulting EC clock rate of 15 MHz. See Processor clock\ncontrol register (chapter 4 in user manual)</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>UART1 is configured for serial logs.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board comes with a Cortex ETM port which facilitates tracing and debugging\nusing a single physical connection.  In addition, it comes with sockets for\nJTAG only sessions.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build application as usual for the <code class=\"docutils literal notranslate\"><span class=\"pre\">npcx7m6fb_evb</span></code> board, and flash\nusing Servo V2, μServo, or Servo V4 (CCD). See the\n<a class=\"reference external\" href=\"https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board\">Chromium EC Flashing Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> for more information.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Use JTAG/SWD with a J-Link</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board\">https://chromium.googlesource.com/chromiumos/platform/ec#Flashing-via-the-servo-debug-board</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 655360}], "main_ram_size": 655360, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l4r5zi", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L4R5ZI</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l4r5zi\">\n<span id=\"nucleo-l4r5zi-board\"></span><h1>ST Nucleo L4R5ZI<a class=\"headerlink\" href=\"#st-nucleo-l4r5zi\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L4R5ZI board features an ARM Cortex-M4 based STM32L4R5ZI MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo L4R5ZI board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three User LEDs: LD1 (Green), LD2 (Blue), LD3 (Red)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l4r5zi.jpg\"><img alt=\"Nucleo L4R5ZI\" class=\"align-center\" src=\"../../../../_images/nucleo_l4r5zi.jpg\" style=\"width: 250px; height: 250px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l4r5zi.html\">Nucleo L4R5ZI website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L4R5ZI SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 130 nA Standby mode\nand 100 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, adaptive\nreal-time accelerator (ART Accelerator) allowing 0-wait-state\nexecution from Flash memory, frequency up to 120 MHz, MPU, 150\nDMIPS/1.25 DMIPS/MHz (Dhrystone 2.1), and DSP instructions</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>Internal 48 MHz with clock recovery</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and\nrotary touch sensors</p></li>\n<li><p>Advanced graphics features</p>\n<ul>\n<li><p>Chrom-ART Accelerator™ (DMA2D) for enhanced graphic content creation</p></li>\n<li><p>Chrom-GRC™ (GFXMMU) allowing up to 20% of graphic resources optimization</p></li>\n<li><p>MIPI® DSI Host controller with two DSI lanes running at up to 500\nMbits/s each</p></li>\n<li><p>LCD-TFT controller</p></li>\n</ul>\n</li>\n<li><p>16x timers</p>\n<ul>\n<li><p>2 x 16-bit advanced motor-control</p></li>\n<li><p>2 x 32-bit and 5 x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 136 fast I/Os, most 5 V-tolerant, up to 14 I/Os with\nindependent supply down to 1.08 V</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>2-Mbyte Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>640 Kbytes of SRAM including 64 Kbytes with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM,\nPSRAM, NOR, NAND and FRAM memories</p></li>\n<li><p>2 x OctoSPI memory interface</p></li>\n</ul>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>12-bit ADC 5 Msps, up to 16-bit with hardware oversampling, 200 μA/Msps</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>20x communication interfaces</p>\n<ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>4x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (5x SPIs with the dual OctoSPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>8- to 14-bit camera interface up to 32 MHz (black and white) or 10 MHz (color)</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace\nMacrocell (ETM)</p></li>\n</ul>\n<p>More information about STM32L4R5ZI can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l4r5zi.html\">STM32L4R5ZI on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00310109.pdf\">STM32L4R5 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l4r5zi board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l4r5zi/nucleo_l4r5zi_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L4R5ZI Board has 8 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo144_layout.jpg\"><img alt=\"Nucleo L4R5ZI Arduino connectors\" class=\"align-center\" src=\"../../../../_images/nucleo144_layout.jpg\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00368330.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>UART_3_TX : PB10</p></li>\n<li><p>UART_3_RX : PB11</p></li>\n<li><p>I2C_1_SCL : PB6</p></li>\n<li><p>I2C_1_SDA : PB7</p></li>\n<li><p>SPI_1_NSS : PD14</p></li>\n<li><p>SPI_1_SCK : PA5</p></li>\n<li><p>SPI_1_MISO : PA6</p></li>\n<li><p>SPI_1_MOSI : PA7</p></li>\n<li><p>SPI_2_NSS : PB12</p></li>\n<li><p>SPI_2_SCK : PB13</p></li>\n<li><p>SPI_2_MISO : PB14</p></li>\n<li><p>SPI_2_MOSI : PB15</p></li>\n<li><p>SPI_3_NSS : PB12</p></li>\n<li><p>SPI_3_SCK : PC10</p></li>\n<li><p>SPI_3_MISO : PC11</p></li>\n<li><p>SPI_3_MOSI : PC12</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PC7</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>ADC1 : PC0</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L4R5ZI System Clock could be driven by internal or external\noscillator, as well as main PLL clock. By default, the System clock is\ndriven by the PLL clock at 80MHz, driven by a 16MHz high speed\ninternal oscillator. The clock can be boosted to 120MHz if boost mode\nis selected.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L4R5ZI board has 5 U(S)ARTs. The Zephyr console output is\nassigned to UART2.  Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"network-interface\">\n<h4>Network interface<a class=\"headerlink\" href=\"#network-interface\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Ethernet over USB is configured as the default network interface (EEM)</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Connect the Nucleo L4R5ZI to your host computer using the USB port.\nThen build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l4r5zi samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_22"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "b_l072z_lrwan1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST B-L072Z-LRWAN1 Discovery kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-b-l072z-lrwan1-discovery-kit\">\n<span id=\"b-l072z-lrwan1-board\"></span><h1>ST B-L072Z-LRWAN1 Discovery kit<a class=\"headerlink\" href=\"#st-b-l072z-lrwan1-discovery-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This Discovery kit features an all-in-one open module CMWX1ZZABZ-091 (by Murata).\nThe module is powered by an STM32L072CZ and an SX1276 transceiver.</p>\n<p>This kit provides:</p>\n<ul>\n<li><p>CMWX1ZZABZ-091 LoRa* / Sigfox* module (Murata)</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Embedded ultra-low-power STM32L072CZ Series MCUs, based on\nArm* Cortex* -M0+ core, with 192 Kbytes of Flash\nmemory, 20 Kbytes of RAM, 6 Kbytes of EEPROM</p></li>\n<li><p>Frequency range: 860 MHz - 930 MHz</p></li>\n<li><p>USB 2.0 FS</p></li>\n<li><p>4-channel,12-bit ADC, 2xDAC</p></li>\n<li><p>6-bit timers, LP-UART, I2C and SPI</p></li>\n<li><p>Embedded SX1276 transceiver</p></li>\n<li><p>LoRa* , FSK, GFSK, MSK, GMSK and OOK modulations (+ Sigfox* compatibility)</p></li>\n<li><p>+14 dBm or +20 dBm selectable output power</p></li>\n<li><p>157 dB maximum link budget</p></li>\n<li><p>Programmable bit rate up to 300 kbit/s</p></li>\n<li><p>High sensitivity: down to -137 dBm</p></li>\n<li><p>Bullet-proof front end: IIP3 = -12.5 dBm</p></li>\n<li><p>89 dB blocking immunity</p></li>\n<li><p>Low Rx current of 10 mA, 200 nA register retention</p></li>\n<li><p>Fully integrated synthesizer with a resolution of 61 Hz</p></li>\n<li><p>Built-in bit synchronizer for clock recovery</p></li>\n<li><p>Sync word recognition</p></li>\n<li><p>Preamble detection</p></li>\n<li><p>127 dB+ dynamic range RSSI</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>SMA and U.FL RF interface connectors</p></li>\n<li><p>Including 50 ohm SMA RF antenna</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB re-enumeration capability</p></li>\n<li><p>USB ST-LINK functions:</p></li>\n<li><p>Board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Through USB bus or external VIN/3.3 V supply voltage or batteries</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>3xAAA-type-battery holder for standalone operation</p></li>\n<li><p>7 LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>4 general-purpose LEDs</p></li>\n<li><p>A 5 V-power LED</p></li>\n<li><p>An ST-LINK-communication LED</p></li>\n<li><p>A fault-power LED</p></li>\n<li><p>2 push-buttons (user and reset)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Arduino* Uno V3 connectors</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/b_l072z_lrwan1.png\"><img alt=\"B-L072Z-LRWAN1\" class=\"align-center\" src=\"../../../../_images/b_l072z_lrwan1.png\" style=\"width: 500px; height: 325px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/b-l072z-lrwan1.html\">B-L072Z-LRWAN1 website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L072CZ SoC provides the following hardware IPs:</p>\n<ul>\n<li><p>Ultra-low-power (down to 0.29 µA Standby mode and 93 uA/MHz run mode)</p></li>\n<li><p>Core: ARM* 32-bit Cortex*-M0+ CPU, frequency up to 32 MHz</p></li>\n<li><p>Clock Sources:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>1 to 32 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 37 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed low-power 65 kHz to 4.2 MHz RC</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>11x timers:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>2x 16-bit with up to 4 channels</p></li>\n<li><p>2x 16-bit with up to 2 channels</p></li>\n<li><p>1x 16-bit ultra-low-power timer</p></li>\n<li><p>1x SysTick</p></li>\n<li><p>1x RTC</p></li>\n<li><p>2x 16-bit basic for DAC</p></li>\n<li><p>2x watchdogs (independent/window)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Up to 84 fast I/Os, most 5 V-tolerant.</p></li>\n<li><p>Memories</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Up to 192 KB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 20 KB of SRAM</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>1x 12-bit ADC 1.14 MSPS</p></li>\n<li><p>2x 12-bit DAC</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>11x communication interfaces</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB 2.0 full-speed device, LPM and BCD</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>4x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>6x SPIs (4x SPIs with the Quad SPI)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>7-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32L072CZ can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l072cz.html\">STM32L072CZ on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00108281.pdf\">STM32L0x2 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr B-L072Z-LRWAN1 Discovery board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TRNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>true random number generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LoRa</p></td>\n<td><p>on-module</p></td>\n<td><p>sx1276</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/b_l072z_lrwan1/b_l072z_lrwan1_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>B-L072Z-LRWAN1 Discovery kit has GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<p>For detailed information about available pins please refer to <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/b-l072z-lrwan1.html\">B-L072Z-LRWAN1 website</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX/RX: PA9/PA10 (Arduino Serial)</p></li>\n<li><p>UART_2_TX/RX: PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI: PA15/PB3/PA6/PA7 (Semtech SX1276 LoRa* Transceiver)</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI: PB12/PB13/PB14/PB15 (Arduino SPI)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>B-L072Z-LRWAN1 Discovery board System Clock is at 32MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>B-L072Z-LRWAN1 Discovery board has 2 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"usb-device\">\n<h4>USB device<a class=\"headerlink\" href=\"#usb-device\" title=\"Permalink to this headline\">¶</a></h4>\n<p>B-L072Z-LRWAN1 Discovery board has 1 USB device controller. However,\nthe USB data lines are not connected to the MCU by default. To connect\nthe USB data lines to the MCU, short solder bridges SB15 and SB16.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">b_l072z_lrwan1</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>B-L072Z-LRWAN1 Discovery board includes an ST-LINK/V2-1 embedded debug\ntool interface. This interface is supported by the openocd version included\nin the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-b-l072z-lrwan1-discovery-board\">\n<h4>Flashing an application to B-L072Z-LRWAN1 Discovery board<a class=\"headerlink\" href=\"#flashing-an-application-to-b-l072z-lrwan1-discovery-board\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Connect the B-L072Z-LRWAN1 Discovery board to a STLinkV2 to your host computer using the USB port, then\nrun a serial host program to connect with your board. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b b_l072z_lrwan1 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b b_l072z_lrwan1 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 32768}], "main_flash_size": 32768, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 3, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_22"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l031k6", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L031K6</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l031k6\">\n<span id=\"nucleo-l031k6-board\"></span><h1>ST Nucleo L031K6<a class=\"headerlink\" href=\"#st-nucleo-l031k6\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-32 development board with STM32L031K6 MCU, supports Arduino Nano V3 connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Nano V3 connectivity support allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l031k6.jpg\"><img alt=\"Nucleo L031K6\" class=\"align-center\" src=\"../../../../_images/nucleo_l031k6.jpg\" style=\"width: 426px; height: 319px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l031k6.html\">Nucleo L031K6 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo L031K6 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP32 package</p></li>\n<li><p>Extension resource:</p>\n<ul>\n<li><p>Arduino* Nano V3 connectivity</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>One push-button: RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32L031K6 can be found in the\n<a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf\">STM32L0x1 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l031k6 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l031k6/nucleo_l031k6_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA15 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PA9/PA10 (Arduino I2C)</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>LD2       : PB3</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf\">STM32 Nucleo-32 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l031k6</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L031K6 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l031k6\">\n<h4>Flashing an application to Nucleo L031K6<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l031k6\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l031k6 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l031k6 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l031k6.html\">http://www.st.com/en/evaluation-tools/nucleo-l031k6.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf\">https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf\">https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "black_f407ve", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Black STM32 F407VE Development Board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"black-stm32-f407ve-development-board\">\n<span id=\"black-f407ve-board\"></span><h1>Black STM32 F407VE Development Board<a class=\"headerlink\" href=\"#black-stm32-f407ve-development-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BLACK_F407VE board features an ARM Cortex-M4 based STM32F407xx MCU\nwith a wide range of connectivity support and configurations. There are\nmultiple version of this board like <code class=\"docutils literal notranslate\"><span class=\"pre\">black_f407ve</span></code>.\nHere are some highlights of the BLACK_F407VE board:</p>\n<ul>\n<li><p>STM32 microcontroller in LQFP100 package</p></li>\n<li><p>Extension header for all LQFP100 I/Os for quick connection to prototyping\nboard and easy probing</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB VBUS or external source (3.3V, 5V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Three LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>3.3 V power on (LD0)</p></li>\n<li><p>Two user LEDs: green (LD1), green (LD2)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Four push-buttons: RESET, K0, K1 and WK_UP</p></li>\n<li><p>Mini-AB connector</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/black_f407ve.jpg\"><img alt=\"BLACK_F407VE\" class=\"align-center\" src=\"../../../../_images/black_f407ve.jpg\" style=\"width: 500px; height: 500px;\"/></a>\n<p>See also board descriptions at <a class=\"reference external\" href=\"https://stm32-base.org/boards/STM32F407VET6-STM32-F4VE-V2.0.html\">STM32-base website</a>,\n<a class=\"reference external\" href=\"https://os.mbed.com/users/hudakz/code/STM32F407VET6_Hello/\">STM32F407VET6 black board</a> and <a class=\"reference external\" href=\"https://github.com/mcauser/BLACK_F407VE\">MCUDev Black STM32F407VET6</a></p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>The +5V pins on this board are directly connected to the +5V pin\nof the USB connector. There is no protection in place. Do not\npower this board through USB and an external power supply at\nthe same time.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>BLACK_F407VE board provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F407VET6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>168 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.8 V to 3.6 V</p></li>\n<li><p>8MHz system crystal</p></li>\n<li><p>32.768KHz RTC crystal</p></li>\n<li><p>JTAG/SWD header</p></li>\n<li><p>512 kB Flash</p></li>\n<li><p>192+4 KB SRAM including 64-Kbyte of core coupled memory</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC battery CR1220</p></li>\n<li><p>Advanced-control Timer (2)</p></li>\n<li><p>General Purpose Timers (12)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART (3), UART (2)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>I2S (2)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO (1)</p></li>\n<li><p>CAN (2)</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>USB 2.0 OTG HS/FS with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Micro SD</p></li>\n<li><p>1x 10/100 Ethernet MAC</p></li>\n<li><p>1x 8 to 12-bit Parallel Camera interface</p></li>\n<li><p>Micro USB for power and comms</p></li>\n<li><p>2x jumpers for bootloader selection</p></li>\n<li><p>2x16 FMSC LCD Interface</p></li>\n<li><p>NRF24L01 socket</p></li>\n<li><p>Dimensions: 85.1mm x 72.45mm</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F407VE SOC can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f407ve.html\">STM32F407VE on www.st.com</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr black_f407ve board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>CAN controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver.\nZephyr default configuration uses CAN_2 exclusively, as\nsimultaneous use of CAN_1 and CAN_2 is not yet supported.</p>\n</div>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/black_f407_generic/black_f407ve_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407VE has 5 GPIO controllers. These controllers are responsible for pin\nmuxing, input/output, pull-up, etc.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f407vet6_left02.png\"><img alt=\"left pins\" class=\"align-center\" src=\"../../../../_images/stm32f407vet6_left02.png\" style=\"width: 200px; height: 200px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f407vet6_right01.png\"><img alt=\"right pins\" class=\"align-center\" src=\"../../../../_images/stm32f407vet6_right01.png\" style=\"width: 200px; height: 200px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f407vet6_st-link02.png\"><img alt=\"bottom and top pins\" class=\"align-center\" src=\"../../../../_images/stm32f407vet6_st-link02.png\" style=\"width: 200px; height: 200px;\"/></a>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PD13</p></li>\n<li><p>LD4 : PD12</p></li>\n<li><p>LD5 : PD14</p></li>\n<li><p>LD6 : PD15</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>CAN1_RX : PD0</p></li>\n<li><p>CAN1_TX : PD1</p></li>\n<li><p>CAN2_RX : PB12</p></li>\n<li><p>CAN2_TX : PB13</p></li>\n<li><p>SPI1 MISO : PB4</p></li>\n<li><p>SPI1 MOSI : PB5</p></li>\n<li><p>SPI1 SCK : PB3</p></li>\n<li><p>SPI1 Flash CS : PB0</p></li>\n<li><p>SPI2 MISO : PC2</p></li>\n<li><p>SPI2 MOSI : PC3</p></li>\n<li><p>SPI2 SCK : PB10</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407VE System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock\nat 168MHz, driven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407VE has up to 6 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.\nPlease note that ST-Link Virtual Com Port is not wired to chip serial port.\nIn order to enable console output you should use a serial cable and connect\nit to UART2 pins (PA2/PA3).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">black_f407ve</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLACK_F407VE board includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-black-f407ve\">\n<h4>Flashing an application to BLACK_F407VE<a class=\"headerlink\" href=\"#flashing-an-application-to-black-f407ve\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b black_f407ve samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see user led “LD1” blinking.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b black_f407ve samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "96b_nitrogen", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Nitrogen</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-nitrogen\">\n<span id=\"b-nitrogen-board\"></span><h1>96Boards Nitrogen<a class=\"headerlink\" href=\"#boards-nitrogen\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards Nitrogen hardware provides support for the Nordic Semiconductor\nnRF52832 ARM Cortex-M4F CPU.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_nitrogen.png\"><img alt=\"96Boards Nitrogen\" src=\"../../../../_images/96b_nitrogen.png\" style=\"width: 487px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Nitrogen</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://wiki.seeed.cc/BLE_Nitrogen/\">seeed BLE Nitrogen</a>\nwebsite. The <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">Nordic Semiconductor Infocenter</a> contains the processor’s\ninformation and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Nitrogen provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>nRF52832 microcontroller with 512kB Flash, 64kB RAM</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>Bluetooth LE</p></li>\n<li><p>NFC</p></li>\n<li><p>LPC11U35 on board SWD debugger</p>\n<ul>\n<li><p>SWD debugger firmware</p></li>\n<li><p>USB to UART</p></li>\n<li><p>Drag and Drop firmware upgrade</p></li>\n</ul>\n</li>\n<li><p>7 LEDs</p>\n<ul>\n<li><p>USR1, BT, PWR, CDC, DAP, MSD, Battery charge</p></li>\n</ul>\n</li>\n<li><p>SWD debug connectors</p>\n<ul>\n<li><p>nRF52832 SWD connector</p></li>\n<li><p>nRF52832 Uart connector</p></li>\n</ul>\n</li>\n<li><p>On board chip antenna</p></li>\n<li><p>1.8V work voltage</p></li>\n<li><p>2x20pin 2.0mm pitch Low speed connector</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_nitrogen board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>on-chip</p></td>\n<td><p>console</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">Nordic Semiconductor Infocenter</a> for a complete list of nRF52-based\nboard hardware features.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_nitrogen/96b_nitrogen_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User LED (green) = P0.29</p></li>\n<li><p>LED2 / BT LED (blue) = P0.28</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = SW1 = P0.27</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Low Speed Header</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 51%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>nRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>UART CTS</p></td>\n<td><p>P.014 / TRACEDATA[3]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>UART TX</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>UART RX</p></td>\n<td><p>P0.15 / TRACEDATA[2]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>UART RTS</p></td>\n<td><p>P0.12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>UART TX</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>UART RX</p></td>\n<td><p>P0.15 / TRACEDATA[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>P0.22</p></td>\n<td><p>P0.22</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>P0.20</p></td>\n<td><p>P0.20</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>21</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>P0.02</p></td>\n<td><p>P0.02</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>25</p></td>\n<td><p>P0.04</p></td>\n<td><p>P0.04</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>27</p></td>\n<td><p>P0.06</p></td>\n<td><p>P0.06</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>29</p></td>\n<td><p>P0.08</p></td>\n<td><p>P0.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>31</p></td>\n<td><p>P0.16</p></td>\n<td><p>P0.16</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>33</p></td>\n<td><p>P0.18</p></td>\n<td><p>P0.18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>35</p></td>\n<td><p>VCC</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>37</p></td>\n<td><p>USB5V</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>39</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 51%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>nRF52832 Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PWR BTN</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>6</p></td>\n<td><p>RST BTN</p></td>\n<td><p>P0.21 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.26</p></td>\n<td><p>P0.26</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>10</p></td>\n<td><p>P0.25</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>P0.24</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>P0.23</p></td>\n<td><p>P0.23</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>18</p></td>\n<td><p>N/A</p></td>\n<td><p>PC7</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>20</p></td>\n<td><p>N/A</p></td>\n<td><p>PC9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>22</p></td>\n<td><p>N/A</p></td>\n<td><p>PB8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>24</p></td>\n<td><p>P0.03</p></td>\n<td><p>P0.03</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>26</p></td>\n<td><p>P0.05</p></td>\n<td><p>P0.05</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>28</p></td>\n<td><p>P0.07</p></td>\n<td><p>P0.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>30</p></td>\n<td><p>P0.11</p></td>\n<td><p>P0.11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>32</p></td>\n<td><p>P0.17</p></td>\n<td><p>P0.17</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>34</p></td>\n<td><p>P0.19</p></td>\n<td><p>P0.19</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>36</p></td>\n<td><p>NC</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>38</p></td>\n<td><p>NC</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>40</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>More detailed information about the connectors can be found in\n<a class=\"reference external\" href=\"https://linaro.co/ie-specification\">96Boards IE Specification</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>nRF52 has two external oscillators. The frequency of the slow clock is\n32.768 kHz. The frequency of the main clock is 32 MHz.</p>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Nitrogen has one UART, which is used as Zephyr console.\nDefault settings is 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Nitrogen has one I2C. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C0_SCL : P0.22</p></li>\n<li><p>I2C0_SDA : P0.20</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Nitrogen has one SPI. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI0_NSS  : P0.24</p></li>\n<li><p>SPI0_SCK  : P0.26</p></li>\n<li><p>SPI0_MISO : P0.25</p></li>\n<li><p>SPI0_MOSI : P0.23</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing-zephyr-onto-96boards-nitrogen\">\n<h2>Flashing Zephyr onto 96Boards Nitrogen<a class=\"headerlink\" href=\"#flashing-zephyr-onto-96boards-nitrogen\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards Nitrogen board can be flashed via the <a class=\"reference external\" href=\"https://developer.mbed.org/handbook/CMSIS-DAP\">CMSIS DAP</a> interface,\nwhich is provided by the micro USB interface to the LPC11U35 chip.</p>\n<p>Using the CMSIS-DAP interface, the board can be flashed via the USB storage\ninterface (drag-and-drop) and also via <a class=\"reference external\" href=\"https://github.com/mbedmicro/pyOCD\">pyOCD</a>.</p>\n<div class=\"section\" id=\"installing-pyocd\">\n<h3>Installing pyOCD<a class=\"headerlink\" href=\"#installing-pyocd\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The latest stable version of <a class=\"reference external\" href=\"https://github.com/mbedmicro/pyOCD\">pyOCD</a> can be installed via pip as follows:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pip install --pre -U pyocd\n</pre></div>\n</div>\n<p>To install the latest development version (master branch), do the following:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pip install --pre -U git+https://github.com/mbedmicro/pyOCD.git#egg<span class=\"o\">=</span>pyOCD\n</pre></div>\n</div>\n<p>You can then verify that your board is detected by pyOCD by running:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd-flashtool -l\n</pre></div>\n</div>\n<div class=\"section\" id=\"common-errors\">\n<h4>Common Errors<a class=\"headerlink\" href=\"#common-errors\" title=\"Permalink to this headline\">¶</a></h4>\n</div>\n<div class=\"section\" id=\"no-connected-boards\">\n<h4>No connected boards<a class=\"headerlink\" href=\"#no-connected-boards\" title=\"Permalink to this headline\">¶</a></h4>\n<p>If you don’t use sudo when invoking pyocd-flashtool, you might get any of the\nfollowing errors:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">No available boards are connected</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">No connected boards</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Error: There is no board connected.</span>\n</pre></div>\n</div>\n<p>To fix the permission issue, simply add the following udev rule for the\nNXP LPC1768 interface:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">echo</span> <span class=\"s1\">'ATTR{idProduct}==\"0204\", ATTR{idVendor}==\"0d28\", MODE=\"0666\", GROUP=\"plugdev\"'</span> &gt; /etc/udev/rules.d/50-cmsis-dap.rules\n</pre></div>\n</div>\n<p>Finally, unplug and plug the board again.</p>\n</div>\n<div class=\"section\" id=\"valueerror-the-device-has-no-langid\">\n<h4>ValueError: The device has no langid<a class=\"headerlink\" href=\"#valueerror-the-device-has-no-langid\" title=\"Permalink to this headline\">¶</a></h4>\n<p>As described by <a class=\"reference external\" href=\"https://github.com/mbedmicro/pyOCD/issues/259\">pyOCD issue 259</a>, you might get the\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">ValueError:</span> <span class=\"pre\">The</span> <span class=\"pre\">device</span> <span class=\"pre\">has</span> <span class=\"pre\">no</span> <span class=\"pre\">langid</span></code> error when not running\npyOCD as root (e.g. sudo).</p>\n<p>To fix the above error, add the udev rule shown in the previous section\nand install a more recent version of pyOCD.</p>\n</div>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-96boards-nitrogen\">\n<h3>Flashing an Application to 96Boards Nitrogen<a class=\"headerlink\" href=\"#flashing-an-application-to-96boards-nitrogen\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application. This\nrequires installing the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_nitrogen samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board 96Boards Nitrogen\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">-b</span></code> option sets baud rate ignoring the value from config.</p>\n<p>Press the Reset button and you should see the the following message in your\nterminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging-with-gdb\">\n<h3>Debugging with GDB<a class=\"headerlink\" href=\"#debugging-with-gdb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application. This also requires pyOCD.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_nitrogen samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 9, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f072b_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F072B Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f072b-discovery\">\n<span id=\"stm32f072b-disco-board\"></span><h1>ST STM32F072B Discovery<a class=\"headerlink\" href=\"#st-stm32f072b-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F072B-DISCO Discovery kit features an ARM Cortex-M0 based STM32F072RB\nMCU with everything required for beginners and experienced users to get\nstarted quickly. Here are some highlights of the STM32F072B-DISCO board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>Extension header for LQFP64 I/Os for a quick connection to the prototyping\nboard and easy probing</p></li>\n<li><p>On-board ST-LINK/V2, debugger/programmer with SWD connector</p></li>\n<li><p>Board power supply: through USB bus or from an external 5 V supply voltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>Six LEDs:</p>\n<ul>\n<li><p>LD1 (red/green) for USB communication</p></li>\n<li><p>LD2 (red) for 3.3 V power on</p></li>\n<li><p>Four user LEDs: LD3 (orange), LD4 (green), LD5 (red) and LD6 (blue)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB USER with Mini-B connector</p></li>\n<li><p>L3GD20, ST MEMS motion sensor, 3-axis digital output gyroscope</p></li>\n<li><p>One linear touch sensor or four touch keys</p></li>\n<li><p>RF EEprom daughter board connector</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f072b_disco.jpg\"><img alt=\"STM32F072B-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f072b_disco.jpg\" style=\"width: 272px; height: 551px;\"/></a>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f072bdiscovery.html\">STM32F072B-DISCO website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F072B-DISCO Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F072RBTT6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M0 CPU</p></li>\n<li><p>48 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>128 KB Flash</p></li>\n<li><p>16 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 39 channels</p></li>\n<li><p>12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>General Purpose Timers (12)</p></li>\n<li><p>USART/UART (4)</p></li>\n<li><p>I2C (2)</p></li>\n<li><p>SPI (2)</p></li>\n<li><p>CAN</p></li>\n<li><p>USB 2.0 full speed interface</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>24 capacitive sensing channels for touchkey, linear and rotary touch sensors</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F072RB can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f072rb.html\">STM32F072RB on www.st.com</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">STM32F072xB reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f072b_disco board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>SPI controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>CAN controller</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver, such as <a class=\"reference external\" href=\"http://skpang.co.uk/catalog/canbus-can-fd-breakout-board-5v-p-242.html\">SK Pang CAN breakout board</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">5</a>.</p>\n</div>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f072b_disco/stm32f072b_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072B-DISCO Discovery kit has 6 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00099401.pdf\">STM32F072B-DISCO board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>I2C1_SCL : PB8</p></li>\n<li><p>I2C1_SDA : PB9</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB11</p></li>\n<li><p>SPI1_SCK : PB3</p></li>\n<li><p>SPI1_MISO : PB4</p></li>\n<li><p>SPI1_MOSI : PB5</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PC6</p></li>\n<li><p>LD4 : PC8</p></li>\n<li><p>LD5 : PC9</p></li>\n<li><p>LD6 : PC7</p></li>\n<li><p>CAN_RX : PB8</p></li>\n<li><p>CAN_TX : PB9</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072B-DISCO System Clock could be driven by internal or external\noscillator, as well as main PLL clock. By default System clock is driven\nby PLL clock at 72 MHz, driven by internal 8 MHz oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072B-DISCO Discovery kit has up to 4 UARTs. The Zephyr console output\nis assigned to UART 1. Default settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f072b_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072B-DISCO board includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f072b-disco\">\n<h4>Flashing an application to STM32F072B-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f072b-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F072B-DISCO Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f072b_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board. A TTL(3.3V) serial\nadapter is required.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/&lt;tty device&gt;\n</pre></div>\n</div>\n<p>Replace &lt;tty_device&gt; with the port where the serial adapter can be found.\nFor example, under Linux, /dev/ttyUSB0.</p>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f072b_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f072bdiscovery.html\">http://www.st.com/en/evaluation-tools/32f072bdiscovery.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00099401.pdf\">http://www.st.com/resource/en/user_manual/dm00099401.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f072rb.html\">http://www.st.com/en/microcontrollers/stm32f072rb.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">http://www.st.com/resource/en/reference_manual/dm00031936.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://skpang.co.uk/catalog/canbus-can-fd-breakout-board-5v-p-242.html\">http://skpang.co.uk/catalog/canbus-can-fd-breakout-board-5v-p-242.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "olimexino_stm32", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>OLIMEXINO-STM32</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"olimexino-stm32\">\n<span id=\"id1\"></span><h1>OLIMEXINO-STM32<a class=\"headerlink\" href=\"#olimexino-stm32\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEXINO-STM32 board is based on the STMicroelectronics STM32F103RB ARM\nCortex-M3 CPU.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimexino_stm32.png\"><img alt=\"OLIMEXINO-STM32\" src=\"../../../../_images/olimexino_stm32.png\" style=\"width: 540px; height: 454px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEXINO-STM32</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.olimex.com/Products/Duino/STM32/OLIMEXINO-STM32/\">OLIMEXINO-STM32 website</a> and <a class=\"reference external\" href=\"https://www.olimex.com/Products/Duino/STM32/OLIMEXINO-STM32/resources/OLIMEXINO-STM32.pdf\">OLIMEXINO-STM32 user manual</a>.\nThe <a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f103tb.pdf\">ST STM32F103xB Datasheet</a> contains the processor’s\ninformation and the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The olimexino_stm32 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 23%\"/>\n<col style=\"width: 25%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>Controller Area Network</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimexino-stm32-front.png\"><img alt=\"OLIMEXINO-STM32 connectors\" src=\"../../../../_images/olimexino-stm32-front.png\" style=\"width: 739px; height: 530px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEXINO-STM32 connectors</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = PA5</p></li>\n<li><p>LED2 (yellow) = PA1</p></li>\n<li><p>PWR_LED (red) = power</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUT = PC9 / TIM3CH4 / BOOT0</p></li>\n<li><p>RST = NRST</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>SWD</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VCC</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>TMS / SWDIO</p></td>\n<td><p>JTMS / SWDIO / PA13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>TCK / SWCLK</p></td>\n<td><p>JTCK / SWCLK / PA14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>TDO / SWO</p></td>\n<td><p>JTDO /TIM2_CH2 / PB3 /\nTRACESWO / SPI1_SCK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>TDI</p></td>\n<td><p>JTDI / TIM2_CH1_ETR /\nPA15 / SPI1_NSS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>RESET</p></td>\n<td><p>NRST</p></td>\n</tr>\n</tbody>\n</table>\n<p>UEXT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VCC</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D7 (TXD1)</p></td>\n<td><p>PA9 / USART1_TX /\nTIM1_CH2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D8 (RXD1)</p></td>\n<td><p>PA10 / USART1_RX /\nTIM1_CH3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D29 (SCL2)</p></td>\n<td><p>PB10 / I2C2_SCL /\nUSART3_TX / TIM2_CH3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D30 (SDA2)</p></td>\n<td><p>PB11 / I2C2_SDA /\nUSART3_RX / TIM2_CH4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D12 (MISO1)</p></td>\n<td><p>PA6 / SPI1_MISO /\nADC12_IN6 / TIM3_CH1 /\nTIM1_BKIN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D11 (MOSI1)</p></td>\n<td><p>PA7 / SPI1_MOSI /\nADC12_IN7 / TIM3_CH2 /\nTIM1_CH1N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>D13 (SCK /\nLED1)</p></td>\n<td><p>PA5 / SPI1_SCK /\nADC12_IN5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>UEXT_#CS</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>EXT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D23_EXT</p></td>\n<td><p>PC15 / OSC32_OUT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D24 (CANTX)</p></td>\n<td><p>PB9 / TIM4_CH4 /\nI2C1_SDA / CANTX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D25 (MMC_CS)</p></td>\n<td><p>PD2 / TIM3_ETR</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D26</p></td>\n<td><p>PC10 / USART3_TX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D27</p></td>\n<td><p>PB0 / ADC12_IN8 /\nTIM3_CH3 / TIM1_CH2N</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D28</p></td>\n<td><p>PB1 / ADC12_IN9 /\nTIM3_CH4 / TIM1_CH3N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D29 (SCL2)</p></td>\n<td><p>PB10 / I2C2_SCL /\nUSART3_TX / TIM2_CH3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D30 (SDA2)</p></td>\n<td><p>PB11 / I2C2_SDA /\nUSART3_RX / TIM2_CH4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>D31 (#SS2)</p></td>\n<td><p>PB12 / SPI2_NSS /\nI2C2_SMBAI / USART3_CK /\nTIM1_BKIN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>D32 (SCK2)</p></td>\n<td><p>PB13 / SPI2_SCK/\nUSART3_CTS / TIM1_CH1N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>D33 (MISO2)</p></td>\n<td><p>PB14 / SPI2_MISO /\nUSART3_RTS / TIM1_CH2N</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>D34 (MOSI2)</p></td>\n<td><p>PB15 / SPI2_MOSI /\nTIM1_CH3N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>D35</p></td>\n<td><p>PC6 / TIM3_CH1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>D36</p></td>\n<td><p>PC7 / TIM3_CH2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>D37</p></td>\n<td><p>PC8 / TIM3_CH3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>CON1 power</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>RESET</p></td>\n<td><p>NRST</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VCC (3V3)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>VDD (3V3A)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>VIN</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON2 analog</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D15 (A0)</p></td>\n<td><p>PC0 / ADC12_IN10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D16 (A1)</p></td>\n<td><p>PC1 / ADC12_IN11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D17 (A2)</p></td>\n<td><p>PC2 / ADC12_IN12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D18 (A3)</p></td>\n<td><p>PC3 / ADC12_IN13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D19 (A4)</p></td>\n<td><p>PC4 / ADC12_IN14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D20 (A5)</p></td>\n<td><p>PC5 / ADC12_IN15</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON3 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D0 (RXD2)</p></td>\n<td><p>PA3 / USART2_RX /\nADC12_IN3 / TIM2_CH4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D1 (TXD2)</p></td>\n<td><p>PA2 / USART2_TX /\nADC12_IN2 / TIM2_CH3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D2</p></td>\n<td><p>PA0 / WKUP /\nUSART2_CTS / ADC12_IN0 /\nTIM2_CH1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D3 (LED2)</p></td>\n<td><p>PA1 / USART2_RTS /\nADC12_IN1 / TIM2_CH2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D4</p></td>\n<td><p>PB5 / I2C1_SMBAI /\nTIM3_CH2 / SPI1_MOSI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D5</p></td>\n<td><p>PB6 / I2C1_SCL /\nTIM4_CH1 / USART1_TX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D6</p></td>\n<td><p>PA8 / USART1_CK /\nTIM1_CH1 / MCO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D7 (TXD1)</p></td>\n<td><p>PA9 / USART1_TX /\nTIM1_CH2</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON4 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F103RB Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D8 (RXD1)</p></td>\n<td><p>PA10 / USART1_RX /\nTIM1_CH3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D9</p></td>\n<td><p>PB7 / I2C1_SDA /\nTIM4_CH2 / USART1_RX</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D10 (#SS1)</p></td>\n<td><p>PA4 / SPI1_NSS /\nUSART2_CK / ADC12_IN4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI1)</p></td>\n<td><p>PA7 / SPI1_MOSI /\nADC12_IN7 / TIM3_CH2 /\nTIM1_CH1N</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D12 (MISO1)</p></td>\n<td><p>PA6 / SPI1_MISO /\nADC12_IN6 / TIM3_CH1 /\nTIM1_BKIN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D13 (SCK1 /\nLED1)</p></td>\n<td><p>PA5 / SPI1_SCK /\nADC12_IN5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D14 (CANRX)</p></td>\n<td><p>PB8 / TIM4_CH3 /\nI2C1_SCL / CANRX</p></td>\n</tr>\n</tbody>\n</table>\n<p>CAN</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 35%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>CAN L</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>CAN H</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEXINO-STM32 has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 8 MHz. The processor can setup HSE to drive the master clock,\nwhich can be set as high as 72 MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEXINO-STM32 board has up to 3 U(S)ARTs. The Zephyr console output is\nassigned to USART1. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"spi\">\n<h3>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEXINO-STM32 board has up to 2 SPIs. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h3>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The OLIMEXINO-STM32 board supports two I2C devices. The default I2C mapping for\nZephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB11</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEXINO-STM32 board has a USB 2.0 full-speed device interface available\nthrough its mini USB connector.</p>\n<ul class=\"simple\">\n<li><p>USB_DM : PA11</p></li>\n<li><p>USB_DP : PA12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"can\">\n<h3>CAN<a class=\"headerlink\" href=\"#can\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEXINO-STM32 board has a CAN interface with transceiver on board.\nCAN is accessible through a screw terminal.</p>\n<ul class=\"simple\">\n<li><p>CAN_RX : PB8</p></li>\n<li><p>CAN_TX : PB9</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"jumpers\">\n<h3>Jumpers<a class=\"headerlink\" href=\"#jumpers\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr kernel uses the OLIMEXINO-STM32 default jumper\nsettings. Note that all jumpers on the board are SMD type.\nYou will need to solder, unsolder, or cut them in order to\nreconfigure them.</p>\n<p>The default jumper settings for the OLIMEXIMO-STM32E are:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 36%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 36%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Jumper Name</p></th>\n<th class=\"head\"><p>Open</p></th>\n<th class=\"head\"><p>Close</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>LED1_E</p></td>\n<td></td>\n<td><p>x</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED2_E</p></td>\n<td></td>\n<td><p>x</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D23_E</p></td>\n<td><p>x</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>R-T</p></td>\n<td><p>x</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>P10_E</p></td>\n<td></td>\n<td><p>x</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 36%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 36%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Jumper Name</p></th>\n<th class=\"head\"><p>D10</p></th>\n<th class=\"head\"><p>D4</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D10/D4</p></td>\n<td></td>\n<td><p>x</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"flashing-zephyr-onto-olimexino-stm32\">\n<h2>Flashing Zephyr onto OLIMEXINO-STM32<a class=\"headerlink\" href=\"#flashing-zephyr-onto-olimexino-stm32\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Flashing the Zephyr kernel onto OLIMEXINO-STM32 requires the\n<a class=\"reference external\" href=\"https://sourceforge.net/p/stm32flash/wiki/Home/\">stm32flash tool</a>.</p>\n<div class=\"section\" id=\"building-stm32flash-command-line-tool\">\n<h3>Building stm32flash command line tool<a class=\"headerlink\" href=\"#building-stm32flash-command-line-tool\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To build the stm32flash tool, follow the steps below:</p>\n<ol class=\"arabic simple\">\n<li><p>Checkout the stm32flash tool’s code from the repository.</p></li>\n</ol>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git clone http://git.code.sf.net/p/stm32flash/code stm32flash\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span> stm32flash\n</pre></div>\n</div>\n</div></blockquote>\n<ol class=\"arabic simple\">\n<li><p>Build the stm32flash tool.</p></li>\n</ol>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>make\n</pre></div>\n</div>\n</div></blockquote>\n<ol class=\"arabic simple\">\n<li><p>The resulting binary is available at <code class=\"file docutils literal notranslate\"><span class=\"pre\">stm32flash</span></code>.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-olimexino-stm32\">\n<h3>Flashing an Application to OLIMEXINO-STM32<a class=\"headerlink\" href=\"#flashing-an-application-to-olimexino-stm32\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To upload an application to the OLIMEXINO-STM32 board a TTL(3.3V)\nserial adapter is required. This tutorial uses the\n<a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a> sample application.</p>\n<ol class=\"arabic\">\n<li><p>Connect the serial cable to the UEXT lines of the UART\ninterface (pin #3=TX and pin #4=RX).</p></li>\n<li><p>Power the OLIMEXINO-STM32 via the mini USB.</p></li>\n<li><p>Reset the board while holding the button (BUT).</p></li>\n<li><p>To build the application and flash it, enter:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimexino_stm32 samples/basic/button</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</li>\n<li><p>Run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0 -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>The <code class=\"code docutils literal notranslate\"><span class=\"pre\">-b</span></code> option sets baud rate ignoring the value\nfrom config.</p>\n</li>\n<li><p>Press the Reset button and you should see the output of\nbutton application in your terminal. The state of the BUT\nbutton’s GPIO line is monitored and printed to the serial\nconsole. When the input button gets pressed, the interrupt\nhandler prints information about this event along with its\ntimestamp.</p></li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Make sure your terminal program is closed before flashing\nthe binary image, or it will interfere with the flashing\nprocess.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 10, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}, {"label": "GPIO_I"}, {"label": "GPIO_J"}, {"label": "GPIO_K"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 4, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32pg_stk3402a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFM32 Pearl Gecko Starter Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efm32-pearl-gecko-starter-kit\">\n<span id=\"efm32pg-stk3402a\"></span><h1>EFM32 Pearl Gecko Starter Kit<a class=\"headerlink\" href=\"#efm32-pearl-gecko-starter-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFM32 Pearl Gecko Starter Kit EFM32PG-STK3402A contains an MCU from the\nEFM32PG family built on an ARM® Cortex®-M4F processor with excellent low\npower capabilities.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/efm32pg_stk3402a.jpg\"><img alt=\"EFM32PG-SLSTK3402A\" src=\"../../../../_images/efm32pg_stk3402a.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">EFM32PG-SLSTK3402A (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring provides real-time information about the energy\nconsumption of an application or prototype design.</p></li>\n<li><p>Ultra low power 128x128 pixel Memory-LCD</p></li>\n<li><p>2 user buttons, 2 LEDs and a touch slider</p></li>\n<li><p>Humidity, temperature, and inductive-capacitive metal sensor</p></li>\n<li><p>On-board Segger J-Link USB debugger</p></li>\n</ul>\n<p>For more information about the EFM32PG SoC and EFM32PG-STK3402A board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/mcu/32-bit/efm32-pearl-gecko\">EFM32PG Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/efm32pg12-datasheet.pdf\">EFM32PG12 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/efm32pg12-rm.pdf\">EFM32PG12 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/development-tools/mcu/32-bit/efm32-pearl-gecko-pg12-starter-kit\">EFM32PG-STK3402A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug257-stk3402-usersguide.pdf\">EFM32PG-STK3402A User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/schematic-files/EFM32PG12-BRD2501A-A01-schematic.pdf\">EFM32PG-STK3402A Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32pg_stk3402a board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtcc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c port-polling</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TRNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>true random number generator</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32pg_stk3402a/efm32pg_stk3402a_defconfig</span></code></p>\n</div></blockquote>\n<p>The default configuration when building for this EFM32JG12B SoC can be found in\nanother defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32pg_stk3402a/efm32pg_stk3402a_defconfig_jg</span></code></p>\n</div></blockquote>\n<p>Other hardware features are currently not supported by the port.</p>\n<div class=\"section\" id=\"efm32-jade-gecko-soc\">\n<h4>EFM32 Jade Gecko SoC<a class=\"headerlink\" href=\"#efm32-jade-gecko-soc\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The EFM32 Pearl Gecko Starter Kit EFM32PG-STK3402A can also be used to evaluate\nthe EFM32 Jade Gecko SoC (EFM32JG12B). The only difference between the Pearl\nGecko and the Jade Gecko is their core. The Pearl Gecko contains an ARM®\nCortex®-M4F core, and the Jade Gecko an ARM® Cortex®-M3 core. Other features\nsuch as memory and peripherals are the same.</p>\n<p>Code that is built for the Jade Gecko also runs on an equivalent Pearl Gecko.</p>\n<p>To build firmware for the Jade Gecko and run it on the EFM32 Pearl Gecko Starter\nKit, use the board <code class=\"docutils literal notranslate\"><span class=\"pre\">efm32pg_stk3402a_jg</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">efm32pg_stk3402a</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG12 SoC has twelve GPIO controllers (PORTA to PORTL), but only four\nare currently enabled (PORTA, PORTB, PORTD and PORTF) for the EFM32PG-STK3402A\nboard.</p>\n<p>In the following table, the column <strong>Name</strong> contains pin names. For example, PE2\nmeans pin number 2 on PORTE, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PF4</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF5</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA5</p></td>\n<td><p>GPIO</p></td>\n<td><p>Board Controller Enable\nEFM_BC_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PA0</p></td>\n<td><p>UART_TX</p></td>\n<td><p>UART TX Console VCOM_TX US0_TX #0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA1</p></td>\n<td><p>UART_RX</p></td>\n<td><p>UART RX Console VCOM_RX US0_RX #0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD10</p></td>\n<td><p>UART_TX</p></td>\n<td><p>EXP12_UART_TX LEU0_TX #18</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PD11</p></td>\n<td><p>UART_RX</p></td>\n<td><p>EXP14_UART_RX LEU0_RX #18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC10</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>ENV_I2C_SDA I2C0_SDA #15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC11</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>ENV_I2C_SCL I2C0_SCL #15</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG SoC is configured to use the 40 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG SoC has four USARTs and one Low Energy UART (LEUART).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG-STK3402A includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a mass storage device and a\nUSB serial port.</p></li>\n<li><p>A serial flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efm32pg-stk3402a\">\n<h4>Flashing an application to EFM32PG-STK3402A<a class=\"headerlink\" href=\"#flashing-an-application-to-efm32pg-stk3402a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32pg_stk3402a samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFM32PG-STK3402A to your host computer using the USB port and you\nshould see a USB connection which exposes a mass storage device(STK3402A).\nCopy the generated zephyr.bin to the STK3402A drive.</p>\n<p>Use a USB-to-UART converter such as an FT232/CP2102 to connect to the UART on the\nexpansion header.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you’ll see the following message on the corresponding serial port\nterminal session:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "olimex_stm32_e407", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>OLIMEX-STM32-E407</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"olimex-stm32-e407\">\n<span id=\"id1\"></span><h1>OLIMEX-STM32-E407<a class=\"headerlink\" href=\"#olimex-stm32-e407\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-E407 board is open source hardware and is based on\nthe STMicroelectronics STM32F407ZG ARM Cortex-M4 CPU.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex_stm32_e407.png\"><img alt=\"OLIMEX-STM32-E407\" src=\"../../../../_images/olimex_stm32_e407.png\" style=\"width: 540px; height: 454px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-E407</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-E407/open-source-hardware\">OLIMEX-STM32-E407 website</a> and <a class=\"reference external\" href=\"https://www.olimex.com/Products/ARM/ST/STM32-E407/resources/STM32-E407.pdf\">OLIMEX-STM32-E407 user manual</a>.\nThe <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031020.pdf\">ST STM32F407ZG Datasheet</a> contains the processor’s\ninformation and the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The olimex_stm32_e407 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 26%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 48%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB OTG FS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB OTG HS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/olimex-stm32-e407-front.png\"><img alt=\"OLIMEX-STM32-E407 connectors\" src=\"../../../../_images/olimex-stm32-e407-front.png\" style=\"width: 739px; height: 530px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">OLIMEX-STM32-E407 connectors</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED (green) = PC13</p></li>\n<li><p>PWR_LED (red) = power</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUT = PA0</p></li>\n<li><p>RST = NRST</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>JTAG/SWD debug</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>+3.3V</p></td>\n<td><p>12</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PB4 / TRST</p></td>\n<td><p>13</p></td>\n<td><p>PB3 / TDO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>14</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PA15 / TDI</p></td>\n<td><p>15</p></td>\n<td><p>PB4 / TRST</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PA13 / TMS</p></td>\n<td><p>17</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>GND</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA14 / TCK</p></td>\n<td><p>19</p></td>\n<td><p>+5V_JTAG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>GND</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>UEXT</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 50%\"/>\n<col style=\"width: 35%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Wire   Name</p></th>\n<th class=\"head\"><p>STM32F407 port</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PC6/USART6_TX</p></td>\n<td><p>PC6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PC7/USART6_RX</p></td>\n<td><p>PC7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PB8/I2C1_SCL</p></td>\n<td><p>PB8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PB9/I2C1_SDA</p></td>\n<td><p>PB9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PC2/SPI2_MISO</p></td>\n<td><p>PC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PC3/SPI2_MOSI</p></td>\n<td><p>PC3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PB10/SPI_SCK/UART3_TX</p></td>\n<td><p>PB10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>RB7/UEXT_CS</p></td>\n<td><p>PB7</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>CON1 power</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>RST</p></td>\n<td><p>RESET</p></td>\n<td><p>25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3V3</p></td>\n<td><p>VCC (3V3)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5V</p></td>\n<td><p>VDD (5V)</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VIN</p></td>\n<td><p>VIN</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON2 analog</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>A0</p></td>\n<td><p>PC0</p></td>\n<td><p>26</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A1</p></td>\n<td><p>PF6</p></td>\n<td><p>18</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A2</p></td>\n<td><p>PF7</p></td>\n<td><p>19</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A3</p></td>\n<td><p>PF8</p></td>\n<td><p>20</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A4</p></td>\n<td><p>PF9</p></td>\n<td><p>21</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A5</p></td>\n<td><p>PF10</p></td>\n<td><p>22</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON3 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 32%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D0</p></td>\n<td><p>PB7/USART1_RX</p></td>\n<td><p>137</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D1</p></td>\n<td><p>PB6/USART1_TX</p></td>\n<td><p>136</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D2</p></td>\n<td><p>PE2</p></td>\n<td><p>1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D3</p></td>\n<td><p>PE4</p></td>\n<td><p>3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D4</p></td>\n<td><p>PE5</p></td>\n<td><p>4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D5</p></td>\n<td><p>PR6</p></td>\n<td><p>5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D6</p></td>\n<td><p>PG7</p></td>\n<td><p>92</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D7</p></td>\n<td><p>PG8</p></td>\n<td><p>93</p></td>\n</tr>\n</tbody>\n</table>\n<p>CON4 digital</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F407 Pin#</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>D8</p></td>\n<td><p>PG12</p></td>\n<td><p>35</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D9</p></td>\n<td><p>PG15</p></td>\n<td><p>70</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D10</p></td>\n<td><p>PA4</p></td>\n<td><p>40</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D11</p></td>\n<td><p>PB5</p></td>\n<td><p>43</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>D12</p></td>\n<td><p>PA6</p></td>\n<td><p>42</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>D13</p></td>\n<td><p>PA5</p></td>\n<td><p>41</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GND</p></td>\n<td><p>AGND</p></td>\n<td><p>31</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>AREF</p></td>\n<td><p>AREF</p></td>\n<td><p>32</p></td>\n</tr>\n</tbody>\n</table>\n<p>PD</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PD8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PD9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PD0</p></td>\n<td><p>13</p></td>\n<td><p>PD10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PD1</p></td>\n<td><p>14</p></td>\n<td><p>PD11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PD2/SD_MMC</p></td>\n<td><p>15</p></td>\n<td><p>PD12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PD3</p></td>\n<td><p>16</p></td>\n<td><p>PD13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PD4</p></td>\n<td><p>17</p></td>\n<td><p>PD14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PD5</p></td>\n<td><p>18</p></td>\n<td><p>PD15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PD6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PD7</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PE</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PE8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PE9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PE0</p></td>\n<td><p>13</p></td>\n<td><p>PE10</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PE1</p></td>\n<td><p>14</p></td>\n<td><p>PE11</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PE2/D2</p></td>\n<td><p>15</p></td>\n<td><p>PE12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PE3</p></td>\n<td><p>16</p></td>\n<td><p>PE13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PE4/D3</p></td>\n<td><p>17</p></td>\n<td><p>PE14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PE5/D4</p></td>\n<td><p>18</p></td>\n<td><p>PE15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PE6/D5</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PE7</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PF</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PF8/A3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PF9/A4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PF0</p></td>\n<td><p>13</p></td>\n<td><p>PF10/A5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PF1</p></td>\n<td><p>14</p></td>\n<td><p>PF11/A6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PF2</p></td>\n<td><p>15</p></td>\n<td><p>PF12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PF3</p></td>\n<td><p>16</p></td>\n<td><p>PF13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PF4</p></td>\n<td><p>17</p></td>\n<td><p>PF14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PF5</p></td>\n<td><p>18</p></td>\n<td><p>PF15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PF6/A1</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PF7/A2</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>PG</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>+3.3V</p></td>\n<td><p>11</p></td>\n<td><p>PG8/D7</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>12</p></td>\n<td><p>PG9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PG0</p></td>\n<td><p>13</p></td>\n<td><p>PG10/UEXT_CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PG1</p></td>\n<td><p>14</p></td>\n<td><p>PG11/TX_EN</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PG2</p></td>\n<td><p>15</p></td>\n<td><p>PG12/D8</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PG3</p></td>\n<td><p>16</p></td>\n<td><p>PG13/TXD0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PG4</p></td>\n<td><p>17</p></td>\n<td><p>PG14/TXD1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PG5</p></td>\n<td><p>18</p></td>\n<td><p>PG15/D9</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PG6</p></td>\n<td><p>19</p></td>\n<td><p>+5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PG7/D6</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>OLIMEX-STM32-E407 has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 12 MHz. The processor can setup HSE to drive the master clock,\nwhich can be set as high as 168 MHz.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The OLIMEX-STM32-E407 board does not include an embedded debug tool\ninterface. You will need to use ST tools or an external JTAG probe.\nIn the following examples a ST-Link V2 USB dongle is used.</p>\n<p>If you have an external JTAG probe compliant with the default Zephyr OpenOCD\nconfiguration, however, then applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">olimex_stm32_e407</span></code> board\nconfiguration can be built and flashed in the usual way (see\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing-an-application-to-the-olimex-stm32-e407\">\n<h3>Flashing an application to the Olimex-STM32-E407<a class=\"headerlink\" href=\"#flashing-an-application-to-the-olimex-stm32-e407\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect the ST-Link USB dongle to your host computer and to the JTAG port of\nthe OLIMEX-STM32-E407 board. Then build and flash an application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_e407 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>After resetting the board, you should see the following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** BOOTING ZEPHYR OS v1.8.99 - BUILD: May 29 2017 22:31:53 *****</span>\n<span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Provided that you have a JTAG probe, you can debug an application in the usual\nway.  Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b olimex_stm32_e407 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash", "size": 2097152}], "main_flash_size": 2097152, "memory": [], "main_ram_size": 0, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "native_posix", "arch": "posix", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">POSIX/NATIVE Boards</a> »</li>\n<li>Native POSIX execution (native_posix)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"native-posix-execution-native-posix\">\n<span id=\"native-posix\"></span><h1>Native POSIX execution (native_posix)<a class=\"headerlink\" href=\"#native-posix-execution-native-posix\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"contents local topic\" id=\"contents\">\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#overview\" id=\"id3\">Overview</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#important-limitations\" id=\"id4\">Important limitations</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#how-to-use-it\" id=\"id5\">How to use it</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#and-64bit-versions\" id=\"id6\">32 and 64bit versions</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#rationale-for-this-port\" id=\"id7\">Rationale for this port</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#comparison-with-other-options\" id=\"id8\">Comparison with other options</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#architecture\" id=\"id9\">Architecture</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#peripherals\" id=\"id10\">Peripherals</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#uart\" id=\"id11\">UART</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#subsystems-backends\" id=\"id12\">Subsystems backends</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#host-based-flash-access\" id=\"id13\">Host based flash access</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"overview\">\n<h2><a class=\"toc-backref\" href=\"#id3\">Overview</a><a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Using this board, a Zephyr application can be compiled together with\nthe Zephyr kernel, creating a normal console executable that runs as\na native application on the host OS, without emulation. Instead,\nyou use native host tools for compiling, debugging, and analyzing your\nZephyr application, eliminating the need for architecture-specific\ntarget hardware in the early phases of development.</p>\n<p>This board provides a few peripherals such as an Ethernet driver and UART.\nSee <a class=\"reference internal\" href=\"#peripherals\">Peripherals</a> for more information.</p>\n<div class=\"section\" id=\"host-system-dependencies\">\n<span id=\"native-posix-deps\"></span><h3>Host system dependencies<a class=\"headerlink\" href=\"#host-system-dependencies\" title=\"Permalink to this headline\">¶</a></h3>\n<p>This port is designed to run in POSIX compatible operating systems,\nbut it has only been tested on Linux.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>You must have the 32-bit C library installed in your system\n(in Ubuntu 16.04 install the gcc-multilib package)</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The 32 bit version of this port does not directly work in Windows Subsystem\nfor Linux (WSL) because WSL does not support native 32-bit binaries.\nYou may want to consider WSL2, or you can also just use the native_posix_64\ntarget: Check <a class=\"reference internal\" href=\"#and-64bit-versions\">32 and 64bit versions</a>.\nOtherwise <a class=\"reference external\" href=\"https://github.com/microsoft/WSL/issues/2468#issuecomment-374904520\">with some tinkering</a> it\nshould be possible to make it work.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"important-limitations\">\n<span id=\"native-important-limitations\"></span><h2><a class=\"toc-backref\" href=\"#id4\">Important limitations</a><a class=\"headerlink\" href=\"#important-limitations\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The underlying assumptions behind this port set some limitations on what\ncan and cannot be done.\nThese limitations are due to the code executing natively in\nthe host CPU without any instrumentation or means to interrupt it unless the\nsimulated CPU is sleeping.</p>\n<p>You can imagine the code executes in a simulated CPU\nwhich runs at an infinitely fast clock: No time passes while the CPU is\nrunning.\nTherefore interrupts, including timer interrupts, will not arrive\nwhile code executes, except immediately after the SW enables or unmasks\nthem if they were pending.</p>\n<p>This behavior is intentional, as it provides a deterministic environment to\ndevelop and debug.\nFor more information please see the\n<a class=\"reference internal\" href=\"#rationale-for-this-port\">Rationale for this port</a> and <a class=\"reference internal\" href=\"#architecture\">Architecture</a> sections</p>\n<p>Therefore these limitations apply:</p>\n<ul>\n<li><p>There can <strong>not</strong> be busy wait loops in the application code that wait for\nsomething to happen without letting the CPU sleep.\nIf busy wait loops do exist, they will behave as infinite loops and\nwill stall the execution. For example, the following busy wait loop code,\nwhich could be interrupted on actual hardware, will stall the execution of\nall threads, kernel, and HW models:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">){}</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Similarly the following code where we expect <code class=\"docutils literal notranslate\"><span class=\"pre\">condition</span></code> to be\nupdated by an interrupt handler or another thread, will also stall\nthe application when compiled for this port.</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">volatile</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">){}</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</li>\n<li><p>Code that depends on its own execution speed will normally not\nwork as expected. For example, code such as shown below, will likely not\nwork as expected:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">peripheral_x</span><span class=\"o\">-&gt;</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* Wait for a number of CPU cycles */</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">NOP</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* We expect the peripheral done and ready to do something else */</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</li>\n<li><p>This port is not meant to, and could not possibly help debug races between\nHW and SW, or similar timing related issues.</p></li>\n<li><p>You may not use hard coded memory addresses because there is no I/O or\nMMU emulation.</p></li>\n</ul>\n<div class=\"section\" id=\"working-around-these-limitations\">\n<h3>Working around these limitations<a class=\"headerlink\" href=\"#working-around-these-limitations\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If a busy wait loop exists, it will become evident as the application will be\nstalled in it. To find the loop, you can run the binary in a debugger and\npause it after the execution is stuck; it will be paused in\nsome part of that loop.</p>\n<p>The best solution is to remove that busy wait loop, and instead use\nan appropriate kernel primitive to synchronize your threads.\nNote that busy wait loops are in general a bad coding practice as they\nkeep the CPU executing and consuming power.</p>\n<p>If removing the busy loop is really not an option, you may add a conditionally\ncompiled call to <a class=\"reference internal\" href=\"../../../../reference/kernel/other/cpu_idle.html#c.k_cpu_idle\" title=\"k_cpu_idle\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">k_cpu_idle()</span></code></a> if you are waiting for an\ninterrupt, or a call to <a class=\"reference internal\" href=\"../../../../reference/kernel/threads/index.html#c.k_busy_wait\" title=\"k_busy_wait\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">k_busy_wait()</span></code></a> with some small delay in\nmicroseconds.\nIn the previous example, modifying the code as follows would work:</p>\n<div class=\"highlight-c notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">volatile</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cp\">#if defined(CONFIG_ARCH_POSIX)</span>\n<span class=\"w\">             </span><span class=\"n\">k_cpu_idle</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cp\">#endif</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"how-to-use-it\">\n<h2><a class=\"toc-backref\" href=\"#id5\">How to use it</a><a class=\"headerlink\" href=\"#how-to-use-it\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"compiling\">\n<h3>Compiling<a class=\"headerlink\" href=\"#compiling\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Specify the native_posix board target to build a native POSIX application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b native_posix samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"running\">\n<h3>Running<a class=\"headerlink\" href=\"#running\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The result of the compilation is an executable (zephyr.exe) placed in the\nzephyr/ subdirectory of the build folder.\nRun the zephyr.exe executable as you would any other Linux console application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./build/zephyr/zephyr.exe\n<span class=\"gp\"># </span>Press Ctrl+C to <span class=\"nb\">exit</span>\n</pre></div>\n</div>\n<p>This executable accepts several command line options depending on the\ncompilation configuration.\nYou can run it with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--help</span></code> command line switch to get a list of\navailable options:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ ./build/zephyr/zephyr.exe --help\n</pre></div>\n</div>\n<p>Note that the Zephyr kernel does not actually exit once the application is\nfinished. It simply goes into the idle loop forever.\nTherefore you must stop the application manually (Ctrl+C in Linux).</p>\n<p>Application tests using the <code class=\"docutils literal notranslate\"><span class=\"pre\">ztest</span></code> framework will exit after all\ntests have completed.</p>\n<p>If you want your application to gracefully finish when it reaches some point,\nyou may add a conditionally compiled (<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_ARCH_POSIX.html#std-kconfig-CONFIG_ARCH_POSIX\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_ARCH_POSIX</span></code></a>) call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">posix_exit(int</span> <span class=\"pre\">status)</span></code> at that point.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Since the Zephyr executable is a native application, it can be debugged and\ninstrumented as any other native program. The program is compiled with debug\ninformation, so it can be run directly in, for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">gdb</span></code> or instrumented\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">valgrind</span></code>.</p>\n<p>Because the execution of your Zephyr application is normally deterministic\n(there are no asynchronous or random components), you can execute the\ncode multiple times and get the exact same result. Instrumenting the\ncode does not affect its execution.</p>\n<p>To ease debugging you may want to compile your code without optimizations\n(e.g., -O0) by setting <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NO_OPTIMIZATIONS.html#std-kconfig-CONFIG_NO_OPTIMIZATIONS\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NO_OPTIMIZATIONS</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"address-sanitizer-asan\">\n<h3>Address Sanitizer (ASan)<a class=\"headerlink\" href=\"#address-sanitizer-asan\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can also build Zephyr with <a class=\"reference external\" href=\"https://github.com/google/sanitizers/wiki/AddressSanitizer\">Address Sanitizer</a>. To do this, set\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_ASAN.html#std-kconfig-CONFIG_ASAN\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_ASAN</span></code></a>, for example, in the application project file, or in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">cmake</span></code> command line invocation.</p>\n<p>Note that you will need the ASan library installed in your system.\nIn Debian/Ubuntu this is <code class=\"docutils literal notranslate\"><span class=\"pre\">libasan1</span></code>.</p>\n</div>\n<div class=\"section\" id=\"coverage-reports\">\n<h3>Coverage reports<a class=\"headerlink\" href=\"#coverage-reports\" title=\"Permalink to this headline\">¶</a></h3>\n<p>See\n<a class=\"reference internal\" href=\"../../../../guides/test/coverage.html#coverage-posix\"><span class=\"std std-ref\">coverage reports using the POSIX architecture</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"and-64bit-versions\">\n<h2><a class=\"toc-backref\" href=\"#id6\">32 and 64bit versions</a><a class=\"headerlink\" href=\"#and-64bit-versions\" title=\"Permalink to this headline\">¶</a></h2>\n<p>native_posix comes with two targets: A 32 bit and 64 bit version.\nThe 32 bit version, <code class=\"docutils literal notranslate\"><span class=\"pre\">native_posix</span></code>, is the default target, which will compile\nyour code for the ILP32 ABI (i386 in a x86 or x86_64 system) where pointers\nand longs are 32 bits.\nThis mimics the ABI of most embedded systems Zephyr targets,\nand is therefore normally best to test and debug your code, as some bugs are\ndependent on the size of pointers and longs.\nThis target requires either a 64 bit system with multilib support installed or\none with a 32bit userspace.</p>\n<p>The 64 bit version, <code class=\"docutils literal notranslate\"><span class=\"pre\">native_posix_64</span></code>, compiles your code targeting the\nLP64 ABI (x86-64 in x86 systems), where pointers and longs are 64 bits.\nYou can use this target if you cannot compile or run 32 bit binaries.</p>\n<p>If you are using another 32 bit POSIX arch target you may also override its ABI\ntarget and pointer bit width by setting <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_64BIT.html#std-kconfig-CONFIG_64BIT\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_64BIT</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"rationale-for-this-port\">\n<h2><a class=\"toc-backref\" href=\"#id7\">Rationale for this port</a><a class=\"headerlink\" href=\"#rationale-for-this-port\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The main intents of this port are:</p>\n<ul class=\"simple\">\n<li><p>Allow functional debugging, instrumentation and analysis of the code with\nnative tooling.</p></li>\n<li><p>Allow functional regression testing, and simulations in which we have the\nfull functionality of the code.</p></li>\n<li><p>Run tests fast: several minutes of simulated time per wall time second.</p></li>\n<li><p>Possibility to connect to external tools which may be able to run much\nfaster or much slower than real time.</p></li>\n<li><p>Deterministic, repeatable runs:\nThere must not be any randomness or indeterminism (unless host peripherals\nare used).\nThe result must <strong>not</strong> be affected by:</p>\n<ul>\n<li><p>Debugging or instrumenting the code.</p></li>\n<li><p>Pausing in a breakpoint and continuing later.</p></li>\n<li><p>The host computer performance or its load.</p></li>\n</ul>\n</li>\n</ul>\n<p>The aim of this port is not to debug HW/SW races, missed HW programming\ndeadlines, or issues in which an interrupt comes when it was not expected.\nNormally those would be debugged with a cycle accurate Instruction Set Simulator\n(ISS) or with a development board.</p>\n</div>\n<div class=\"section\" id=\"comparison-with-other-options\">\n<h2><a class=\"toc-backref\" href=\"#id8\">Comparison with other options</a><a class=\"headerlink\" href=\"#comparison-with-other-options\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This port does not try to replace cycle accurate instruction set simulators\n(ISS), development boards, or QEMU, but to complement them. This port’s main aim\nis to meet the targets described in the previous <a class=\"reference internal\" href=\"#rationale-for-this-port\">Rationale for this port</a>\nsection.</p>\n<div class=\"align-center figure\" id=\"id1\">\n<img alt=\"Comparison of different debugging targets\" src=\"../../../../_images/Port_vs_QEMU_vs.svg\"/><p class=\"caption\"><span class=\"caption-text\">Comparison of different debugging options. Note that realism has many\ndimensions: Having the real memory map or emulating the exact time an\ninstruction executes is just some of it; Emulating peripherals accurately\nis another side.</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>This native port compiles your code directly to x86, with no instrumentation or\nmonitoring code. Your code executes directly in the host CPU. That is, your code\nexecutes just as fast as it possibly can.</p>\n<p>Simulated time is normally decoupled from real host time.\nThe problem of how to emulate the instruction execution speed is solved\nby assuming that code executes in zero simulated time.</p>\n<p>There is no I/O or MMU emulation. If you try to access memory through hardcoded\naddresses your binary will simply segfault.\nThe drivers and HW models for this architecture will hide this from the\napplication developers when it relates to those peripherals.\nIn general this port is not meant to help developing low level drivers for\ntarget HW. But for developing application code.</p>\n<p>Your code can be debugged, instrumented, or analyzed with all normal native\ndevelopment tools just like any other Linux application.</p>\n<p>Execution is fully reproducible, you can pause it without side-effects.</p>\n<div class=\"section\" id=\"how-does-this-port-compare-to-qemu\">\n<h3>How does this port compare to QEMU:<a class=\"headerlink\" href=\"#how-does-this-port-compare-to-qemu\" title=\"Permalink to this headline\">¶</a></h3>\n<p>With QEMU you compile your image targeting the board which is closer to\nyour desired board. For example an ARM based one. QEMU emulates the real memory\nlayout of the board, loads the compiled binary and through instructions\ntranslation executes that ARM targeted binary on the host CPU.\nDepending on configuration, QEMU also provides models of some peripherals\nand, in some cases, can expose host HW as emulated target peripherals.</p>\n<p>QEMU cannot provide any emulation of execution speed. It simply\nexecutes code as fast as it can, and lets the host CPU speed determine the\nemulated CPU speed. This produces highly indeterministic behavior,\nas the execution speed depends on the host system performance and its load.</p>\n<p>As instructions are translated to the host architecture, and the target CPU and\nMMU are emulated, there is a performance penalty.</p>\n<p>You can connect gdb to QEMU, but have few other instrumentation abilities.</p>\n<p>Execution is not reproducible. Some bugs may be triggered only in some runs\ndepending on the computer and its load.</p>\n</div>\n<div class=\"section\" id=\"how-does-this-port-compare-to-an-iss\">\n<h3>How does this port compare to an ISS:<a class=\"headerlink\" href=\"#how-does-this-port-compare-to-an-iss\" title=\"Permalink to this headline\">¶</a></h3>\n<p>With a cycle accurate instruction set simulator you compile targeting either\nyour real CPU/platform or a close enough relative. The memory layout is modeled\nand some or all peripherals too.</p>\n<p>The simulator loads your binary, slowly interprets each instruction, and\naccounts for the time each instruction takes.\nTime is simulated and is fully decoupled from real time.\nSimulations are on the order of 10 to 100 times slower than real time.</p>\n<p>Some instruction set simulators work with gdb, and may\nprovide some extra tools for analyzing your code.</p>\n<p>Execution is fully reproducible. You can normally pause your execution without\nside-effects.</p>\n</div>\n</div>\n<div class=\"section\" id=\"architecture\">\n<h2><a class=\"toc-backref\" href=\"#id9\">Architecture</a><a class=\"headerlink\" href=\"#architecture\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"align-center figure\" id=\"id2\">\n<img alt=\"Zephyr layering in native build\" src=\"../../../../_images/native_layers.svg\"/><p class=\"caption\"><span class=\"caption-text\">Zephyr layering when built against an embedded target (left), and\ntargeting the native_posix board (right)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>This board is based on the POSIX architecture port of Zephyr.\nIn this architecture each Zephyr thread is mapped to one POSIX pthread,\nbut only one of these pthreads executes at a time.\nThis architecture provides the same interface to the Kernel as other\narchitectures and is therefore transparent for the application.</p>\n<p>This board does not try to emulate any particular embedded CPU or SOC.\nThe code is compiled natively for the host x86 system, as a 32-bit\nbinary assuming pointer and integer types are 32-bits wide.</p>\n<p>To ensure determinism when the Zephyr code is running,\nand to ease application debugging,\nthe board uses a different time than real time: simulated time.\nThis simulated time is, in principle, not linked to the host time.</p>\n<p>The Zephyr application sees the code executing as if the CPU were running at\nan infinitely fast clock, and fully decoupled from the underlying host CPU\nspeed.\nNo simulated time passes while the application or kernel code execute.</p>\n<p>The CPU boot is emulated by creating the Zephyr initialization thread and\nletting it run. This in turn may spawn more Zephyr threads.\nEventually the SW will run to completion, that is, it will set the CPU\nback to sleep.</p>\n<p>At this point, control is transferred back to the HW models and the simulation\ntime can be advanced.</p>\n<p>When the HW models raise an interrupt, the CPU wakes back up, the interrupt\nis handled, the SW runs until completion again, and control is\ntransferred back to the HW models, all in zero simulated time.</p>\n<p>If the SW unmasks a pending interrupt while running, or triggers a SW\ninterrupt, the interrupt controller may raise the interrupt immediately\ndepending on interrupt priorities, masking, and locking state.</p>\n<div class=\"section\" id=\"about-time-in-native-posix\">\n<h3>About time in native_posix<a class=\"headerlink\" href=\"#about-time-in-native-posix\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Normally simulated time runs fully decoupled from the real host time\nand as fast as the host compute power would allow.\nThis is desirable when running in a debugger or testing in batch, but not if\ninteracting with external interfaces based on the real host time.</p>\n<p>The Zephyr kernel is only aware of the simulated time as provided by the\nHW models. Therefore any normal Zephyr thread will also know only about\nsimulated time.</p>\n<p>The only link between the simulated time and the real/host time, if any,\nis created by the clock and timer model.</p>\n<p>This model can be configured to slow down the execution of native_posix to\nreal time.\nYou can do this with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--rt</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--no-rt</span></code> options from the command line.\nThe default behavior is set with\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NATIVE_POSIX_SLOWDOWN_TO_REAL_TIME.html#std-kconfig-CONFIG_NATIVE_POSIX_SLOWDOWN_TO_REAL_TIME\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NATIVE_POSIX_SLOWDOWN_TO_REAL_TIME</span></code></a>.\nNote that all this model does is wait before raising the\nnext system tick interrupt until the corresponding real/host time.\nIf, for some reason, native_posix runs slower than real time, all this\nmodel can do is “catch up” as soon as possible by not delaying the\nfollowing ticks.\nSo if the host load is too high, or you are running in a debugger, you will\nsee simulated time lagging behind the real host time.\nThis solution ensures that normal runs are still deterministic while\nproviding an illusion of real timeness to the observer.</p>\n<p>When locked to real time, simulated time can also be set to run faster or\nslower than real time.\nThis can be controlled with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--rt-ratio=&lt;ratio&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">-rt-drift=&lt;drift&gt;</span></code>\ncommand line options. Note that both of these options control the same\nunderlying mechanism, and that <code class=\"docutils literal notranslate\"><span class=\"pre\">drift</span></code> is by definition equal to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ratio</span> <span class=\"pre\">-</span> <span class=\"pre\">1</span></code>.\nIt is also possible to adjust this clock speed on the fly with\n<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">native_rtc_adjust_clock()</span></code>.</p>\n<p>In this way if, for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">--rt-ratio=2</span></code> is given, the simulated time\nwill advance at twice the real time speed.\nSimilarly if <code class=\"docutils literal notranslate\"><span class=\"pre\">--rt-drift=-100e-6</span></code> is given, the simulated time will progress\n100ppm slower than real time.\nNote that these 2 options have no meaning when running in non real-time\nmode.</p>\n<div class=\"section\" id=\"how-simulated-time-and-real-time-relate-to-each-other\">\n<h4>How simulated time and real time relate to each other<a class=\"headerlink\" href=\"#how-simulated-time-and-real-time-relate-to-each-other\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Simulated time (<code class=\"docutils literal notranslate\"><span class=\"pre\">st</span></code>) can be calculated from real time (<code class=\"docutils literal notranslate\"><span class=\"pre\">rt</span></code>) as</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">st</span> <span class=\"pre\">=</span> <span class=\"pre\">(rt</span> <span class=\"pre\">-</span> <span class=\"pre\">last_rt)</span> <span class=\"pre\">*</span> <span class=\"pre\">ratio</span> <span class=\"pre\">+</span> <span class=\"pre\">last_st</span></code></p>\n<p>And vice-versa:</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">rt</span> <span class=\"pre\">=</span> <span class=\"pre\">(st</span> <span class=\"pre\">-</span> <span class=\"pre\">last_st)</span> <span class=\"pre\">/</span> <span class=\"pre\">ratio</span> <span class=\"pre\">+</span> <span class=\"pre\">last_rt</span></code></p>\n<p>Where <code class=\"docutils literal notranslate\"><span class=\"pre\">last_rt</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">last_st</span></code> are respectively the real time and the\nsimulated time when the last clock ratio adjustment took place.</p>\n<p>All times are kept in microseconds.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"peripherals\">\n<h2><a class=\"toc-backref\" href=\"#id10\">Peripherals</a><a class=\"headerlink\" href=\"#peripherals\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following peripherals are currently provided with this board:</p>\n<dl>\n<dt><strong>Interrupt controller</strong>:</dt><dd><p>A simple yet generic interrupt controller is provided. It can nest interrupts\nand provides interrupt priorities. Interrupts can be individually masked or\nunmasked. SW interrupts are also supported.</p>\n</dd>\n<dt><strong>Clock, timer and system tick model</strong></dt><dd><p>This model provides the system tick timer. By default\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SYS_CLOCK_TICKS_PER_SEC.html#std-kconfig-CONFIG_SYS_CLOCK_TICKS_PER_SEC\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SYS_CLOCK_TICKS_PER_SEC</span></code></a> configures it to tick every 10ms.</p>\n<p>This peripheral driver also provides the needed functionality for this\narchitecture-specific <a class=\"reference internal\" href=\"../../../../reference/kernel/threads/index.html#c.k_busy_wait\" title=\"k_busy_wait\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">k_busy_wait()</span></code></a>.</p>\n<p>Please refer to the section <a class=\"reference internal\" href=\"#about-time-in-native-posix\">About time in native_posix</a> for more\ninformation.</p>\n</dd>\n<dt><strong>UART</strong></dt><dd><p>An optional UART driver can be compiled with native_posix.\nFor more information refer to the section <a class=\"reference internal\" href=\"#uart\">UART</a>.</p>\n</dd>\n<dt><strong>Real time clock</strong></dt><dd><p>The real time clock model provides a model of a constantly powered clock.\nBy default this is initialized to the host time at boot.</p>\n<p>This RTC can also be set to start from time 0 with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--rtc-reset</span></code> command\nline option.</p>\n<p>It is possible to offset the RTC clock value at boot with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--rtc-offset=&lt;offset&gt;</span></code> option,\nor to adjust it dynamically with the function <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">native_rtc_offset()</span></code>.</p>\n<p>After start, this RTC advances with the simulated time, and is therefore\naffected by the simulated time speed ratio.\nSee <a class=\"reference internal\" href=\"#about-time-in-native-posix\">About time in native_posix</a> for more information.</p>\n<p>The time can be queried with the functions <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">native_rtc_gettime_us()</span></code>\nand <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">native_rtc_gettime()</span></code>. Both accept as parameter the clock source:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">RTC_CLOCK_BOOT</span></code>: It counts the simulated time passed since boot.\nIt is not subject to offset adjustments</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">RTC_CLOCK_REALTIME</span></code>: RTC persistent time. It is affected by\noffset adjustments.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">RTC_CLOCK_PSEUDOHOSTREALTIME</span></code>: A version of the real host time,\nas if the host was also affected by the clock speed ratio and offset\nadjustments performed to the simulated clock and this RTC. Normally\nthis value will be a couple of hundredths of microseconds ahead of the\nsimulated time, depending on the host execution speed.\nThis clock source should be used with care, as depending on the actual\nexecution speed of native_posix and the host load,\nit may return a value considerably ahead of the simulated time.</p></li>\n</ul>\n</dd>\n<dt><strong>Entropy device</strong>:</dt><dd><p>An entropy device based on the host <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">random()</span></code> API.\nThis device will generate the same sequence of random numbers if initialized\nwith the same random seed.\nYou can change this random seed value by using the command line option:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--seed=&lt;random_seed&gt;</span></code> where the value specified is a 32-bit integer\nsuch as 97229 (decimal),  0x17BCD (hex), or 0275715 (octal).</p>\n</dd>\n<dt><strong>Ethernet driver</strong>:</dt><dd><p>A simple TAP based ethernet driver is provided. The driver will create\na <strong>zeth</strong> network interface to the host system. One can communicate with\nZephyr via this network interface. Multiple TAP based network interfaces can\nbe created if needed. The IP address configuration can be specified for each\nnetwork interface instance.\nSee <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_ETH_NATIVE_POSIX_SETUP_SCRIPT.html#std-kconfig-CONFIG_ETH_NATIVE_POSIX_SETUP_SCRIPT\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_ETH_NATIVE_POSIX_SETUP_SCRIPT</span></code></a> option for more details.\nThe <a class=\"reference internal\" href=\"../../../../samples/net/eth_native_posix/README.html#eth-native-posix-sample\"><span class=\"std std-ref\">Native Posix Ethernet</span></a> sample app provides\nsome use examples and more information about this driver configuration.</p>\n<p>Note that this device can only be used with Linux hosts, and that the user\nneeds elevated permissions.</p>\n</dd>\n<dt><strong>Bluetooth controller</strong>:</dt><dd><p>It’s possible to use the host’s Bluetooth adapter as a Bluetooth\ncontroller for Zephyr. To do this the HCI device needs to be passed as\na command line option to <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.exe</span></code>. For example, to use <code class=\"docutils literal notranslate\"><span class=\"pre\">hci0</span></code>,\nuse <code class=\"docutils literal notranslate\"><span class=\"pre\">sudo</span> <span class=\"pre\">zephyr.exe</span> <span class=\"pre\">--bt-dev=hci0</span></code>. Using the device requires root\nprivileges (or the CAP_NET_ADMIN POSIX capability, to be exact) so\n<code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.exe</span></code> needs to be run through <code class=\"docutils literal notranslate\"><span class=\"pre\">sudo</span></code>. The chosen HCI device\nmust be powered down and support Bluetooth Low Energy (i.e. support the\nBluetooth specification version 4.0 or greater).</p>\n</dd>\n<dt><strong>USB controller</strong>:</dt><dd><p>It’s possible to use the Virtual USB controller working over USB/IP\nprotocol. More information can be found in\n<a class=\"reference internal\" href=\"../../../../reference/usb/uds.html#testing-usb-native-posix\"><span class=\"std std-ref\">Testing USB over USP/IP in native_posix</span></a>.</p>\n</dd>\n<dt><strong>Display driver</strong>:</dt><dd><p>A display driver is provided that creates a window on the host machine to\nrender display content.</p>\n<p>This driver requires a 32-bit version of the <a class=\"reference external\" href=\"https://www.libsdl.org/download-2.0.php\">SDL2</a> library on the host\nmachine and <code class=\"docutils literal notranslate\"><span class=\"pre\">pkg-config</span></code> settings to correctly pickup the SDL2 install path\nand compiler flags.</p>\n<p>On a Ubuntu 18.04 host system, for example, install the <code class=\"docutils literal notranslate\"><span class=\"pre\">pkg-config</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">libsdl2-dev:i386</span></code> packages, and configure the pkg-config search path with\nthese commands:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ sudo apt-get install pkg-config libsdl2-dev:i386\n$ export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig\n</pre></div>\n</div>\n</dd>\n</dl>\n<dl>\n<dt><strong>Flash driver</strong>:</dt><dd><p>A flash driver is provided that accesses all flash data through a binary file\non the host file system. The behavior of the flash device can be configured\nthrough the native POSIX board devicetree or Kconfig settings under\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_FLASH_SIMULATOR.html#std-kconfig-CONFIG_FLASH_SIMULATOR\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_FLASH_SIMULATOR</span></code></a>.</p>\n<p>By default the binary data is located in the file <em>flash.bin</em> in the current\nworking directory. The location of this file can be changed through the\ncommand line parameter <em>–flash</em>. The flash data will be stored in raw format\nand the file will be truncated to match the size specified in the devicetree\nconfiguration. In case the file does not exists the driver will take care of\ncreating the file, else the existing file is used.</p>\n<p>The flash content can be accessed from the host system, as explained in the\n<a class=\"reference internal\" href=\"#host-based-flash-access\">Host based flash access</a> section.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"uart\">\n<h2><a class=\"toc-backref\" href=\"#id11\">UART</a><a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This driver can be configured with <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_UART_NATIVE_POSIX.html#std-kconfig-CONFIG_UART_NATIVE_POSIX\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_UART_NATIVE_POSIX</span></code></a>\nto instantiate up to two UARTs. By default only one UART is enabled.\nWith <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE.html#std-kconfig-CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE</span></code></a>\nyou can enable the second one.</p>\n<p>For the first UART, it can link it to a new\npseudoterminal (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/pts&lt;nbr&gt;</span></code>), or map the UART input and\noutput to the executable’s <code class=\"docutils literal notranslate\"><span class=\"pre\">stdin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>.\nThis is chosen by selecting either\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NATIVE_UART_0_ON_OWN_PTY.html#std-kconfig-CONFIG_NATIVE_UART_0_ON_OWN_PTY\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NATIVE_UART_0_ON_OWN_PTY</span></code></a> or\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NATIVE_UART_0_ON_STDINOUT.html#std-kconfig-CONFIG_NATIVE_UART_0_ON_STDINOUT\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NATIVE_UART_0_ON_STDINOUT</span></code></a>\nFor interactive use with the <a class=\"reference internal\" href=\"../../../../reference/shell/index.html#shell-api\"><span class=\"std std-ref\">Shell</span></a>, choose the first (OWN_PTY) option.\nThe second (STDINOUT) option can be used with the shell for automated\ntesting, such as when piping other processes’ output to control it.\nThis is because the shell subsystem expects access to a raw terminal,\nwhich (by default) a normal Linux terminal is not.</p>\n<p>When <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NATIVE_UART_0_ON_OWN_PTY.html#std-kconfig-CONFIG_NATIVE_UART_0_ON_OWN_PTY\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NATIVE_UART_0_ON_OWN_PTY</span></code></a> is chosen, the name of the\nnewly created UART pseudo-terminal will be displayed in the console.\nIf you want to interact with it manually, you should attach a terminal emulator\nto it. This can be done, for example with the command:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ xterm -e screen /dev/&lt;ttyn&gt; &amp;\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/&lt;ttyn&gt;</span></code> should be replaced with the actual TTY device.</p>\n<p>You may also chose to automatically attach a terminal emulator to the first UART\nby passing the command line option <code class=\"docutils literal notranslate\"><span class=\"pre\">-attach_uart</span></code> to the executable.\nThe command used for attaching to the new shell can be set with the command line\noption <code class=\"docutils literal notranslate\"><span class=\"pre\">-attach_uart_cmd=&lt;\"cmd\"&gt;</span></code>. Where the default command is given by\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NATIVE_UART_AUTOATTACH_DEFAULT_CMD.html#std-kconfig-CONFIG_NATIVE_UART_AUTOATTACH_DEFAULT_CMD\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NATIVE_UART_AUTOATTACH_DEFAULT_CMD</span></code></a>.\nNote that the default command assumes both <code class=\"docutils literal notranslate\"><span class=\"pre\">xterm</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">screen</span></code> are\ninstalled in the system.</p>\n</div>\n<div class=\"section\" id=\"subsystems-backends\">\n<h2><a class=\"toc-backref\" href=\"#id12\">Subsystems backends</a><a class=\"headerlink\" href=\"#subsystems-backends\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Apart from its own peripherals, the native_posix board also has some dedicated\nbackends for some of Zephyr’s subsystems. These backends are designed to ease\ndevelopment by integrating more seamlessly with the host operating system:</p>\n<dl>\n<dt><strong>Console backend</strong>:</dt><dd><p>A console backend which by default is configured to\nredirect any <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">printk()</span></code> write to the native host application’s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>.</p>\n<p>This driver is selected by default if the <a class=\"reference internal\" href=\"#uart\">UART</a> is not compiled in.\nOtherwise <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_UART_CONSOLE.html#std-kconfig-CONFIG_UART_CONSOLE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_UART_CONSOLE</span></code></a> will be set to select the UART as\nconsole backend.</p>\n</dd>\n<dt><strong>Logger backend</strong>:</dt><dd><p>A backend which prints all logger output to the process <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>.\nIt supports timestamping, which can be enabled with\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP.html#std-kconfig-CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP</span></code></a>; and colored output which can\nbe enabled with <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_LOG_BACKEND_SHOW_COLOR.html#std-kconfig-CONFIG_LOG_BACKEND_SHOW_COLOR\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_LOG_BACKEND_SHOW_COLOR</span></code></a> and controlled\nwith the command line options <code class=\"docutils literal notranslate\"><span class=\"pre\">--color</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">--no-color</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--force-color</span></code>.</p>\n<p>In native_posix, by default, the logger is configured with\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_LOG_IMMEDIATE.html#std-kconfig-CONFIG_LOG_IMMEDIATE\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_LOG_IMMEDIATE</span></code></a>.</p>\n<p>This backend can be selected with <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_LOG_BACKEND_NATIVE_POSIX.html#std-kconfig-CONFIG_LOG_BACKEND_NATIVE_POSIX\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_LOG_BACKEND_NATIVE_POSIX</span></code></a>\nand is enabled by default unless the native_posix UART is compiled in.\nIn this later case, by default, the logger is set to output to the <a class=\"reference internal\" href=\"#uart\">UART</a>.</p>\n</dd>\n<dt><strong>Tracing</strong>:</dt><dd><p>A backend/”bottom” for Zephyr’s CTF tracing subsystem which writes the tracing\ndata to a file in the host filesystem.\nMore information can be found in <a class=\"reference internal\" href=\"../../../../guides/debug_tools/tracing/index.html#ctf\"><span class=\"std std-ref\">Common Tracing Format</span></a></p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"host-based-flash-access\">\n<h2><a class=\"toc-backref\" href=\"#id13\">Host based flash access</a><a class=\"headerlink\" href=\"#host-based-flash-access\" title=\"Permalink to this headline\">¶</a></h2>\n<p>If a flash device is present, the file system partitions on the flash\ndevice can be exposed through the host file system by enabling\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_FUSE_FS_ACCESS.html#std-kconfig-CONFIG_FUSE_FS_ACCESS\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_FUSE_FS_ACCESS</span></code></a>. This option enables a FUSE\n(File system in User space) layer that maps the Zephyr file system calls to\nthe required UNIX file system calls, and provides access to the flash file\nsystem partitions with normal operating system commands such as <code class=\"docutils literal notranslate\"><span class=\"pre\">cd</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ls</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">mkdir</span></code>.</p>\n<p>By default the partitions are exposed through the directory <em>flash</em> in the\ncurrent working directory. This directory can be changed via the command line\noption <em>–flash-mount</em>. As this directory operates as a mount point for FUSE\nyou have to ensure that it exists before starting the native POSIX board.</p>\n<p>On exit, the native POSIX board application will take care of unmounting the\ndirectory. In the unfortunate case that the native POSIX board application\ncrashes, you can cleanup the stale mount point by using the program\n<code class=\"docutils literal notranslate\"><span class=\"pre\">fusermount</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ fusermount -u flash\n</pre></div>\n</div>\n<p>Note that this feature requires a 32-bit version of the FUSE library, with a\nminimal version of 2.6, on the host system and <code class=\"docutils literal notranslate\"><span class=\"pre\">pkg-config</span></code> settings to\ncorrectly pickup the FUSE install path and compiler flags.</p>\n<p>On a Ubuntu 18.04 host system, for example, install the <code class=\"docutils literal notranslate\"><span class=\"pre\">pkg-config</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">libfuse-dev:i386</span></code> packages, and configure the pkg-config search path with\nthese commands:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ sudo apt-get install pkg-config libfuse-dev:i386\n$ export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 6, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_F"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efr32_radio_brd4104a", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "DDR SYSTEM", "size": 1610612736}, {"label": "TCMU SYSTEM", "size": 32768}, {"label": "OCRAM SYSTEM", "size": 131072}, {"label": "OCRAM_S SYSTEM", "size": 32768}], "main_ram_size": 1610612736, "gpio": {"count": 7, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 7, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "warp7_m4", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>WaRP7 - Next Generation IoT and Wearable Development Platform</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"warp7-next-generation-iot-and-wearable-development-platform\">\n<span id=\"warp7-m4\"></span><h1>WaRP7 - Next Generation IoT and Wearable Development Platform<a class=\"headerlink\" href=\"#warp7-next-generation-iot-and-wearable-development-platform\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX7S SoC is a Hybrid multi-core processor composed of Single Cortex A7\ncore and Single Cortex M4 core.\nZephyr was ported to run on the M4 core. In a later release, it will also\ncommunicate with the A7 core (running Linux) via RPmsg.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/warp7_m4.png\"><img alt=\"WaRP7-iMX7S\" class=\"align-center\" src=\"../../../../_images/warp7_m4.png\" style=\"width: 470px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The WaRP7 Platform is composed of a CPU and IO board.</p>\n<div class=\"section\" id=\"warp7-io-board\">\n<h3>WaRP7 IO Board<a class=\"headerlink\" href=\"#warp7-io-board\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>6-axis Accelerometer Magnetometer: NXP FXOS8700CQ (I2C4 interface)</p></li>\n<li><p>3-axis Gyroscope: NXP FXAS21002C (I2C4 interface)</p></li>\n<li><p>Altimeter: NXP MPL3115A2 (I2C4 interface)</p></li>\n<li><p>NXP NTAG NT3H1101 (I2C2 interface)</p></li>\n<li><p>Audio Codec: NXP SGTL5000 (I2C4 and SAI1 interfaces)</p></li>\n<li><p>S1 - Reset Button (POR_B signal)</p></li>\n<li><p>S2 - User Defined button (ENET1_RD1/GPIO7_IO1 signal)</p></li>\n<li><p>S3 - On/Off (MX7_ONOFF signal)</p></li>\n<li><p>Board to board connector (34 configurable pins)</p></li>\n<li><p>mikroBUS expansion connector</p></li>\n<li><p>10-pin needle JTAG Connector</p></li>\n<li><p>Debug USB exposing two UARTs (UART1 for A7 and UART2 for M4)</p></li>\n<li><p>MIPI DSI 1 lane Connector</p></li>\n<li><p>LCD Touch Connector (I2C2 interface)</p></li>\n<li><p>Audio Jack: Mic and Stereo Headphone</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"warp7-cpu-board\">\n<h3>WaRP7 CPU Board<a class=\"headerlink\" href=\"#warp7-cpu-board\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>CPU i.MX7 Solo with a Single Cortex A7 (800MHz) core and\nSingle Cortex M4 (200MHz) core</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>RAM -&gt; A7: 4GB (Kingston 08EMCP04)</p></li>\n<li><p>RAM -&gt; M4: 3x32KB (TCML, TCMU, OCRAM_S), 1x128KB (OCRAM) and 1x256MB (DDR)</p></li>\n<li><p>Flash -&gt; A7: 8GB eMMC (Kingston 08EMCP04)</p></li>\n</ul>\n</li>\n<li><p>Multimedia</p>\n<ul>\n<li><p>MIPI CSI 1 lane connector with 5MP OV5640 camera module (I2C2 interface)</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>Board to board connector (34 configurable pins)</p></li>\n<li><p>Micro USB 2.0 OTG connector (USB_OTG1 interface)</p></li>\n<li><p>Murata Type 1DX Wi-Fi IEEE 802.11b/g/n and Bluetooth 4.1 plus EDR\n(SD1, UART3 SAI2 interfaces)</p></li>\n</ul>\n</li>\n<li><p>Li-ion/Li-polymer Battery Charger: NXP BC3770 (I2C1 interface)</p></li>\n<li><p>Power management integrated circuit (PMIC): NXP PF3000 (I2C1 interface)</p></li>\n</ul>\n<p>For more information about the i.MX7 SoC and WaRP7, see these references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-7-processors:IMX7-SERIES?fsrch=1&amp;sr=1&amp;pageNum=1\">i.MX 7 Series Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX7SCEC.pdf\">i.MX 7 Solo Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7SRM\">i.MX 7 Solo Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/nxp-designs/warp7-next-generation-iot-and-wearable-development-platform:WARP7\">WaRP7 Site</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/supporting-information/WARP7-LEAFLET-QSG.pdf\">WaRP7 Quick Start Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/WaRP7/WaRP7-User-Guide/releases/download/v1.3/User_Guide_Manual_v1-3.pdf\">WaRP7 User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/WaRP7\">WaRP7 GitHub repository</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The WaRP7 configuration supports the following hardware features on the\nCortex M4 Core:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger;\nfxas21002 polling;\nfxas21002 trigger;</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/warp7_m4/warp7_m4_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The WaRP7 board Board was tested with the following pinmux controller\nconfiguration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 22%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>FT_TX2</p></td>\n<td><p>UART2_TXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FT_RX2</p></td>\n<td><p>UART2_RXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MKBUS_TX</p></td>\n<td><p>UART6_TXD</p></td>\n<td><p>UART</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MKBUS_RX</p></td>\n<td><p>UART6_RXD</p></td>\n<td><p>UART</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>S2</p></td>\n<td><p>ENET1_RD1/GPIO7_IO1</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C4_SDA</p></td>\n<td><p>I2C4_SDA</p></td>\n<td><p>I2C / FXOS8700 / FXAS21002</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C4_SCL</p></td>\n<td><p>I2C4_SCL</p></td>\n<td><p>I2C / FXOS8700 / FXAS21002</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SENSOR_INT_B</p></td>\n<td><p>ENET1_RD0/GPIO7_IO0</p></td>\n<td><p>FXOS8700 INT1 / FXAS21002 INT1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The M4 Core is configured to run at a 200 MHz clock speed.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The iMX7S SoC has seven UARTs. The number 2 is configured for the console and\nthe number 6 is used in the mikroBUS connector.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The WaRP7 doesn’t have QSPI flash for the M4 and it needs to be started by\nthe A7 core. The A7 core is responsible to load the M4 binary application into\nthe RAM, put the M4 in reset, set the M4 Program Counter and Stack Pointer, and\nget the M4 out of reset.\nThe A7 can perform these steps at bootloader level or after the Linux system\nhas booted.</p>\n<p>The M4 can use up to 5 different RAMs. These are the memory mapping for A7 and\nM4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A7</p></th>\n<th class=\"head\"><p>Cortex-M4 (System Bus)</p></th>\n<th class=\"head\"><p>Cortex-M4 (Code Bus)</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0x80000000-0xFFFFFFFF</p></td>\n<td><p>0x80000000-0xDFFFFFFF</p></td>\n<td><p>0x10000000-0x1FFEFFFF</p></td>\n<td><p>2048MB (less for M4)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>0x20200000-0x2021FFFF</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x00807FFF</p></td>\n<td><p>0x20000000-0x20007FFF</p></td>\n<td></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCML</p></td>\n<td><p>0x007F8000-0x007FFFFF</p></td>\n<td></td>\n<td><p>0x1FFF8000-0x1FFFFFFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>OCRAM_S</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>0x20180000-0x20187FFF</p></td>\n<td><p>0x00000000-0x00007FFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI Flash</p></td>\n<td></td>\n<td></td>\n<td><p>0x08000000-0x0BFFFFFF</p></td>\n<td><p>64MB</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7SRM\">i.MX 7 Solo Reference Manual</a> from page 182 (section 2.1.2 and 2.1.3)</p></li>\n<li><p><a class=\"reference external\" href=\"https://developer.toradex.com/knowledge-base/freertos-on-the-cortex-m4-of-a-colibri-imx7#Memory_areas\">Toradex Wiki</a></p></li>\n</ul>\n<p>At compilation time you have to choose which RAM will be used. This\nconfiguration is done in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/warp7_m4/warp7_m4.dts</span></code> with\n“zephyr,flash” (when CONFIG_XIP=y) and “zephyr,sram” properties. The available\nconfigurations are:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;ddr_code\n- &amp;tcml_code\n- &amp;ocram_code\n- &amp;ocram_s_code\n- &amp;ocram_pxp_code\n- &amp;ocram_epdc_code\n\n\"zephyr,sram\"\n- &amp;ddr_sys\n- &amp;tcmu_sys\n- &amp;ocram_sys\n- &amp;ocram_s_sys\n- &amp;ocram_pxp_sys\n- &amp;ocram_epdc_sys\n</pre></div>\n</div>\n<p>Below you will find the instructions to load and run Zephyr on M4 from A7 using\nu-boot.</p>\n<p>Connect both micro USB interfaces into the PC. In one USB interface you will\nhave 2 USB serial ports, the first one is the A7 console and the second is the\nM4 console for Zephyr with both configured to work at 115200 8N1.\nThe other USB interface is used to power the CPU and IO boards and is connected\nto the USB OTG interface of the i.MX7S.</p>\n<p>After powering up the platform stop the u-boot execution on the A7 core and\nexpose the eMMC as mass storage with the following command in the u-boot\nprompt: <code class=\"docutils literal notranslate\"><span class=\"pre\">ums</span> <span class=\"pre\">0</span> <span class=\"pre\">mmc</span> <span class=\"pre\">0</span></code>. Copy the compiled zephyr.bin to the first FAT\npartition and remove the mounted device on the PC by issuing a “Ctrl+C” in the\nu-boot prompt.\nSet the u-boot environment variables and run the zephyr.bin from the\nappropriated memory configured in the Zephyr compilation:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">setenv bootm4 'fatload mmc 0:1 $m4addr $m4fw &amp;&amp; dcache flush &amp;&amp; bootaux $m4addr'</span>\n<span class=\"gp\"># </span>TCML\n<span class=\"go\">setenv m4tcml 'setenv m4fw zephyr.bin; setenv m4addr 0x007F8000'</span>\n<span class=\"go\">setenv bootm4tcml 'run m4tcml &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcml</span>\n<span class=\"gp\"># </span>TCMU\n<span class=\"go\">setenv m4tcmu 'setenv m4fw zephyr.bin; setenv m4addr 0x00800000'</span>\n<span class=\"go\">setenv bootm4tcmu 'run m4tcmu &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcmu</span>\n<span class=\"gp\"># </span>OCRAM\n<span class=\"go\">setenv m4ocram 'setenv m4fw zephyr.bin; setenv m4addr 0x00900000'</span>\n<span class=\"go\">setenv bootm4ocram 'run m4ocram &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocram</span>\n<span class=\"gp\"># </span>OCRAM_S\n<span class=\"go\">setenv m4ocrams 'setenv m4fw zephyr.bin; setenv m4addr 0x00180000'</span>\n<span class=\"go\">setenv bootm4ocrams 'run m4ocrams &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocrams</span>\n<span class=\"gp\"># </span>DDR\n<span class=\"go\">setenv m4ddr 'setenv m4fw zephyr.bin; setenv m4addr 0x80000000'</span>\n<span class=\"go\">setenv bootm4ddr 'run m4ddr &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ddr</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Download and install <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack\">J-Link Tools</a> and <a class=\"reference external\" href=\"https://wiki.segger.com/images/8/86/NXP_iMX7D_Connect_CortexM4.JLinkScript\">NXP iMX7D Connect CortexM4.JLinkScript</a>.</p>\n<p>To run Zephyr Binary using J-Link, create the following script to get the\nProgram Counter and Stack Pointer from <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code>.</p>\n<p>get-pc-sp.sh:\n.. code-block:: console</p>\n<blockquote>\n<div><p>#!/bin/sh</p>\n<p>firmware=$1</p>\n<p>pc=$(od -An -N 8 -t x4 $firmware | awk ‘{print $2;}’)\nsp=$(od -An -N 8 -t x4 $firmware | awk ‘{print $1;}’)</p>\n<p>echo pc=$pc\necho sp=$sp</p>\n</div></blockquote>\n<p>Get the SP and PC from firmware binary: <code class=\"docutils literal notranslate\"><span class=\"pre\">./get-pc-sp.sh</span> <span class=\"pre\">zephyr.bin</span></code>\n.. code-block:: console</p>\n<blockquote>\n<div><p>pc=00900f01\nsp=00905020</p>\n</div></blockquote>\n<p>Plug in the J-Link into the board and PC and run the J-Link command line tool:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">/usr/bin/JLinkExe -device Cortex-M4 -if JTAG \\</span>\n<span class=\"go\">   -speed 4000 -autoconnect 1 -jtagconf -1,-1 \\</span>\n<span class=\"go\">   -jlinkscriptfile iMX7D_Connect_CortexM4.JLinkScript</span>\n</pre></div>\n</div>\n<p>The following steps are necessary to run the zephyr.bin:</p>\n<ol class=\"arabic simple\">\n<li><p>Put the M4 core in reset</p></li>\n<li><p>Load the binary in the appropriate addr (TMCL, TCMU, OCRAM, OCRAM_S or DDR)</p></li>\n<li><p>Set PC (Program Counter)</p></li>\n<li><p>Set SP (Stack Pointer)</p></li>\n<li><p>Get the M4 core out of reset</p></li>\n</ol>\n<p>Issue the following commands inside J-Link commander:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">w4 0x3039000C 0xAC</span>\n<span class=\"go\">loadfile zephyr.bin,0x00900000</span>\n<span class=\"go\">w4 0x00180000 00900f01</span>\n<span class=\"go\">w4 0x00180004 00905020</span>\n<span class=\"go\">w4 0x3039000C 0xAA</span>\n</pre></div>\n</div>\n<p>With these mechanisms, applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">warp7_m4</span></code> board\nconfiguration can be built and debugged in the usual way (see\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h3>References<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/application-note/AN5317.pdf\">Loading Code on Cortex-M4 from Linux for the i.MX 6SoloX and i.MX 7Dual/7Solo Application Processors</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://wiki.segger.com/IMX7D\">J-Link iMX7D Instructions</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_22"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "ronoth_lodev", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Ronoth LoDev</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"ronoth-lodev\">\n<span id=\"id1\"></span><h1>Ronoth LoDev<a class=\"headerlink\" href=\"#ronoth-lodev\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The <a class=\"reference external\" href=\"https://ronoth.com/\">Ronoth</a> <a class=\"reference external\" href=\"https://ronoth.com/products/lodev-s76s-lora-soc-development-board?variant=31608819417220\">LoDev</a> is a small open source board containing a <a class=\"reference external\" href=\"http://www.acsip.com.tw/index.php?action=products-detail&amp;fid1=11&amp;fid2=29&amp;fid3=27&amp;id=79&amp;lang=3\">AcSIP S76S</a>  SiP from <a class=\"reference external\" href=\"http://www.acsip.com.tw\">AcSIP</a>.\nThe <a class=\"reference external\" href=\"https://github.com/ronoth/LoDev\">full LoDev design details</a> are available on on GitHub.  The <a class=\"reference external\" href=\"https://ronoth.com/products/lodev-s76s-lora-soc-development-board?variant=31608819417220\">LoDev</a> board can be purchased\nfrom <a class=\"reference external\" href=\"https://ronoth.com/\">Ronoth</a> or from <a class=\"reference external\" href=\"https://www.crowdsupply.com/ronoth/lodev\">CrowdSupply</a>.</p>\n<p>The S76S contains an <a class=\"reference external\" href=\"STMicroSTM32L073RZ\">STMicro STM32L073RZ</a> MCU, a <a class=\"reference external\" href=\"https://www.semtech.com/products/wireless-rf/lora-transceivers/sx1276\">Semtech SX1276</a> LoRaWAN transceiver,\nand a +20 dBm power amplifier.  Refer to <a class=\"reference external\" href=\"http://www.acsip.com.tw/upload/product_attach/S76S_Brief_ver02.pdf\">AcSIP S76S Product Information Brief</a> for details.</p>\n<p>Zephyr applications may use the <strong>ronoth_lodev</strong> configuration to run on this board.</p>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/lodev.png\"><img alt=\"Image of Ronoth LoDev open source development board containing S76S system on a chip\" src=\"../../../../_images/lodev.png\" style=\"width: 291px; height: 217px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Ronoth LoDev</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p><a class=\"reference external\" href=\"https://github.com/ronoth/LoDev\">Board design files</a> are available on GitHub.</p>\n</div>\n<div class=\"section\" id=\"device-resources\">\n<h2>Device Resources<a class=\"headerlink\" href=\"#device-resources\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The embedded <a class=\"reference external\" href=\"STMicroSTM32L073RZ\">STMicro STM32L073RZ</a> has some GPIOs and SPI2 internally committed to the LoRaWAN\ntransceiver operation.  See <a class=\"reference internal\" href=\"#internally-dedicated-ports\">internally dedicated ports</a> for a list of resources committed to this function.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h2>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Programming and debugging uses the SWD port, as on any STM32 processor.  An ST-LINK/V2 adapter\nmay be used with the appropriate software (<em>st-utils</em> package on Linux).</p>\n</div>\n<div class=\"section\" id=\"connector-pin-out\">\n<h2>Connector Pin-Out<a class=\"headerlink\" href=\"#connector-pin-out\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The LoDev has two rows of headers.  Pin 1 on both connectors is closest to the micro-USB connector on the board,\nfurthest from the RF (antenna) connector.</p>\n<p>When viewed from the top (component) side of the board, with the micro-USB connector closest and RF (antenna)\nconnector furthest away, the <a class=\"reference internal\" href=\"#cn6\">CN6</a> connector is on the left, the <a class=\"reference internal\" href=\"#cn7\">CN7</a> connector is on the right.</p>\n<p>UART1 on the S76S SiP is connected to a USB-to-UART device connected to the micro USB connector, so generally\nPA9 and PA10 are unavailable for I/Os.</p>\n<p>A helpful silkscreen legend is provided on the board.</p>\n<div class=\"figure align-center\" id=\"id4\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pinout.png\"><img alt=\"Ronoth LoDev sketch with pinout\" src=\"../../../../_images/pinout.png\" style=\"width: 600px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Ronth LoDev Pinout</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"cn6-pin-out\">\n<span id=\"cn6\"></span><h3>CN6 Pin-Out<a class=\"headerlink\" href=\"#cn6-pin-out\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 5%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 83%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Note</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>3.3V</p></td>\n<td><p>Output 500 mA max</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>PC1</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PC0</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PB8</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>BOOT0</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PB7</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PB6</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PB5</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PD2</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>PC12</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>PC11</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PC10</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>PA14</p></td>\n<td><p>SWCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>PA13</p></td>\n<td><p>SWDIO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>PA12</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>PA11</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>PA9</p></td>\n<td><p>USB serial Tx drives this pin (input) for UART1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>19</p></td>\n<td><p>PA10</p></td>\n<td><p>USB serial Rx is driven by this pin (output) for UART1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>20</p></td>\n<td><p>PA8</p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"cn7-pin-out\">\n<span id=\"cn7\"></span><h3>CN7 Pin-Out<a class=\"headerlink\" href=\"#cn7-pin-out\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 8%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 72%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Note</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>PC2</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>PC3</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>nRESET</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PA0</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PA2</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>PA3</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PA4</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>PA5</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PA6</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PA7</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>PC4</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>PC5</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PB0</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>PB1</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>PC6</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>PC7</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>PC8</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>PC9</p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p>19</p></td>\n<td><p>GND</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>20</p></td>\n<td><p>PA1</p></td>\n<td><p>Used in S76S as “RF FEM CPS”</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"internally-dedicated-ports\">\n<span id=\"id2\"></span><h3>Internally Dedicated Ports<a class=\"headerlink\" href=\"#internally-dedicated-ports\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 7%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin name</p></th>\n<th class=\"head\"><p>Pin Type</p></th>\n<th class=\"head\"><p>I/O Structure</p></th>\n<th class=\"head\"><p>Note</p></th>\n<th class=\"head\"><p>Function</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PA15</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB3</p></td>\n<td><p>I/O</p></td>\n<td><p>FTf</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB4</p></td>\n<td><p>I/O</p></td>\n<td><p>FTf</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB9</p></td>\n<td><p>I/O</p></td>\n<td><p>FTf</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB10</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 Reset</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB11</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB12</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 SPI nCS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB13</p></td>\n<td><p>I/O</p></td>\n<td><p>FTf</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 SPI2_SCK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB14</p></td>\n<td><p>I/O</p></td>\n<td><p>FTf</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 SPI2_MISO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB15</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 SPI2_MOSI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC13</p></td>\n<td><p>I/O</p></td>\n<td><p>FT</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>INTERNAL SX1276 D1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n<div class=\"section\" id=\"license\">\n<h2>License<a class=\"headerlink\" href=\"#license\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This document Copyright (c) 2021 Dean Weiten &lt;<a class=\"reference external\" href=\"mailto:dmw%40weiten.com\">dmw<span>@</span>weiten<span>.</span>com</a>&gt;</p>\n<p>SPDX-License-Identifier: Apache-2.0</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_5"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 7, "instances": [{"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32mp157c_dk2", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1050_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1050-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1050-evk\">\n<span id=\"mimxrt1050-evk\"></span><h1>NXP MIMXRT1050-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1050-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1050 is a new processor family featuring NXP’s advanced\nimplementation of the ARM Cortex-M7 Core. It provides high CPU performance and\nreal-time response.</p>\n<p>The i.MX RT1050 provides various memory interfaces, including SDRAM, Raw NAND\nFLASH, NOR FLASH, SD/eMMC, Quad SPI, HyperBus and a wide range of other\ninterfaces for connecting peripherals, such as WLAN, Bluetooth™, GPS, displays,\nand camera sensors. As with other i.MX processors, i.MX RT1050 also has rich\naudio and video features, including LCD display, basic 2D graphics, camera\ninterface, SPDIF, and I2S audio interface.</p>\n<p>The following document refers to the discontinued MIMXRT1050-EVK board. For the\nMIMXRT1050-EVKB board, refer to <a class=\"reference internal\" href=\"#board-revisions\">Board Revisions</a> section.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1050_evk.jpg\"><img alt=\"MIMXRT1050-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1050_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1052DVL6A MCU (600 MHz, 512 KB TCM)</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256 KB SDRAM</p></li>\n<li><p>64 Mbit QSPI Flash</p></li>\n<li><p>512 Mbit Hyper Flash</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>LCD connector</p></li>\n<li><p>Touch connector</p></li>\n</ul>\n</li>\n<li><p>Ethernet</p>\n<ul>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n</ul>\n</li>\n<li><p>USB</p>\n<ul>\n<li><p>USB 2.0 OTG connector</p></li>\n<li><p>USB 2.0 host connector</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>3.5 mm audio stereo headphone jack</p></li>\n<li><p>Board-mounted microphone</p></li>\n<li><p>Left and right speaker out connectors</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC jack</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 20-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n<li><p>Sensor</p>\n<ul>\n<li><p>FXOS8700CQ 6-axis e-compass</p></li>\n<li><p>CMOS camera sensor interface</p></li>\n</ul>\n</li>\n<li><p>Expansion port</p>\n<ul>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>CAN bus connector</p></li>\n</ul>\n<p>For more information about the MIMXRT1050 SoC and MIMXRT1050-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/microcontrollers-and-processors/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1050-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1050\">i.MX RT1050 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMXRT1050CEC.pdf\">i.MX RT1050 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/IMXRT1050RM.pdf\">i.MX RT1050 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/microcontrollers-and-processors/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1050-evaluation-kit:MIMXRT1050-EVK\">MIMXRT1050-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1050EVKBHUG\">MIMXRT1050-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1050-EVK-DESIGNFILES\">MIMXRT1050-EVK Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1050_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DISPLAY</p></td>\n<td><p>on-chip</p></td>\n<td><p>display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SDHC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ENET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1050_evk/mimxrt1050_evk_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1050 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_00</p></td>\n<td><p>LPSPI3_SCK</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_01</p></td>\n<td><p>LPSPI3_SDO</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_02</p></td>\n<td colspan=\"2\"><p>LPSPI3_SDI/LCD_RST| SPI/LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_03</p></td>\n<td><p>LPSPI3_PCS0</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>GPIO/ENET_RST</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>GPIO/ENET_INT</p></td>\n<td><p>GPIO/Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_11</p></td>\n<td><p>GPIO</p></td>\n<td><p>Touch Interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_12</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_13</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_00</p></td>\n<td><p>LPI2C1_SCL</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_01</p></td>\n<td><p>LPI2C1_SDA</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_06</p></td>\n<td><p>LPUART3_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_07</p></td>\n<td><p>LPUART3_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WAKEUP</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_00</p></td>\n<td><p>LCD_CLK</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_01</p></td>\n<td><p>LCD_ENABLE</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_02</p></td>\n<td><p>LCD_HSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_03</p></td>\n<td><p>LCD_VSYNC</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_04</p></td>\n<td><p>LCD_DATA00</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_05</p></td>\n<td><p>LCD_DATA01</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_06</p></td>\n<td><p>LCD_DATA02</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_07</p></td>\n<td><p>LCD_DATA03</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_08</p></td>\n<td><p>LCD_DATA04</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_09</p></td>\n<td><p>LCD_DATA05</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_10</p></td>\n<td><p>LCD_DATA06</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_11</p></td>\n<td><p>LCD_DATA07</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_12</p></td>\n<td><p>LCD_DATA08</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_13</p></td>\n<td><p>LCD_DATA09</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B0_14</p></td>\n<td><p>LCD_DATA10</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B0_15</p></td>\n<td><p>LCD_DATA11</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_00</p></td>\n<td><p>LCD_DATA12</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_01</p></td>\n<td><p>LCD_DATA13</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_02</p></td>\n<td><p>LCD_DATA14</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_03</p></td>\n<td><p>LCD_DATA15</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_04</p></td>\n<td><p>ENET_RX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_05</p></td>\n<td><p>ENET_RX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_06</p></td>\n<td><p>ENET_RX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_07</p></td>\n<td><p>ENET_TX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_08</p></td>\n<td><p>ENET_TX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_09</p></td>\n<td><p>ENET_TX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_10</p></td>\n<td><p>ENET_REF_CLK</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_11</p></td>\n<td><p>ENET_RX_ER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_12</p></td>\n<td><p>GPIO</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_B1_14</p></td>\n<td><p>USDHC1_VSELECT</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_B1_15</p></td>\n<td><p>BACKLIGHT_CTL</p></td>\n<td><p>LCD Display</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_40</p></td>\n<td><p>ENET_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_41</p></td>\n<td><p>ENET_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>ENET_RST</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>ENET_INT</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_00</p></td>\n<td><p>USDHC1_CMD</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_01</p></td>\n<td><p>USDHC1_CLK</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_02</p></td>\n<td><p>USDHC1_DATA0</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_03</p></td>\n<td><p>USDHC1_DATA1</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_04</p></td>\n<td><p>USDHC1_DATA2</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_05</p></td>\n<td><p>USDHC1_DATA3</p></td>\n<td><p>SD Card</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1050 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 600 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1050 SoC has eight UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART3</span></code> for the Bluetooth Host Controller Interface (BT HCI), and the\nremaining are not used.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The RT1050 SoC has two USB OTG (USBOTG) controllers that supports both\ndevice and host functions through its micro USB connectors.\nOnly USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"option-1-opensda-jlink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-jlink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_MIMXRT1050-EVK-Hyperflash\">OpenSDA J-Link MIMXRT1050-EVK-Hyperflash Firmware</a>. Check that jumpers\nJ32 and J33 are <strong>on</strong> (they are on by default when boards ship from the\nfactory) to ensure SWD signals are connected to the OpenSDA microcontroller.</p>\n</div>\n<div class=\"section\" id=\"option-2-jlink-external-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 20-pin connector to J21. Check that jumpers J32 and J33 are\n<strong>off</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are disconnected from the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J30 and J31 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J28.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1050_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW4 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1050_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1050_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1050_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"troubleshooting\">\n<h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If the debug probe fails to connect with the following error, it’s possible\nthat the boot header in HyperFlash is invalid or corrupted. The boot header is\nconfigured by <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NXP_IMX_RT_BOOT_HEADER.html#std-kconfig-CONFIG_NXP_IMX_RT_BOOT_HEADER\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NXP_IMX_RT_BOOT_HEADER</span></code></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Remote debugging using :2331</span>\n<span class=\"go\">Remote communication error.  Target disconnected.: Connection reset by peer.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">\"monitor\" command not supported by this target.</span>\n<span class=\"go\">You can't do that when your target is `exec'</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">Could not connect to target.</span>\n<span class=\"go\">Please check power, connection and settings.</span>\n</pre></div>\n</div>\n<p>You can fix it by erasing and reprogramming the HyperFlash with the following\nsteps:</p>\n<ol class=\"arabic simple\">\n<li><p>Set the SW7 DIP switches to ON-ON-ON-OFF to prevent booting from HyperFlash.</p></li>\n<li><p>Reset by pressing SW4</p></li>\n<li><p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">debug</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code> again with a known working Zephyr\napplication.</p></li>\n<li><p>Set the SW7 DIP switches to OFF-ON-ON-OFF to boot from HyperFlash.</p></li>\n<li><p>Reset by pressing SW4</p></li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"board-revisions\">\n<h2>Board Revisions<a class=\"headerlink\" href=\"#board-revisions\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The original MIMXRT1050-EVK (rev A0) board was updated with a newer\nMIMXRT1050-EVKB (rev A1) board, with these major hardware differences:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">-</span> <span class=\"n\">SoC</span> <span class=\"n\">changed</span> <span class=\"kn\">from</span> <span class=\"nn\">MIMXRT1052DVL6</span><span class=\"o\">**</span><span class=\"n\">A</span><span class=\"o\">**</span> <span class=\"n\">to</span> <span class=\"n\">MIMXRT1052DVL6</span><span class=\"o\">**</span><span class=\"n\">B</span><span class=\"o\">**</span>\n<span class=\"o\">-</span> <span class=\"n\">Hardware</span> <span class=\"n\">bug</span> <span class=\"n\">fixes</span> <span class=\"k\">for</span><span class=\"p\">:</span> <span class=\"n\">power</span><span class=\"p\">,</span> <span class=\"n\">interfaces</span><span class=\"p\">,</span> <span class=\"ow\">and</span> <span class=\"n\">memory</span>\n<span class=\"o\">-</span> <span class=\"n\">Arduino</span> <span class=\"n\">headers</span> <span class=\"n\">included</span>\n</pre></div>\n</div>\n<p>For more details, please see the following <a class=\"reference external\" href=\"https://www.nxp.com/docs/en/nxp/application-notes/AN12146.pdf\">NXP i.MXRT1050 A0 to A1 Migration Guide</a>.</p>\n<p>Current Zephyr build supports the new MIMXRT1050-EVKB</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l552ze_q_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 1703936}], "main_flash_size": 1703936, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "v2m_musca_b1_nonsecure", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 327680}], "main_ram_size": 327680, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32l496g_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32L496G Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32l496g-discovery\">\n<span id=\"stm32l496g-disco-board\"></span><h1>ST STM32L496G Discovery<a class=\"headerlink\" href=\"#st-stm32l496g-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L496G Discovery board features an ARM Cortex-M4 based STM32L496AG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the STM32L496G Discovery board:</p>\n<ul class=\"simple\">\n<li><p>STM32L496AGI6 microcontroller featuring 1 Mbyte of Flash memory and 320 Kbytes of RAM in an UFBGA169 package</p></li>\n<li><p>1.54 inch 240 x 240 pixel-TFT color LCD with parallel interface</p></li>\n<li><p>SAI Audio CODEC, with a stereo headset jack, including analog microphone input</p></li>\n<li><p>Stereo digital MEMS microphones</p></li>\n<li><p>microSD card connector (card included)</p></li>\n<li><p>Camera 8 bit-connector</p></li>\n<li><p>8 Mbit-PSRAM</p></li>\n<li><p>IDD measurement</p></li>\n<li><p>64 Mbit-Quad-SPI Flash</p></li>\n<li><p>USB OTG FS with Micro-AB connector</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>STMod+ and PMOD connectors</p></li>\n<li><p>Compatible Arduino* Uno V3 connectors</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>5 source options for power supply</p>\n<ul>\n<li><p>ST-LINK/V2-1 USB connector</p></li>\n<li><p>User USB FS connector</p></li>\n<li><p>VIN from Arduino connector</p></li>\n<li><p>5 V from Arduino connector</p></li>\n<li><p>USB charger</p></li>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>8 LEDs</p></li>\n<li><p>Reset push button</p></li>\n<li><p>4 direction-joystick with selection</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32l496g_disco.jpg\"><img alt=\"STM32L496G Discovery\" class=\"align-center\" src=\"../../../../_images/stm32l496g_disco.jpg\" style=\"width: 450px; height: 394px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32l496gdiscovery.html\">STM32L496G Discovery website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L496AG SoC provides the following hardware capabilities:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 108 nA Standby mode and 91\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 80 MHz,\n100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>Internal 48 MHz with clock recovery</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>LCD 8 x 40 or 4 x 44 with step-up converter</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>16x timers:</p>\n<ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 136 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 1 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>320 KB of SRAM including 64 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR, and NAND memories</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>3x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>20x communication interfaces</p>\n<ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>4x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>5x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>1x LPUART</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>2x CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32L496AG can be found in:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l496ag.html\">STM32L496AG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00083560.pdf\">STM32L496 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32l496g_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SDMMC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32l496g_disco/stm32l496g_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L496G Discovery Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00353127.pdf\">STM32L496G Discovery board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PG10</p></li>\n<li><p>UART_2 TX/RX : PA2/PD6 (ST-Link Virtual Port Com)</p></li>\n<li><p>LPUART_1 TX/RX : PG7/PG8 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB7 (Arduino I2C)</p></li>\n<li><p>SDMMC_1 D0/D1/D2/D3/CK/CMD: PC8/PC9/PC10/PC11/PC12/PD2</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PA15/PA5/PB4/PB5 (Arduino SPI)</p></li>\n<li><p>I2C_1_SCL : PB8</p></li>\n<li><p>I2C_1_SDA : PB7</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>LD2 : PB13</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L496G Discovery System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default the System clock is driven by the PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L496G Discovery board has 5 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L496G Discovery board includes an ST-LINK/V2-1 embedded debug\ntool interface.  This interface is supported by openocd version\nv0.10.0, which has been available since Zephyr SDK v0.9.2.</p>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32l496g_disco</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32l496g-discovery\">\n<h4>Flashing an application to STM32L496G Discovery<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32l496g-discovery\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM32L496G Discovery to your host computer using the USB\nport, then run a serial host program to connect with your Discovery\nboard. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then, build and flash in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l496g_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l496g_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf51_ble400", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Waveshare BLE400</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"waveshare-ble400\">\n<span id=\"nrf51-ble400\"></span><h1>Waveshare BLE400<a class=\"headerlink\" href=\"#waveshare-ble400\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>BLE400 is a motherboard designed for BLE Bluetooth 2.4G Wireless Module. Used together with Core board.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"motherboard\">\n<h4>Motherboard<a class=\"headerlink\" href=\"#motherboard\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>Onboard battery holder, multi power supplies are available</p></li>\n<li><p>All the IOs are accessible for easy expansion</p></li>\n<li><p>Integrates CP2102 for debugging</p></li>\n<li><p>LEDs and user keys, compatible with other official boards, easy to use</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"core-board\">\n<h4>Core board<a class=\"headerlink\" href=\"#core-board\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>Onboard chip: nRF51822</p></li>\n<li><p>Communication distance (open outdoor 1M data rate): 30m</p></li>\n<li><p>Frequency range: 2.4GHz</p></li>\n<li><p>Operating voltage: 2.0V ~ 3.6V</p></li>\n<li><p>Operating temperature: -40℃ ~ 85℃</p></li>\n<li><p>Expansion pinheader: all the I/Os except P0.26 and P0.27</p></li>\n<li><p>Pinheader pitch: 2.00mm</p></li>\n<li><p>Antenna: onboard antenna</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"features\">\n<h3>Features<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>2.4 GHz multiprotocol RF transceiver</p></li>\n<li><p>ARM® Cortex™-M0 32 bit processor</p></li>\n<li><p>128 bit AES HW encryption</p></li>\n<li><p>256kB flash &amp; 16kB RAM</p></li>\n<li><p>Programmable Peripheral Interconnect (PPI)</p></li>\n<li><p>Digital interfaces: SPI, I2C, UART</p></li>\n<li><p>10 bit ADC</p></li>\n<li><p>Programmable output power: -20 to +4 dBm</p></li>\n<li><p>Independent application development and protocol stack</p></li>\n<li><p>Fully compatible with NRF24L series</p></li>\n<li><p>Pinout compatible with NRF51xxx series</p></li>\n<li><p>Global separate power management</p></li>\n<li><p>Operating voltage: 1.8 V ~ 3.6 V</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"revision-history\">\n<h3>Revision History<a class=\"headerlink\" href=\"#revision-history\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"id1\">\n<h4>Core board<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h4>\n<p>2015.06, Core51822 upgrades the onboard chip to Rev3, features 32kB RAM, supports higher version SDK, and all the demo codes are still compatible with the Rev2 ones.</p>\n</div>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"id2\">\n<h4>Motherboard<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf51_ble400.jpg\"><img alt=\"BLE400\" class=\"align-center\" src=\"../../../../_images/nrf51_ble400.jpg\" style=\"width: 500px;\"/></a>\n<ol class=\"arabic simple\">\n<li><p>Wireless module connector: for easily connecting modules like Core51822</p></li>\n<li><p>MCU pins expansion connector</p></li>\n<li><p>I2C interface</p></li>\n<li><p>SPI interface</p></li>\n<li><p>5V/3.3V power input/output: usually used as power output, also common-grounding with other user board</p></li>\n<li><p>USB connector: USB TO UART via onboard convertor CP2102</p></li>\n<li><p>Debugging interface</p></li>\n<li><p>UART interface</p></li>\n<li><p>Battery holder</p></li>\n<li><p>User LEDs</p></li>\n<li><p>User keys</p></li>\n<li><p>Reset button</p></li>\n<li><p>CP2102</p></li>\n<li><p>USB TO UART jumper</p></li>\n<li><p>LEDs &amp; Keys jumper</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"id3\">\n<h4>Core board<a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/Core51822-pin.jpg\"><img alt=\"Core board pinout\" class=\"align-center\" src=\"../../../../_images/Core51822-pin.jpg\" style=\"width: 500px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"ble400-dimensions\">\n<h3>BLE400 dimensions<a class=\"headerlink\" href=\"#ble400-dimensions\" title=\"Permalink to this headline\">¶</a></h3>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/BLE400-size.jpg\"><img alt=\"BLE400 size\" class=\"align-center\" src=\"../../../../_images/BLE400-size.jpg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"id4\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (red) = P0.18</p></li>\n<li><p>LED1 (red) = P0.19</p></li>\n<li><p>LED2 (red) = P0.20</p></li>\n<li><p>LED3 (red) = P0.21</p></li>\n<li><p>LED4 (red) = P0.22</p></li>\n<li><p>SUSPEND = SUSPEND</p></li>\n<li><p>RXD1 = P0.9</p></li>\n<li><p>TXD1 = P0.11</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>KEY1 = P0.16</p></li>\n<li><p>KEY2 = P0.17</p></li>\n<li><p>RESET = SWDIO</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SMBA = P0.02</p></li>\n<li><p>SCL = P0.01</p></li>\n<li><p>SDA = P0.00</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>NSS = P0.30</p></li>\n<li><p>SCK = P0.25</p></li>\n<li><p>MOSI = P0.24</p></li>\n<li><p>MISO = P0.23</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"usart1\">\n<h4>USART1<a class=\"headerlink\" href=\"#usart1\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>RX = P0.05</p></li>\n<li><p>TX = P0.06</p></li>\n<li><p>CTS = P0.07</p></li>\n<li><p>RTS = P0.12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uart-usb\">\n<h4>UART (USB)<a class=\"headerlink\" href=\"#uart-usb\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>RX = P0.9</p></li>\n<li><p>TX = P0.11</p></li>\n<li><p>CTS = P0.8</p></li>\n<li><p>RTS = P0.10</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF51 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51_ble400 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf51-dk\">\n<h2>Testing the LEDs and buttons in the nRF51 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf51-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are samples below that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/fade_led/README.html#fade-led-sample\"><span class=\"std std-ref\">Fade LED</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/threads/README.html#b-carbon-multi-thread-blinky\"><span class=\"std std-ref\">Basic Thread Example</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf51_ble400/nrf51_ble400.dts\">boards/arm/nrf51_ble400/nrf51_ble400.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 393216}, {"label": "dtcm", "size": 131072}], "main_ram_size": 393216, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32f769i_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F769I Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f769i-discovery\">\n<span id=\"stm32f769i-disco-board\"></span><h1>ST STM32F769I Discovery<a class=\"headerlink\" href=\"#st-stm32f769i-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The discovery kit enables a wide diversity of applications taking benefit\nfrom audio, multi-sensor support, graphics, security, security, video,\nand high-speed connectivity features. Important board features include:</p>\n<ul class=\"simple\">\n<li><p>STM32F769NIH6 microcontroller featuring 2 Mbytes of Flash memory and 512 Kbytes of RAM, in BGA216 package</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB reenumeration capability</p></li>\n<li><p>USB ST-LINK functions: virtual COM port, mass storage, debug port</p></li>\n<li><p>Five power supply options:</p>\n<ul>\n<li><p>ST LINK/V2-1</p></li>\n<li><p>USB HS connector</p></li>\n<li><p>5 V from RJ45 (Power Over Ethernet)</p></li>\n<li><p>5 V from Arduino™ or external connector</p></li>\n<li><p>USB charger</p></li>\n</ul>\n</li>\n<li><p>4-inch capacitive touch LCD display with MIPI-DSI connector</p></li>\n<li><p>SAI audio codec</p></li>\n<li><p>Two audio line jacks, one for input and one for output</p></li>\n<li><p>Stereo speaker outputs</p></li>\n<li><p>Four ST MEMS microphones on DFSDM inputs</p></li>\n<li><p>Two SPDIF RCA input and output connectors</p></li>\n<li><p>Two push-buttons (user and reset)</p></li>\n<li><p>512-Mbit Quad-SPI Flash memory</p></li>\n<li><p>128-Mbit SDRAM</p></li>\n<li><p>Connector for microSD card</p></li>\n<li><p>Wi-Fi or Ext-EEP daughterboard connector</p></li>\n<li><p>USB OTG HS with Micro-AB connector</p></li>\n<li><p>Ethernet connector compliant with IEEE-802.3-2002</p></li>\n<li><p>Power Over Ethernet based on IEEE 802.3af (Powered Device, 48 V to 5 V, 3 W)</p></li>\n<li><p>Power supply output for external applications: 3.3 V or 5 V</p></li>\n<li><p>Arduino Uno V3 connectors</p></li>\n<li><p>Comprehensive free software including a variety of examples, part of the STM32Cube package</p></li>\n<li><p>Supported by a wide choice of integrated development environments</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f769i_disco.jpg\"><img alt=\"STM32F769I-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f769i_disco.jpg\" style=\"width: 500px; height: 260px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f769idiscovery.html\">32F769I-DISCO website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F769I Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F769NIH6 in BGA216 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M7 CPU with FPU</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>512 + 16 + 4 KB SRAM</p></li>\n<li><p>Flexible external memory controller with up to 32-bit data bus</p></li>\n<li><p>Dual mode Quad-SPI</p></li>\n<li><p>Chrom-ART Accelerator(DMA2D), graphical hardware accelerator enabling enhanced graphical user interface</p></li>\n<li><p>Hardware JPEG codec</p></li>\n<li><p>LCD-TFT controller supporting up to XGA resolution</p></li>\n<li><p>MIPI®  DSI host controller supporting up to 720p 30Hz resolution</p></li>\n<li><p>3x12-bit ADC with 24 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>General Purpose Timers (15)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>I2C (4)</p></li>\n<li><p>USART/UART (8)</p></li>\n<li><p>SPI (6)</p></li>\n<li><p>SAI (2)</p></li>\n<li><p>CAN (3)</p></li>\n<li><p>SDMMC (2)</p></li>\n<li><p>SPDIFRX interface</p></li>\n<li><p>HDMI-CEC</p></li>\n<li><p>MDIO slave interface</p></li>\n<li><p>USB 2.0 full-speed device/host/OTG controller with on-chip PHY</p></li>\n<li><p>USB 2.0 high-speed/full-speed device/host/OTG controller with dedicated DMA, on-chip full-speed PHY and ULPI</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA: supports IEEE 1588v2 hardware, MII/RMII</p></li>\n<li><p>8- to 14-bit camera interface up to 54 Mbyte/s</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>RTC: sub-second accuracy, hardware calendar</p></li>\n<li><p>96-bit unique ID</p></li>\n</ul>\n<p>More information about STM32F769NIH6 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/content/st_com/en/products/microcontrollers/stm32-32-bit-arm-cortex-mcus/stm32-high-performance-mcus/stm32f7-series/stm32f7x9/stm32f769ni.html\">STM32F769NIH6 on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00224583.pdf\">STM32F76xxx reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f769i_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI NOR</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f769i_disco/stm32f769i_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F769I Discovery kit has 9 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00276557.pdf\">32F769I-DISCO board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PC6/PC7 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI2 SCK/MISO/MOSI : PA12/PB14/PB15 (Arduino SPI)</p></li>\n<li><p>ETH : PA1, PA2, PA7, PC1, PC4, PC5, PG11, PG13, PG14</p></li>\n<li><p>LD1 : PJ13</p></li>\n<li><p>LD2 : PJ5</p></li>\n<li><p>LD3 : PA12</p></li>\n<li><p>LD4 : PD4</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F769I System Clock can be driven by an internal or external oscillator,\nas well as by the main PLL clock. By default, the System clock is driven by the PLL\nclock at 216MHz, driven by a 25MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F769I Discovery kit has up to 8 UARTs. The Zephyr console output is assigned to UART1\nwhich connected to the onboard ST-LINK/V2 Virtual COM port interface. Default communication\nsettings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f769i_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F769I Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f769i\">\n<h4>Flashing an application to STM32F769I<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f769i\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F769I Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f769i_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f769i_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "seeeduino_xiao", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Seeeduino XIAO</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"seeeduino-xiao\">\n<span id=\"id1\"></span><h1>Seeeduino XIAO<a class=\"headerlink\" href=\"#seeeduino-xiao\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Seeeduino XIAO is a tiny (20 mm x 17.5 mm) ARM development\nboard with onboard LEDs, USB port, and range of I/O broken out\nonto 14 pins.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/seeeduino_xiao.png\"><img alt=\"Seeeduino XIAO\" class=\"align-center\" src=\"../../../../_images/seeeduino_xiao.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21G18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>Three user LEDs</p></li>\n<li><p>Native USB port</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The seeeduino_xiao board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct memory access</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HWINFO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Hardware info</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>Inter-Integrated Circuit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/seeeduino_xiao/seeeduino_xiao_defconfig\">boards/arm/seeeduino_xiao/seeeduino_xiao_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/\">Seeeduino XIAO wiki</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> has detailed information about\nthe board including <a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/#hardware-overview\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> and the <a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/#resourses\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 32 kHz external crystal\nwith the on-chip PLL generating the 48 MHz system clock.  The internal\nAPB and GCLK unit are set up in the same way as the upstream Arduino\nlibraries.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs.  On the XIAO, SERCOM0 can be put\ninto SPI mode and used to connect to devices over pin 9 (MISO), pin 10\n(MOSI), and pin 8 (SCK).</p>\n</div>\n<div class=\"section\" id=\"i2c-port\">\n<h3>I2C Port<a class=\"headerlink\" href=\"#i2c-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs. On the XIAO, SERCOM2 is available on\npin 4 (SDA) and pin 5 (SCL).</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs.  On the XIAO, SERCOM4 is\nthe Zephyr console and is available on pins 7 (RX) and 6 (TX).</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The XIAO ships the BOSSA compatible UF2 bootloader.  The bootloader can be\nentered by shorting the RST and GND pads twice.</p>\n<p>Additionally, if <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_USB_CDC_ACM</span></code> is enabled then the bootloader\nwill be entered automatically when you run <code class=\"code docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b seeeduino_xiao samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the XIAO to your host computer using USB</p></li>\n<li><p>Connect a 3.3 V USB to serial adapter to the board and to the\nhost.  See the <a class=\"reference internal\" href=\"#serial-port\">Serial Port</a> section above for the board’s pin\nconnections.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Short the RST and GND pads twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b seeeduino_xiao samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! seeeduino_xiao” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/\">https://wiki.seeedstudio.com/Seeeduino-XIAO/</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/#hardware-overview\">https://wiki.seeedstudio.com/Seeeduino-XIAO/#hardware-overview</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.seeedstudio.com/Seeeduino-XIAO/#resourses\">https://wiki.seeedstudio.com/Seeeduino-XIAO/#resourses</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 134217728}], "main_flash_size": 134217728, "memory": [{"label": "itcm", "size": 32768}, {"label": "dtcm", "size": 32768}, {"label": "bram0", "size": 8192}], "main_ram_size": 32768, "gpio": {"count": 3, "instances": [{"label": "DAPLINK_GPIO_0"}, {"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 3, "instances": [{"label": "DAPLINK_QUAD_SPI_0"}, {"label": "DAPLINK_SINGLE_SPI_0"}, {"label": "QUAD_SPI_0"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "arty_a7_arm_designstart_m3", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 81920}], "main_ram_size": 81920, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l152re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L152RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l152re\">\n<span id=\"nucleo-l152re-board\"></span><h1>ST Nucleo L152RE<a class=\"headerlink\" href=\"#st-nucleo-l152re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32L152RE MCU, supports Arduino™ and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption and features.</p>\n<p>The Arduino Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l152re.jpg\"><img alt=\"NUCLEO-L152RE\" class=\"align-center\" src=\"../../../../_images/nucleo_l152re.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-l152re.html\">Nucleo L152RE website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo L152RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: B1 (USER/blue) and B2 (RESET/black)</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32L152RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00240193.pdf\">STM32L152 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32l152re.pdf\">STM32L152 data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l152re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>PWM</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l152re/nucleo_l152re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l152re_connectors.png\"><img alt=\"Nucleo L152RE connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l152re_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>B1 (USER/blue) : PC13</p></li>\n<li><p>LD1 : PA5</p></li>\n<li><p>DAC : PA4</p></li>\n<li><p>PWM_3_CH1 : PA6</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l152re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L152RE board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l152re\">\n<h4>Flashing an application to Nucleo L152RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l152re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l152re samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l152re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-l152re.html\">https://www.st.com/en/evaluation-tools/nucleo-l152re.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00240193.pdf\">https://www.st.com/resource/en/reference_manual/cd00240193.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32l152re.pdf\">https://www.st.com/resource/en/datasheet/stm32l152re.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00105823.pdf\">https://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "thingy52_nrf52832", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Thingy:52</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"thingy-52\">\n<span id=\"thingy52-nrf52832\"></span><h1>Thingy:52<a class=\"headerlink\" href=\"#thingy-52\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Zephyr uses the thingy52_nrf52832 (PCA20020) board configuration for building\nfor the Thingy:52 board. The board has the nRF52832 MCU with ARM Cortex-M4F\nprocessor, a set of environmental sensors, a pushbutton, and two RGB LEDs.</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p>Gas sensor</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p>GPIO Expander</p></li>\n<li><p>Humidity and temperature sensor</p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p>Pressure sensor</p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p>RGB LEDs</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/thingy52_nrf52832.jpg\"><img alt=\"nRF52 Thingy:52\" src=\"../../../../_images/thingy52_nrf52832.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF52 Thingy:52 (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/Nordic-Thingy-52\">nRF52 DK website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. The\n<a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> contains the processor’s information and the\ndatasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Thingy:52 has the following features:</p>\n<ul class=\"simple\">\n<li><p>Two RGB LEDs</p></li>\n<li><p>CO2 and TVOC sensor</p></li>\n<li><p>Humidity and temperature sensor</p></li>\n<li><p>Color sensor</p></li>\n<li><p>I2C GPIO expander</p></li>\n<li><p>Provisions for a pin header and I2C and serial connectors</p></li>\n<li><p>Bluetooth radio</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Gas\nSensor</p></td>\n<td><p>on-board</p></td>\n<td><p>ccs811</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO Exp</p></td>\n<td><p>on-board</p></td>\n<td><p>sx1509b</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Humidity\nand Temp</p></td>\n<td><p>on-board</p></td>\n<td><p>hts221</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Pressure\nand Temp</p></td>\n<td><p>on-board</p></td>\n<td><p>lps22hb_press</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"lightwell-rgb-led\">\n<h4>Lightwell RGB LED<a class=\"headerlink\" href=\"#lightwell-rgb-led\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The LED is driven by the SX1509B GPIO expander chip (device name GPIO_P0).</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 59%\"/>\n<col style=\"width: 41%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>GPIO Expander Pin</p></th>\n<th class=\"head\"><p>LED Channel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Green</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Blue</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Red</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"button\">\n<h4>Button<a class=\"headerlink\" href=\"#button\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Thingy:52 has a pushbutton, connected to the P0.11 SOC GPIO pin.</p>\n</div>\n<div class=\"section\" id=\"serial\">\n<h4>Serial<a class=\"headerlink\" href=\"#serial\" title=\"Permalink to this headline\">¶</a></h4>\n<p>By default the system UART has the following pin configuration:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 53%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>SOC Pin</p></th>\n<th class=\"head\"><p>Signal</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P0.02</p></td>\n<td><p>TX</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.03</p></td>\n<td><p>RX</p></td>\n</tr>\n</tbody>\n</table>\n<p>The pins can be found on the P4 and P6 connectors. The system UART console\nuses these pins by default.</p>\n</div>\n<div class=\"section\" id=\"internal-i2c-bus\">\n<h4>Internal I2C Bus<a class=\"headerlink\" href=\"#internal-i2c-bus\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The internal I2C bus (I2C_0) is not routed to any of the external connectors,\nbut most of the on-board devices are accessed through it. The following pins\nhave been assigned to the bus:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>SOC Pin</p></th>\n<th class=\"head\"><p>Signal</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P0.07</p></td>\n<td><p>SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.08</p></td>\n<td><p>SCL</p></td>\n</tr>\n</tbody>\n</table>\n<p>The following devices are attached to the bus.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 53%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Device</p></th>\n<th class=\"head\"><p>Address</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>SX1509B</p></td>\n<td><p>0x3e</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LPS22HB</p></td>\n<td><p>0x5c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>HTS221</p></td>\n<td><p>0x5f</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CCS811</p></td>\n<td><p>0x5a</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"external-i2c-bus\">\n<h4>External I2C Bus<a class=\"headerlink\" href=\"#external-i2c-bus\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The external I2C bus (I2C_1) can be found on the P4 header and the P5 and P7\nconnectors.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>SOC Pin</p></th>\n<th class=\"head\"><p>Signal</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P0.14</p></td>\n<td><p>SDA_EXT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.15</p></td>\n<td><p>SCL_EXT</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-header\">\n<h4>Pin Header<a class=\"headerlink\" href=\"#pin-header\" title=\"Permalink to this headline\">¶</a></h4>\n<p>This is the pinout of the P4 pin header. Some of the SOC GPIO pins and I2C GPIO\nexpander pins are accessible through it. It also allows attaching external\ndevices to the four on-board N-channel MOSFET transistors.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 35%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Pin</p></th>\n<th class=\"head\"><p>Device</p></th>\n<th class=\"head\"><p>Signal / Device Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>SOC</p></td>\n<td><p>SCL_EXT / P0.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>SOC</p></td>\n<td><p>SDA_EXT / P0.14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>SOC</p></td>\n<td><p>ANA/DIG0 / P0.02</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>SOC</p></td>\n<td><p>ANA/DIG1 / P0.03</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>SOC</p></td>\n<td><p>ANA/DIG2 / P0.04</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GPIO Expander</p></td>\n<td><p>Pin 0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>GPIO Expander</p></td>\n<td><p>Pin 1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GPIO Expander</p></td>\n<td><p>Pin 2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>GPIO Expander</p></td>\n<td><p>Pin 3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>MOSFET 1</p></td>\n<td><p>Drain</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>MOSFET 1</p></td>\n<td><p>Source</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>MOSFET 2</p></td>\n<td><p>Drain</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>MOSFET 2</p></td>\n<td><p>Source</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>MOSFET 3</p></td>\n<td><p>Drain</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>MOSFET 3</p></td>\n<td><p>Source</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>MOSFET 4</p></td>\n<td><p>Drain</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>MOSFET 4</p></td>\n<td><p>Source</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>19</p></td>\n<td></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>20</p></td>\n<td></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"mosfets\">\n<h5>MOSFETs<a class=\"headerlink\" href=\"#mosfets\" title=\"Permalink to this headline\">¶</a></h5>\n<p>The MOSFETs are attached to the following SOC GPIO pins:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Device</p></th>\n<th class=\"head\"><p>Gate Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MOSFET 1</p></td>\n<td><p>P0.18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MOSFET 2</p></td>\n<td><p>P0.19</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MOSFET 3</p></td>\n<td><p>P0.20</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MOSFET 4</p></td>\n<td><p>P0.21</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"power-rails\">\n<h4>Power Rails<a class=\"headerlink\" href=\"#power-rails\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Thing:52 has multiple power rails. The necessary rails for the currently\nsupported devices are listed here.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Derived from</p></th>\n<th class=\"head\"><p>Controlled by</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>VREG</p></td>\n<td><p>The battery</p></td>\n<td><p>Always on</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VDD_nRF</p></td>\n<td><p>VREG</p></td>\n<td><p>Always on</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>VDD</p></td>\n<td><p>VREG</p></td>\n<td><p>SOC pin P0.30</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>VDD_CCS</p></td>\n<td><p>VDD</p></td>\n<td><p>GPIO expander pin 10</p></td>\n</tr>\n</tbody>\n</table>\n<p>Due to the dependencies of the power rails, multiple rails may need to be\npowered for a given device to turn on. The correct order of powering up the\nrails is the order of the rails down the dependency chain. For example, in order\nto power the CCS811 gas sensor, VDD has to be turned on first and VDD_CCS after\nit. Here’s a list of the devices and their power rails:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 53%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Device</p></th>\n<th class=\"head\"><p>Rail</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>nRF52832</p></td>\n<td><p>VDD_nRF</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SX1509B</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LPS22HB</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HTS221</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CCS811</p></td>\n<td><p>VDD_CCS</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"sensors\">\n<h4>Sensors<a class=\"headerlink\" href=\"#sensors\" title=\"Permalink to this headline\">¶</a></h4>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 13%\"/>\n<col style=\"width: 44%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 16%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Device</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Bus</p></th>\n<th class=\"head\"><p>I2C Address</p></th>\n<th class=\"head\"><p>Power Rail</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>LPS22HB</p></td>\n<td><p>Pressure and Temperature sensor</p></td>\n<td><p>I2C_0</p></td>\n<td><p>0x5c</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HTS221</p></td>\n<td><p>Humidity and Temperature sensor</p></td>\n<td><p>I2C_0</p></td>\n<td><p>0x5f</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CCS811</p></td>\n<td><p>Gas sensor</p></td>\n<td><p>I2C_0</p></td>\n<td><p>0x5a</p></td>\n<td><p>VDD_CCS</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"misc-device-pins\">\n<h4>Misc. Device Pins<a class=\"headerlink\" href=\"#misc-device-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"section\" id=\"sx1509b\">\n<h5>SX1509B<a class=\"headerlink\" href=\"#sx1509b\" title=\"Permalink to this headline\">¶</a></h5>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 44%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Device Signal</p></th>\n<th class=\"head\"><p>SOC Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>SX_OSCIO</p></td>\n<td><p>P0.05</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SX_RESET</p></td>\n<td><p>P0.16</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"lps22hb\">\n<h5>LPS22HB<a class=\"headerlink\" href=\"#lps22hb\" title=\"Permalink to this headline\">¶</a></h5>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 44%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Sensor Signal</p></th>\n<th class=\"head\"><p>SOC Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>LPS_INT</p></td>\n<td><p>P0.23</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"hts221\">\n<h5>HTS221<a class=\"headerlink\" href=\"#hts221\" title=\"Permalink to this headline\">¶</a></h5>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 44%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Sensor Signal</p></th>\n<th class=\"head\"><p>SOC Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>HTS_INT</p></td>\n<td><p>P0.24</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"ccs811\">\n<h5>CCS811<a class=\"headerlink\" href=\"#ccs811\" title=\"Permalink to this headline\">¶</a></h5>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 44%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Sensor Signal</p></th>\n<th class=\"head\"><p>GPIO Expander Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>CCS_RESET</p></td>\n<td><p>11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CCS_WAKE</p></td>\n<td><p>12</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Flashing Zephyr onto Thingy:52 requires an external J-Link programmer. The\nprogrammer is attached to the P9 programming header.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Thingy:52 does not have an on-board J-Link debug IC as some other nRF5\ndevelopment boards, however, instructions from the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page\nalso apply to this board, with the additional step of connecting an external\ndebugger. A development board with a Debug out connector such as the\n<a class=\"reference internal\" href=\"../../nrf52dk_nrf52832/doc/index.html#nrf52dk-nrf52832\"><span class=\"std std-ref\">nRF52 DK</span></a> can be used as a debugger with Thingy:52.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-board-features\">\n<h2>Testing board features<a class=\"headerlink\" href=\"#testing-board-features\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The green lightwell LED can be tested with the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> example.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b thingy52_nrf52832 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Also the temperature and humidity sensor can be tested with the <a class=\"reference internal\" href=\"../../../../samples/sensor/hts221/README.html#hts221\"><span class=\"std std-ref\">HTS221: Temperature and Humidity Monitor</span></a>\nsample.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b thingy52_nrf52832 samples/sensor/hts221</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/Nordic-Thingy-52\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/Nordic-Thingy-52</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">http://infocenter.nordicsemi.com/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52_bsim", "arch": "posix", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">POSIX/NATIVE Boards</a> »</li>\n<li>NRF52 simulated board (BabbleSim)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52-simulated-board-babblesim\">\n<span id=\"nrf52-bsim\"></span><h1>NRF52 simulated board (BabbleSim)<a class=\"headerlink\" href=\"#nrf52-simulated-board-babblesim\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"contents local topic\" id=\"contents\">\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#overview\" id=\"id1\">Overview</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#building-and-running\" id=\"id2\">Building and running</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#debugging\" id=\"id3\">Debugging</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#about-time-in-babblesim\" id=\"id4\">About time in BabbleSim</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"overview\">\n<h2><a class=\"toc-backref\" href=\"#id1\">Overview</a><a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This is a simulated NRF52 board which uses <a class=\"reference external\" href=\"https://BabbleSim.github.io\">BabbleSim</a> to simulate the radio\nactivity.\nThis board models some of the NRF52 SOC peripherals:</p>\n<ul class=\"simple\">\n<li><p>Radio</p></li>\n<li><p>Timers</p></li>\n<li><p>Real time counter</p></li>\n<li><p>Random number generator</p></li>\n<li><p>AES CCM &amp; AES ECB encryption HW</p></li>\n<li><p>Accelerated address resolver</p></li>\n<li><p>Clock control</p></li>\n<li><p>PPI (Programmable Peripheral Interconnect)</p></li>\n</ul>\n<p>The nrf52_bsim board definition uses the POSIX architecture to\nrun applications natively on the development system.  As with\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">native_posix</span></code> board, this has the benefit of providing\nnative code execution performance and easy debugging using\nnative tools, but has the same drawbacks.  Please refer to\n<a class=\"reference internal\" href=\"../../native_posix/doc/index.html#native-important-limitations\"><span class=\"std std-ref\">Native Posix’s important limitations</span></a>\nfor more details.</p>\n</div>\n<div class=\"section\" id=\"building-and-running\">\n<span id=\"nrf52bsim-build-and-run\"></span><h2><a class=\"toc-backref\" href=\"#id2\">Building and running</a><a class=\"headerlink\" href=\"#building-and-running\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>You must have the 32-bit C library installed in your system\n(in Ubuntu 16.04 install the gcc-multilib package)</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This will <strong>not</strong> work in Windows Subsystem for Linux (WSL) because WSL\ndoes not support native 32-bit binaries.</p>\n</div>\n<p>To target this board you need to have <a class=\"reference external\" href=\"https://BabbleSim.github.io\">BabbleSim</a> compiled in your system.\nIf you do not have it yet, in <a class=\"reference external\" href=\"https://BabbleSim.github.io\">its web page</a>\nyou can find instructions on how to\n<a class=\"reference external\" href=\"https://babblesim.github.io/fetching.html\">fetch</a> and\n<a class=\"reference external\" href=\"https://babblesim.github.io/building.html\">build</a> it.\nIn short, you can do:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mkdir -p ${HOME}/bsim &amp;&amp; cd ${HOME}/bsim</span>\n<span class=\"go\">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ./repo  &amp;&amp; chmod a+x ./repo</span>\n<span class=\"go\">./repo init -u https://github.com/BabbleSim/manifest.git -m everything.xml -b master</span>\n<span class=\"go\">./repo sync</span>\n<span class=\"go\">make everything -j 8</span>\n</pre></div>\n</div>\n<p>Define two environment variables to point to your BabbleSim\ninstallation, <code class=\"docutils literal notranslate\"><span class=\"pre\">BSIM_OUT_PATH</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">BSIM_COMPONENTS_PATH</span></code>.\nIf you followed the previous steps, you can just do:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export BSIM_OUT_PATH=${HOME}/bsim/</span>\n<span class=\"go\">export BSIM_COMPONENTS_PATH=${HOME}/bsim/components/</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>You can add these two lines to your <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.zephyrrc</span></code> file, or to your shell\ninitialization script (<code class=\"docutils literal notranslate\"><span class=\"pre\">~/.bashrc</span></code>), so you won’t need to rerun them\nmanually for each new shell.</p>\n</div>\n<p>You’re now ready to build applications targeting this board, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52_bsim samples/hello_world</span>\n</pre></div>\n</div>\n<p>Then you can execute your application using:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./build/zephyr/zephyr.exe -nosim\n<span class=\"gp\"># </span>Press Ctrl+C to <span class=\"nb\">exit</span>\n</pre></div>\n</div>\n<p>Note that the executable is a BabbleSim executable. The <code class=\"docutils literal notranslate\"><span class=\"pre\">-nosim</span></code> command line\noption indicates you want to run it detached from a BabbleSim simulation. This\nis possible only while there is no radio activity. But is perfectly fine for\nmost Zephyr samples and tests.</p>\n<p>When you want to run a simulation with radio activity you need to run also the\nBableSim 2G4 (2.4GHz) physical layer simulation (phy).</p>\n<p>For example, if you would like to run a simple case with 1 BLE <code class=\"docutils literal notranslate\"><span class=\"pre\">central_hr</span></code>\nsample application connecting to a BLE <code class=\"docutils literal notranslate\"><span class=\"pre\">peripheral</span></code> sample application:\nBuild the <code class=\"docutils literal notranslate\"><span class=\"pre\">central_hr</span></code> application targeting this board and copy the resulting\nexecutable to the simulator bin folder with a sensible name:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52_bsim samples/bluetooth/central_hr</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cp build/zephyr/zephyr.exe <span class=\"se\">\\</span>\n<span class=\"gp\">  $</span><span class=\"o\">{</span>BSIM_OUT_PATH<span class=\"o\">}</span>/bin/bs_nrf52_bsim_samples_bluetooth_central_hr\n</pre></div>\n</div>\n<p>Do the same for the <code class=\"docutils literal notranslate\"><span class=\"pre\">peripheral</span></code> sample app:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52_bsim samples/bluetooth/peripheral</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cp build/zephyr/zephyr.exe <span class=\"se\">\\</span>\n<span class=\"gp\">  $</span><span class=\"o\">{</span>BSIM_OUT_PATH<span class=\"o\">}</span>/bin/bs_nrf52_bsim_samples_bluetooth_peripheral\n</pre></div>\n</div>\n<p>And then run them together with BabbleSim’s 2G4 physical layer simulation:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cd ${BSIM_OUT_PATH}/bin/</span>\n<span class=\"go\">./bs_nrf52_bsim_samples_bluetooth_peripheral -s=trial_sim -d=0 &amp;</span>\n<span class=\"go\">./bs_nrf52_bsim_samples_bluetooth_central_hr -s=trial_sim -d=1 &amp;</span>\n<span class=\"go\">./bs_2G4_phy_v1 -s=trial_sim -D=2 -sim_length=10e6 &amp;</span>\n</pre></div>\n</div>\n<p>Where the <code class=\"docutils literal notranslate\"><span class=\"pre\">-s</span></code> command line option provides a string which uniquely identifies\nthis simulation; the <code class=\"docutils literal notranslate\"><span class=\"pre\">-D</span></code> option tells the Phy how many devices will be run\nin this simulation; the <code class=\"docutils literal notranslate\"><span class=\"pre\">-d</span></code> option tells each device which is its device\nnumber in the simulation; and the <code class=\"docutils literal notranslate\"><span class=\"pre\">-sim_length</span></code> option specifies the length\nof the simulation in microseconds.\nBabbleSim devices and Phy support many command line switches.\nRun them with <code class=\"docutils literal notranslate\"><span class=\"pre\">-help</span></code> for more information.</p>\n<p>You can find more information about how to run BabbleSim simulations in\n<a class=\"reference external\" href=\"https://babblesim.github.io/example_2g4.html\">this BabbleSim example</a>.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h2><a class=\"toc-backref\" href=\"#id3\">Debugging</a><a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Just like native_posix, the resulting executables are Linux native applications.\nTherefore they can be debugged or instrumented with the same tools as any other\nnative application, like for example <code class=\"docutils literal notranslate\"><span class=\"pre\">gdb</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">valgrind</span></code>.</p>\n<p>Note that BabbleSim will run fine if one or several of its components are\nbeing run in a debugger or instrumented. For example, pausing a device in a\nbreakpoint will pause the whole simulation.</p>\n<p>BabbleSim is fully deterministic by design and the results are not affected by\nthe host computing speed. All randomness is controlled by random seeds which can\nbe provided as command line options.</p>\n</div>\n<div class=\"section\" id=\"about-time-in-babblesim\">\n<h2><a class=\"toc-backref\" href=\"#id4\">About time in BabbleSim</a><a class=\"headerlink\" href=\"#about-time-in-babblesim\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Note that time in BabbleSim is simulated and decoupled from real time. Normally\nsimulated time will pass several orders of magnitude faster than real time,\nonly limited by your workstation compute power.\nIf for some reason you want to limit the speed of the simulation to real\ntime or a ratio of it, you can do so by connecting the <a class=\"reference external\" href=\"https://github.com/BabbleSim/base/tree/master/device_handbrake\">handbrake device</a>\nto the BabbleSim Phy.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 20480}], "main_ram_size": 20480, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_22"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "dragino_lsn50", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Dragino LSN50 LoRA Sensor Node</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"dragino-lsn50-lora-sensor-node\">\n<span id=\"dragino-lsn50-board\"></span><h1>Dragino LSN50 LoRA Sensor Node<a class=\"headerlink\" href=\"#dragino-lsn50-lora-sensor-node\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Dragino LSN50 LoRA Sensor Node for IoT allows users to develop\napplications with LoraWAN connectivity via the HopeRF / SX1276/SX1278.\nDragino LSN50 enables a wide diversity of applications by exploiting\nlow-power communication, ARM® Cortex®-M0 core-based\nSTM32L0 Series features.</p>\n<p>This kit provides:</p>\n<ul>\n<li><p>STM32L072CZ MCU</p></li>\n<li><p>SX1276/SX1278 LoRa Transceiver</p></li>\n<li><p>Expansion connectors:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>PMOD</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Li/SOCI2 Unchargable Battery</p></li>\n<li><p>GPIOs exposed via screw terminals on the carrier board</p></li>\n<li><p>Housing</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/dragino_lsn50.png\"><img alt=\"Dragino LSN50\" class=\"align-center\" src=\"../../../../_images/dragino_lsn50.png\" style=\"width: 531px; height: 354px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://wiki.dragino.com/index.php?title=Lora_Sensor_Node-LSN50#Resource\">Dragino LSN50 website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L072CZ SoC provides the following hardware IPs:</p>\n<ul>\n<li><p>Ultra-low-power (down to 0.29 µA Standby mode and 93 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M0+ CPU, frequency up to 32 MHz</p></li>\n<li><p>Clock Sources:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>1 to 32 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 37 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed low-power 65 kHz to 4.2 MHz RC</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>11x timers:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>2x 16-bit with up to 4 channels</p></li>\n<li><p>2x 16-bit with up to 2 channels</p></li>\n<li><p>1x 16-bit ultra-low-power timer</p></li>\n<li><p>1x SysTick</p></li>\n<li><p>1x RTC</p></li>\n<li><p>2x 16-bit basic for DAC</p></li>\n<li><p>2x watchdogs (independent/window)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Up to 84 fast I/Os, most 5 V-tolerant.</p></li>\n<li><p>Memories</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Up to 192 KB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 20 KB of SRAM</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>1x 12-bit ADC 1.14 MSPS</p></li>\n<li><p>2x 12-bit DAC</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>11x communication interfaces</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>4x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>6x SPIs (4x SPIs with the Quad SPI)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>7-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<p>More information about STM32L072CZ can be found here:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l072cz.html\">STM32L072CZ on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00108281.pdf\">STM32L0x2 reference manual</a></p></li>\n</ul>\n</div></blockquote>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr Dragino LSN50 Board board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/dragino_lsn50/dragino_lsn50_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Dragino LSN50 Board has GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<p>For detailed information about available pins please refer to <a class=\"reference external\" href=\"http://wiki.dragino.com/index.php?title=Lora_Sensor_Node-LSN50#Resource\">Dragino LSN50 website</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Dragino LSN50 System Clock is at 32MHz,</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Dragino LSN50 board has 2 U(S)ARTs. The Zephyr console output is assigned to UART1.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">dragino_lsn50</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Dragino LSN50  board requires an external debugger.</p>\n<div class=\"section\" id=\"flashing-an-application-to-dragino-lsn50\">\n<h4>Flashing an application to Dragino LSN50<a class=\"headerlink\" href=\"#flashing-an-application-to-dragino-lsn50\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Connect the Dragino LSN50 to a STLinkV2 to your host computer using the USB port, then\nrun a serial host program to connect with your board. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b dragino_lsn50 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b dragino_lsn50 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 4, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_7"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l432kc", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L432KC</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l432kc\">\n<span id=\"nucleo-l432kc-board\"></span><h1>ST Nucleo L432KC<a class=\"headerlink\" href=\"#st-nucleo-l432kc\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L432KC board features an ARM Cortex-M4 based STM32L432KC MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo L432KC board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in UFQFPN32 package</p></li>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), power LED (LD2), user LED (LD3)</p></li>\n<li><p>One push-button: RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l432kc.jpg\"><img alt=\"Nucleo L432KC\" class=\"align-center\" src=\"../../../../_images/nucleo_l432kc.jpg\" style=\"width: 250px; height: 188px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l432kc.html\">Nucleo L432KC website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L432KC SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 28 nA Standby mode and 84\nµA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M4 CPU with FPU, frequency up to 80 MHz,\n100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>2 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 3 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>11x timers:</p>\n<ul>\n<li><p>1x 16-bit advanced motor-control</p></li>\n<li><p>1x 32-bit and 2x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 26 fast I/Os, most 5 V-tolerant</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 256 KB single bank Flash, proprietary code readout protection</p></li>\n<li><p>Up to 64 KB of SRAM including 16 KB with hardware parity check</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>1x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200\nµA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>1x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>13x communication interfaces</p>\n<ul>\n<li><p>USB OTG 2.0 full-speed crystal less solution with LPM and BCD</p></li>\n<li><p>1x SAIs (serial audio interface)</p></li>\n<li><p>2x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>3x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>2x SPIs (3x SPIs with the Quad SPI)</p></li>\n<li><p>CAN (2.0B Active)</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n<li><p>IRTIM (Infrared interface)</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell*</p></li>\n</ul>\n<p>More information about STM32L432KC can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l432kc.html\">STM32L432KC on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00151940.pdf\">STM32L432 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l432kc board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>CAN feature requires CAN transceiver</p>\n</div>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l432kc/nucleo_l432kc_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L432KC Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l432kc_arduino_nano.png\"><img alt=\"Nucleo L432KC Arduino connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l432kc_arduino_nano.png\" style=\"width: 960px; height: 720px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00231744.pdf\">STM32 Nucleo-32 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>I2C_1_SCL : PB6</p></li>\n<li><p>I2C_1_SDA : PB7</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>LD3 : PB3</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L432KC System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L432KC board has 3 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l432kc</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L432KC board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l432kc\">\n<h4>Flashing an application to Nucleo L432KC<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l432kc\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo L432KC to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l432kc samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l432kc samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 4194304}], "main_flash_size": 4194304, "memory": [{"label": "sram0", "size": 4194304}], "main_ram_size": 4194304, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_TOUCH"}, {"label": "I2C_AUDIO_CONF"}, {"label": "I2C_SHIELD0"}, {"label": "I2C_SHIELD1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mps2_an385", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ARM V2M MPS2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arm-v2m-mps2\">\n<span id=\"mps2-an385-board\"></span><h1>ARM V2M MPS2<a class=\"headerlink\" href=\"#arm-v2m-mps2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The mps2_an385 board configuration is used by Zephyr applications that run on\nthe V2M MPS2 board. It provides support for the ARM Cortex-M3 (AN385) CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p>Nested Vectored Interrupt Controller (NVIC)</p></li>\n<li><p>System Tick System Clock (SYSTICK)</p></li>\n<li><p>Cortex-M System Design Kit UART</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mps2_an385.png\"><img alt=\"ARM V2M MPS2\" class=\"align-center\" src=\"../../../../_images/mps2_an385.png\" style=\"width: 442px; height: 335px;\"/></a>\n<p>In addition to enabling actual hardware usage, this board configuration can\nalso use QEMU to emulate the AN385 platform running on the MPS2+.</p>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://developer.mbed.org/platforms/ARM-MPS2/\">V2M MPS2 Website</a>.</p>\n<p>The Application Note AN385 can be found at <a class=\"reference external\" href=\"http://infocenter.arm.com/help/topic/com.arm.doc.dai0385c/DAI0385C_cortex_m3_on_v2m_mps2.pdf\">Application Note AN385</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board configuration makes no claims about its suitability for use\nwith actual MPS2 hardware systems using AN385, or any other hardware\nsystem. It has been tested on actual hardware, but its primary purpose is\nfor use with QEMU and unit tests.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ARM V2M MPS2 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M3 (AN385)</p></li>\n<li><p>ARM IoT Subsystem for Cortex-M</p></li>\n<li><p>Form factor: 140x120cm</p></li>\n<li><p>ZBTSRAM: 8MB single cycle SRAM, 16MB PSRAM</p></li>\n<li><p>Video: QSVGA touch screen panel, 4bit RGB VGA connector</p></li>\n<li><p>Audio: Audio Codec</p></li>\n<li><p>Debug:</p>\n<ul>\n<li><p>ARM JTAG20 connector</p></li>\n<li><p>ARM parallel trace connector (MICTOR38)</p></li>\n<li><p>20 pin Cortex debug connector</p></li>\n<li><p>10 pin Cortex debug connector</p></li>\n<li><p>ILA connector for FPGA debug</p></li>\n</ul>\n</li>\n<li><p>Expansion</p>\n<ul>\n<li><p>GPIO</p></li>\n<li><p>SPI</p></li>\n</ul>\n</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>4 MB of flash memory (in ZBTSRAM 1, starting at address 0x00400000) and 4 MB of RAM\n(in ZBTSRAM 2 &amp; 3, starting at address 0x20000000) are available.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mps2_an385 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DUALTIMER</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by the port.\nSee the <a class=\"reference external\" href=\"https://developer.mbed.org/platforms/ARM-MPS2/\">V2M MPS2 Website</a> for a complete list of V2M MPS2 board hardware\nfeatures.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">boards/arm/mps2_an385/mps2_an385_defconfig</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"interrupt-controller\">\n<h3>Interrupt Controller<a class=\"headerlink\" href=\"#interrupt-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>MPS2 is a Cortex-M3 based SoC and has 15 fixed exceptions and 45 IRQs.</p>\n<p>A Cortex-M3/4-based board uses vectored exceptions. This means each exception\ncalls a handler directly from the vector table.</p>\n<p>Handlers are provided for exceptions 1-6, 11-12, and 14-15. The table here\nidentifies the handlers used for each exception.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Exc#</p></th>\n<th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Remarks</p></th>\n<th class=\"head\"><p>Used by Zephyr Kernel</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>Reset</p></td>\n<td></td>\n<td><p>system initialization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>NMI</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>Hard fault</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>MemManage</p></td>\n<td><p>MPU fault</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>Bus</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>Usage\nfault</p></td>\n<td><p>undefined\ninstruction,\nor switch\nattempt to ARM\nmode</p></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>SVC</p></td>\n<td></td>\n<td><p>system calls, kernel\nrun-time exceptions,\nand IRQ offloading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>Debug\nmonitor</p></td>\n<td></td>\n<td><p>system fatal error</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>PendSV</p></td>\n<td></td>\n<td><p>context switch</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>SYSTICK</p></td>\n<td></td>\n<td><p>system clock</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARM V2M MPS2 Board has 4 GPIO controllers. These controllers are responsible\nfor pin muxing, input/output, pull-up, etc.</p>\n<p>All GPIO controller pins are exposed via the following sequence of pin numbers:</p>\n<ul class=\"simple\">\n<li><p>Pins 0 - 15 are for GPIO 0</p></li>\n<li><p>Pins 16 - 31 are for GPIO 1</p></li>\n<li><p>Pins 32 -  47 are for GPIO 2</p></li>\n<li><p>Pins 48 -  51 are for GPIO 3</p></li>\n</ul>\n<p>Mapping from the ARM MPS2 Board pins to GPIO controllers:</p>\n<ul class=\"rst-columns simple\">\n<li><p>D0 : EXT_0</p></li>\n<li><p>D1 : EXT_4</p></li>\n<li><p>D2 : EXT_2</p></li>\n<li><p>D3 : EXT_3</p></li>\n<li><p>D4 : EXT_1</p></li>\n<li><p>D5 : EXT_6</p></li>\n<li><p>D6 : EXT_7</p></li>\n<li><p>D7 : EXT_8</p></li>\n<li><p>D8 : EXT_9</p></li>\n<li><p>D9 : EXT_10</p></li>\n<li><p>D10 : EXT_12</p></li>\n<li><p>D11 : EXT_13</p></li>\n<li><p>D12 : EXT_14</p></li>\n<li><p>D13 : EXT_11</p></li>\n<li><p>D14 : EXT_15</p></li>\n<li><p>D15 : EXT_5</p></li>\n<li><p>D16 : EXT_16</p></li>\n<li><p>D17 : EXT_17</p></li>\n<li><p>D18 : EXT_18</p></li>\n<li><p>D19 : EXT_19</p></li>\n<li><p>D20 : EXT_20</p></li>\n<li><p>D21 : EXT_21</p></li>\n<li><p>D22 : EXT_22</p></li>\n<li><p>D23 : EXT_23</p></li>\n<li><p>D24 : EXT_24</p></li>\n<li><p>D25 : EXT_25</p></li>\n<li><p>D26 : EXT_26</p></li>\n<li><p>D27 : EXT_30</p></li>\n<li><p>D28 : EXT_28</p></li>\n<li><p>D29 : EXT_29</p></li>\n<li><p>D30 : EXT_27</p></li>\n<li><p>D31 : EXT_32</p></li>\n<li><p>D32 : EXT_33</p></li>\n<li><p>D33 : EXT_34</p></li>\n<li><p>D34 : EXT_35</p></li>\n<li><p>D35 : EXT_36</p></li>\n<li><p>D36 : EXT_38</p></li>\n<li><p>D37 : EXT_39</p></li>\n<li><p>D38 : EXT_40</p></li>\n<li><p>D39 : EXT_44</p></li>\n<li><p>D40 : EXT_41</p></li>\n<li><p>D41 : EXT_31</p></li>\n<li><p>D42 : EXT_37</p></li>\n<li><p>D43 : EXT_42</p></li>\n<li><p>D44 : EXT_43</p></li>\n<li><p>D45 : EXT_45</p></li>\n<li><p>D46 : EXT_46</p></li>\n<li><p>D47 : EXT_47</p></li>\n<li><p>D48 : EXT_48</p></li>\n<li><p>D49 : EXT_49</p></li>\n<li><p>D50 : EXT_50</p></li>\n<li><p>D51 : EXT_51</p></li>\n</ul>\n<p>Peripheral Mapping:</p>\n<ul class=\"rst-columns simple\">\n<li><p>UART_3_RX : D0</p></li>\n<li><p>UART_3_TX : D1</p></li>\n<li><p>SPI_3_CS : D10</p></li>\n<li><p>SPI_3_MOSI : D11</p></li>\n<li><p>SPI_3_MISO : D12</p></li>\n<li><p>SPI_3_SCLK : D13</p></li>\n<li><p>I2C_3_SDA : D14</p></li>\n<li><p>I2C_3_SCL : D15</p></li>\n<li><p>UART_4_RX : D26</p></li>\n<li><p>UART_4_TX : D30</p></li>\n<li><p>SPI_4_CS : D36</p></li>\n<li><p>SPI_4_MOSI : D37</p></li>\n<li><p>SPI_4_MISO : D38</p></li>\n<li><p>SPI_4_SCK : D39</p></li>\n<li><p>I2C_4_SDA : D40</p></li>\n<li><p>I2C_4_SCL : D41</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://infocenter.arm.com/help/topic/com.arm.doc.100112_0200_05_en/versatile_express_cortex_m_prototyping_systems_v2m_mps2_and_v2m_mps2plus_technical_reference_100112_0200_05_en.pdf\">MPS2 Technical Reference Manual (TRM)</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The V2M MPS2 main clock is 24 MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The V2M MPS2 processor has five UARTs. Both the UARTs have only two wires for\nRX/TX and no flow control (CTS/RTS) or FIFO. The Zephyr console output, by\ndefault, is utilizing UART0.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>V2M MPS2 provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a Mass Storage and an\nUSB Serial Port.</p></li>\n<li><p>A Serial Flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB Serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-v2m-mps2\">\n<h4>Flashing an application to V2M MPS2<a class=\"headerlink\" href=\"#flashing-an-application-to-v2m-mps2\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mps2_an385 samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the V2M MPS2 to your host computer using the USB port and you should\nsee a USB connection which exposes a Mass Storage and a USB Serial Port.\nCopy the generated zephyr.bin in the exposed drive.\nReset the board and you should be able to see on the corresponding Serial Port\nthe following message:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_6"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_f207zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F207ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f207zg\">\n<span id=\"nucleo-f207zg-board\"></span><h1>ST Nucleo F207ZG<a class=\"headerlink\" href=\"#st-nucleo-f207zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F207ZG board features an ARM Cortex-M3 based STM32F207ZG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F207ZG board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>ST Zio connector including: support for Arduino* Uno V3 connectivity\n(A0 to A5, D0 to D15) and additional signals exposing a wide range of\nperipherals</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>Three user LEDs</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<img alt=\"Nucleo F207ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_f207zg.png\"/>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f207zg.html\">Nucleo F207ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F207ZG provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F207ZGT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M3 CPU</p></li>\n<li><p>120 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 24 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>17 General purpose timers</p></li>\n<li><p>2 watchdog timers (independent and window)</p></li>\n<li><p>SysTick timer</p></li>\n<li><p>USART/UART (6)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>10/100 Ethernet MAC with dedicated DMA</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n</ul>\n<p>More information about STM32F207ZG can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f207zg.html\">STM32F207ZG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/cd00225773.pdf\">STM32F207 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_207zg board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 60%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Backup SRAM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Backup SRAM</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>PWM</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>Random Number Generator</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f207zg/nucleo_f207zg_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F207ZG Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f207zg_zio_left.png\"><img alt=\"Nucleo F207ZG ZIO connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f207zg_zio_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f207zg_zio_right.png\"><img alt=\"Nucleo F207ZG ZIO connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f207zg_zio_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f207zg_morpho_left.png\"><img alt=\"Nucleo F207ZG Morpho connectors (left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f207zg_morpho_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f207zg_morpho_right.png\"><img alt=\"Nucleo F207ZG Morpho connectors (right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f207zg_morpho_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For more details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>USB_DM : PA11</p></li>\n<li><p>USB_DP : PA12</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>DAC: PA4</p></li>\n<li><p>ADC: PA0</p></li>\n<li><p>PWM_1_CH1 : PE9</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F207ZG System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 120MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F207ZG board has 4 UARTs. The Zephyr console output is assigned to UART3.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"network-interface\">\n<h4>Network interface<a class=\"headerlink\" href=\"#network-interface\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Ethernet configured as the default network interface</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h4>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F207ZG board has a USB OTG dual-role device (DRD) controller that\nsupports both device and host functions through its micro USB connector\n(USB USER). Only USB device function is supported in Zephyr at the moment.</p>\n</div>\n<div class=\"section\" id=\"backup-sram\">\n<h4>Backup SRAM<a class=\"headerlink\" href=\"#backup-sram\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to test backup SRAM you may want to disconnect VBAT from VDD. You can\ndo it by removing <code class=\"docutils literal notranslate\"><span class=\"pre\">SB156</span></code> jumper on the back side of the board.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F207ZG board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "segger_trb_stm32f407", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Cortex-M Trace Reference Board V1.2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cortex-m-trace-reference-board-v1-2\">\n<span id=\"segger-trb-stm32f407\"></span><h1>Cortex-M Trace Reference Board V1.2<a class=\"headerlink\" href=\"#cortex-m-trace-reference-board-v1-2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Cortex-M Trace Reference Board V1.2 (SEGGER-TRB-STM32F407 for short)\nboard is a reference board, based on the ST Microelectronics STM32F407VE\nARM Cortex-M4 CPU, to test hardware tracing with the SEGGER Trace-Pro\ndebuggers. It is not meant for general prototype development because\nit is extremely limited when it comes to IO, and only has 3 LEDs.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/segger_trb_stm32f407.png\"><img alt=\"SEGGER-TRB-STM32F407\" src=\"../../../../_images/segger_trb_stm32f407.png\" style=\"width: 500px; height: 365px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">SEGGER-TRB-STM32F407</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Information about the board can be found at the <a class=\"reference external\" href=\"https://www.segger.com/products/debug-probes/j-trace/accessories/trace-reference-boards/overview/\">SEGGER website</a> .\nThe <a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32f407ve.html\">ST STM32F407VE website</a> contains the processor’s information\nand the datasheet.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SEGGER-TRB-STM32F407 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 22%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random number generator</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (green) = PA8</p></li>\n<li><p>LED1 (green) = PA9</p></li>\n<li><p>LED2 (green) = PA10</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>JTAG/SWD debug</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VTref</p></td>\n<td><p>2</p></td>\n<td><p>SWDIO/TMS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>GND</p></td>\n<td><p>4</p></td>\n<td><p>SWCLK/TCK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n<td><p>6</p></td>\n<td><p>SWO/TDO</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>—</p></td>\n<td><p>8</p></td>\n<td><p>TDI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>NC</p></td>\n<td><p>10</p></td>\n<td><p>nRESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>5V-Supply</p></td>\n<td><p>12</p></td>\n<td><p>TRACECLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>5V-Supply</p></td>\n<td><p>14</p></td>\n<td><p>TRACEDATA[0]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>GND</p></td>\n<td><p>16</p></td>\n<td><p>TRACEDATA[1]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>GND</p></td>\n<td><p>18</p></td>\n<td><p>TRACEDATA[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>GND</p></td>\n<td><p>20</p></td>\n<td><p>TRACEDATA[3]</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>SEGGER-STM32F407-TRB has one external oscillator. The frequency of\nthe main clock is 12 MHz. The processor can setup HSE to drive the\nmaster clock, which can be set as high as 168 MHz.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SEGGER-TRB-STM32F407 board is specially designed to test the SEGGER\nTrace-Pro debuggers, so this example assumes a J-Trace or J-Link is used.</p>\n<div class=\"section\" id=\"flashing-an-application-to-the-segger-trb-stm32f407\">\n<h3>Flashing an application to the SEGGER-TRB-STM32F407<a class=\"headerlink\" href=\"#flashing-an-application-to-the-segger-trb-stm32f407\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Connect the J-Trace/J-Link USB dongle to your host computer and to the JTAG\nport of the SEGGER-TRB-STM32F407 board. Then build and flash an application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b segger_trb_stm32f407 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>After resetting the board, you should see LED0 blink with a 1 second interval.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b segger_trb_stm32f407 samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f401re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F401RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f401re\">\n<span id=\"nucleo-f401re-board\"></span><h1>ST Nucleo F401RE<a class=\"headerlink\" href=\"#st-nucleo-f401re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F401RE board features an ARM Cortex-M4 based STM32F401RE MCU\nwith a wide range of connectivity support and configurations Here are\nsome highlights of the Nucleo F401RE board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f401re.png\"><img alt=\"Nucleo F401RE\" class=\"align-center\" src=\"../../../../_images/nucleo_f401re.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f401re.html\">Nucleo F401RE website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F401RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F401RET6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>84 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>96 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (7)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (4)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<p>More information about STM32F401RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f401re.html\">STM32F401RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00096844.pdf\">STM32F401 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_401re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>System Window Watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f401re/nucleo_f401re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F401RE Board has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f401re_arduino.png\"><img alt=\"Nucleo F401RE Arduino connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f401re_arduino.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f401re_morpho.png\"><img alt=\"Nucleo F401RE Morpho connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f401re_morpho.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F401RE System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 84MHz,\ndriven by 8MHz high speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F401RE board has 3 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h3>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F401RE board has up to 3 I2Cs. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL : PB8</p></li>\n<li><p>I2C1_SDA : PB9</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f401re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F401RE board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f401re\">\n<h4>Flashing an application to Nucleo F401RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f401re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo F401RE to your host computer using the USB port,\nthen run a serial host program to connect with your Nucleo board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Now build and flash an application. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f401re samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f401re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "pinetime_devkit0", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Pine64 PineTime DevKit0</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"pine64-pinetime-devkit0\">\n<span id=\"pinetime-devkit0\"></span><h1>Pine64 PineTime DevKit0<a class=\"headerlink\" href=\"#pine64-pinetime-devkit0\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/PineTime_leaflet.jpg\"><img alt=\"Pine64 PineTime\" src=\"../../../../_images/PineTime_leaflet.jpg\" style=\"width: 600px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">PineTime leaflet (Credit: Pine64)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>The Pine64 smartwatch, dubbed “PineTime”, is a product of a community effort\nfor an open source smartwatch in collaboration with wearable RTOS and Linux\napp developers/communities.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/PineTime_DevKit0.jpg\"><img alt=\"Pine64 PineTime\" src=\"../../../../_images/PineTime_DevKit0.jpg\" style=\"width: 600px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">PineTime Dev Kit (Credit: Pine64)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The PineTime is based on a Nordic NRF52832 chip and features:</p>\n<ul class=\"simple\">\n<li><p>64 MHz Cortex-M4 with FPU</p></li>\n<li><p>64KB SRAM</p></li>\n<li><p>512KB on board Flash</p></li>\n<li><p>1.3 inches (33mm), 240x240 pixels display with ST7789 driver</p></li>\n<li><p>170-180mAh LiPo battery</p></li>\n<li><p>XT25F32B 32Mb (4MB) SPI NOR Flash</p></li>\n<li><p>CST816S Capacitive Touch</p></li>\n<li><p>BMA421 Triaxial Acceleration Sensor</p></li>\n<li><p>HRS3300 PPG Heart Rate Sensor</p></li>\n</ul>\n<div class=\"section\" id=\"pinetime-port-assignment\">\n<h3>PineTime Port Assignment<a class=\"headerlink\" href=\"#pinetime-port-assignment\" title=\"Permalink to this headline\">¶</a></h3>\n<p>See <a class=\"reference external\" href=\"http://files.pine64.org/doc/PineTime/PineTime%20Schematic-V1.0a-20191103.pdf\">PineTime schematics</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>\n+———————-+———————————+———–+\n| NRF52 pins           | Function                        | Direction |\n+======================+=================================+===========+\n| P0.00/XL1            | 32.768 kHz –XL1                 |           |\n+———————-+———————————+———–+\n| P0.01/XL2            | 32.768 kHz –XL2                 |           |\n+———————-+———————————+———–+\n| P0.02/AIN0           | SPI-SCK, LCD_SCK                | OUT       |\n+———————-+———————————+———–+\n| P0.03/AIN1           | SPI-MOSI, LCD_SDI               | OUT       |\n+———————-+———————————+———–+\n| P0.04/AIN2           | SPI-MISO                        | IN        |\n+———————-+———————————+———–+\n| P0.05/AIN3           | SPI-CE# (SPI-NOR)               | OUT       |\n+———————-+———————————+———–+\n| P0.06                | BMA421-SDA, HRS3300-SDA, TP-SDA | I/O       |\n+———————-+———————————+———–+\n| P0.07                | BMA421-SCL, HRS3300-SCL, TP-SCL | OUT       |\n+———————-+———————————+———–+\n| P0.08                | BMA421-INT                      | IN        |\n+———————-+———————————+———–+\n| P0.09/NFC1           | LCD_DET                         | OUT       |\n+———————-+———————————+———–+\n| P0.10/NFC2           | TP_RESET                        | OUT       |\n+———————-+———————————+———–+\n| P0.11                |                                 |           |\n+———————-+———————————+———–+\n| P0.12                | CHARGE INDICATION               | IN        |\n+———————-+———————————+———–+\n| P0.13                | PUSH BUTTON_IN                  | IN        |\n+———————-+———————————+———–+\n| P0.14/TRACEDATA3     | LCD_BACKLIGHT_LOW               | OUT       |\n+———————-+———————————+———–+\n| P0.15/TRACEDATA2     | PUSH BUTTON_OUT                 | OUT       |\n+———————-+———————————+———–+\n| P0.16/TRACEDATA1     | VIBRATOR OUT                    | OUT       |\n+———————-+———————————+———–+\n| P0.17                |                                 |           |\n+———————-+———————————+———–+\n| P0.18/TRACEDATA0/SWO | LCD_RS OUT                      |           |\n+———————-+———————————+———–+\n| P0.19                | POWER PRESENCE INDICATION       | IN        |\n+———————-+———————————+———–+\n| P0.20/TRACECLK       |                                 |           |\n+———————-+———————————+———–+\n| P0.21/nRESET         |                                 |           |\n+———————-+———————————+———–+\n| P0.22                | LCD_BACKLIGHT_MID               | OUT       |\n+———————-+———————————+———–+\n| P0.23                | LCD_BACKLIGHT_HIGH              | OUT       |\n+———————-+———————————+———–+\n| P0.24                | 3V3 POWER CONTROL               | OUT       |\n+———————-+———————————+———–+\n| P0.25                | LCD_CS                          | OUT       |\n+———————-+———————————+———–+\n| P0.26                | LCD_RESET                       | OUT       |\n+———————-+———————————+———–+\n| P0.27                | STATUS LED (NOT STAFF)          | OUT       |\n+———————-+———————————+———–+\n| P0.28/AIN4           | TP_INT                          | IN        |\n+———————-+———————————+———–+\n| P0.29/AIN5           |                                 |           |\n+———————-+———————————+———–+\n| P0.30/AIN6           | HRS3300-TEST                    | IN        |\n+———————-+———————————+———–+\n| P0.31/AIN7           | BATTERY VOLTAGE (Analog)        | IN        |\n+———————-+———————————+———–+</p>\n</div>\n</div>\n<div class=\"section\" id=\"building\">\n<h2>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h2>\n<p>In order to get started with Zephyr on the PineTime, you can use the\nboard-specific sample:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b pinetime_devkit0 samples/boards/pine64_pinetime</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The PineTime Dev Kit comes with the back not glued down to allow it to be\neasily reprogrammed.</p>\n<p>The kit does not include a hardware programmer, but existing debuggers\nsupporting SWD can be used.</p>\n<p>These are the necessary steps for debugging:</p>\n<ul class=\"simple\">\n<li><p>Unlock the device</p></li>\n<li><p>Upload new software</p></li>\n<li><p>Run a debugger</p></li>\n</ul>\n<p>More infos to be found in the <a class=\"reference external\" href=\"https://wiki.pine64.org/index.php/Reprogramming_the_PineTime\">Wiki Reprogramming the PineTime</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a> page.</p>\n<div class=\"section\" id=\"debugger-connection\">\n<h3>Debugger connection<a class=\"headerlink\" href=\"#debugger-connection\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The dev kits have exposed SWD pins for flashing and debugging.</p>\n<p>Only a few devs have soldered to these pins, most just use friction to make\ncontact with the programming cable.</p>\n<p>The pinout is:</p>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/PineTime_SWD_location.jpg\"><img alt=\"PineTime SWD location\" src=\"../../../../_images/PineTime_SWD_location.jpg\" style=\"width: 300px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"unlocking-the-flash-memory\">\n<h3>Unlocking the Flash memory<a class=\"headerlink\" href=\"#unlocking-the-flash-memory\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Unlocking the device is a one-time action that is needed to enable to debug\nport and provide full access to the device. This will erase all existing\nsoftware from the internal flash.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nrfjprog -f NRF52 --recover\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using nrfjprog, flashing the PineTime is done with the command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>nrfjprog -f NRF52 --program firmware.hex --sectorerase\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using Segger Ozone debugger, debugging and flashing is made easy.</p>\n<p>Simply load the .elf file containing the final firmware and\nsetup the debbuger to use SWD over USB for the chip nRF52832_xxAA.\nThis setup can be done using the menu Tools/J-Link Settings. or by directly\ntyping the following in the debugger console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Project.SetDevice <span class=\"o\">(</span><span class=\"s2\">\"nRF52832_xxAA\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"gp\">$ </span>Project.SetHostIF <span class=\"o\">(</span><span class=\"s2\">\"USB\"</span>, <span class=\"s2\">\"\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"gp\">$ </span>Project.SetTargetIF <span class=\"o\">(</span><span class=\"s2\">\"SWD\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"gp\">$ </span>Project.SetTIFSpeed <span class=\"o\">(</span><span class=\"s2\">\"4 MHz\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"gp\">$ </span>File.Open <span class=\"o\">(</span><span class=\"s2\">\"path/to/your/build/zephyr/zephyr.elf\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://files.pine64.org/doc/PineTime/PineTime%20Schematic-V1.0a-20191103.pdf\">http://files.pine64.org/doc/PineTime/PineTime%20Schematic-V1.0a-20191103.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.pine64.org/index.php/Reprogramming_the_PineTime\">https://wiki.pine64.org/index.php/Reprogramming_the_PineTime</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 147456}], "main_ram_size": 147456, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "LPUART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_14"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}, {"label": "PWM_15"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_g0b1re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo G0B1RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-g0b1re\">\n<span id=\"nucleo-g0b1re-board\"></span><h1>ST Nucleo G0B1RE<a class=\"headerlink\" href=\"#st-nucleo-g0b1re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo G0B1RE board features an ARM Cortex-M0+ based STM32G0B1RE MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo G0B1RE board:</p>\n<ul>\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Board connectors:</p>\n<ul class=\"simple\">\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>5V_USB_STLK from ST-Link USB connector</p></li>\n<li><p>VIN (7 - 12V) from ARDUINO connector or ST morpho connector</p></li>\n<li><p>E5V from ST morpho connector</p></li>\n<li><p>5V_USB_CHG from ST-LINK USB connector</p></li>\n<li><p>3.3V on ARDUINO connector or ST morpho connector</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD4), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_g0b1re.jpg\"><img alt=\"Nucleo G0B1RE\" class=\"align-center\" src=\"../../../../_images/nucleo_g0b1re.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g0b1re.html\">Nucleo G0B1RE website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo G0B1RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32G0B1RE in LQFP64 package</p></li>\n<li><p>ARM 32-bit Cortex-M0+ CPU</p></li>\n<li><p>64 MHz max CPU frequency</p></li>\n<li><p>Voltage range from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>144 kB SRAM</p></li>\n<li><p>32-bit timers(1)</p></li>\n<li><p>16-bit timers(11)</p></li>\n<li><p>watchdogs(2)</p></li>\n<li><p>systick(1)</p></li>\n<li><p>Calendar RTC with alarm and periodic wakeup</p></li>\n<li><p>I2C(3)</p></li>\n<li><p>USART(6)</p></li>\n<li><p>LPUART(2)</p></li>\n<li><p>32 Mbit/s SPI(3) multiplexed with I2S(2)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>USB 2.0 FS device (crystal-less) and host controller(1)</p></li>\n<li><p>USB Type-C Power Delivery controller</p></li>\n<li><p>CAN-FD(2)</p></li>\n<li><p>GPIO (up to 94) with external interrupt capability</p></li>\n<li><p>Tamper Pins(3)</p></li>\n<li><p>12-bit ADC with 16 channels</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>Analog Comperator(3)</p></li>\n<li><p>12-channel DMA</p></li>\n</ul>\n<p>More information about STM32G0B1RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g0b1re.html\">G0B1RE on www.st.com</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00371828.pdf\">STM32G0B1 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_g0b1re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arm memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_g0b1re/nucleo_g0b1re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PC4/PC5</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PA11/PA12</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PB0/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI : PB12/PB13/PB14/PB15</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD4       : PA5</p></li>\n<li><p>PWM       : PA6</p></li>\n<li><p>ADC1 IN0  : PA0</p></li>\n<li><p>ADC1 IN1  : PA1</p></li>\n<li><p>DAC1_OUT1 : PA4</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00452640.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_g0b1re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo G0B1RE board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<p>This interface is not yet supported by the openocd version included in the Zephyr SDK.\nBut JLink, STM32CubeProgrammer and Pyocd interfaces are supported.\nPyocd support is currently limited: As the stm32g0b1 target causes issues,\nthe stm32g071 target is used. For STM32G0 support pyocd needs additional target\ninformation, which can be installed by adding “pack” support with the\nfollowing pyocd command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd pack --update\n<span class=\"gp\">$ </span>pyocd pack --install stm32g0\n</pre></div>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-g0b1re\">\n<h4>Flashing an application to Nucleo G0B1RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-g0b1re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g0b1re samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_g0b1re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-g0b1re.html\">http://www.st.com/en/evaluation-tools/nucleo-g0b1re.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00371828.pdf\">http://www.st.com/resource/en/reference_manual/dm00371828.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00452640.pdf\">http://www.st.com/resource/en/user_manual/dm00452640.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32g0b1re.html\">http://www.st.com/en/microcontrollers/stm32g0b1re.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "DDR SYSTEM", "size": 1610612736}, {"label": "TCMU SYSTEM", "size": 32768}, {"label": "OCRAM SYSTEM", "size": 131072}, {"label": "OCRAM_S SYSTEM", "size": 32768}], "main_ram_size": 1610612736, "gpio": {"count": 7, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 7, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "colibri_imx7d_m4", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP i.MX 7 Computer on Module - Colibri iMX7</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-i-mx-7-computer-on-module-colibri-imx7\">\n<span id=\"colibri-imx7d-m4\"></span><h1>NXP i.MX 7 Computer on Module - Colibri iMX7<a class=\"headerlink\" href=\"#nxp-i-mx-7-computer-on-module-colibri-imx7\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX7 SoC is a Hybrid multi-core processor composed by Single/Dual Cortex A7\ncore and Single Cortex M4 core.\nZephyr was ported to run on the M4 core. In a later release, it will also\ncommunicate with the A7 core (running Linux) via RPmsg.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/colibri_imx7d_m4.png\"><img alt=\"Colibri-iMX7\" class=\"align-center\" src=\"../../../../_images/colibri_imx7d_m4.png\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>i.MX7 Single/Dual Cortex A7 (800MHz/1.0GHz) core and Single Cortex M4 (200MHz) core</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>RAM -&gt; A7: 256MB, 512MB and 1GB</p></li>\n<li><p>RAM -&gt; M4: 3x32KB (TCML, TCMU, OCRAM_S), 1x128KB (OCRAM) and 1x256MB (DDR)</p></li>\n<li><p>Flash -&gt; A7: 4Gb eMMC and 512Mb NAND</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>RGB 1920x1080x24bpp</p></li>\n<li><p>4-wire Resistive touch</p></li>\n</ul>\n</li>\n<li><p>Multimedia</p>\n<ul>\n<li><p>1x Camera Parallel Interface</p></li>\n<li><p>1x Analog Audio Line in (Stereo)</p></li>\n<li><p>1x Analog Audio Mic in (Mono)</p></li>\n<li><p>1x Analog Audio Headphone out (Stereo)</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>USB 2.0 OTG (High Speed)</p></li>\n<li><p>USB 2.0 host (High Speed)</p></li>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n<li><p>4x I2C</p></li>\n<li><p>4x SPI</p></li>\n<li><p>7x UART</p></li>\n<li><p>1x IrDA</p></li>\n<li><p>20x PWM</p></li>\n<li><p>Up to 125 GPIO</p></li>\n<li><p>4x Analog Input (12 Bit)</p></li>\n<li><p>2x SDIO/SD/MMC (8 Bit)</p></li>\n<li><p>2x CAN</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the i.MX     7 SoC, Colibri iMX7 Computer on Module\nand Colibri Evaluation Board, see these references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-7-processors:IMX7-SERIES?fsrch=1&amp;sr=1&amp;pageNum=1\">i.MX 7 Series Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX7DCEC.pdf\">i.MX 7 Dual Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.toradex.com/computer-on-modules/colibri-arm-family/nxp-freescale-imx7\">Colibri iMX7 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://developer.toradex.com/products/colibri-imx7\">Colibri iMX7 User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://docs.toradex.com/103125-colibri-arm-som-imx7-datasheet.pdf\">Colibri iMX7 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.toradex.com/products/carrier-board/colibri-evaluation-carrier-board\">Colibri Evaluation Board Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://docs.toradex.com/102284-colibri-evaluation-board-datasheet.pdf\">Colibri Evaluation Board Datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Colibri iMX7D Computer on Module with Colibri Evaluation Board configuration\nsupports the following hardware features on the Cortex M4 Core:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/colibri_imx7d_m4/colibri_imx7d_m4_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Colibri iMX7D Computer on Module with Colibri Evaluation Board\nwas tested with the following pinmux controller configuration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART_B RXD</p></td>\n<td><p>UART2_TXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART_B TXD</p></td>\n<td><p>UART2_RXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SODIMM_135</p></td>\n<td><p>GPIO1_IO02</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SODIMM_133</p></td>\n<td><p>GPIO2_IO26</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SODIMM_194</p></td>\n<td><p>I2C4_SDA</p></td>\n<td><p>I2C_SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SODIMM_196</p></td>\n<td><p>I2C4_SCL</p></td>\n<td><p>I2C_SCL</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SODIMM_59</p></td>\n<td><p>PWM1/GPIO1_IO08</p></td>\n<td><p>PWM</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The M4 Core is configured to run at a 200 MHz clock speed.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The iMX7D SoC has seven UARTs. The number 2 is configured for the console and\nthe remaining are not used/tested.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Colibri iMX7D doesn’t have QSPI flash for the M4 and it needs to be started by\nthe A7 core. The A7 core is responsible to load the M4 binary application into the\nRAM, put the M4 in reset, set the M4 Program Counter and Stack Pointer, and get\nthe M4 out of reset.\nThe A7 can perform these steps at bootloader level or after the Linux system has\nbooted.</p>\n<p>The M4 can use up to 5 different RAMs. These are the memory mapping for A7 and M4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A7</p></th>\n<th class=\"head\"><p>Cortex-M4 (System Bus)</p></th>\n<th class=\"head\"><p>Cortex-M4 (Code Bus)</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0x80000000-0xFFFFFFFF</p></td>\n<td><p>0x80000000-0xDFFFFFFF</p></td>\n<td><p>0x10000000-0x1FFEFFFF</p></td>\n<td><p>2048MB (less for M4)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>0x20200000-0x2021FFFF</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x00807FFF</p></td>\n<td><p>0x20000000-0x20007FFF</p></td>\n<td></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCML</p></td>\n<td><p>0x007F8000-0x007FFFFF</p></td>\n<td></td>\n<td><p>0x1FFF8000-0x1FFFFFFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>OCRAM_S</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>0x20180000-0x20187FFF</p></td>\n<td><p>0x00000000-0x00007FFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI Flash</p></td>\n<td></td>\n<td></td>\n<td><p>0x08000000-0x0BFFFFFF</p></td>\n<td><p>64MB</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a> from page 190 (section 2.1.2 and 2.1.3)</p></li>\n<li><p><a class=\"reference external\" href=\"https://developer.toradex.com/knowledge-base/freertos-on-the-cortex-m4-of-a-colibri-imx7#Memory_areas\">Toradex Wiki</a></p></li>\n</ul>\n<p>At compilation time you have to choose which RAM will be used. This configuration is\ndone in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/colibri_imx7d_m4/colibri_imx7d_m4.dts</span></code> with “zephyr,flash” (when CONFIG_XIP=y) and “zephyr,sram”\nproperties. The available configurations are:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;ddr_code\n- &amp;tcml_code\n- &amp;ocram_code\n- &amp;ocram_s_code\n- &amp;ocram_pxp_code\n- &amp;ocram_epdc_code\n\n\"zephyr,sram\"\n- &amp;ddr_sys\n- &amp;tcmu_sys\n- &amp;ocram_sys\n- &amp;ocram_s_sys\n- &amp;ocram_pxp_sys\n- &amp;ocram_epdc_sys\n</pre></div>\n</div>\n<p>Below you will find the instructions to load and run Zephyr on M4 from A7 using u-boot.</p>\n<p>Copy the compiled zephyr.bin to the first EXT partition of the SD card and plug into the\nboard. Power it up and stop the u-boot execution.\nSet the u-boot environment variables and run the zephyr.bin from the appropriated memory\nconfigured in the Zephyr compilation:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">setenv bootm4 'ext4load mmc 0:1 $m4addr $m4fw &amp;&amp; dcache flush &amp;&amp; bootaux $m4addr'</span>\n<span class=\"gp\"># </span>TCML\n<span class=\"go\">setenv m4tcml 'setenv m4fw zephyr.bin; setenv m4addr 0x007F8000'</span>\n<span class=\"go\">setenv bootm4tcml 'run m4tcml &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcml</span>\n<span class=\"gp\"># </span>TCMU\n<span class=\"go\">setenv m4tcmu 'setenv m4fw zephyr.bin; setenv m4addr 0x00800000'</span>\n<span class=\"go\">setenv bootm4tcmu 'run m4tcmu &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcmu</span>\n<span class=\"gp\"># </span>OCRAM\n<span class=\"go\">setenv m4ocram 'setenv m4fw zephyr.bin; setenv m4addr 0x00900000'</span>\n<span class=\"go\">setenv bootm4ocram 'run m4ocram &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocram</span>\n<span class=\"gp\"># </span>OCRAM_S\n<span class=\"go\">setenv m4ocrams 'setenv m4fw zephyr.bin; setenv m4addr 0x00180000'</span>\n<span class=\"go\">setenv bootm4ocrams 'run m4ocrams &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocrams</span>\n<span class=\"gp\"># </span>DDR\n<span class=\"go\">setenv m4ddr 'setenv m4fw zephyr.bin; setenv m4addr 0x80000000'</span>\n<span class=\"go\">setenv bootm4ddr 'run m4ddr &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ddr</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Download and install <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack\">J-Link Tools</a> and <a class=\"reference external\" href=\"https://wiki.segger.com/images/8/86/NXP_iMX7D_Connect_CortexM4.JLinkScript\">NXP iMX7D Connect CortexM4.JLinkScript</a>.</p>\n<p>To run Zephyr Binary using J-Link create the following script in order to\nget the Program Counter and Stack Pointer from zephyr.bin.</p>\n<p>get-pc-sp.sh:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">#</span>!/bin/sh\n\n<span class=\"go\">firmware=$1</span>\n\n<span class=\"go\">pc=$(od -An -N 8 -t x4 $firmware | awk '{print $2;}')</span>\n<span class=\"go\">sp=$(od -An -N 8 -t x4 $firmware | awk '{print $1;}')</span>\n\n<span class=\"go\">echo pc=$pc</span>\n<span class=\"go\">echo sp=$sp</span>\n</pre></div>\n</div>\n<p>Get the SP and PC from firmware binary: <code class=\"docutils literal notranslate\"><span class=\"pre\">./get-pc-sp.sh</span> <span class=\"pre\">zephyr.bin</span></code></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">pc=00900f01</span>\n<span class=\"go\">sp=00905020</span>\n</pre></div>\n</div>\n<p>Plug in the J-Link into the board and PC and run the J-Link command line tool:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">/usr/bin/JLinkExe -device Cortex-M4 -if JTAG -speed 4000 -autoconnect 1 -jtagconf -1,-1 -jlinkscriptfile iMX7D_Connect_CortexM4.JLinkScript</span>\n</pre></div>\n</div>\n<p>The following steps are necessary to run the zephyr.bin:\n1. Put the M4 core in reset\n2. Load the binary in the appropriate addr (TMCL, TCMU, OCRAM, OCRAM_S or DDR)\n3. Set PC (Program Counter)\n4. Set SP (Stack Pointer)\n5. Get the M4 core out of reset</p>\n<p>Issue the following commands inside J-Link commander:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">w4 0x3039000C 0xAC</span>\n<span class=\"go\">loadfile zephyr.bin,0x00900000</span>\n<span class=\"go\">w4 0x00180000 00900f01</span>\n<span class=\"go\">w4 0x00180004 00905020</span>\n<span class=\"go\">w4 0x3039000C 0xAA</span>\n</pre></div>\n</div>\n<p>With these mechanisms, applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">colibri_imx7d_m4</span></code> board\nconfiguration can be built and debugged in the usual way (see\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h3>References<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/application-note/AN5317.pdf\">Loading Code on Cortex-M4 from Linux for the i.MX 6SoloX and i.MX 7Dual/7Solo Application Processors</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://wiki.segger.com/IMX7D\">J-Link iMX7D Instructions</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52_adafruit_feather", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52 Adafruit Feather</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52-adafruit-feather\">\n<span id=\"id1\"></span><h1>nRF52 Adafruit Feather<a class=\"headerlink\" href=\"#nrf52-adafruit-feather\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52 Adafruit Bluefruit Feather hardware provides\nsupport for the Nordic Semiconductor nRF52832 ARM Cortex-M4F CPU and\nthe following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>UART</p></li>\n<li><p>GPIO</p></li>\n<li><p>FLASH</p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52_adafruit_feather.png\"><img alt=\"nRF52 Adafruit Feather Board\" src=\"../../../../_images/nrf52_adafruit_feather.png\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF52 Adafruit Feather Board (Credit: Adafruit)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board and its features can be found at the\n<a class=\"reference external\" href=\"https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/introduction\">Adafruit Feather nRF52 Bluefruit Learning Guide</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">4</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>nRF52832 ARM Cortex-M4F processor at 64 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>512 KiB flash memory and 64 KiB of SRAM</p></li>\n<li><p>Battery connector and charger for 3.7 V lithium polymer batteries</p></li>\n<li><p>Charging indicator LED</p></li>\n<li><p>2 User LEDs</p></li>\n<li><p>Reset button</p></li>\n<li><p>SWD connector</p></li>\n<li><p>USB serial converter</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nRF52 Adafruit Feather board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>on-chip</p></td>\n<td><p>console</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/introduction\">Adafruit Feather nRF52 Bluefruit Learning Guide</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id5\">1</a> has detailed\ninformation about the board including <a class=\"reference external\" href=\"https://cdn-learn.adafruit.com/assets/assets/000/046/210/original/Feather_NRF52_Pinout_v1.2.pdf?1504807075\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">3</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/assets/39913\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">2</a>.</p>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (red) = P0.17</p></li>\n<li><p>LED1 (blue) = P0.19</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>DFU = SW0 = P0.20</p></li>\n<li><p>RESET = SW1 = P0.21/reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52_adafruit_feather</span></code> board is available in two different versions:</p>\n<ul class=\"simple\">\n<li><dl class=\"simple\">\n<dt><a class=\"reference external\" href=\"https://www.adafruit.com/product/3574\">Adafruit Feather nRF52 Pro with myNewt Bootloader</a> <a class=\"footnote-reference brackets\" href=\"#id14\" id=\"id15\">6</a></dt><dd><p>This board version is the recommended one to use. It has the SWD header\nalready populated and comes with the  Mynewt serial bootloader installed by\ndefault.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt><a class=\"reference external\" href=\"https://www.adafruit.com/product/3406\">Adafruit Feather nRF52 Bluefruit LE</a> <a class=\"footnote-reference brackets\" href=\"#id12\" id=\"id13\">5</a></dt><dd><p>This board is identical to the board above, but the SWD header is not\npopulated and ships with an Arduino friendly bootloader. To be able to work\nwith this version a 2*5pin 0.5” SWD header (e.g. <a class=\"reference external\" href=\"https://www.adafruit.com/product/752\">Adafruit SWD connector</a> <a class=\"footnote-reference brackets\" href=\"#id16\" id=\"id17\">7</a>)\nneeds to be soldered.</p>\n</dd>\n</dl>\n</li>\n</ul>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52_adafruit_feather</span></code> board configuration can be\nbuilt, flashed, and debugged in the usual way. See <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details on building and running.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Flashing Zephyr onto the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52_adafruit_feather</span></code> board requires an external\nJ-Link programmer. The programmer is attached to the X1 SWD header.</p>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52_adafruit_feather samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Adafruit nRF52 Feather to your host computer using USB</p></li>\n<li><p>Run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF52 Adafruit Feather\nboard can be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>.</p>\n</li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52_adafruit_feather samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52_adafruit_feather</span></code> board does not have an on-board J-Link debug IC\nas some nRF5x development boards, however, instructions from the\n<a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page also apply to this board, with the additional step\nof connecting an external debugger.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-on-the-nrf52-adafruit-feather\">\n<h2>Testing the LEDs and buttons on the nRF52 Adafruit Feather<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-on-the-nrf52-adafruit-feather\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are several samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/fade_led/README.html#fade-led-sample\"><span class=\"std std-ref\">Fade LED</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky_pwm/README.html#blink-led-sample\"><span class=\"std std-ref\">PWM Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/threads/README.html#b-carbon-multi-thread-blinky\"><span class=\"std std-ref\">Basic Thread Example</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf52_adafruit_feather/board.h\">boards/arm/nrf52_adafruit_feather/board.h</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id4\">1</a>,<a href=\"#id5\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/introduction\">https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/introduction</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/assets/39913\">https://learn.adafruit.com/assets/39913</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://cdn-learn.adafruit.com/assets/assets/000/046/210/original/Feather_NRF52_Pinout_v1.2.pdf?1504807075\">https://cdn-learn.adafruit.com/assets/assets/000/046/210/original/Feather_NRF52_Pinout_v1.2.pdf?1504807075</a></p>\n</dd>\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id11\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id12\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id13\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.adafruit.com/product/3406\">https://www.adafruit.com/product/3406</a></p>\n</dd>\n<dt class=\"label\" id=\"id14\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id15\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.adafruit.com/product/3574\">https://www.adafruit.com/product/3574</a></p>\n</dd>\n<dt class=\"label\" id=\"id16\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id17\">7</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.adafruit.com/product/752\">https://www.adafruit.com/product/752</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_em", "arch": null, "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "sram1", "size": 294912}, {"label": "sram4", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_h745zi_q_m4", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "decawave_dwm1001_dev", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Decawave DWM1001</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"decawave-dwm1001\">\n<span id=\"decawave-dwm1001-dev\"></span><h1>Decawave DWM1001<a class=\"headerlink\" href=\"#decawave-dwm1001\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The DWM1001 development board includes the DWM1001 module, battery\nconnector and charging circuit, LEDs, buttons, Raspberry-Pi and USB\nconnector. In addition, the board comes with J-Link OB adding\ndebugging and Virtual COM Port capabilities.</p>\n<p>See <a class=\"reference external\" href=\"https://www.decawave.com/product/dwm1001-development-board\">Decawave DWM1001-DEV website</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a> for more information about the development\nboard, <a class=\"reference external\" href=\"https://www.decawave.com/product/dwm1001-module\">Decawave DWM1001 website</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> about the board itself, and <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832\">nRF52832 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">decawave_dwm1001_dev</span></code> board configuration can be built,\nflashed, and debugged in the usual way. See <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details on building and running.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF52 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b decawave_dwm1001_dev samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.decawave.com/product/dwm1001-module\">https://www.decawave.com/product/dwm1001-module</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.decawave.com/product/dwm1001-development-board\">https://www.decawave.com/product/dwm1001-development-board</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 7, "instances": [{"label": "GPIO_8B_0"}, {"label": "GPIO_8B_1"}, {"label": "GPIO_8B_2"}, {"label": "GPIO_8B_3"}, {"label": "GPIO_4B_0"}, {"label": "GPIO_4B_1"}, {"label": "GPIO_4B_2"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "iotdk", "arch": "arc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARC Boards</a> »</li>\n<li>DesignWare(R) ARC(R) IoT Development Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"designware-r-arc-r-iot-development-kit\">\n<span id=\"iotdk\"></span><h1>DesignWare(R) ARC(R) IoT Development Kit<a class=\"headerlink\" href=\"#designware-r-arc-r-iot-development-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The DesignWare(R) ARC(R) IoT Development Kit is a versatile platform that\nincludes the necessary hardware and software to accelerate software\ndevelopment and debugging of sensor fusion, voice recognition, and face\ndetection designs. The ARC IoT Development Kit includes a silicon\nimplementation of the ARC Data Fusion IP Subsystem running at 144 MHz on\nSMIC’s 55-nm ultra-low power process, and a rich set of peripherals commonly\nused in IoT designs such as USB, UART, SPI, I2C, PWM, SDIO, and ADCs.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/iotdk.jpg\"><img alt=\"DesignWare(R) ARC(R)IoT Development Kit (synopsys.com)\" class=\"align-center\" src=\"../../../../_images/iotdk.jpg\" style=\"width: 442px;\"/></a>\n<p>For details about the board, see: <a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc_iot_development_kit\">ARC IoT Development Kit\n(IoTDK)</a></p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>For hardware feature details, refer to : <a class=\"reference external\" href=\"http://embarc.org/embarc_osp/doc/build/html/board/iotdk.html\">ARC IoT Development Kit</a></p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"required-hardware-and-software\">\n<h3>Required Hardware and Software<a class=\"headerlink\" href=\"#required-hardware-and-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To use Zephyr RTOS applications on the IoT Development Kit board, a few\nadditional pieces of hardware are required.</p>\n<ul class=\"simple\">\n<li><p>A micro USB cable provides power to the board; however, if the\nboard is to run standalone, the universal switching power adaptor (110-240V\nAC to 5V DC), provided in the package, can be used to power the board.</p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">The Zephyr SDK</span></a></p></li>\n<li><p>Terminal emulator software for use with the USB-UART. Suggestion:\n<a class=\"reference external\" href=\"http://www.putty.org\">Putty Website</a>.</p></li>\n<li><p>(optional) A collection of Pmods, Arduino modules, or Mikro modules.\nSee <a class=\"reference external\" href=\"http://store.digilentinc.com/pmod-modules\">Digilent Pmod Modules</a> or develop your custom interfaces to attach\nto the Pmod connector.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-the-arc-iot-development-kit\">\n<h3>Set up the ARC IoT Development Kit<a class=\"headerlink\" href=\"#set-up-the-arc-iot-development-kit\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run Zephyr application on IoT Development Kit, you need to\nsetup the board correctly.</p>\n<ul class=\"simple\">\n<li><p>Connect the digilent usb cable from your host to the board.</p></li>\n<li><p>Connect the 5V DC power supply to your board (optional).</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-zephyr-software\">\n<h3>Set up Zephyr Software<a class=\"headerlink\" href=\"#set-up-zephyr-software\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n<div class=\"section\" id=\"building-sample-applications\">\n<h3>Building Sample Applications<a class=\"headerlink\" href=\"#building-sample-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can try many of the sample applications or tests, but let us discuss\nthe one called <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.\nIt is found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/hello_world\">samples/hello_world</a>.</p>\n<div class=\"section\" id=\"configuring\">\n<h4>Configuring<a class=\"headerlink\" href=\"#configuring\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You may need to write a prj_arc.conf file if the sample doesn’t have one.\nNext, you can use the menuconfig rule to configure the target. By specifying\n<code class=\"docutils literal notranslate\"><span class=\"pre\">iotdk</span></code> as the board configuration, you can select the ARC IoT Development\nKit board support for Zephyr.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b iotdk samples/hello_world</span>\n<span class=\"go\">west build -t menuconfig</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building\">\n<h4>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build an application in the usual way.  Refer to\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b iotdk samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"connecting-serial-output\">\n<h3>Connecting Serial Output<a class=\"headerlink\" href=\"#connecting-serial-output\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the default configuration, Zephyr’s IoT Development Kit images support\nserial output via the USB-UART on the board.  To enable serial output:</p>\n<ul class=\"simple\">\n<li><p>Open a serial port emulator (i.e. on Linux minicom, putty, screen, etc)</p></li>\n<li><p>Specify the tty driver name, for example, on Linux this may be\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code></p></li>\n<li><p>Set the communication settings to:</p></li>\n</ul>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Parameter</p></th>\n<th class=\"head\"><p>Value</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Baud:</p></td>\n<td><p>115200</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Data:</p></td>\n<td><p>8 bits</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Parity:</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Stopbits:</p></td>\n<td><p>1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using the latest version of Zephyr SDK(&gt;=0.9), you can debug and flash IoT\nDevelopment Kit directly.</p>\n<p>One option is to build and debug the application using the usual\nZephyr build system commands.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b iotdk &lt;my app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>At this point you can do your normal debug session. Set breakpoints and then\n‘c’ to continue into the program.</p>\n<p>The other option is to launch a debug server, as follows.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b iotdk &lt;my app&gt;</span>\n<span class=\"go\">west debugserver</span>\n</pre></div>\n</div>\n<p>Then connect to the debug server at the IoT Development Kit from a second\nconsole, from the build directory containing the output <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> &lt;my app&gt;\n<span class=\"gp\">$ </span><span class=\"nv\">$ZEPHYR_SDK_INSTALL_DIR</span>/arc-zephyr-elf/bin/arc-zephyr-elf-gdb zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote localhost:3333</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b main</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">c</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you just want to download the application to the IoT Development Kit’s CCM\nand run, you can do so in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b iotdk &lt;my app&gt;</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This command still uses openocd and gdb to load the application elf file to\nIoT Development Kit, but it will load the application and immediately run. If\npower is removed, the application will be lost since it wasn’t written to flash.</p>\n<p>Most of the time you will not be flashing your program but will instead debug\nit using openocd and gdb. The program can be download via the USB cable into\nthe code and data memories.</p>\n<p>When you are ready to deploy the program so that it boots up automatically on\nreset or power-up, you can follow the steps to place the program on SPI-FLASH\nor internal eFlash.</p>\n<p>For instructions on how to write your program to FLASH, refer to the\ndocumentation on the IoT Development Kit at the <a class=\"reference external\" href=\"https://www.embarc.org\">embARC website</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"release-notes\">\n<h2>Release Notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "disco_l475_iot1", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Disco L475 IOT01 (B-L475E-IOT01A)</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-disco-l475-iot01-b-l475e-iot01a\">\n<span id=\"disco-l475-iot1-board\"></span><h1>ST Disco L475 IOT01 (B-L475E-IOT01A)<a class=\"headerlink\" href=\"#st-disco-l475-iot01-b-l475e-iot01a\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The B-L475E-IOT01A Discovery kit for IoT node allows users to develop\napplications with direct connection to cloud servers.\nThe Discovery kit enables a wide diversity of applications by exploiting\nlow-power communication, multiway sensing and ARM® Cortex®-M4 core-based\nSTM32L4 Series features.</p>\n<p>This kit provides:</p>\n<ul class=\"simple\">\n<li><p>64-Mbit Quad-SPI (Macronix) Flash memory</p></li>\n<li><p>Bluetooth® V4.1 module (SPBTLE-RF)</p></li>\n<li><p>Sub-GHz (868 or 915 MHz) low-power-programmable RF module (SPSGRF-868 or SPSGRF-915)</p></li>\n<li><p>Wi-Fi® module Inventek ISM43362-M3G-L44 (802.11 b/g/n compliant)</p></li>\n<li><p>Dynamic NFC tag based on M24SR with its printed NFC antenna</p></li>\n<li><p>2 digital omni-directional microphones (MP34DT01)</p></li>\n<li><p>Capacitive digital sensor for relative humidity and temperature (HTS221)</p></li>\n<li><p>High-performance 3-axis magnetometer (LIS3MDL)</p></li>\n<li><p>3D accelerometer and 3D gyroscope (LSM6DSL)</p></li>\n<li><p>260-1260 hPa absolute digital output barometer (LPS22HB)</p></li>\n<li><p>Time-of-Flight and gesture-detection sensor (VL53L0X)</p></li>\n<li><p>2 push-buttons (user and reset)</p></li>\n<li><p>USB OTG FS with Micro-AB connector</p></li>\n<li><dl class=\"simple\">\n<dt>Expansion connectors:</dt><dd><ul>\n<li><p>Arduino™ Uno V3</p></li>\n<li><p>PMOD</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Flexible power-supply options:</dt><dd><ul>\n<li><p>ST LINK USB VBUS or external sources</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability:</dt><dd><ul>\n<li><p>mass storage, virtual COM port and debug port</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/disco_l475_iot1.jpg\"><img alt=\"Disco L475 IoT1\" class=\"align-center\" src=\"../../../../_images/disco_l475_iot1.jpg\" style=\"width: 531px; height: 354px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/b-l475e-iot01a.html\">Disco L475 IoT1 website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L475VG SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 120 nA Standby mode and 100 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, frequency up to 80 MHz, 100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><dl class=\"simple\">\n<dt>Clock Sources:</dt><dd><ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><dl class=\"simple\">\n<dt>16x timers:</dt><dd><ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Up to 114 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><dl class=\"simple\">\n<dt>Memories</dt><dd><ul>\n<li><p>Up to 1 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 128 KB of SRAM including 32 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><dl class=\"simple\">\n<dt>Rich analog peripherals (independent supply)</dt><dd><ul>\n<li><p>2x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>18x communication interfaces</dt><dd><ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32L475VG can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32l475vg.html\">STM32L475VG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00083560.pdf\">STM32L475 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr Disco L475 IoT board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>QSPI NOR</p></td>\n<td><p>on-chip</p></td>\n<td><p>off-chip flash</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/disco_l475_iot1/disco_l475_iot1_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Disco L475 IoT Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<p>For detailed information about available pins please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00347848.pdf\">STM32 Disco L475 IoT1 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_4 TX/RX : PA0/PA1 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB11 (Sensor I2C bus)</p></li>\n<li><p>I2C3 SCL/SDA : PC0/PC1</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PA2/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI3 SCK/MISO/MOSI : PC10/PC11/PC12 (BT SPI bus)</p></li>\n<li><p>PWM_2_CH1 : PA15</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD2 : PA5</p></li>\n<li><p>ADC12_IN5 : PA0</p></li>\n<li><p>ADC123_IN3 : PC2</p></li>\n<li><p>ADC123_IN4 : PC3</p></li>\n<li><p>ADC12_IN13 : PC4</p></li>\n<li><p>ADC12_IN14 : PC5</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Disco L475 IoT System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Disco L475 IoT board has 6 U(S)ARTs. The Zephyr console output is assigned to UART1.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">disco_l475_iot1</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Disco L475 IoT board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-disco-l475-iot\">\n<h4>Flashing an application to Disco L475 IoT<a class=\"headerlink\" href=\"#flashing-an-application-to-disco-l475-iot\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Connect the Disco L475 IoT to your host computer using the USB port, then\nrun a serial host program to connect with your Nucleo board. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b disco_l475_iot1 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b disco_l475_iot1 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32l562e_dk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32L562E-DK Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32l562e-dk-discovery\">\n<span id=\"stm32l562e-dk-board\"></span><h1>ST STM32L562E-DK Discovery<a class=\"headerlink\" href=\"#st-stm32l562e-dk-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L562E-DK Discovery kit is designed as a complete demonstration and\ndevelopment platform for STMicroelectronics Arm® Cortex®-M33 core-based\nSTM32L562QEI6QU microcontroller with TrustZone®. Here are some highlights of\nthe STM32L562E-DK Discovery board:</p>\n<ul class=\"simple\">\n<li><p>STM32L562QEI6QU microcontroller featuring 512 Kbytes of Flash memory and 256 Kbytes of SRAM in BGA132 package</p></li>\n<li><p>1.54” 240 x 240 pixel-262K color TFT LCD module with parallel interface and touch-control panel</p></li>\n<li><p>USB Type-C™ Sink device FS</p></li>\n<li><p>On-board energy meter: 300 nA to 150 mA measurement range with a dedicated USB interface</p></li>\n<li><p>SAI Audio CODEC</p></li>\n<li><p>MEMS digital microphones</p></li>\n<li><p>512-Mbit Octal-SPI Flash memory</p></li>\n<li><p>Bluetooth® V4.1 Low Energy module</p></li>\n<li><p>iNEMO 3D accelerometer and 3D gyroscope</p></li>\n<li><p>Board connectors</p>\n<ul>\n<li><p>STMod+ expansion connector with fan-out expansion board for Wi‑Fi®, Grove and mikroBUS™ compatible connectors</p></li>\n<li><p>Pmod™ expansion connector</p></li>\n<li><p>Audio MEMS daughterboard expansion connector</p></li>\n<li><p>ARDUINO® Uno V3 expansion connector</p></li>\n</ul>\n</li>\n<li><p>Flexible power-supply options</p>\n<ul>\n<li><p>ST-LINK</p></li>\n<li><p>USB VBUS</p></li>\n<li><p>external sources</p></li>\n</ul>\n</li>\n<li><p>On-board STLINK-V3E debugger/programmer with USB re-enumeration capability:</p>\n<ul>\n<li><p>mass storage</p></li>\n<li><p>Virtual COM port</p></li>\n<li><p>debug port</p></li>\n</ul>\n</li>\n<li><p>2 user LEDs</p></li>\n<li><p>User and reset push-buttons</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32l562e_dk.jpg\"><img alt=\"STM32L562E-DK Discovery\" class=\"align-center\" src=\"../../../../_images/stm32l562e_dk.jpg\" style=\"width: 460px; height: 474px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/stm32l562e-dk.html\">STM32L562E-DK Discovery website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L562xx devices are an ultra-low-power microcontrollers family (STM32L5\nSeries) based on the high-performance Arm® Cortex®-M33 32-bit RISC core.\nThey operate at a frequency of up to 110 MHz.</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 108 nA Standby mode and 62 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex® -M33 CPU with TrustZone® and FPU.</p></li>\n<li><p>Performance benchmark:</p>\n<ul>\n<li><p>1.5 DMPIS/MHz (Drystone 2.1)</p></li>\n<li><p>442 CoreMark® (4.02 CoreMark® /MHZ)</p></li>\n</ul>\n</li>\n<li><p>Security</p>\n<ul>\n<li><p>Arm® TrustZone® and securable I/Os memories and peripherals</p></li>\n<li><p>Flexible life cycle scheme with RDP (readout protection)</p></li>\n<li><p>Root of trust thanks to unique boot entry and hide protection area (HDP)</p></li>\n<li><p>Secure Firmware Installation thanks to embedded Root Secure Services</p></li>\n<li><p>Secure Firmware Update support with TF-M</p></li>\n<li><p>AES coprocessor</p></li>\n<li><p>Public key accelerator</p></li>\n<li><p>On-the-fly decryption of Octo-SPI external memories</p></li>\n<li><p>HASH hardware accelerator</p></li>\n<li><p>Active tamper and protection temperature, voltage and frequency attacks</p></li>\n<li><p>True Random Number Generator NIST SP800-90B compliant</p></li>\n<li><p>96-bit unique ID</p></li>\n<li><p>512-byte One-Time Programmable for user data</p></li>\n</ul>\n</li>\n<li><p>Clock management:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than  ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>Power management</p>\n<ul>\n<li><p>Embedded regulator (LDO) with three configurable range output to supply the digital circuitry</p></li>\n<li><p>Embedded SMPS step-down converter</p></li>\n<li><p>External SMPS support</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 114 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><p>Up to 22 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>Up to 16 timers and 2 watchdogs</p>\n<ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>3x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>2x SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 512 MB Flash, 2 banks read-while-write</p></li>\n<li><p>512 KB of SRAM including 64 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR, NAND and FRAM memories</p></li>\n<li><p>OCTOSPI memory interface</p></li>\n</ul>\n</li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>3x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n</ul>\n</li>\n<li><p>19x communication interfaces</p>\n<ul>\n<li><p>USB Type-C / USB power delivery controller</p></li>\n<li><p>2.0 full-speed crystal less solution, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>4x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (7x SPIs with USART and OCTOSPI in SPI mode)</p></li>\n<li><p>1xFDCAN</p></li>\n<li><p>1xSDMMC interface</p></li>\n<li><p>2x 14 channel DMA controllers</p></li>\n</ul>\n</li>\n<li><p>CRC calculation unit</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<p>More information about STM32L562QE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers/stm32l562qe.html\">STM32L562QE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00346336.pdf\">STM32L562 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32l562e_dk board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>AES</p></td>\n<td><p>on-chip</p></td>\n<td><p>crypto</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>PWM</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>entropy</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TrustZone</p></td>\n<td><p>on-chip</p></td>\n<td><p>Trusted Firmware-M</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig and dts files:</p>\n<ul class=\"simple\">\n<li><p>Common:</p>\n<ul>\n<li><p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32l562e_dk/stm32l562e_dk_common.dtsi\">boards/arm/stm32l562e_dk/stm32l562e_dk_common.dtsi</a></p></li>\n</ul>\n</li>\n<li><p>Secure target:</p>\n<ul>\n<li><p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32l562e_dk/stm32l562e_dk_defconfig\">boards/arm/stm32l562e_dk/stm32l562e_dk_defconfig</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32l562e_dk/stm32l562e_dk.dts\">boards/arm/stm32l562e_dk/stm32l562e_dk.dts</a></p></li>\n</ul>\n</li>\n<li><p>Non-Secure target:</p>\n<ul>\n<li><p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32l562e_dk/stm32l562e_dk_ns_defconfig\">boards/arm/stm32l562e_dk/stm32l562e_dk_ns_defconfig</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32l562e_dk/stm32l562e_dk_ns.dts\">boards/arm/stm32l562e_dk/stm32l562e_dk_ns.dts</a></p></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L562E-DK Discovery Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00635554.pdf\">STM32L562E-DK Discovery board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>USART_1 TX/RX : PA9/PA10</p></li>\n<li><p>USART_3 TX/RX : PC10/PC11</p></li>\n<li><p>I2C_1 SCL/SDA : PB6/PB7</p></li>\n<li><p>SPI_1 SCK/MISO/MOSI : PG2/PG3/PG4 (BT SPI bus)</p></li>\n<li><p>SPI_3 NSS/SCK/MISO/MOSI : PE0/PG9/PB4/PB5 (Arduino SPI)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD10 : PG12</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>DAC1 : PA4</p></li>\n<li><p>ADC1 : PC4</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L562E-DK System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at\n110MHz, driven by 4MHz medium speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L562E-DK Discovery board has 6 U(S)ARTs. The Zephyr console output is\nassigned to USART1. Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32l562e_dk</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L562E-DK Discovery board includes an ST-LINK/V3E embedded debug tool\ninterface. This interface is not yet supported by the openocd version.\nInstead, support can be enabled on pyocd by adding “pack” support with\nthe following pyocd command:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd pack --update\n<span class=\"gp\">$ </span>pyocd pack --install stm32l562qe\n</pre></div>\n</div>\n<p>STM32L562E-DK Discovery board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32l562e-dk-discovery\">\n<h4>Flashing an application to STM32L562E-DK Discovery<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32l562e-dk-discovery\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM32L562E-DK Discovery to your host computer using the USB port.\nThen build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l562e_dk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! stm32l562e_dk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\">\n<h4>Building Secure/Non-Secure Zephyr applications with Arm® TrustZone®<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications-with-arm-reg-trustzone-reg\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The TF-M integration sample <a class=\"reference internal\" href=\"../../../../samples/tfm_integration/tfm_ipc/README.html#tfm-ipc\"><span class=\"std std-ref\">TF-M IPC</span></a> can be run on a ST STM32L562E-DK Discovery.\nIn TF-M configuration, Zephyr is run on the non-secure domain. A non-secure image\ncan be generated using <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32l562e_dk_ns</span></code> as build target.</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ west build -b stm32l562e_dk_ns path/to/source/directory\n</pre></div>\n</div>\n<p>Note: When building the <code class=\"docutils literal notranslate\"><span class=\"pre\">*_ns</span></code> image with TF-M, <code class=\"docutils literal notranslate\"><span class=\"pre\">build/tfm/postbuild.sh</span></code> bash script\nis run automatically in a post-build step to make some required flash layout changes.</p>\n<p>Once the build is completed, run the following script to initialize the option bytes.</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ build/tfm/regression.sh\n</pre></div>\n</div>\n<p>Finally, to flash the board, run:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ west flash --hex-file build/tfm_merged.hex\n</pre></div>\n</div>\n<p>Note: Check the <code class=\"docutils literal notranslate\"><span class=\"pre\">build/tfm</span></code> directory to ensure that the commands required by these scripts\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">readlink</span></code>, etc.) are available on your system. Please also check <code class=\"docutils literal notranslate\"><span class=\"pre\">STM32_Programmer_CLI</span></code>\n(which is used for initialization) is available in the PATH.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l562e_dk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 524288}, {"label": "sram1", "size": 65536}, {"label": "sram0_shared", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf5340dk_nrf5340_cpunet", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}, {"label": "boot_rom", "size": 131072}], "main_flash_size": 524288, "memory": [{"label": "sramx", "size": 32768}, {"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 65536}, {"label": "sram4", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 1, "instances": [{"label": "HS_LSPI"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso55s28_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_E70", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 393216}], "main_ram_size": 393216, "gpio": {"count": 5, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}, {"label": "PORTE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "sam_e70_xplained", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM E70(B) Xplained</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-e70-b-xplained\">\n<span id=\"sam-e70-xplained\"></span><h1>SAM E70(B) Xplained<a class=\"headerlink\" href=\"#sam-e70-b-xplained\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM E70 Xplained evaluation kit is a development platform to evaluate the\nAtmel SAM E70 series microcontrollers. The current version allows to use both\nIC variations ATSAME70Q21A(B).</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/sam_e70_xplained.png\"><img alt=\"SAM E70 Xplained\" class=\"align-center\" src=\"../../../../_images/sam_e70_xplained.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAME70Q21A(B) ARM Cortex-M7 Processor</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>32.768 kHz crystal oscillator (not populated)</p></li>\n<li><p>AT24MAC402 EEPROM</p></li>\n<li><p>IS42S16100E 16 Mb SDRAM</p></li>\n<li><p>SD card connector</p></li>\n<li><p>Ethernet port</p></li>\n<li><p>Micro-AB USB device</p></li>\n<li><p>Micro-AB USB debug interface supporting CMSIS-DAP, Virtual COM Port and Data\nGateway Interface (DGI)</p></li>\n<li><p>JTAG interface connector</p></li>\n<li><p>One reset and one user pushbutton</p></li>\n<li><p>One green user LED</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sam_e70_xplained board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC via AFEC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/sam_e70_xplained/sam_e70_xplained_defconfig\">boards/arm/sam_e70_xplained/sam_e70_xplained_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"http://www.atmel.com/Images/Atmel-44050-Cortex-M7-Microcontroller-SAM-E70-XPLD-Xplained_User-guide.pdf\">SAME70-XPLD User Guide</a> has detailed information about board connections.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM E70 MCU is configured to use the 12 MHz external oscillator on the board\nwith the on-chip PLL to generate a 300 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ATSAME70Q21 MCU has five UARTs and three USARTs. One of the USARTs is\nconfigured for the console and is available as a Virtual COM Port via EDBG USB\nchip.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Flashing the Zephyr project onto SAM E70 MCU requires the <a class=\"reference external\" href=\"http://openocd.org/\">OpenOCD tool</a>.\nSupport for Atmel SAM E microcontroller series was added in OpenOCD release\n0.10.0, which was added in Zephyr SDK 0.9.2.</p>\n<p>By default a factory new SAM E70 chip will boot SAM-BA boot loader located in\nthe ROM, not the flashed image. This is determined by the value of GPNVM1\n(General-Purpose NVM bit 1). The flash procedure will ensure that GPNVM1 is\nset to 1 changing the default behavior to boot from Flash.</p>\n<p>If your chip has a security bit GPNVM0 set you will be unable to program flash\nmemory or connect to it via a debug interface. The only way to clear GPNVM0\nis to perform a chip erase procedure that will erase all GPNVM bits and the full\ncontents of the SAM E70 flash memory:</p>\n<ul class=\"simple\">\n<li><p>With the board power off, set a jumper on the J200 header.</p></li>\n<li><p>Turn the board power on. The jumper can be removed soon after the power is on\n(flash erasing procedure is started when the erase line is asserted for at\nleast 230ms)</p></li>\n</ul>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Connect the SAM E70 Xplained board to your host computer using the\nUSB debug port. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>\napplication.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_e70_xplained samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n<li><p>To use the SoC variation B IC, you need type “sam_e70b_xplained”.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_e70b_xplained samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>You can flash the image using an external debug adapter such as J-Link\nor ULINK, connected to the 20-pin JTAG header. Supply the name of the\ndebug adapter (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">jlink</span></code>) via an OPENOCD_INTERFACE environment\nvariable. OpenOCD will look for the appropriate interface\nconfiguration in an <code class=\"docutils literal notranslate\"><span class=\"pre\">interface/$(OPENOCD_INTERFACE).cfg</span></code> file on its\ninternal search path.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam_e70_xplained samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>SAM E70 Product Page:</dt><dd><p><a class=\"reference external\" href=\"http://www.atmel.com/products/microcontrollers/arm/sam-e.aspx\">http://www.atmel.com/products/microcontrollers/arm/sam-e.aspx</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_hs_smp", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_sem", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 134217728}], "main_flash_size": 134217728, "memory": [{"label": "itcm", "size": 65536}, {"label": "dtcm", "size": 32768}, {"label": "bram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 3, "instances": [{"label": "DAPLINK_GPIO_0"}, {"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 3, "instances": [{"label": "DAPLINK_QUAD_SPI_0"}, {"label": "DAPLINK_SINGLE_SPI_0"}, {"label": "QUAD_SPI_0"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "arty_a7_arm_designstart_m1", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1020_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1020-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1020-evk\">\n<span id=\"mimxrt1020-evk\"></span><h1>NXP MIMXRT1020-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1020-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1020 expands the i.MX RT crossover processor families by providing\nhigh-performance feature set in low-cost LQFP packages, further simplifying\nboard design and layout for customers. The i.MX RT1020 runs on the Arm®\nCortex®-M7 core at 500 MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1020_evk.jpg\"><img alt=\"MIMXRT1020-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1020_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1021DAG5A MCU</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>256 Mbit SDRAM</p></li>\n<li><p>64 Mbit QSPI Flash</p></li>\n<li><p>TF socket for SD card</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n<li><p>Micro USB host and OTG connectors</p></li>\n<li><p>CAN transceivers</p></li>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>Audio Codec</p></li>\n<li><p>4-pole audio headphone jack</p></li>\n<li><p>Microphone</p></li>\n<li><p>External speaker connection</p></li>\n</ul>\n</li>\n<li><p>Power</p>\n<ul>\n<li><p>5 V DC jack</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 20-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the MIMXRT1020 SoC and MIMXRT1020-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1020-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1020\">i.MX RT1020 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMXRT1020CEC.pdf\">i.MX RT1020 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1020RM\">i.MX RT1020 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/run-time-software/i.mx-developer-resources/i.mx-rt1020-evaluation-kit:MIMXRT1020-EVK\">MIMXRT1020-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1020EVKHUG\">MIMXRT1020-EVK User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1020-EVK-Design-Files\">MIMXRT1020-EVK Design Files</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1020_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SDHC</p></td>\n<td><p>on-chip</p></td>\n<td><p>disk access</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ENET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1020_evk/mimxrt1020_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1020 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_06</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_07</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_08</p></td>\n<td><p>LPUART2_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_09</p></td>\n<td><p>LPUART2_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_14</p></td>\n<td><p>LPI2C1_SCL</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_15</p></td>\n<td><p>LPI2C1_SDA</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B1_02</p></td>\n<td><p>LPI2C4_SCL</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B1_03</p></td>\n<td><p>LPI2C4_SDA</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WAKEUP</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_04</p></td>\n<td><p>ENET_RST</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_08</p></td>\n<td><p>ENET_REF_CLK</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_09</p></td>\n<td><p>ENET_RX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_10</p></td>\n<td><p>ENET_RX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_11</p></td>\n<td><p>ENET_RX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_12</p></td>\n<td><p>ENET_RX_ER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_13</p></td>\n<td><p>ENET_TX_EN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_14</p></td>\n<td><p>ENET_TX_DATA00</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_15</p></td>\n<td><p>ENET_TX_DATA01</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_06</p></td>\n<td><p>ENET_INT</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_41</p></td>\n<td><p>ENET_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_40</p></td>\n<td><p>ENET_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_07</p></td>\n<td><p>USDHC1_VSELECT</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_02</p></td>\n<td><p>USDHC1_CMD</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_03</p></td>\n<td><p>USDHC1_CLK</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_04</p></td>\n<td><p>USDHC1_DATA0</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_05</p></td>\n<td><p>USDHC1_DATA1</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_00</p></td>\n<td><p>USDHC1_DATA2</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_SD_B0_01</p></td>\n<td><p>USDHC1_DATA3</p></td>\n<td><p>SD Card</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_SD_B0_06</p></td>\n<td><p>USDHC1_CD_B</p></td>\n<td><p>SD Card</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1020 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 500 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1020 SoC has eight UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART2</span></code> for the Bluetooth Host Controller Interface (BT HCI), and the\nremaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"option-1-opensda-jlink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-jlink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_MIMXRT1020-EVK\">OpenSDA J-Link MIMXRT1020-EVK Firmware</a>. Check that jumpers J27 and J28\nare <strong>on</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are connected to the OpenSDA microcontroller.</p>\n</div>\n<div class=\"section\" id=\"option-2-jlink-external-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 20-pin connector to J16. Check that jumpers J27 and J28 are\n<strong>off</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are disconnected from the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J25 and J26 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J23.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1020_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW5 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1020_evk</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1020_evk samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! mimxrt1020_evk</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "blackpill_f401ce", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>WeAct Studio Black Pill V3.0</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"weact-studio-black-pill-v3-0\">\n<span id=\"blackpill-f401ce\"></span><h1>WeAct Studio Black Pill V3.0<a class=\"headerlink\" href=\"#weact-studio-black-pill-v3-0\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The WeAct Black Pill V3.0 Board is an extremely low cost and bare-bones\ndevelopment board featuring the STM32F401CE, see <a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f401ce.html\">STM32F401CE website</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">5</a>.\nThis is the 48-pin variant of the STM32F401x series,\nsee <a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00096844.pdf\">STM32F401x reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">6</a>. More info about the board available\n<a class=\"reference external\" href=\"stm32-base-board-page\">here</a> and on <a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1\">WeAct Github</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n<img alt=\"Black Pill V3.0+\" class=\"align-center\" src=\"../../../../_images/blackpill-v3.jpg\"/>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F401CE based Black Pill V3.0+ Board provides the following\nhardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F401CEU6 in UFQFPN48 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>84 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>96 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>1x12-bit, 2.4 MSPS ADC with 16 channels</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>Up to 11 Timers (six 16-bit, two 32-bit, two watchdog timers and a SysTick timer)</p></li>\n<li><p>USART/UART (3)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI/I2S (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 full-speed device/host/OTG controller with on-chip PHY</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>96-bit unique ID</p></li>\n<li><p>RTC</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr blackpill_f401ce board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB OTG FS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/blackpill_f401ce/blackpill_f401ce_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<img alt=\"Black Pill V3.0+ Pinout\" class=\"align-center\" src=\"../../../../_images/Blackpill_Pinout.png\"/>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PA4/PA5/PA6/PA7 (Routed to footprint for external flash)</p></li>\n<li><p>PWM_4_CH1 : PB6</p></li>\n<li><p>PWM_4_CH2 : PB7</p></li>\n<li><p>ADC_1 : PA1</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>USER_LED : PC13</p></li>\n</ul>\n<p>Note on SPI pin mapping: According to the <a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md\">board release notes</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>, there was a brief\nchange for V2.0 specifically where MISO was routed to PB4 for the flash footprint.\nThis was reverted for V2.1+ so that the flash DO pin was routed back to PA6. If using\nV2.0 and en external flash, the pinmux will need to be modified accordingly.</p>\n</div>\n<div class=\"section\" id=\"clock-sources\">\n<h4>Clock Sources<a class=\"headerlink\" href=\"#clock-sources\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board has two external oscillators. The frequency of the slow clock (LSE) is\n32.768 kHz. The frequency of the main clock (HSE) is 25 MHz.</p>\n<p>The default configuration sources the system clock from the PLL, which is\nderived from HSE, and is set at 84MHz, which is the maximum possible frequency\nto achieve a stable USB clock (42MHz).</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 main entry points for flashing STM32F4X SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware). Flashing using the ROM bootloader requires a special activation\npattern, which can be triggered by using the BOOT0 pin.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"installing-dfu-util\">\n<h4>Installing dfu-util<a class=\"headerlink\" href=\"#installing-dfu-util\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is recommended to use at least v0.8 of <a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">dfu-util</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>. The package available in\ndebian/ubuntu can be quite old, so you might have to build dfu-util from source.</p>\n<p>There is also a Windows version which works, but you may have to install the\nright USB drivers with a tool like <a class=\"reference external\" href=\"https://zadig.akeo.ie/\">Zadig</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n</div>\n<div class=\"section\" id=\"flashing-an-application\">\n<h4>Flashing an Application<a class=\"headerlink\" href=\"#flashing-an-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect a USB-C cable and the board should power ON. Force the board into DFU mode\nby keeping the BOOT0 switch pressed while pressing and releasing the NRST switch.</p>\n<p>The dfu-util runner is supported on this board and so a sample can be built and\ntested easily.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b blackpill_f401ce samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board can be debugged by installing the included 100 mil (0.1 inch) header,\nand attaching an SWD debugger to the 3V3 (3.3V), GND, SCK, and DIO\npins on that header.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md\">https://github.com/WeActTC/MiniF4-STM32F4x1/blob/master/HDK/README.md</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://zadig.akeo.ie/\">https://zadig.akeo.ie/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/WeActTC/MiniF4-STM32F4x1\">https://github.com/WeActTC/MiniF4-STM32F4x1</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">http://dfu-util.sourceforge.net/build.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f401ce.html\">http://www.st.com/en/microcontrollers/stm32f401ce.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00096844.pdf\">http://www.st.com/resource/en/reference_manual/dm00096844.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840_blip", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Electronut Labs Blip</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"electronut-labs-blip\">\n<span id=\"nrf52840-blip\"></span><h1>Electronut Labs Blip<a class=\"headerlink\" href=\"#electronut-labs-blip\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Electronut Labs Blip hardware provides support for the Nordic Semiconductor\nnRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52840_blip.jpg\"><img alt=\"Electronut Labs Blip\" src=\"../../../../_images/nrf52840_blip.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Electronut Labs Blip (Credit: Electronut Labs)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board is available at <a class=\"reference external\" href=\"https://github.com/electronut/ElectronutLabs-blip\">https://github.com/electronut/ElectronutLabs-blip</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Blip has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf52840_blip board configuration supports the following\nhardware features currently:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.13</p></li>\n<li><p>LED2 (red)   = P0.14</p></li>\n<li><p>LED3 (blue)  = P0.15</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P1.07</p></li>\n<li><p>Reset = SW5 = P0.18 (can be used as GPIO also)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"uart\">\n<h4>UART<a class=\"headerlink\" href=\"#uart\" title=\"Permalink to this headline\">¶</a></h4>\n<p>BMP does not support hardware flow control, so only RX/TX pins are connected.</p>\n<ul class=\"simple\">\n<li><p>TX = P0.6</p></li>\n<li><p>RX = P0.8</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>I2C pins connected to onboard sensors:</p>\n<ul class=\"simple\">\n<li><p>SDA = P0.12</p></li>\n<li><p>SCL = P0.11</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SCK = P0.25</p></li>\n<li><p>MOSI = P1.02</p></li>\n<li><p>MISO = P0.24</p></li>\n</ul>\n<p>MicroSD is connected to these pins, and CS pin is connected to P0.17.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840_blip</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details); The onboard Black Magic\nProbe debugger presents itself as two USB-serial ports. On Linux,\nthey may come up as <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM1</span></code>. The first\none of these (<code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code> here) is the debugger port.\nGDB can directly connect to this port without requiring a GDB server by specifying\n<code class=\"docutils literal notranslate\"><span class=\"pre\">target</span> <span class=\"pre\">external</span> <span class=\"pre\">/dev/ttyACM0</span></code>. The second port acts as a\nserial port, connected to the SoC.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications are flashed and run as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the serial port of Black Magic Probe.\nFor example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM1</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52840_blip samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Debug and attach configurations are available using Black Magic Probe, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ninja</span> <span class=\"pre\">debug</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">ninja</span> <span class=\"pre\">attach</span></code> (or with <code class=\"docutils literal notranslate\"><span class=\"pre\">make</span></code>) are available.</p>\n<p>NOTE: You may need to press the reset button once after using <code class=\"docutils literal notranslate\"><span class=\"pre\">ninja</span> <span class=\"pre\">flash</span></code>\nto start executing the code. (not required with <code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">attach</span></code>)</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf52840-pdk\">\n<h2>Testing the LEDs and buttons in the nRF52840 PDK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf52840-pdk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf52840_blip/nrf52840_blip.dts\">boards/arm/nrf52840_blip/nrf52840_blip.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 7, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 3, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_3"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "waveshare_open103z", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Waveshare Open103Z</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"waveshare-open103z\">\n<span id=\"waveshare-open103z-board\"></span><h1>Waveshare Open103Z<a class=\"headerlink\" href=\"#waveshare-open103z\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Waveshare Open103Z-64 is a development board equipped with STM32F103ZE MCU.</p>\n<img alt=\"../../../../_images/waveshare_open103z.png\" src=\"../../../../_images/waveshare_open103z.png\"/>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Waveshare Open103Z provides the following hardware components:</p>\n<img alt=\"../../../../_images/waveshare_connector.PNG\" src=\"../../../../_images/waveshare_connector.PNG\"/>\n<img alt=\"../../../../_images/waveshare_connector_list.PNG\" src=\"../../../../_images/waveshare_connector_list.PNG\"/>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Waveshare Open103Z configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">waveshare_open103z</span></code> board configuration can be built and\nflashed in the usual way.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Build and flash applications as usual. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b waveshare_open103z samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Debug applications as usual. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b waveshare_open103z samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 10, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}, {"label": "GPIO_I"}, {"label": "GPIO_J"}, {"label": "GPIO_K"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 4, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32pg_stk3402a_jg", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "degu_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Degu Evaluation Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"degu-evaluation-kit\">\n<span id=\"degu-evk\"></span><h1>Degu Evaluation Kit<a class=\"headerlink\" href=\"#degu-evaluation-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<p>The Degu Evaluation Kit is an IoT device for sensors and actuators\nand can connect to an OpenThread mesh network. The Kit has a\nNordic nRF52840 SoC and NXP A71CH Secure Element, and can\nconnect some Seeed Grove sensors via GPIO, ADC, I2C,\nand UART.</p>\n<div class=\"figure align-default\">\n<img alt=\"../../../../_images/degu_evk.png\" src=\"../../../../_images/degu_evk.png\"/>\n</div>\n<p>For more information, see the <a class=\"reference external\" href=\"https://open-degu.com/en/\">Degu Project website</a>.</p>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 262144}, {"label": "dtcm", "size": 65536}], "main_ram_size": 262144, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_f756zg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F756ZG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f756zg\">\n<span id=\"nucleo-f756zg-board\"></span><h1>ST Nucleo F756ZG<a class=\"headerlink\" href=\"#st-nucleo-f756zg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 boards offer combinations of performance and power that\nprovide an affordable and flexible way for users to build prototypes and try\nout new concepts. For compatible boards, the SMPS significantly reduces power\nconsumption in Run mode.</p>\n<p>The Arduino-compatible ST Zio connector expands functionality of the Nucleo\nopen development platform, with a wide choice of specialized Arduino* Uno V3\nshields.</p>\n<p>The STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK/V2-1 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p>\n<ul>\n<li><p>USB with Micro-AB</p></li>\n<li><p>SWD</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>ST Zio connector including Arduino* Uno V3</p></li>\n<li><p>ST morpho</p></li>\n</ul>\n</li>\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources.</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration\ncapability: mass storage, virtual COM port and debug port.</p></li>\n<li><p>Comprehensive free software libraries and examples available with the</p></li>\n<li><p>STM32Cube MCU package.</p></li>\n<li><p>Arm* Mbed Enabled* compliant (only for some Nucleo part numbers)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f756zg.jpg\"><img alt=\"Nucleo F756ZG\" class=\"align-center\" src=\"../../../../_images/nucleo_f756zg.jpg\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-f756zg.html\">Nucleo F756ZG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F756ZG provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F756ZG in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>ART Accelerator</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>320 KB SRAM</p></li>\n<li><p>16-bit timers(10)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO(up to 168) with external interrupt capability</p></li>\n<li><p>12-bit ADC(3) with 24 channels / 2.4 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f756zg board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb_device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f756zg/nucleo_f756zg_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F756ZG board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX/RTS/CTS : PD5/PD6/PD4/PD3</p></li>\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino UART)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n<li><p>PWM : PE13</p></li>\n<li><p>SPI : PD14, PA5, PA6, PA7</p></li>\n</ul>\n<p>Note. The Arduino Uno v3 specified SPI device conflicts with the on-board ETH\ndevice on pin PA7.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F756ZG System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 72MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F756ZG board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f756zg</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F756ZG board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f756zg\">\n<h4>Flashing an application to Nucleo F756ZG<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f756zg\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f756zg samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_f756zg\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f756zg samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160dk_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF9160 DK - nRF52840</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf9160-dk-nrf52840\">\n<span id=\"nrf9160dk-nrf52840\"></span><h1>nRF9160 DK - nRF52840<a class=\"headerlink\" href=\"#nrf9160-dk-nrf52840\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52840 SoC on the nRF9160 DK (PCA10090) hardware provides support for the\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<p>The nRF52840 SoC does not have any connection to the any of the LEDs,\nbuttons, switches, and Arduino pin headers on the nRF9160 DK board. It is,\nhowever, possible to route some of the pins of the nRF52840 SoC to the nRF9160\nSiP.</p>\n<p>More information about the board can be found at\nthe <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-cellular-IoT\">Nordic Low power cellular IoT</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> website.\nThe <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF9160 DK has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf9160dk_nrf52840 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf9160dk_nrf52840</span></code> board configuration can be\nbuilt and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Make sure that the PROG/DEBUG switch on the DK is set to nRF52.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Remember to set the PROG/DEBUG switch on the DK to nRF52.</p>\n<p>See the following example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF52840 SoC is connected\nto. Usually, under Linux it will be <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM1</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>\nport is connected to the nRF9160 SiP on the board.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf9160dk_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards\nwith a Segger IC.</p>\n<p>Remember to set the PROG/DEBUG switch on the DK to nRF52.</p>\n</div>\n</div>\n<div class=\"section\" id=\"board-controller-firmware\">\n<span id=\"nrf9160dk-board-controller-firmware\"></span><h2>Board controller firmware<a class=\"headerlink\" href=\"#board-controller-firmware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The board controller firmware is a small snippet of code that takes care of\nrouting specific pins of the nRF9160 SiP to different components on the DK,\nsuch as LEDs and buttons, UART interfaces (VCOMx) of the interface MCU, and\nspecific nRF52840 SoC pins.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>In nRF9160 DK revisions earlier than v0.14.0, nRF9160 signals routed to\nother components on the DK are not simultaneously available on the DK\nconnectors.</p>\n</div>\n<p>When compiling a project for nrf9160dk_nrf52840, the board controller firmware\nwill be compiled and run automatically after the Kernel has been initialized.</p>\n<p>By default, the board controller firmware will route the following:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 48%\"/>\n<col style=\"width: 52%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>nRF9160 pins</p></th>\n<th class=\"head\"><p>Routed to</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>P0.26, P0.27, P0.28, and P0.29</p></td>\n<td><p>VCOM0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.01, P0.00, P0.15, and P0.14</p></td>\n<td><p>VCOM2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.02</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.03</p></td>\n<td><p>LED2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.04</p></td>\n<td><p>LED3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.05</p></td>\n<td><p>LED4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.08</p></td>\n<td><p>Switch 1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.09</p></td>\n<td><p>Switch 2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.06</p></td>\n<td><p>Button 1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.07</p></td>\n<td><p>Button 2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>P0.17, P0.18, and P0.19</p></td>\n<td><p>Arduino pin headers</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>P0.21, P0.22, and P0.23</p></td>\n<td><p>Trace interface</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COEX0, COEX1, and COEX2</p></td>\n<td><p>COEX interface</p></td>\n</tr>\n</tbody>\n</table>\n<p>For a complete list of all the routing options available,\nsee the <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/topic/ug_nrf91_dk/UG/nrf91_DK/board_controller.html\">nRF9160 DK board control section in the nRF9160 DK User Guide</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n<p>If you want to route some of the above pins differently or enable any of the\nother available routing options, enable or disable the devicetree node that\nrepresents the analog switch that provides the given routing.</p>\n<p>The following devicetree nodes are defined for the analog switches present\non the nRF9160 DK:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\"/>\n<col style=\"width: 45%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Devicetree node label</p></th>\n<th class=\"head\"><p>Analog switch name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">vcom0_pins_routing</span></code></p></td>\n<td><p>nRF91_UART1 (nRF91_APP1)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">vcom2_pins_routing</span></code></p></td>\n<td><p>nRF91_UART2 (nRF91_APP2)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">led1_pin_routing</span></code></p></td>\n<td><p>nRF91_LED1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">led2_pin_routing</span></code></p></td>\n<td><p>nRF91_LED2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">led3_pin_routing</span></code></p></td>\n<td><p>nRF91_LED3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">led4_pin_routing</span></code></p></td>\n<td><p>nRF91_LED4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">switch1_pin_routing</span></code></p></td>\n<td><p>nRF91_SWITCH1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">switch2_pin_routing</span></code></p></td>\n<td><p>nRF91_SWITCH2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">button1_pin_routing</span></code></p></td>\n<td><p>nRF91_BUTTON1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">button2_pin_routing</span></code></p></td>\n<td><p>nRF91_BUTTON2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">nrf_interface_pins_0_2_routing</span></code></p></td>\n<td><p>nRF_IF0-2_CTRL (nRF91_GPIO)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">nrf_interface_pins_3_5_routing</span></code></p></td>\n<td><p>nRF_IF3-5_CTRL (nRF91_TRACE)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">nrf_interface_pins_6_8_routing</span></code></p></td>\n<td><p>nRF_IF6-8_CTRL (nRF91_COEX)</p></td>\n</tr>\n</tbody>\n</table>\n<p>When building for the DK revision 0.14.0 or later, you can use the following\nadditional nodes (see <a class=\"reference internal\" href=\"../../../../application/index.html#application-board-version\"><span class=\"std std-ref\">Building for a board revision</span></a> for information how to\nbuild for specific revisions of the board):</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\"/>\n<col style=\"width: 45%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Devicetree node label</p></th>\n<th class=\"head\"><p>Analog switch name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">nrf_interface_pin_9_routing</span></code></p></td>\n<td><p>nRF_IF9_CTRL</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">io_expander_pins_routing</span></code></p></td>\n<td><p>IO_EXP_EN</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"docutils literal notranslate\"><span class=\"pre\">external_flash_pins_routing</span></code></p></td>\n<td><p>EXT_MEM_CTRL</p></td>\n</tr>\n</tbody>\n</table>\n<p>For example, if you want to enable the optional routing for the nRF9160 pins\nP0.17, P0.18, and P0.19 so that they are routed to nRF52840 pins P0.17, P0.20,\nand P0.15, respectively, add the following in the devicetree overlay in your\napplication:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>&amp;nrf_interface_pins_0_2_routing {\n        status = \"okay\";\n};\n</pre></div>\n</div>\n<p>And if you want to, for example, disable routing for the VCOM2 pins, add the\nfollowing:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>&amp;vcom2_pins_routing {\n        status = \"disabled\";\n};\n</pre></div>\n</div>\n<p>A few helper .dtsi files are provided in the directories\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf9160dk_nrf52840/dts\">boards/arm/nrf9160dk_nrf52840/dts</a> and\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf9160dk_nrf9160/dts\">boards/arm/nrf9160dk_nrf9160/dts</a>. They can serve as examples of\nhow to configure and use the above routings. You can also include them from\nrespective devicetree overlay files in your applications to conveniently\nconfigure the signal routing between nRF9160 and nRF52840 on the nRF9160 DK.\nFor example, to use <code class=\"docutils literal notranslate\"><span class=\"pre\">uart1</span></code> on both these chips for communication between\nthem, add the following line in the overlays for applications on both sides:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>#include &lt;nrf9160dk_uart1_on_if0_3.dtsi&gt;\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-cellular-IoT\">https://www.nordicsemi.com/Products/Low-power-cellular-IoT</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/topic/ug_nrf91_dk/UG/nrf91_DK/board_controller.html\">https://infocenter.nordicsemi.com/topic/ug_nrf91_dk/UG/nrf91_DK/board_controller.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32l476g_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32L476G Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32l476g-discovery\">\n<span id=\"stm32l476g-disco-board\"></span><h1>ST STM32L476G Discovery<a class=\"headerlink\" href=\"#st-stm32l476g-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L476G Discovery board features an ARM Cortex-M4 based STM32L476VG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the STM32L476G Discovery board:</p>\n<ul>\n<li><p>STM32L476VGT6 microcontroller featuring 1 Mbyte of Flash memory, 128 Kbytes of RAM in LQFP100 package</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB re-enumeration capability</p></li>\n<li><p>Three different interfaces supported on USB:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Virtual com port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>LCD 24 segments, 4 commons in DIP 28 package</p></li>\n<li><p>Seven LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>LD1 (red/green) for USB communication</p></li>\n<li><p>LD2 (red) for 3.3 V power on</p></li>\n<li><p>LD3 Over current (red)</p></li>\n<li><p>LD4 (red), LD5 (green) two user LEDs</p></li>\n<li><p>LD6 (green), LD7 (red) USB OTG FS LEDs</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Pushbutton (reset)</p></li>\n<li><p>Four directions Joystick with selection</p></li>\n<li><p>USB OTG FS with micro-AB connector</p></li>\n<li><p>SAI Audio DAC, Stereo with output jack</p></li>\n<li><p>Digital microphone, accelerometer, magnetometer and gyroscope MEMS</p></li>\n<li><p>128-Mbit Quad-SPI Flash memory</p></li>\n<li><p>MCU current ammeter with 4 ranges and auto-calibration</p></li>\n<li><p>Connector for external board or RF-EEPROM</p></li>\n<li><dl class=\"simple\">\n<dt>Four power supply options:</dt><dd><ul class=\"simple\">\n<li><p>ST-LINK/V2-1</p></li>\n<li><p>USB FS connector</p></li>\n<li><p>External 5 V</p></li>\n<li><p>CR2032 battery (not provided)</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32l476g_disco.jpg\"><img alt=\"STM32L476G Discovery\" class=\"align-center\" src=\"../../../../_images/stm32l476g_disco.jpg\" style=\"width: 450px; height: 394px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32l476gdiscovery.html\">STM32L476G Discovery website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L476VG SoC provides the following hardware features:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 130 nA Standby mode and 100 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, frequency up to 80 MHz, 100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><dl class=\"simple\">\n<dt>Clock Sources:</dt><dd><ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than  ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>LCD 8 x 40 or 4 x 44 with step-up converter</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><dl class=\"simple\">\n<dt>16x timers:</dt><dd><ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Up to 114 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><dl class=\"simple\">\n<dt>Memories</dt><dd><ul>\n<li><p>Up to 1 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 128 KB of SRAM including 32 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><dl class=\"simple\">\n<dt>Rich analog peripherals (independent supply)</dt><dd><ul>\n<li><p>3x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>18x communication interfaces</dt><dd><ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32L476VG can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l476vg.html\">STM32L476VG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00083560.pdf\">STM32L476 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32l476g_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32l476g_disco/stm32l476g_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L476G Discovery Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00172179.pdf\">STM32L476G Discovery board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PD5</p></li>\n<li><p>UART_2_RX : PD6</p></li>\n<li><p>LD4 : PB2</p></li>\n<li><p>LD5 : PE8</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L476G Discovery System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default the System clock is driven by the PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32L476G Discovery board has 6 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L476G Discovery board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32l476g-discovery\">\n<h4>Flashing an application to STM32L476G Discovery<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32l476g-discovery\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM32L476G Discovery to your host computer using the USB\nport, then run a serial host program to connect with your Discovery\nboard. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then, build and flash in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l476g_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l476g_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em5d", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52832_mdk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52832-mdk</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52832-mdk\">\n<span id=\"id1\"></span><h1>nRF52832-mdk<a class=\"headerlink\" href=\"#nrf52832-mdk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nrf52832_mdk board is a fully open-source, versatile single board\ndevelopment kit for Bluetooth® low energy, ANT and 2.4GHz proprietary\napplications using the nRF52832 SoC.</p>\n<p>The kit gives access to 24 I/Os and interfaces via headers and has a\nRGB LED which is user-programmable. It also has a 2.4GHz chip antenna\nonboard which is quite convenient to develop IoT wireless applications.</p>\n<p>See <a class=\"reference external\" href=\"https://wiki.makerdiary.com/nrf52832-mdk\">nRF52832-mdk website</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> for more information about the development\nboard and <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832\">nRF52832 website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52832</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://wiki.makerdiary.com/nrf52832-mdk\">https://wiki.makerdiary.com/nrf52832-mdk</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "sram1", "size": 294912}, {"label": "sram4", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "stm32h747i_disco_m4", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_1", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 4, "instances": [{"label": "GPIO_A0"}, {"label": "GPIO_A1"}, {"label": "GPIO_A2"}, {"label": "GPIO_A3"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cc3235sf_launchxl", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>CC3235SF LaunchXL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"cc3235sf-launchxl\">\n<span id=\"id1\"></span><h1>CC3235SF LaunchXL<a class=\"headerlink\" href=\"#cc3235sf-launchxl\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Wi-Fi CC3235SF LaunchPad development kit (CC3235SF-LAUNCHXL)\nhighlights CC3235SF, a single-chip wireless microcontroller (MCU) with\n1MB internal flash, 4MB external serial flash, 256KB of RAM, and enhanced\nsecurity features. It supports 802.11 a/b/g/n, both 2.4 GHz and 5 GHz.</p>\n<p>See the <a class=\"reference external\" href=\"http://www.ti.com/product/cc3235SF\">TI CC3235 Product Page</a> for details.</p>\n<div class=\"section\" id=\"features\">\n<h3>Features:<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Two separate execution environments: a user application dedicated ARM\nCortex-M4 MCU and a network processor MCU to run all Wi-Fi and\ninternet logical layers</p></li>\n<li><p>40-pin LaunchPad standard leveraging the BoosterPack ecosystem</p></li>\n<li><p>On-board accelerometer and temperature sensor</p></li>\n<li><p>Two buttons and a RGB LED for user interaction</p></li>\n<li><p>UART through USB to PC</p></li>\n<li><p>BoosterPack plug-in module for adding graphical displays, audio\ncodecs, antenna selection, environmental sensing, and more</p></li>\n<li><p>Power from USB for the LaunchPad and optional external BoosterPack</p></li>\n<li><p>XDS110-based JTAG emulation with serial port for flash programming</p></li>\n</ul>\n<p>Details on the CC3235SF LaunchXL development board can be found in the\n<a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru539\">CC3235SF LaunchPad Dev Kit Hardware User’s Guide</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The CC3235SF SoC has two MCUs:</p>\n<ol class=\"arabic simple\">\n<li><p>Applications MCU - an ARM® Cortex®-M4 Core at 80 MHz, with 256Kb RAM,\nand access to external serial 4MB flash with bootloader and peripheral\ndrivers in ROM.</p></li>\n<li><p>Network Coprocessor (NWP) - a dedicated ARM MCU, which completely\noffloads Wi-Fi and internet protocols from the application MCU.</p></li>\n</ol>\n<p>Complete details of the CC3235SF SoC can be found in the <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru543\">CC3235 TRM</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Zephyr has been ported to the Applications MCU, with basic peripheral\ndriver support.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI_0</p></td>\n<td><p>on-chip</p></td>\n<td><p>Wi-Fi host driver</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>For consistency with TI SimpleLink SDK and BoosterPack examples,\nthe I2C driver defaults to I2C_BITRATE_FAST mode (400 kHz) bus speed\non bootup.</p>\n</div>\n<p>The accelerometer, temperature sensors, or other peripherals\naccessible through the BoosterPack, are not currently supported.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Peripherals on the CC3235SF LaunchXL are mapped to the following pins in\nthe file <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3235sf_launchxl/pinmux.c\">boards/arm/cc3235sf_launchxl/pinmux.c</a>.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 46%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 27%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>PIN</p></th>\n<th class=\"head\"><p>GPIO</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART0_TX</p></td>\n<td><p>55</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART0_RX</p></td>\n<td><p>57</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED D7 (R)</p></td>\n<td><p>64</p></td>\n<td><p>9</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED D6 (O)</p></td>\n<td><p>01</p></td>\n<td><p>10</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED D5 (G)</p></td>\n<td><p>02</p></td>\n<td><p>11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Switch SW2</p></td>\n<td><p>15</p></td>\n<td><p>22</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Switch SW3</p></td>\n<td><p>04</p></td>\n<td><p>13</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the Kconfig file at\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3235sf_launchxl/cc3235sf_launchxl_defconfig\">boards/arm/cc3235sf_launchxl/cc3235sf_launchxl_defconfig</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>TI officially supports development on the CC3235SF using the TI\n<a class=\"reference external\" href=\"http://www.ti.com/tool/download/SIMPLELINK-CC32xx-SDK/2.40.01.01\">CC32xx SDK</a> on Windows and Linux using TI tools: Code Composer\nStudio for debugging and <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/Category:CCS_UniFlash\">UniFlash</a> for flashing.</p>\n<p>For Windows developers, see the <a class=\"reference external\" href=\"http://dev.ti.com/tirex/content/simplelink_cc32xx_sdk_2_40_01_01/docs/simplelink_mcu_sdk/Quick_Start_Guide.html\">CC32xx Quick Start Guide</a> for\ninstructions on installation of tools, and how to flash the board using\nUniFlash.</p>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.bin</span></code> produced by the Zephyr SDK may not load via\nUniFlash tool.  If encountering difficulties, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>\nfile and openocd instead (see below).</p>\n<p>The following instructions are geared towards Linux developers who\nprefer command line tools to an IDE.</p>\n<p>Before flashing and debugging the board, there are a few one-time board\nsetup steps to follow.</p>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites:<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Download and install the latest version of <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/Category:CCS_UniFlash\">UniFlash</a>.</p></li>\n<li><p>Jumper SOP[2..0] (J15) to [010], and connect the USB cable to the PC.</p>\n<p>This should result in a new device “Texas Instruments XDS110 Embed\nwith CMSIS-DAP” appearing at /dev/ttyACM1 and /dev/ttyACM0.</p>\n</li>\n<li><p>Update the service pack, and place the board in “Development Mode”.</p>\n<p>Setting “Development Mode” enables the JTAG interface, necessary\nfor subsequent use of OpenOCD and updating XDS110 firmware.</p>\n<p>Follow the instructions in Section 2.4 “Download the Application”,\nin the <a class=\"reference external\" href=\"http://dev.ti.com/tirex/content/simplelink_cc32xx_sdk_2_40_01_01/docs/simplelink_mcu_sdk/Quick_Start_Guide.html\">CC32xx Quick Start Guide</a>, except for steps 5 and 6 in\nSection 2.4.1 which select an MCU image.</p>\n</li>\n<li><p>Ensure the XDS-110 emulation firmware is updated.</p>\n<p>Download and install the latest <a class=\"reference external\" href=\"http://processors.wiki.ti.com/index.php/XDS_Emulation_Software_Package#XDS_Emulation_Software_.28emupack.29_Download\">XDS-110 emulation package</a>.</p>\n<p>Follow these <a class=\"reference external\" href=\"http://software-dl.ti.com/ccs/esd/documents/xdsdebugprobes/emu_xds110.html#updating-the-xds110-firmware\">xds110 firmware update directions</a></p>\n<p>Note that the emulation package install may place the xdsdfu utility\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;install_dir&gt;/ccs_base/common/uscif/xds110/</span></code>.</p>\n</li>\n<li><p>Switch Jumper SOP[2..0] (J15) back to [001].</p>\n<p>Remove power from the board (disconnect USB cable) before switching jumpers.</p>\n</li>\n<li><p>Install OpenOCD</p>\n<p>You can obtain OpenOCD by following these\n<a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">installing the latest Zephyr SDK instructions</span></a>.</p>\n<p>After the installation, add the directory containing the OpenOCD executable\nto your environment’s PATH variable. For example, use this command in Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">export PATH=$ZEPHYR_SDK_INSTALL_DIR/sysroots/x86_64-pokysdk-linux/usr/bin/openocd:$PATH</span>\n</pre></div>\n</div>\n<p>If you had previously installed TI OpenOCD, you can simply switch to use\nthe one in the Zephyr SDK. If for some reason you wish to continue to use\nyour TI OpenOCD installation, you can set the OPENOCD and\nOPENOCD_DEFAULT_PATH variables in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/cc3220sf_launchxl/board.cmake\">boards/arm/cc3220sf_launchxl/board.cmake</a> to point the build\nto the paths of the OpenOCD binary and its scripts, before\nincluding the common openocd.board.cmake file:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>set(OPENOCD \"/usr/local/bin/openocd\" CACHE FILEPATH \"\" FORCE)\nset(OPENOCD_DEFAULT_PATH /usr/local/share/openocd/scripts)\ninclude(${ZEPHYR_BASE}/boards/common/openocd.board.cmake)\n</pre></div>\n</div>\n</li>\n<li><p>Ensure CONFIG_XIP=y (default) is set.</p>\n<p>This locates the program into flash, and sets CONFIG_CC3235SF_DEBUG=y,\nwhich prepends a debug header enabling the flash to persist over\nsubsequent reboots, bypassing the bootloader flash signature\nverification.</p>\n<p>See Section 21.10 “Debugging Flash User Application Using JTAG” of the\n<a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swru543\">CC3235 TRM</a> for details on the secure flash boot process.</p>\n</li>\n</ol>\n<p>Once the above prerequisites are met, applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">_cc3235sf_launchxl</span></code>\nboard can be built, flashed, and debugged with openocd and gdb per the Zephyr\nApplication Development Primer (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>).</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To build and flash an application, execute the following commands for &lt;my_app&gt;:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc3235sf_launchxl &lt;my_app&gt;</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This will load the image into flash.</p>\n<p>To see program output from UART0, connect a separate terminal window:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">% </span>screen /dev/ttyACM0 <span class=\"m\">115200</span> 8N1\n</pre></div>\n</div>\n<p>Then press the reset button (SW1) on the board to run the program.</p>\n<p>When using OpenOCD from Zephyr SDK to flash the device, you may notice\nthe program hangs when starting the network processor on the device, if the\nprogram uses it. There is a known issue with how that version of OpenOCD\nresets the network processor. You would need to manually hit the reset button\non the board to properly reset the device after flashing.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To debug a previously flashed image, after resetting the board, use the ‘debug’\nbuild target:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b cc3235sf_launchxl &lt;my_app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"wi-fi-support\">\n<h2>Wi-Fi Support<a class=\"headerlink\" href=\"#wi-fi-support\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Host Driver, imported from the SimpleLink SDK, has been ported\nto Zephyr, and communicates over a dedicated SPI to the network co-processor.\nIt is available as a Zephyr Wi-Fi device driver in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/drivers/wifi/simplelink\">drivers/wifi/simplelink</a>.</p>\n<div class=\"section\" id=\"usage\">\n<h3>Usage:<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Set <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_WIFI_SIMPLELINK.html#std-kconfig-CONFIG_WIFI_SIMPLELINK\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_WIFI_SIMPLELINK</span></code></a> and <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_WIFI.html#std-kconfig-CONFIG_WIFI\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_WIFI</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>\nto enable Wi-Fi.\nSee <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/net/wifi/boards/cc3235sf_launchxl.conf\">samples/net/wifi/boards/cc3235sf_launchxl.conf</a>.</p>\n</div>\n<div class=\"section\" id=\"provisioning\">\n<h3>Provisioning:<a class=\"headerlink\" href=\"#provisioning\" title=\"Permalink to this headline\">¶</a></h3>\n<p>SimpleLink provides a few rather sophisticated Wi-Fi provisioning methods.\nTo keep it simple for Zephyr development and demos, the SimpleLink\n“Fast Connect” policy is enabled, with one-shot scanning.\nThis enables the cc3235sf_launchxl to automatically reconnect to the last\ngood known access point (AP), without having to restart a scan, and\nre-specify the SSID and password.</p>\n<p>To connect to an AP, first run the Zephyr Wi-Fi shell sample application,\nand connect to a known AP with SSID and password.</p>\n<p>See <a class=\"reference internal\" href=\"../../../../samples/net/wifi/README.html#wifi-sample\"><span class=\"std std-ref\">Wi-Fi sample</span></a></p>\n<p>Once the connection succeeds, the network co-processor keeps the AP identity in\nits persistent memory.  Newly loaded Wi-Fi applications then need not explicitly\nexecute any Wi-Fi scan or connect operations, until the need to change to a new AP.</p>\n</div>\n</div>\n<div class=\"section\" id=\"secure-socket-offload\">\n<h2>Secure Socket Offload<a class=\"headerlink\" href=\"#secure-socket-offload\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SimpleLink Wi-Fi driver provides socket operations to the Zephyr socket\noffload point, enabling Zephyr BSD socket API calls to be directed to the\nSimpleLink Wi-Fi driver, by setting <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NET_SOCKETS_OFFLOAD.html#std-kconfig-CONFIG_NET_SOCKETS_OFFLOAD\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NET_SOCKETS_OFFLOAD</span></code></a>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>.</p>\n<p>Secure socket (TLS) communication is handled as part of the socket APIs,\nand enabled by:</p>\n<ul class=\"simple\">\n<li><p>setting both <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_NET_SOCKETS_SOCKOPT_TLS.html#std-kconfig-CONFIG_NET_SOCKETS_SOCKOPT_TLS\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_NET_SOCKETS_SOCKOPT_TLS</span></code></a>\nand <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_TLS_CREDENTIAL_FILENAMES.html#std-kconfig-CONFIG_TLS_CREDENTIAL_FILENAMES\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_TLS_CREDENTIAL_FILENAMES</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>,</p></li>\n<li><p>using the TI Uniflash tool to program the required certificates and\nkeys to the secure flash filesystem, and enabling the TI Trusted\nRoot-Certificate Catalog.</p></li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"../../../../samples/net/sockets/http_get/README.html#sockets-http-get\"><span class=\"std std-ref\">Socket HTTP GET Example</span></a> and\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/net/sockets/http_get/boards/cc3235sf_launchxl.conf\">samples/net/sockets/http_get/boards/cc3235sf_launchxl.conf</a> for an\nexample.</p>\n<p>See the document <a class=\"reference external\" href=\"http://www.ti.com/lit/pdf/swpu332\">Simplelink Wi-Fi Certificates Handling</a> for details on\nusing the TI UniFlash tool for certificate programming.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"simple\">\n<dt>TI SimpleLink MCUs:</dt><dd><p><a class=\"reference external\" href=\"http://www.ti.com/microcontrollers/simplelink-mcus/overview.html\">http://www.ti.com/microcontrollers/simplelink-mcus/overview.html</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 524288}, {"label": "sram1", "size": 131072}], "main_ram_size": 524288, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "intel_adsp_cavs15", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>Up Squared Audio DSP</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"up-squared-audio-dsp\">\n<span id=\"id1\"></span><h1>Up Squared Audio DSP<a class=\"headerlink\" href=\"#up-squared-audio-dsp\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"system-requirements\">\n<h2>System Requirements<a class=\"headerlink\" href=\"#system-requirements\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"prerequisites\">\n<h3>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr SDK 0.11 or higher is required.</p>\n<p>Since firmware binary signing for Audio DSP is mandatory on Intel products\nform Skylake onwards the signing tool and key are needed.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">up_squared</span></code> board is running Linux with <a class=\"reference external\" href=\"https://github.com/thesofproject/sof-diagnostic-driver\">SOF Diagnostic Driver</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> built and\nloaded.</p>\n<div class=\"section\" id=\"signing-tool\">\n<h4>Signing tool<a class=\"headerlink\" href=\"#signing-tool\" title=\"Permalink to this headline\">¶</a></h4>\n<p>rimage is Audio DSP firmware image creation and signing tool. The tool is used\nby <a class=\"reference external\" href=\"https://github.com/thesofproject/sof\">Sound Open Firmware</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">3</a> to generate binary firmware signed images.</p>\n<p>For the building instructions refer to <a class=\"reference external\" href=\"https://github.com/thesofproject/rimage#building\">rimage Build Instructions</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">4</a>.</p>\n</div>\n<div class=\"section\" id=\"signing-keys\">\n<h4>Signing keys<a class=\"headerlink\" href=\"#signing-keys\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The key used is Intel Open Source Technology Center (OTC) community key.\nIt can be freely used by anyone and intended for firmware developers.\nPlease download and store private key from the location:\n<a class=\"reference external\" href=\"https://github.com/thesofproject/sof/blob/master/keys/otc_private_key.pem\">https://github.com/thesofproject/sof/blob/master/keys/otc_private_key.pem</a></p>\n<p>For more information about keys refer to <a class=\"reference external\" href=\"https://github.com/thesofproject/sof/tree/master/rimage/keys\">rimage keys</a> <a class=\"footnote-reference brackets\" href=\"#id12\" id=\"id13\">5</a>.</p>\n</div>\n<div class=\"section\" id=\"setup-up-squared-board\">\n<h4>Setup up_squared board<a class=\"headerlink\" href=\"#setup-up-squared-board\" title=\"Permalink to this headline\">¶</a></h4>\n<p>To setup Linux on <code class=\"docutils literal notranslate\"><span class=\"pre\">up_squared</span></code> board refer to\n<a class=\"reference external\" href=\"https://software.intel.com/en-us/articles/getting-started-with-ubuntu-core-on-an-up-squared-board\">Getting Started with Ubuntu Core on an UP Squared Board</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n<p>After installing Linux build and install <a class=\"reference external\" href=\"https://github.com/thesofproject/sof-diagnostic-driver\">SOF Diagnostic Driver</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id6\">2</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"build-zephyr-application\">\n<h3>Build Zephyr application<a class=\"headerlink\" href=\"#build-zephyr-application\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications can be build in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nfor more details). The only additional step required is signing. For example,\nfor building <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code> application following steps are needed.</p>\n<ol class=\"arabic\">\n<li><p>Building Zephyr application <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b intel_adsp_cavs15 samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Sign and create firmware image</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west sign -t rimage -- -k &lt;path to otc_private_key.pem&gt;</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"loading-image-to-audio-dsp\">\n<h3>Loading image to Audio DSP<a class=\"headerlink\" href=\"#loading-image-to-audio-dsp\" title=\"Permalink to this headline\">¶</a></h3>\n<p><a class=\"reference external\" href=\"https://github.com/thesofproject/sof-diagnostic-driver\">SOF Diagnostic Driver</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id7\">2</a> provide interface for firmware loading. Python tools\nin the board support directory use the interface to load firmware to <code class=\"docutils literal notranslate\"><span class=\"pre\">ADSP</span></code>.</p>\n<p>Note that the <code class=\"docutils literal notranslate\"><span class=\"pre\">/dev/hda</span></code> device file created by the diagnostic\ndriver must be readable and writable by the process.  This can be\naccomplished via a simple chmod, via a udev handler that associates\nthe device with a particular user or group, or simply by running the\nloader script as root:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo chmod <span class=\"m\">777</span> /dev/hda\n<span class=\"gp\">$ </span>boards/xtensa/intel_adsp_cavs15/tools/fw_loader.py -f &lt;path to zephyr.ri&gt;\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The only way to debug application is using logging. Logging and ADSP logging\nbackend needs to be enabled in the application configuration.</p>\n<p>ADSP logging backend writes logs to the ring buffer in the shared memory.</p>\n<p>As above, the <code class=\"docutils literal notranslate\"><span class=\"pre\">adsplog</span></code> tool requires appropriate permissions, in\nthis case to the sysfs “resource4” device on the appropriate PCI\ndevice.  This can likewise be managed via any filesystem, setuid or\nudev trick the operator prefers.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>boards/xtensa/intel_adsp_cavs15/tools/adsplog.py\n<span class=\"go\">ERROR: Cannot open /sys/bus/pci/devices/0000:00:0e.0/resource4 for reading</span>\n\n<span class=\"gp\">$ </span>sudo chmod <span class=\"m\">666</span> /sys/bus/pci/devices/0000:00:0e.0/resource4\n<span class=\"gp\">$ </span>boards/xtensa/intel_adsp_cavs15/tools/adsplog.py\n<span class=\"go\">Hello World! intel_adsp_cavs15</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"integration-testing-with-twister\">\n<h3>Integration Testing With Twister<a class=\"headerlink\" href=\"#integration-testing-with-twister\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ADSP hardware also has integration for testing using the twister\ntool.  The <code class=\"docutils literal notranslate\"><span class=\"pre\">adsplog</span></code> script can be used as the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--device-serial-pty</span></code> handler, and the west flash script should take\na path to the same key file used above.  Remember to pass the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--no-history</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">adsplog.py</span></code>, because by default it\nwill dump the current log buffer, which may contain output from a\nprevious test run.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span>ZEPHYR_BASE/scripts/twister --device-testing -p intel_adsp_cavs15 <span class=\"se\">\\</span>\n  --device-serial-pty <span class=\"nv\">$ZEPHYR_BASE</span>/boards/xtensa/intel_adsp_cavs15/tools/adsplog.py,--no-history <span class=\"se\">\\</span>\n  --west-flash <span class=\"nv\">$ZEPHYR_BASE</span>/boards/xtensa/intel_adsp_cavs15/tools/flash.sh,<span class=\"nv\">$PATH_TO_KEYFILE</span>.pem\n</pre></div>\n</div>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://software.intel.com/en-us/articles/getting-started-with-ubuntu-core-on-an-up-squared-board\">https://software.intel.com/en-us/articles/getting-started-with-ubuntu-core-on-an-up-squared-board</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id5\">1</a>,<a href=\"#id6\">2</a>,<a href=\"#id7\">3</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/thesofproject/sof-diagnostic-driver\">https://github.com/thesofproject/sof-diagnostic-driver</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/thesofproject/sof\">https://github.com/thesofproject/sof</a></p>\n</dd>\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id11\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/thesofproject/rimage#building\">https://github.com/thesofproject/rimage#building</a></p>\n</dd>\n<dt class=\"label\" id=\"id12\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id13\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/thesofproject/sof/tree/master/rimage/keys\">https://github.com/thesofproject/sof/tree/master/rimage/keys</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram_l", "size": 65536}, {"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 6, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "can": {"count": 1, "instances": [{"label": "CAN_0"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 2, "instances": [{"label": "DAC_0"}, {"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "ip_k66f", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SEGGER IP Switch Board</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"segger-ip-switch-board\">\n<span id=\"ip-k66f\"></span><h1>SEGGER IP Switch Board<a class=\"headerlink\" href=\"#segger-ip-switch-board\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Segger IP Switch Board is a Evaluation board based on NXP Kinetis K66 MCU.\nIt comes with Micrel/Microchip KSZ8794CNX integrated 4-port 10/100 managed\nEthernet switch with Gigabit RGMII/MII/RMII interface.</p>\n<ul class=\"simple\">\n<li><p>KSZ8794CNX enables evaluation for switch functions</p></li>\n<li><p>On-board debug probe J-Link-OB for programming</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ip_k66f.png\"><img alt=\"IP-K66F\" class=\"align-center\" src=\"../../../../_images/ip_k66f.png\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MK66FN2M0VMD18 MCU (180 MHz, 2 MB flash memory, 256 KB RAM, low-power,\ncrystal-less USB</p></li>\n<li><p>Dual role USB interface with micro-B USB connector</p></li>\n<li><p>2 User LED</p></li>\n<li><p>On-board debug probe J-Link-OB for programming</p></li>\n<li><p>Micrel/Microchip Ethernet Switch KSZ8794CNX with 3 RJ45 connectors</p></li>\n</ul>\n<p>For more information about the K66F SoC and IP-K66F board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/k-series-cortex-m4/k6x-ethernet/kinetis-k66-180-mhz-dual-high-speed-full-speed-usbs-2mb-flash-microcontrollers-mcus-based-on-arm-cortex-m4-core:K66_180\">K66F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/K66P144M180SF5V2.pdf\">K66F Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/K66P144M180SF5RMV2.pdf\">K66F Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.segger.com/evaluate-our-software/segger/embosip-switch-board/\">IP-K66F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.segger.com/downloads/emnet/UM06002\">IP-K66F User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.segger.com/downloads/emnet/embOSIP_SwitchBoard_V2.0_WEB_Schematic.pdf\">IP-K66F Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ip_k66f board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/ip_k66f/ip_k66f_defconfig</span></code></p>\n</div></blockquote>\n<p>Micrel/Microchip KSZ8794CNX Ethernet Switch is not currently\nsupported.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K66F SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTA8</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA10</p></td>\n<td><p>GPIO</p></td>\n<td><p>RED LED</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K66F SoC is configured to use the 12 MHz low gain crystal oscillator on the\nboard with the on-chip PLL to generate a 180 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K66F SoC has six UARTs. None of them are used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a>.</p>\n<div class=\"section\" id=\"opensda-jlink-onboard-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_V3_2\">OpenSDA J-Link Generic Firmware for V3.2 Bootloader</a>. Note that Segger\ndoes provide an OpenSDA J-Link Board-Specific Firmware for this board, however\nit is not compatible with the DAPLink bootloader.</p>\n<p>The default flasher is <code class=\"docutils literal notranslate\"><span class=\"pre\">jlink</span></code> using the built-in SEGGER Jlink interface.</p>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ip_k66f samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Red LED0 should blink at 1 second delay.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ip_k66f samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Step through the application in your debugger.</p>\n</div>\n<div class=\"section\" id=\"serial-console\">\n<h3>Serial console<a class=\"headerlink\" href=\"#serial-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ip_k66f</span></code> board only uses Segger’s RTT console for providing serial\nconsole. There is no physical serial port available.</p>\n<ul class=\"simple\">\n<li><p>To communicate with this board one needs in one console:</p></li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">/opt/SEGGER/JLink_V664/JLinkRTTLogger</span> <span class=\"pre\">-Device</span> <span class=\"pre\">MK66FN2M0XXX18</span> <span class=\"pre\">-RTTChannel</span> <span class=\"pre\">1</span> <span class=\"pre\">-if</span> <span class=\"pre\">SWD</span> <span class=\"pre\">-Speed</span> <span class=\"pre\">4000</span> <span class=\"pre\">~/rtt.log</span></code></p>\n<ul class=\"simple\">\n<li><p>In another one:</p></li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">nc</span> <span class=\"pre\">localhost</span> <span class=\"pre\">19021</span></code></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 524288}, {"label": "sram1", "size": 65536}, {"label": "sram0_shared", "size": 65536}], "main_ram_size": 524288, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf5340dk_nrf5340_cpuapp", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "frdm_kl25z", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP FRDM-KL25Z</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-frdm-kl25z\">\n<span id=\"frdm-kl25z\"></span><h1>NXP FRDM-KL25Z<a class=\"headerlink\" href=\"#nxp-frdm-kl25z\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Freedom KL25Z is an ultra-low-cost development platform for\nKinetis® L Series KL1x (KL14/15) and KL2x (KL24/25) MCUs built\non ARM® Cortex®-M0+ processor.</p>\n<p>The FRDM-KL25Z features include easy access to MCU I/O, battery-ready,\nlow-power operation, a standard-based form factor with expansion board\noptions and a built-in debug interface for flash programming and run-control.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/frdm_kl25z.jpg\"><img alt=\"FRDM-KL25Z\" class=\"align-center\" src=\"../../../../_images/frdm_kl25z.jpg\" style=\"width: 272px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MKL25Z128VLK4 MCU @ 48 MHz, 128 KB flash, 16 KB SRAM, USB OTG (FS), 80LQFP</p></li>\n<li><p>On board capacitive touch “slider”, MMA8451Q accelerometer, and tri-color LED</p></li>\n<li><p>OpenSDA debug interface</p></li>\n</ul>\n<p>For more information about the KL25Z SoC and FRDM-KL25Z board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/l-seriesultra-low-powerm0-plus/kinetis-kl2x-72-96mhz-usb-ultra-low-power-microcontrollers-mcus-based-on-arm-cortex-m0-plus-core:KL2x?&amp;l\">KL25Z Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/KL25P80M48SF0.pdf\">KL25Z Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/KL25P80M48SF0RM.pdf\">KL25Z Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/l-seriesultra-low-powerm0-plus/freedom-development-platform-for-kinetis-kl14-kl15-kl24-kl25-mcus:FRDM-KL25Z\">FRDM-KL25Z Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/user-guide/FRDMKL25ZUM.zip\">FRDM-KL25Z User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/schematics/FRDM-KL25Z_SCH_REV_E.pdf\">FRDM-KL25Z Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The frdm_kl25z board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/frdm_kl25z/frdm_kl25z_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KL25Z SoC has five pairs of pinmux/gpio controllers, and all are currently enabled\n(PORTA/GPIOA, PORTB/GPIOB, PORTC/GPIOC, PORTD/GPIOD, and PORTE/GPIOE) for the FRDM-KL25Z board.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 57%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTB2</p></td>\n<td><p>ADC</p></td>\n<td><p>ADC0 channel 12</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB18</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB19</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD1</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA1</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA2</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTE24</p></td>\n<td><p>I2C0_SCL</p></td>\n<td><p>I2C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTE25</p></td>\n<td><p>I2C0_SDA</p></td>\n<td><p>I2C</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KL25Z SoC is configured to use the 8 MHz external oscillator on the board\nwith the on-chip FLL to generate a 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KL25Z UART0 is used for the console.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KL25Z SoC has a USB OTG (USBOTG) controller that supports both\ndevice and host functions through its mini USB connector (USB KL25Z).\nOnly USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<p>Early versions of this board have an outdated version of the OpenSDA bootloader\nand require an update. Please see the <a class=\"reference external\" href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">DAPLink Bootloader Update</a> page for\ninstructions to update from the CMSIS-DAP bootloader to the DAPLink bootloader.</p>\n<div class=\"section\" id=\"option-1-opensda-daplink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-daplink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.nxp.com/assets/downloads/data/en/ide-debug-compile-build-tools/OpenSDAv2.2_DAPLink_frdmkl25z_rev0242.zip\">OpenSDA DAPLink FRDM-KL25Z Firmware</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-jlink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_FRDM-KL25Z\">OpenSDA J-Link FRDM-KL25Z Firmware</a>.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kl25z samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J7.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kl25z samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_kl25z</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_kl25z samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_kl25z</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ram0", "size": 268435456}], "main_ram_size": 268435456, "gpio": {"count": 2, "instances": [{"label": "gpio_out"}, {"label": "gpio_in"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "spi0"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 1, "instances": [{"label": "uart0"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 1, "instances": [{"label": "pwm0"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "eth0"}]}, "name": "litex_vexriscv", "arch": "riscv", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">RISCV Boards</a> »</li>\n<li>LiteX VexRiscv</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"litex-vexriscv\">\n<span id=\"id1\"></span><h1>LiteX VexRiscv<a class=\"headerlink\" href=\"#litex-vexriscv\" title=\"Permalink to this headline\">¶</a></h1>\n<p>LiteX VexRiscv is an example of a system on a chip (SoC) that consists of\na <a class=\"reference external\" href=\"https://github.com/SpinalHDL/VexRiscv\">VexRiscv processor</a>\nand additional peripherals. This setup has been generated using\n<a class=\"reference external\" href=\"https://github.com/enjoy-digital/litex\">LiteX SoC Builder</a> and can be used\non various FPGA chips. The bitstream (FPGA configuration file) can be\nobtained using both vendor-specific tools and open-source tools, including the\n<a class=\"reference external\" href=\"https://symbiflow.github.io/\">SymbiFlow toolchain</a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">litex_vexriscv</span></code> board configuration in Zephyr is meant for the\nLiteX VexRiscv SoC implementation generated for the\n<a class=\"reference external\" href=\"https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists\">Digilent Arty A7-35T Development Board</a>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/litex_vexriscv.jpg\"><img alt=\"LiteX VexRiscv on Digilent Arty 35T Board\" class=\"align-center\" src=\"../../../../_images/litex_vexriscv.jpg\" style=\"width: 650px;\"/></a>\n<p>LiteX is based on\n<a class=\"reference external\" href=\"https://m-labs.hk/gateware/migen/\">Migen</a>/<a class=\"reference external\" href=\"https://github.com/m-labs/misoc\">MiSoC SoC builder</a>\nand provides ready-made system components such as buses, streams, interconnects,\ncommon cores, and CPU wrappers to create SoCs easily. The tool contains\nmechanisms for integrating, simulating, and building various designs\nthat target multiple chips of different vendors.\nMore information about the LiteX project can be found on\n<a class=\"reference external\" href=\"https://github.com/enjoy-digital/litex\">LiteX’s website</a>.</p>\n<p>VexRiscv is a 32-bit implementation of the RISC-V CPU architecture\nwritten in the <a class=\"reference external\" href=\"https://spinalhdl.github.io/SpinalDoc-RTD/\">SpinalHDL</a>.\nThe processor supports M, C, and A RISC-V instruction\nset extensions, with numerous optimizations that include multistage\npipelines and data caching. The project provides many optional extensions\nthat can be used to customize the design (JTAG, MMU, MUL/DIV extensions).\nThe implementation is optimized for FPGA chips.\nMore information about the project can be found on\n<a class=\"reference external\" href=\"https://github.com/SpinalHDL/VexRiscv\">VexRiscv’s website</a>.</p>\n<div class=\"section\" id=\"litex-vexriscv-with-symbiflow\">\n<h2>LiteX VexRiscv with SymbiFlow<a class=\"headerlink\" href=\"#litex-vexriscv-with-symbiflow\" title=\"Permalink to this headline\">¶</a></h2>\n<p>To run the ZephyrOS on the VexRiscv CPU, it is necessary to prepare the\nbitstream for the FPGA on a Digilent Arty A7-35 Board. This can be achieved\nusing the LiteX SoC Builder together with the SymbiFlow toolchain.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/symbiflow.svg\"><img alt=\"SymbiFlow Logo\" class=\"align-center\" src=\"../../../../_images/symbiflow.svg\" width=\"300px\"/></a>\n<p>SymbiFlow is an Open Source Verilog-to-Bitstream FPGA synthesis flow,\ntargeting FPGAs of multiple vendors. Currently, it targets the Xilinx 7-Series,\nLattice iCE40, Lattice ECP5 FPGAs, QuickLogic EOS S3 and is gradually being\nexpanded to provide a comprehensive end-to-end FPGA synthesis flow.\nMore information about the project can be found on\n<a class=\"reference external\" href=\"https://symbiflow.github.io/\">Symbiflow’s website</a>.</p>\n<div class=\"section\" id=\"bitstream-generation\">\n<h3>Bitstream Generation<a class=\"headerlink\" href=\"#bitstream-generation\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In order to generate the bitstream for the Digilent Arty A7-35 Board, proceed\nwith the following instruction:</p>\n<ol class=\"arabic\">\n<li><p>Install the SymbiFlow toolchain using instruction available in the\n<a class=\"reference external\" href=\"https://github.com/SymbiFlow/symbiflow-examples\">symbiflow-examples</a> repository.</p></li>\n<li><p>Install the RISC-V toolchain:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14.tar.gz\ntar -xf riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14.tar.gz\n<span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"nv\">$PATH</span>:<span class=\"nv\">$PWD</span>/riscv64-unknown-elf-gcc-8.1.0-2019.01.0-x86_64-linux-ubuntu14/bin/\n</pre></div>\n</div>\n</li>\n<li><p>Download LiteX:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py\nchmod +x litex_setup.py\n./litex_setup.py init\n./litex_setup.py install\n</pre></div>\n</div>\n</li>\n<li><p>Generate the bitstream:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">cd</span> litex/litex/boards/targets <span class=\"o\">&amp;&amp;</span> ./arty.py --toolchain symbiflow --cpu-type vexriscv --sys-clk-freq 80e6 --build\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">litex_vexriscv</span></code> board configuration can be built as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>).\nIn order to build the application for <code class=\"docutils literal notranslate\"><span class=\"pre\">litex_vexriscv</span></code>, set the <code class=\"docutils literal notranslate\"><span class=\"pre\">BOARD</span></code> variable\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">litex_vexriscv</span></code>.</p>\n</div>\n<div class=\"section\" id=\"booting\">\n<h3>Booting<a class=\"headerlink\" href=\"#booting\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can boot from a serial port using <a class=\"reference external\" href=\"https://github.com/timvideos/flterm\">flterm:</a>, e.g.:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>flterm --port /dev/ttyUSB0 --kernel &lt;path_to_zephyr.bin&gt; --kernel-adr 0x40000000\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ubx_bmd340eval_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>u-blox EVK-BMD-34/38: BMD-340-EVAL and BMD-341-EVAL</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"u-blox-evk-bmd-34-38-bmd-340-eval-and-bmd-341-eval\">\n<span id=\"ubx-bmd340eval-nrf52840\"></span><h1>u-blox EVK-BMD-34/38: BMD-340-EVAL and BMD-341-EVAL<a class=\"headerlink\" href=\"#u-blox-evk-bmd-34-38-bmd-340-eval-and-bmd-341-eval\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-340-EVAL and BMD-341-EVAL hardware provides support for the\nu-blox BMD-340 and BMD-341 Bluetooth 5.0 modules, based on the\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU. the BMD-340 and\nBMD-341 are identical in operation except for the antenna. The\nBMD-340 has a PCB antenna while the BMD-341 has a U.FL connector.\nBoth support the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/BMD-34-38-EVAL.png\"><img alt=\"BMD-340-EVAL\" src=\"../../../../_images/BMD-34-38-EVAL.png\" style=\"width: 600px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">BMD-340-EVAL (Credit: u-blox AG)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the BMD-340-EVAL, BMD-340 module, BMD-341-EVAL,\nand BMD-341 module can be found at the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19033353\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.\nAll of the Nordic Semiconductor examples for the nRF52840 DK\n(nrf52840dk_nrf52840) may be used without modification.</p>\n<dl class=\"simple\">\n<dt>..note::</dt><dd><p>The BMD-340 and BMD-341 are identical except for the antennna.\nThroughout this board support package, the filenames utilize\nthe ubx_bmd340eval_nrf52840.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The BMD-340 on the BMD-340-EVAL (or BMD-341 on the BMD-341-EVAL)\ncontains an internal high-frequency oscillator at 32MHz.\nThere is also a low frequency (slow) oscillator of 32.768kHz.\nThe BMD-340 and BMD-341 do not include the slow crystal;\nhowever, the BMD-340-EVAL and BMD-341-EVAL do.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>When targeting a custom design without a slow crystal, be sure\nto modify code to utilize the internal RC oscillator for the\nslow clock.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The BMD-340-EVAL and BMD-341-EVAL board configuration supports\nthe following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nIEEE 802.15.4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19033353\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> for a complete list of BMD-340-EVAL\nand BMD-341-EVAL hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (red) = P0.13</p></li>\n<li><p>LED2 (red) = P0.14</p></li>\n<li><p>LED3 (green) = P0.15</p></li>\n<li><p>LED4 (green) = P0.16</p></li>\n<li><p>D5 (red) = OB LED 1</p></li>\n<li><p>D6 (green) = OB LED 2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.11</p></li>\n<li><p>BUTTON2 = SW2 = P0.12</p></li>\n<li><p>BUTTON3 = SW3 = P0.24</p></li>\n<li><p>BUTTON4 = SW4 = P0.25</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/bmd-340-eval_pin_out.png\"><img alt=\"BMD-340-EVAL pin-out\" src=\"../../../../_images/bmd-340-eval_pin_out.png\" style=\"width: 800px;\"/></a>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The pin numbers noted below are referenced to\nthe pin 1 markings on the BMD-340-EVAL or\nBMD-341-EVAL for each header</p>\n</div>\n<p>J-Link Prog Connector (J2)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 67%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VDD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>IMCU_TMSS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>IMCU_TCKS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>IMCU_TDOS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>IMCU_TDIS</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>Cut off</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>IMCU_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug OUT (J3)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>EXT_VTG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>EXT_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>EXT_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>EXT_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>EXT_GND_DETECT</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>EXT_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Debug IN (J26)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>BMD-340_VCC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>BMD-340_SWDIO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>BMD-340_SWDCLK</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>BMD-340_SWO</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>BMD-340_RESET</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary (J9)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\"/>\n<col style=\"width: 70%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.10 / NFC2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.09 / NFC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.05 / AIN3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.01 / XL2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.00 / XL1</p></td>\n</tr>\n</tbody>\n</table>\n<p>Auxiliary (J10)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 27%\"/>\n<col style=\"width: 73%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>P0.11 / TRACED[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>P0.12 / TRACED[1]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>P0.14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>P0.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>P0.16</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>P0.17 / QSPI_CS</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>P0.18 / RESET</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>P0.19 / QSPI_CLK</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>P0.20 / QSPI_D0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>11</p></td>\n<td><p>P0.21 / QSPI_D1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>12</p></td>\n<td><p>P0.22 / QSPI_D2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>P0.23 / QSPI_D3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>14</p></td>\n<td><p>P0.24</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>15</p></td>\n<td><p>P0.25</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>P1.00 / TRACED[0]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>P1.09 / TRACED[3]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>18</p></td>\n<td><p>No connection</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"arduino-headers\">\n<h4>Arduino Headers<a class=\"headerlink\" href=\"#arduino-headers\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Power (J5)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-34x Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>RESET</p></td>\n<td><p>P0.18 / RESET</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>VSHLD</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>N/C</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n<p>Analog in (J8)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-34x Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>A0</p></td>\n<td><p>P0.03 / AIN1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>A1</p></td>\n<td><p>P0.04 / AIN2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>A2</p></td>\n<td><p>P0.28 / AIN4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>A3</p></td>\n<td><p>P0.29 / AIN5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>A4</p></td>\n<td><p>P0.30 / AIN6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>A5</p></td>\n<td><p>P0.31 / AIN7</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J7)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-34x Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D7</p></td>\n<td><p>P1.08</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>D6</p></td>\n<td><p>P1.07</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D5</p></td>\n<td><p>P1.06</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D4</p></td>\n<td><p>P1.05</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D3</p></td>\n<td><p>P1.04</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D2</p></td>\n<td><p>P1.03</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D1 (TX)</p></td>\n<td><p>P1.02</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D0 (RX)</p></td>\n<td><p>P1.01</p></td>\n</tr>\n</tbody>\n</table>\n<p>Digital I/O (J6)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-34x Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>SCL</p></td>\n<td><p>P0.27</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>SDA</p></td>\n<td><p>P0.26</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>AREF</p></td>\n<td><p>P0.02 / AIN0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>GND</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P1.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P1.14</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P1.13</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8</p></td>\n<td><p>D10 (SS)</p></td>\n<td><p>P1.12</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>D9</p></td>\n<td><p>P1.11</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>D8</p></td>\n<td><p>P1.10</p></td>\n</tr>\n</tbody>\n</table>\n<p>J11</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 30%\"/>\n<col style=\"width: 54%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>BMD-34x Functions</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>D12 (MISO)</p></td>\n<td><p>P0.14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>V5V</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>D13 (SCK)</p></td>\n<td><p>P0.15</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>D11 (MOSI)</p></td>\n<td><p>P0.13</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>RESET</p></td>\n<td><p>N/A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>6</p></td>\n<td><p>N/A</p></td>\n<td><p>N/A</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the BMD-340-EVAL and BMD-341-EVAL board\nconfigurations can be built and flashed in the usual way\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a>\nfor more details); however, the standard debugging targets\nare not currently available.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the BMD-340-EVAL\nor BMD-341-EVAL can be found. For example, under Linux,\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b ubx_bmd340eval_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging\nu-blox boards with a Segger J-LINK-OB IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-bmd-340-eval-and-bmd-341-eval\">\n<h2>Testing the LEDs and buttons in the BMD-340-EVAL and BMD-341-EVAL<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-bmd-340-eval-and-bmd-341-eval\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons\n(switches) and LEDs on the board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running\ncorrectly on your board. The button and LED definitions can be found\nin\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/ubx_bmd340eval_nrf52840/ubx_bmd340eval_nrf52840.dts\">boards/arm/ubx_bmd340eval_nrf52840/ubx_bmd340eval_nrf52840.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"using-uart1\">\n<h2>Using UART1<a class=\"headerlink\" href=\"#using-uart1\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following approach can be used when an application needs to use\nmore than one UART for connecting peripheral devices:</p>\n<ol class=\"arabic\">\n<li><p>Add device tree overlay file to the main directory of your\napplication:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat ubx_bmd340eval_nrf52840.overlay\n<span class=\"go\">&amp;uart1 {</span>\n<span class=\"go\">  compatible = \"nordic,nrf-uarte\";</span>\n<span class=\"go\">  current-speed = &lt;115200&gt;;</span>\n<span class=\"go\">  status = \"okay\";</span>\n<span class=\"go\">  tx-pin = &lt;14&gt;;</span>\n<span class=\"go\">  rx-pin = &lt;16&gt;;</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n<p>In the overlay file above, pin P0.16 is used for RX and P0.14 is\nused for TX</p>\n</li>\n<li><p>Use the UART1 as <code class=\"docutils literal notranslate\"><span class=\"pre\">device_get_binding(\"UART_1\")</span></code></p></li>\n</ol>\n<div class=\"section\" id=\"overlay-file-naming\">\n<h3>Overlay file naming<a class=\"headerlink\" href=\"#overlay-file-naming\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The file has to be named <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;board&gt;.overlay</span></code> and placed in the app\nmain directory to be picked up automatically by the device tree\ncompiler.</p>\n</div>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the data sheet for the BMD-340 at the <a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19033353\">u-blox website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id5\">1</a>, Section 2\n‘Pin definition’. In the table 3 select the pins marked ‘GPIO’.\nNote that pins marked as ‘Standard drive, low frequency I/O only\n(&lt;10 kH’ can only be used in under-10KHz applications.\nThey are not suitable for 115200 speed of UART.</p>\n<p>Translate ‘Pin’ into number for Device tree by using the following\nformula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>,<a href=\"#id5\">3</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.u-blox.com/docs/UBX-19033353\">https://www.u-blox.com/docs/UBX-19033353</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram_l", "size": 65536}, {"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "frdm_k82f", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP FRDM-K82F</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-frdm-k82f\">\n<span id=\"frdm-k82f\"></span><h1>NXP FRDM-K82F<a class=\"headerlink\" href=\"#nxp-frdm-k82f\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The FRDM-K82F is a low-cost development platform for Kinetis K80, K81,\nand K82 MCUs.</p>\n<ul class=\"simple\">\n<li><p>Form-factor compatible with the Arduino R3 pin layout</p></li>\n<li><p>Peripherals enable rapid prototyping, including a six-axis digital\naccelerometer and magnetometer to create full eCompass capabilities, a\ntri-colored LED and two user push-buttons for direct interaction, 2x32 Mb\nQuadSPI external flash, FlexIO camera header, touchpads and headers for use\nwith Bluetooth and 2.4 GHz radio add-on modules</p></li>\n<li><p>OpenSDAv2.1, the NXP open source hardware embedded serial and debug adapter\nrunning an open source bootloader, offers options for serial communication,\nflash programming, and run-control debugging</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/frdm_k82f.jpg\"><img alt=\"FRDM-K82F\" class=\"align-center\" src=\"../../../../_images/frdm_k82f.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MK82FN256VLL15 MCU (150 MHz, 256 KB flash memory, 256 KB RAM, low-power,\ncrystal-less USB, and 100 Low profile Quad Flat Package (LQFP))</p></li>\n<li><p>Dual role USB interface with micro-B USB connector</p></li>\n<li><p>RGB LED</p></li>\n<li><p>FXOS8700CQ accelerometer and magnetometer</p></li>\n<li><p>Two user push buttons</p></li>\n<li><p>2x 32 Mb QSPI flash</p></li>\n<li><p>Flexible power supply option - OpenSDAv2.1 USB, Kinetis K82 USB, and external source</p></li>\n<li><p>Easy access to MCU input/output through Arduino R3 compatible I/O connectors</p></li>\n<li><p>Programmable OpenSDAv2.1 debug circuit supporting the CMSIS-DAP Interface\nsoftware that provides:</p>\n<ul>\n<li><p>Mass storage device (MSD) flash programming interface</p></li>\n<li><p>CMSIS-DAP debug interface over a driver-less USB HID connection providing\nrun-control debugging and compatibility with IDE tools</p></li>\n<li><p>Virtual serial port interface</p></li>\n<li><p>Open source CMSIS-DAP software project</p></li>\n</ul>\n</li>\n<li><p>FlexIO header</p></li>\n</ul>\n<p>For more information about the K82F SoC and FRDM-K82F board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/k-series-cortex-m4/k8x-secure/kinetis-k82-150-mhz-hw-cryptographic-co-processor-quadspi-microcontrollers-mcus-based-on-arm-cortex-m4-core:K82_150\">K82F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/K82P121M150SF5.pdf\">K82F Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/K82P121M150SF5RM.pdf\">K82F Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/design/development-boards/freedom-development-boards/mcu-boards/freedom-development-platform-for-kinetis-k82-k81-and-k80-mcus:FRDM-K82F\">FRDM-K82F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/user-guide/FRDMK82FUG.pdf\">FRDM-K82F User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/schematics/FRDM-K82F-SCH.pdf\">FRDM-K82F Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The frdm_k82f board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>off-chip</p></td>\n<td><p>QSPI flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/frdm_k82f/frdm_k82f_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K82F SoC is configured to use the 12 MHz external oscillator on the board\nwith the on-chip PLL to generate a 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K82F SoC has five UARTs. One is configured for the console, the remaining\nones are not used.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K82F SoC has a USB OTG (USBOTG) controller that supports both\ndevice and host functions through its micro USB connector (J11).\nOnly USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<p>Early versions of this board have an outdated version of the OpenSDA bootloader\nand require an update. Please see the <a class=\"reference external\" href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">DAPLink Bootloader Update</a> page for\ninstructions to update from the CMSIS-DAP bootloader to the DAPLink bootloader.</p>\n<div class=\"section\" id=\"option-1-opensda-daplink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-daplink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.nxp.com/assets/downloads/data/en/snippets-boot-code-headers-monitors/k20dx_frdmk82f_if_crc_legacy_0x8000.bin\">OpenSDA DAPLink FRDM-K82F Firmware</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-jlink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_FRDM-K82F\">OpenSDA J-Link Firmware for FRDM-K82F</a>.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k82f samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J5.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k82f samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! frdm_k82f</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k82f samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! frdm_k82f</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f030r8", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F030R8</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f030r8\">\n<span id=\"nucleo-f030r8-board\"></span><h1>ST Nucleo F030R8<a class=\"headerlink\" href=\"#st-nucleo-f030r8\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32F030R8 MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f030r8.jpg\"><img alt=\"Nucleo F030R8\" class=\"align-center\" src=\"../../../../_images/nucleo_f030r8.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-f030r8.html\">Nucleo F030R8 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F030R8 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32F030R8 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00091010.pdf\">STM32F030 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f030r8.pdf\">STM32F030 data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f030r8 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f030r8/nucleo_f030r8_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f030r8_connectors.png\"><img alt=\"Nucleo F030R8 connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f030r8_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PA9/PA10</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual COM Port)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB11</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI2 NSS/SCK/MISO/MOSI : PB12/PB13/PB14/PB15</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PA5</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">4</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f030r8</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F030R8 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f030r8\">\n<h4>Flashing an application to Nucleo F030R8<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f030r8\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f030r8 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f030r8 samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-f030r8.html\">https://www.st.com/en/evaluation-tools/nucleo-f030r8.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00091010.pdf\">https://www.st.com/resource/en/reference_manual/dm00091010.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f030r8.pdf\">https://www.st.com/resource/en/datasheet/stm32f030r8.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00105823.pdf\">https://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "atsamd21_xpro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM D21 Xplained Pro Evaluation Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-d21-xplained-pro-evaluation-kit\">\n<span id=\"atsamd21-xpro\"></span><h1>SAM D21 Xplained Pro Evaluation Kit<a class=\"headerlink\" href=\"#sam-d21-xplained-pro-evaluation-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM D21 Xplained Pro evaluation kit is ideal for evaluation and\nprototyping with the SAM D21 Cortex®-M0+ processor-based\nmicrocontrollers. The kit includes Atmel’s Embedded Debugger (EDBG),\nwhich provides a full debug interface without the need for additional\nhardware.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/atsamd21_xpro.png\"><img alt=\"ATSAMD21-XPRO\" class=\"align-center\" src=\"../../../../_images/atsamd21_xpro.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21J18 ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>One yellow user LED</p></li>\n<li><p>One mechanical user push button</p></li>\n<li><p>One reset button</p></li>\n<li><p>On-board USB based EDBG unit with serial console</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The atsamd21_xpro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>I2C ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>Universal Serial Bus device ports</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/atsamd21_xpro/atsamd21_xpro_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM D21 Xplained Pro evaluation kit has 3 GPIO controllers. These\ncontrollers are responsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM-D21-Family-Datasheet-DS40001882C.pdf\">SAM D21 Family Datasheet</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> and the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD21-Xplained-Pro_Design-Documentation.zip\">SAM D21\nXplained Pro Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ATSAMD21-XPRO-pinout.png\"><img alt=\"ATSAMD21-XPRO-pinout\" class=\"align-center\" src=\"../../../../_images/ATSAMD21-XPRO-pinout.png\" style=\"width: 500px;\"/></a>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SERCOM0 USART TX : PA10</p></li>\n<li><p>SERCOM0 USART RX : PA11</p></li>\n<li><p>SERCOM1 USART TX : PA16</p></li>\n<li><p>SERCOM1 USART RX : PA19</p></li>\n<li><p>SERCOM2 I2C SDA  : PA08</p></li>\n<li><p>SERCOM2 I2C SCL  : PA09</p></li>\n<li><p>SERCOM3 USART TX : PA22</p></li>\n<li><p>SERCOM3 USART RX : PA23</p></li>\n<li><p>SERCOM5 SPI MISO : PB16</p></li>\n<li><p>SERCOM5 SPI MOSI : PB22</p></li>\n<li><p>SERCOM5 SPI SCK  : PB23</p></li>\n<li><p>USB DP           : PA25</p></li>\n<li><p>USB DM           : PA24</p></li>\n<li><p>GPIO SPI CS      : PB17</p></li>\n<li><p>GPIO/PWM LED0    : PB30</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has six SERCOM based USARTs with three configured as USARTs in\nthis BSP. SERCOM3 is the default Zephyr console.</p>\n<ul class=\"simple\">\n<li><p>SERCOM0 9600 8n1</p></li>\n<li><p>SERCOM1 115200 8n1</p></li>\n<li><p>SERCOM3 115200 8n1 connected to the onboard Atmel Embedded Debugger (EDBG)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 3 TCC based PWM units with up to 4 outputs each and a period\nof 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then LED0 is\ndriven by TCC0 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs. On the SAM D21 Xplained Pro,\nSERCOM5 is connected to an 8 megabit SPI flash.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM D21 Xplained Pro comes with a Atmel Embedded Debugger (EDBG).  This\nprovides a debug interface to the SAMD21 chip and is supported by\nOpenOCD.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamd21_xpro samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the SAM D21 Xplained Pro to your host computer using the USB debug\nport.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>To flash an image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamd21_xpro samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! atsamd21_xpro” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM-D21-Family-Datasheet-DS40001882C.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAM-D21-Family-Datasheet-DS40001882C.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD21-Xplained-Pro_Design-Documentation.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD21-Xplained-Pro_Design-Documentation.zip</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 4, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 1, "instances": [{"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_wl55jc", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 3, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "atsamr21_xpro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM R21 Xplained Pro Evaluation Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-r21-xplained-pro-evaluation-kit\">\n<span id=\"atsamr21-xpro\"></span><h1>SAM R21 Xplained Pro Evaluation Kit<a class=\"headerlink\" href=\"#sam-r21-xplained-pro-evaluation-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM R21 Xplained Pro is a compact evaluation board by Atmel featuring a\nATSAMR21G18A SoC. The SoC includes a SAMR21 ARM Cortex-M0+ micro-controller\nbundled with Atmel’s AT86RF233, a 2.4GHz IEEE802.15.4 compatible radio.\nThe kit includes Atmel’s Embedded Debugger (EDBG), which provides a full\ndebug interface without the need for additional hardware.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/atsamr21_xpro.png\"><img alt=\"ATSAMR21-XPRO\" class=\"align-center\" src=\"../../../../_images/atsamr21_xpro.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMR21G18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>One yellow user LED</p></li>\n<li><p>One mechanical user push button</p></li>\n<li><p>One reset button</p></li>\n<li><p>On-board USB based EDBG unit with serial console</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The atsamr21_xpro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>I2C Peripheral Interface ports</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/atsamr21_xpro/atsamr21_xpro_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM R21 Xplained Pro evaluation kit has 3 GPIO controllers. These\ncontrollers are responsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/devicedoc/sam-r21_datasheet.pdf\">SAM R21 Family Datasheet</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> and the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMR21-Xplained-Pro_Design-Documentation.zip\">SAM R21\nXplained Pro Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ATSAMR21-XPRO-pinout.png\"><img alt=\"ATSAMR21-XPRO-pinout\" class=\"align-center\" src=\"../../../../_images/ATSAMR21-XPRO-pinout.png\" style=\"width: 500px;\"/></a>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SERCOM0 USART TX : PA5</p></li>\n<li><p>SERCOM0 USART RX : PA4</p></li>\n<li><p>SERCOM1 I2C SDA  : PA16</p></li>\n<li><p>SERCOM1 I2C SCL  : PA17</p></li>\n<li><p>SERCOM5 SPI MISO : PB02</p></li>\n<li><p>SERCOM5 SPI MOSI : PB22</p></li>\n<li><p>SERCOM5 SPI SCK  : PB23</p></li>\n<li><p>GPIO SPI CS      : PB03</p></li>\n<li><p>GPIO/PWM LED0    : PA19</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMR21 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMR21 MCU has six SERCOM based USARTs with two configured as USARTs in\nthis BSP. SERCOM0 is the default Zephyr console.</p>\n<ul class=\"simple\">\n<li><p>SERCOM0 115200 8n1 connected to the onboard Atmel Embedded Debugger (EDBG)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMR21 MCU has 3 TCC based PWM units with up to 4 outputs each and a\nperiod of 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then\nLED0 is driven by TCC0 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMR21 MCU has 6 SERCOM based SPIs.</p>\n<ul class=\"simple\">\n<li><p>SERCOM5 is exposed via Xplained Pro Standard Extension Header</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2c-port\">\n<h3>I2C Port<a class=\"headerlink\" href=\"#i2c-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>When connecting an I2C device and a logic analyzer to an I2C port at the same\ntime, the internal pull-up resistors are not sufficient for stable bus\noperation. You probably have to connect external pull-ups to both bus lines. 10K\nis a good value to start with.</p>\n<ul class=\"simple\">\n<li><p>SERCOM1 is exposed via Xplained Pro Standard Extension Header</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"radio\">\n<h3>Radio<a class=\"headerlink\" href=\"#radio\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMR21 SoC includes an on-chip AT86RF233 radio. It is internally\nconnected via SPI and some GPIO pins and behaves the same way as\nexternally connected SPI devices.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 13%\"/>\n<col style=\"width: 87%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Sensor</p></th>\n<th class=\"head\"><p>AT86RF233</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Type</p></td>\n<td><p>2.4GHz IEEE802.15.4 radio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Vendor</p></td>\n<td><p>Atmel</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Datasheet</p></td>\n<td><p><a class=\"reference external\" href=\"http://www.atmel.com/images/atmel-8351-mcu_wireless-at86rf233_datasheet.pdf\">Datasheet</a></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>connected to</p></td>\n<td><p>SPI_0</p></td>\n</tr>\n<tr class=\"row-even\"><td colspan=\"2\"><p>Pin Config:</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Device</p></td>\n<td><p>SERCOM4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MOSI</p></td>\n<td><p>PB30 (OUT, SPI MOSI)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MISO</p></td>\n<td><p>PC19 (IN, SPI MISO)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SCLK</p></td>\n<td><p>PC18 (OUT, SPI SCLK)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CS</p></td>\n<td><p>PB31 (OUT, GPIO output)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IRQ</p></td>\n<td><p>PB00 (IN, GPIO external interrupt)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RSTN</p></td>\n<td><p>PB15 (OUT, GPIO output)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SLP_TR</p></td>\n<td><p>PA20 (OUT, GPIO output)</p></td>\n</tr>\n</tbody>\n</table>\n<p>Zephyr provide several samples that can use this technology. You can check\n<a class=\"reference internal\" href=\"../../../../samples/net/wpanusb/README.html#wpanusb-sample\"><span class=\"std std-ref\">wpanusb sample</span></a> and <a class=\"reference internal\" href=\"../../../../samples/net/wpan_serial/README.html#wpan-serial-sample\"><span class=\"std std-ref\">802.15.4 “serial-radio” sample</span></a> examples as starting\npoints. Another good test can be done with IPv6 by using the server/client\necho demo. More information at <a class=\"reference internal\" href=\"../../../../samples/ethernet2modbus/README.html#sockets-echo-server-sample\"><span class=\"std std-ref\">Socket Echo Server</span></a> and\n<a class=\"reference internal\" href=\"../../../../samples/net/sockets/echo_client/README.html#sockets-echo-client-sample\"><span class=\"std std-ref\">Socket Echo Client</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM R21 Xplained Pro comes with a Atmel Embedded Debugger (EDBG).  This\nprovides a debug interface to the SAMR21 chip and is supported by\nOpenOCD.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamr21_xpro samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the SAM R21 Xplained Pro to your host computer using the USB debug\nport.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>To flash an image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamr21_xpro samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/devicedoc/sam-r21_datasheet.pdf\">http://ww1.microchip.com/downloads/en/devicedoc/sam-r21_datasheet.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMR21-Xplained-Pro_Design-Documentation.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAMR21-Xplained-Pro_Design-Documentation.zip</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 196608}, {"label": "backup0", "size": 8192}], "main_ram_size": 196608, "gpio": {"count": 4, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "adafruit_itsybitsy_m4_express", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Adafruit ItsyBitsy M4 Express</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"adafruit-itsybitsy-m4-express\">\n<span id=\"id1\"></span><h1>Adafruit ItsyBitsy M4 Express<a class=\"headerlink\" href=\"#adafruit-itsybitsy-m4-express\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit ItsyBitsy M4 express is a small (36 mm x 18 mm) ARM development\nboard with an onboard RGB LED, USB port, 2 MiB of SPI flash, and range of I/O\nbroken out onto 23 GPIO pins.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/adafruit_itsybitsy_m4_express.png\"><img alt=\"Adafruit ItsyBitsy M4 Express\" class=\"align-center\" src=\"../../../../_images/adafruit_itsybitsy_m4_express.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD51G19A ARM Cortex-M4 processor at 120 MHz</p></li>\n<li><p>512 KiB of flash memory and 192 KiB of RAM</p></li>\n<li><p>2 MiB of SPI flash</p></li>\n<li><p>Internal trimmed 8 MHz oscillator</p></li>\n<li><p>A user LED</p></li>\n<li><p>An RGB DotStar LED</p></li>\n<li><p>Native USB port</p></li>\n<li><p>One reset button</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The adafruit_itsybitsy_m4_express board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>Nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TRNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random Number Generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HWINFO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Unique 128 bit serial number</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>Real-Time Counter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog Timer</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>PWM</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/adafruit_itsybitsy_m4_express/adafruit_itsybitsy_m4_express_defconfig\">boards/arm/adafruit_itsybitsy_m4_express/adafruit_itsybitsy_m4_express_defconfig</a>.</p>\n<p>Zephyr can use the default Cortex-M SYSTICK timer or the SAM0 specific RTC.\nTo use the RTC, set <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_CORTEX_M_SYSTICK=n</span></code> and set\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_SYS_CLOCK_TICKS_PER_SEC</span></code> to no more than 32 kHZ divided by 7,\ni.e. no more than 4500.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4\">Adafruit Learning System</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> has detailed information about\nthe board including <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/pinouts\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/downloads\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD51 MCU is configured to use the 32 kHz internal oscillator\nwith the on-chip PLL generating the 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD51 MCU has 6 SERCOM based USARTs.  On the ItsyBitsy, SERCOM3 is\nthe Zephyr console and is available on pins 0 (RX) and 1 (TX).</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD51 MCU has 6 SERCOM based SPIs.  On the ItsyBitsy, SERCOM1 can be put\ninto SPI mode and used to connect to devices over the SCK (SCLK), MO (MOSI), and\nMI (MISO) pins.</p>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD51 has three PWM generators with up to six channels each.  <code class=\"code docutils literal notranslate\"><span class=\"pre\">TCC_0</span></code>\nhas a resolution of 24 bits and all other generators are 16 bit.  <code class=\"code docutils literal notranslate\"><span class=\"pre\">TCC_1</span></code>\npin 2 is mapped to PA18 (D7) and pin 3 is mapped to PA19 (D9).</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD51 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The ItsyBitsy ships with a the BOSSA compatible UF2 bootloader.  The\nbootloader can be entered by quickly tapping the reset button twice.</p>\n<p>Additionally, if <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_USB_CDC_ACM</span></code> is enabled then the bootloader\nwill be entered automatically when you run <code class=\"code docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_itsybitsy_m4_express samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the ItsyBitsy to your host computer using USB</p></li>\n<li><p>Connect a 3.3 V USB to serial adapter to the board and to the\nhost.  See the <a class=\"reference internal\" href=\"#serial-port\">Serial Port</a> section above for the board’s pin\nconnections.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyUSB0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Tap the reset button twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_itsybitsy_m4_express samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In addition to the built-in bootloader, the ItsyBitsy can be flashed and\ndebugged using a SWD probe such as the Segger J-Link.</p>\n<ol class=\"arabic\">\n<li><p>Connect the board to the probe by connecting the <code class=\"code docutils literal notranslate\"><span class=\"pre\">SWCLK</span></code>,\n<code class=\"code docutils literal notranslate\"><span class=\"pre\">SWDIO</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">RESET</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">GND</span></code>, and <code class=\"code docutils literal notranslate\"><span class=\"pre\">3V3</span></code> pins on the\nItsyBitsy to the <code class=\"code docutils literal notranslate\"><span class=\"pre\">SWCLK</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">SWDIO</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">RESET</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">GND</span></code>,\nand <code class=\"code docutils literal notranslate\"><span class=\"pre\">VTref</span></code> pins on the <a class=\"reference external\" href=\"https://www.segger.com/products/debug-probes/j-link/technology/interface-description/\">J-Link</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">4</a>.</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_itsybitsy_m4_express samples/hello_world</span>\n<span class=\"go\">west flash</span>\n<span class=\"go\">west build -t -r</span>\n<span class=\"go\">west build -t openocd</span>\n</pre></div>\n</div>\n</li>\n<li><p>Start debugging:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_itsybitsy_m4_express samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4\">https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/pinouts\">https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/pinouts</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/downloads\">https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/downloads</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.segger.com/products/debug-probes/j-link/technology/interface-description/\">https://www.segger.com/products/debug-probes/j-link/technology/interface-description/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 4, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}, {"label": "PWM_6"}, {"label": "PWM_22"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l053r8", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L053R8</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l053r8\">\n<span id=\"nucleo-l053r8-board\"></span><h1>ST Nucleo L053R8<a class=\"headerlink\" href=\"#st-nucleo-l053r8\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-64 development board with STM32L053R8 MCU, supports Arduino and ST morpho connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Uno V3 connectivity support and the ST morpho headers allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l053r8.jpg\"><img alt=\"Nucleo L053R8\" class=\"align-center\" src=\"../../../../_images/nucleo_l053r8.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l053r8.html\">Nucleo L053R8 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo L053R8 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32L053R8 can be found in the\n<a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00095744.pdf\">STM32L0x3 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l053r8 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l053r8/nucleo_l053r8_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l053r8_connectors.png\"><img alt=\"Nucleo L053R8 connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l053r8_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7</p></li>\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l053r8</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L053R8 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l053r8\">\n<h4>Flashing an application to Nucleo L053R8<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l053r8\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l053r8 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l053r8 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l053r8.html\">http://www.st.com/en/evaluation-tools/nucleo-l053r8.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00095744.pdf\">http://www.st.com/resource/en/reference_manual/dm00095744.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">http://www.st.com/resource/en/user_manual/dm00105823.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 425984}], "main_flash_size": 425984, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "mec2016evb_assy6797", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>MEC2016EVB ASSY6797</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"mec2016evb-assy6797\">\n<span id=\"id1\"></span><h1>MEC2016EVB ASSY6797<a class=\"headerlink\" href=\"#mec2016evb-assy6797\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The MEC2016EVB_ASSY6797 kit is a development platform to evaluate the\nMicrochip MEC1701X series microcontrollers. This board needs to be mated with\npart number MEC170X 144WFBA SOLDER DC ASSY 6801(cpu board) in order to operate.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mec2016evb_assy6797.jpg\"><img alt=\"MEC2016 EVB ASSY 6797\" class=\"align-center\" src=\"../../../../_images/mec2016evb_assy6797.jpg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MEC1701QC2SZ ARM Cortex-M4F Processor</p></li>\n<li><p>480 KB RAM and 64 KB boot ROM</p></li>\n<li><p>2 Microchip BC-Link Interconnection bus</p></li>\n<li><p>Keyboard interface</p></li>\n<li><p>ADC &amp; GPIO headers</p></li>\n<li><p>UART0 and UART1</p></li>\n<li><p>FAN0, FAN1, FAN2 headers</p></li>\n<li><p>FAN PWM interface</p></li>\n<li><p>Jtag and Trace ports</p></li>\n<li><p>PECI interface 3.0</p></li>\n<li><p>I2C voltage translator</p></li>\n<li><p>10 SMBUS headers</p></li>\n<li><p>3 UDP I2C headers</p></li>\n<li><p>VCI interface</p></li>\n<li><p>5 independent Hardware Driven PS/2 Ports</p></li>\n<li><p>eSPI header</p></li>\n<li><p>LPC sideband headers</p></li>\n<li><p>4 Breathing/Blinking LEDs</p></li>\n<li><p>2 Sockets for SPI NOR chips</p></li>\n<li><p>One reset and VCC_PWRDGD pushbuttons</p></li>\n</ul>\n<p>For more information about the SOC please visit:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/MEC170x-Data-Sheet-DS00002206D.pdf\">MEC170x Reference Manual</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mec2016evb_assy6797 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr (at the moment)</p>\n<p>The default configuration can be found in the Kconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mec2016evb_assy6797/mec2016evb_assy6797_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Microchip to provide the schematic for this board.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MEC1701 MCU is configured to use the 48Mhz internal oscillator with the\non-chip PLL to generate a resulting EC clock rate of 12 MHz. See Processor clock\ncontrol register (chapter 4 in user manual)</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>UART0 is configured for serial logs.</p>\n</div>\n</div>\n<div class=\"section\" id=\"jumper-settings\">\n<h2>Jumper settings<a class=\"headerlink\" href=\"#jumper-settings\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Please follow the jumper settings below to properly demo this\nboard. Advanced users may deviate from this recommendation.</p>\n<div class=\"section\" id=\"jump-setting-for-mec2016-evb-assy-6797-rev-a1p0\">\n<h3>Jump setting for MEC2016 EVB Assy 6797 Rev A1p0<a class=\"headerlink\" href=\"#jump-setting-for-mec2016-evb-assy-6797-rev-a1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Power-related jumpers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 14%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP31</p></th>\n<th class=\"head\"><p>JP32</p></th>\n<th class=\"head\"><p>JP35</p></th>\n<th class=\"head\"><p>JP36</p></th>\n<th class=\"head\"><p>JP49</p></th>\n<th class=\"head\"><p>JP50</p></th>\n<th class=\"head\"><p>JP54</p></th>\n<th class=\"head\"><p>JP55</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 18%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP56</p></th>\n<th class=\"head\"><p>JP57</p></th>\n<th class=\"head\"><p>JP58</p></th>\n<th class=\"head\"><p>JP60</p></th>\n<th class=\"head\"><p>JP61</p></th>\n<th class=\"head\"><p>JP102</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n<p>These jumpers configure VCC Power good, nRESETI and JTAG_STRAP respectively.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 42%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP1\n(VCC Power good)</p></th>\n<th class=\"head\"><p>JP2\n(nRESETI)</p></th>\n<th class=\"head\"><p>JP51\n(JTAG_STRAP)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n<p>Each column of the following table illustrates how to enable UART0, JTAG,\nPVT SPI, SHD SPI and LED0-3 respectively.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP27\n(UART0)</p></th>\n<th class=\"head\"><p>JP10\n(JTAG)</p></th>\n<th class=\"head\"><p>JP34\n(PVT SPI)</p></th>\n<th class=\"head\"><p>JP75\n(SHD SPI)</p></th>\n<th class=\"head\"><p>JP68\n(LED0-3)</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>11-12</p></td>\n<td><p>2-3</p></td>\n<td><p>2-3</p></td>\n<td><p>2-3</p></td>\n<td><p>1-2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>8-9</p></td>\n<td><p>5-6</p></td>\n<td><p>5-6</p></td>\n<td><p>5-6</p></td>\n<td><p>3-4</p></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td><p>8-9</p></td>\n<td><p>8-9</p></td>\n<td><p>8-9</p></td>\n<td><p>5-6</p></td>\n</tr>\n<tr class=\"row-odd\"><td></td>\n<td><p>11-12</p></td>\n<td><p>11-12</p></td>\n<td><p>11-12</p></td>\n<td><p>7-8</p></td>\n</tr>\n<tr class=\"row-even\"><td></td>\n<td></td>\n<td><p>14-15</p></td>\n<td><p>14-15</p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td></td>\n<td></td>\n<td><p>17-18</p></td>\n<td><p>17-18</p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"jump-settings-for-mec170x-144wfbga-socket-dc-assy-6801-rev-b1p0\">\n<h3>Jump settings for MEC170x 144WFBGA Socket DC Assy 6801 Rev B1p0<a class=\"headerlink\" href=\"#jump-settings-for-mec170x-144wfbga-socket-dc-assy-6801-rev-b1p0\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The jumper configuration explained above covers the base board. Now the CPU\nboard requires the following settings.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 50%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>JP1</p></th>\n<th class=\"head\"><p>JP2</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1-2</p></td>\n<td><p>2-3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>This board comes with a Cortex ETM port which facilitates tracing and debugging\nusing a single physical connection.  In addition, it comes with sockets for\nJTAG only sessions.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Connect the SPI Dongle ASSY 6791 to J36 (SPI dongle) in order to flash and\nboot from SHD SPI NOR. Then proceed to flash using Dediprog SF100 or a\nsimilar tool for flashing SPI chips. Remember that SPI MISO/MOSI are\nswapped on dediprog headers!</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Connect the MEC2016EVB_ASSY_6797 board to your host computer using the\nUART0 port. Then build <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application. It is important\nto generate a binary with a new load address, for example do the following:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>${OBJCOPY} --change-addresses -0xb0000 -O binary -S ${in_elf} ${out_bin}\n</pre></div>\n</div>\n<p>Once you obtain the binary, proceed to use the microchip tool mec2016_spi_gen\nin order to create the final binary. This binary is what you need to flash\nin your spi nor.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mec2016evb_assy6797 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! mec2016evb_assy6797” in your terminal.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mec2016evb_assy6797 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/MEC170x-Data-Sheet-DS00002206D.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/MEC170x-Data-Sheet-DS00002206D.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 8192}], "main_ram_size": 8192, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32vl_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32VL Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32vl-discovery\">\n<span id=\"stm32vl-disco-board\"></span><h1>ST STM32VL Discovery<a class=\"headerlink\" href=\"#st-stm32vl-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Discovery series comes in many varieties, in this case the “Value\nLine” STM32F100x SoC series is showcased. Like other Discovery board, an\nintegrated ST-LINK debugger and programmer is included (V1), but the only\nincluded I/O devices are two user LEDs and one user button.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32vl_disco.jpg\"><img alt=\"STM32VLDISCOVERY\" class=\"align-center\" src=\"../../../../_images/stm32vl_disco.jpg\" style=\"width: 552px; height: 1024px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/stm32vldiscovery.html\">STM32VLDISCOVERY website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Discovery board features:</p>\n<ul>\n<li><p>On-board ST-LINK/V1 with selection mode switch to use the kit as a standalone\nST-LINK/V1 (with SWD connector for programming and debugging)</p></li>\n<li><p>Board power supply: through USB bus or from an external 5 V supply voltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>Four LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>LD1 (red) for 3.3 V power on</p></li>\n<li><p>LD2 (red/green) for USB communication</p></li>\n<li><p>LD3 (green) for PC9 output</p></li>\n<li><p>LD4 (blue) for PC8 output</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push buttons (user and reset)</p></li>\n<li><p>Extension header for all LQFP64 I/Os for quick connection to prototyping board\nand easy probing</p></li>\n</ul>\n<p>More information about the STM32F100x can be found in the\n<a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00246267.pdf\">STM32F100x reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> and the <a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f100cb.pdf\">STM32F100x data sheet</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32vl_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\" id=\"id1\">\n<caption><span class=\"caption-text\">Supported hardware</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this table\">¶</a></caption>\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>window watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32vl_disco/stm32vl_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>UART_3_TX : PB10</p></li>\n<li><p>UART_3_RX : PB11</p></li>\n<li><p>SPI1_NSS : PA4</p></li>\n<li><p>SPI1_SCK : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS : PB12</p></li>\n<li><p>SPI2_SCK : PB13</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB11</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/cd00267113.pdf\">STM32VLDISCOVERY board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">4</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32vl_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32VLDISCOVERY board includes an ST-LINK/V1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application\">\n<h4>Flashing an application<a class=\"headerlink\" href=\"#flashing-an-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32vl_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32vl_disco samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"usb-mass-storage-issues\">\n<h3>USB mass storage issues<a class=\"headerlink\" href=\"#usb-mass-storage-issues\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ST-LINK/V1 includes a buggy USB mass storage gadget. To connect to the\nST-LINK from Linux, you might need to ignore the device using modprobe\nconfiguration parameters:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"options usb-storage quirks=483:3744:i\"</span> <span class=\"p\">|</span> sudo tee /etc/modprobe.d/local.conf\n$ sudo modprobe -r usb-storage\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/stm32vldiscovery.html\">https://www.st.com/en/evaluation-tools/stm32vldiscovery.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00246267.pdf\">https://www.st.com/resource/en/reference_manual/cd00246267.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f100cb.pdf\">https://www.st.com/resource/en/datasheet/stm32f100cb.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/cd00267113.pdf\">https://www.st.com/resource/en/user_manual/cd00267113.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH0", "size": 134217728}], "main_flash_size": 134217728, "memory": [], "main_ram_size": 0, "gpio": {"count": 1, "instances": [{"label": "gpio_0"}]}, "i2c": {"count": 1, "instances": [{"label": "i2c_0"}]}, "spi": {"count": 3, "instances": [{"label": "spi_0"}, {"label": "spi_1"}, {"label": "spi_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "uart_0"}, {"label": "uart_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "pwm_0"}, {"label": "pwm_1"}, {"label": "pwm_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "hifive1", "arch": "riscv", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">RISCV Boards</a> »</li>\n<li>SiFive HiFive1</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sifive-hifive1\">\n<span id=\"hifive1\"></span><h1>SiFive HiFive1<a class=\"headerlink\" href=\"#sifive-hifive1\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The HiFive1 is an Arduino-compatible development board with\nan FE310 RISC-V SoC.\nMore information can be found on\n<a class=\"reference external\" href=\"https://www.sifive.com/products/hifive1\">SiFive’s website</a>.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">hifive1</span></code> board configuration can be built as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>) using the corresponding board name:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hifive1</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In order to upload the application to the device, you’ll need OpenOCD with\nRISC-V support. Download the tarball for your OS from the <a class=\"reference external\" href=\"https://www.sifive.com/boards\">SiFive website</a> and extract it.</p>\n<p>The Zephyr SDK uses a bundled version of OpenOCD by default. You can\noverwrite that behavior by adding the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DOPENOCD=&lt;path/to/riscv-openocd/bin/openocd&gt;</span></code> parameter when building:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hifive1 -- -DOPENOCD=&lt;path/to/riscv-openocd/bin/openocd&gt;</span>\n</pre></div>\n</div>\n<p>When using a custom toolchain it should be enough to have the downloaded\nversion of the binary in your <code class=\"docutils literal notranslate\"><span class=\"pre\">PATH</span></code>.</p>\n<p>Now you can flash the application as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">ninja flash</span>\n</pre></div>\n</div>\n<p>Depending on your OS you might have to run the flash command as superuser.</p>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the detailed overview about <a class=\"reference internal\" href=\"../../../../application/index.html#application-debugging\"><span class=\"std std-ref\">Application Debugging</span></a>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "atsamd20_xpro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM D20 Xplained Pro Evaluation Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-d20-xplained-pro-evaluation-kit\">\n<span id=\"atsamd20-xpro\"></span><h1>SAM D20 Xplained Pro Evaluation Kit<a class=\"headerlink\" href=\"#sam-d20-xplained-pro-evaluation-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM D20 Xplained Pro evaluation kit is ideal for evaluation and\nprototyping with the SAM D20 Cortex®-M0+ processor-based\nmicrocontrollers. The kit includes Atmel’s Embedded Debugger (EDBG),\nwhich provides a full debug interface without the need for additional\nhardware.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/atsamd20_xpro.jpg\"><img alt=\"ATSAMD20-XPRO\" class=\"align-center\" src=\"../../../../_images/atsamd20_xpro.jpg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD20J18 ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>One yellow user LED</p></li>\n<li><p>One mechanical user push button</p></li>\n<li><p>One reset button</p></li>\n<li><p>On-board USB based EDBG unit with serial console</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The atsamd20_xpro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/atsamd20_xpro/atsamd20_xpro_defconfig\">boards/arm/atsamd20_xpro/atsamd20_xpro_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://www.microchip.com/DevelopmentTools/ProductDetails.aspx?PartNO=ATSAMD20-XPRO\">Microchip website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed information about board\nconnections. Download the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD20-Xplained-Pro_Design-Documentation.zip\">SAM D20 Xplained Pro Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD20 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD20 MCU has 6 SERCOM based USARTs. One of the USARTs\n(SERCOM3) is connected to the onboard Atmel Embedded Debugger (EDBG).\nSERCOM4 is available on the EXT1 connector.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD20 MCU has 6 SERCOM based SPIs. On the SAM D20 Xplained Pro,\nSERCOM0 is available on the EXT1 connector.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM D20 Xplained Pro comes with a Atmel Embedded Debugger (EDBG).  This\nprovides a debug interface to the SAMD20 chip and is supported by\nOpenOCD.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamd20_xpro samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the SAM D20 Xplained Pro to your host computer using the USB debug\nport.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>To flash an image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsamd20_xpro samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.microchip.com/DevelopmentTools/ProductDetails.aspx?PartNO=ATSAMD20-XPRO\">https://www.microchip.com/DevelopmentTools/ProductDetails.aspx?PartNO=ATSAMD20-XPRO</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD20-Xplained-Pro_Design-Documentation.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD20-Xplained-Pro_Design-Documentation.zip</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_F"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 2, "instances": [{"label": "USART_0"}, {"label": "USART_1"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32pg_stk3401a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFM32 Pearl Gecko Starter Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efm32-pearl-gecko-starter-kit\">\n<span id=\"efm32pg-stk3401a\"></span><h1>EFM32 Pearl Gecko Starter Kit<a class=\"headerlink\" href=\"#efm32-pearl-gecko-starter-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFM32 Pearl Gecko Starter Kit EFM32PG-STK3401A contains an MCU from the\nEFM32PG family built on an ARM® Cortex®-M4F processor with excellent low\npower capabilities.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/efm32pg_stk3401a.jpg\"><img alt=\"EFM32PG-SLSTK3401A\" src=\"../../../../_images/efm32pg_stk3401a.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">EFM32PG-SLSTK3401A (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring provides real-time information about the energy\nconsumption of an application or prototype design.</p></li>\n<li><p>Ultra low power 128x128 pixel Memory-LCD</p></li>\n<li><p>2 user buttons, 2 LEDs and 2 capacitive buttons</p></li>\n<li><p>Humidity and temperature sensor</p></li>\n<li><p>On-board Segger J-Link USB debugger</p></li>\n</ul>\n<p>For more information about the EFM32PG SoC and EFM32PG-STK3401A board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/mcu/32-bit/efm32-pearl-gecko\">EFM32PG Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/efm32pg1-datasheet.pdf\">EFM32PG1 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/efm32pg1-rm.pdf\">EFM32PG1 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/development-tools/mcu/32-bit/efm32pg1-starter-kit\">EFM32PG-STK3401A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug154-stk3401-user-guide.pdf\">EFM32PG-STK3401A User Guide</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32pg_stk3401a board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtcc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c port-polling</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32pg_stk3401a/efm32pg_stk3401a_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are currently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG1 SoC has five GPIO controllers (PORTA to PORTD and PORTF) and\nall are enabled for the EFM32PG-STK3401A board.</p>\n<p>In the following table, the column <strong>Name</strong> contains pin names. For example, PF4\nmeans pin number 4 on PORTF, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PF4</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF5</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PF6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PF7</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA5</p></td>\n<td><p>GPIO</p></td>\n<td><p>Board Controller Enable\nEFM_BC_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PA0</p></td>\n<td><p>UART_TX</p></td>\n<td><p>UART TX Console VCOM_TX US0_TX #0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PA1</p></td>\n<td><p>UART_RX</p></td>\n<td><p>UART RX Console VCOM_RX US0_RX #0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD10</p></td>\n<td><p>UART_TX</p></td>\n<td><p>EXP12_UART_TX LEU0_TX #18</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PD11</p></td>\n<td><p>UART_RX</p></td>\n<td><p>EXP14_UART_RX LEU0_RX #18</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC10</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>ENV_I2C_SDA I2C0_SDA #15</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC11</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>ENV_I2C_SCL I2C0_SCL #15</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG SoC is configured to use the 40 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG SoC has two USARTs and one Low Energy UART (LEUART).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32PG-STK3401A includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a mass storage device and a\nUSB serial port.</p></li>\n<li><p>A serial flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efm32pg-stk3401a\">\n<h4>Flashing an application to EFM32PG-STK3401A<a class=\"headerlink\" href=\"#flashing-an-application-to-efm32pg-stk3401a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32pg_stk3401a samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFM32PG-STK3401A to your host computer using the USB port and you\nshould see a USB connection which exposes a mass storage device(STK3401A).\nCopy the generated zephyr.bin to the STK3401A drive.</p>\n<p>Use a USB-to-UART converter such as an FT232/CP2102 to connect to the UART on the\nexpansion header.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you’ll see the following message on the corresponding serial port\nterminal session:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "bmd_345_eval", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 2147483648}], "main_ram_size": 2147483648, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 15, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}, {"label": "I2C_5"}, {"label": "I2C_6"}, {"label": "I2C_7"}, {"label": "I2C_PSE_0"}, {"label": "I2C_PSE_1"}, {"label": "I2C_PSE_2"}, {"label": "I2C_PSE_3"}, {"label": "I2C_PSE_4"}, {"label": "I2C_PSE_5"}, {"label": "I2C_PSE_6"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 11, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_PSE_0"}, {"label": "UART_PSE_1"}, {"label": "UART_PSE_2"}, {"label": "UART_PSE_3"}, {"label": "UART_PSE_4"}, {"label": "UART_PSE_5"}, {"label": "UART_1_FIXED"}, {"label": "UART_2_FIXED"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "ehl_crb_sbl", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_E70", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 393216}], "main_ram_size": 393216, "gpio": {"count": 5, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}, {"label": "PORTE"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 5, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "sam_v71b_xult", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "adafruit_feather_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Adafruit Feather nRF52840 Express</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"adafruit-feather-nrf52840-express\">\n<span id=\"adafruit-feather-nrf52840\"></span><h1>Adafruit Feather nRF52840 Express<a class=\"headerlink\" href=\"#adafruit-feather-nrf52840-express\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Adafruit Feather nRF52840 provides support for the Nordic Semiconductor\nnRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/adafruit_feather_nrf52840.jpg\"><img alt=\"Adafruit Feather nRF52840 Express\" src=\"../../../../_images/adafruit_feather_nrf52840.jpg\" style=\"width: 640px;\"/></a>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>nRF52840 ARM Cortex-M4F processor at 64 MHz</p></li>\n<li><p>1 MB flash memory and 256 KB of SRAM</p></li>\n<li><p>Battery connector and charger for 3.7 V lithium polymer batteries</p></li>\n<li><p>Charging indicator LED</p></li>\n<li><p>2 User LEDs</p></li>\n<li><p>1 NeoPixel LED</p></li>\n<li><p>Reset button</p></li>\n<li><p>SWD connector</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Adafruit Feather nRF52840 board configuration supports the\nfollowing hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/\">Adafruit Feather nRF52840 Express Learn site</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed\ninformation about the board including <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/pinouts\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> and the <a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/downloads\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (red) = P1.15</p></li>\n<li><p>LED1 (blue) = P1.10</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SWITCH = P1.02</p></li>\n<li><p>RESET = P0.18</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">adafruit_feather_nrf52840</span></code> board configuration\ncan be built and flashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Flashing Zephyr onto the <code class=\"docutils literal notranslate\"><span class=\"pre\">adafruit_feather_nrf52480</span></code> board requires\nan external programmer. The programmer is attached to the SWD header.</p>\n<p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> sample application.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_nrf52840 samples/blinky</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Flash the image.</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b adafruit_feather_nrf52840 samples/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>You should see the the red LED blink.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/\">https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/pinouts\">https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/pinouts</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/downloads\">https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/downloads</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 5, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 4, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f412g_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F412G Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f412g-discovery\">\n<span id=\"stm32f412g-disco-board\"></span><h1>ST STM32F412G Discovery<a class=\"headerlink\" href=\"#st-stm32f412g-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F412 Discovery kit features an ARM Cortex-M4 based STM32F412ZG MCU\nwith a wide range of connectivity support and configurations Here are\nsome highlights of the STM32F412G-DISCO board:</p>\n<ul>\n<li><p>STM32F412ZGT6 microcontroller featuring 1 Mbyte of Flash memory and 256 Kbytes of RAM in an LQFP144 package</p></li>\n<li><p>On-board ST-LINK/V2-1 SWD debugger supporting USB re-enumeration capability:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB virtual COM port</p></li>\n<li><p>mass storage</p></li>\n<li><p>debug port</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>1.54 inch 240x240 pixel TFT color LCD with parallel interface and capacitive touchscreen</p></li>\n<li><p>I2S Audio CODEC, with a stereo headset jack, including analog microphone input and a loudspeaker output</p></li>\n<li><p>Stereo digital MEMS microphones</p></li>\n<li><p>MicroSD card connector extension</p></li>\n<li><p>I2C extension connector</p></li>\n<li><p>128 Mbit Quad-SPI Nor Flash</p></li>\n<li><p>Reset button and Joystick</p></li>\n<li><p>Four color user LEDs.</p></li>\n<li><p>USB OTG FS with Micro-AB connector</p></li>\n<li><p>Four power supply options:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>ST-LINK/V2-1 USB connector</p></li>\n<li><p>User USB FS connector</p></li>\n<li><p>VIN from Arduino* connectors</p></li>\n<li><ul>\n<li><p>5 V from Arduino* connectors</p></li>\n</ul>\n</li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two power supplies for MCU: 2.0 V and 3.3 V</p></li>\n<li><p>Compatible with Arduino(tm) Uno revision 3 connectors</p></li>\n<li><p>Extension connector for direct access to various features of STM32F412ZGT6 MCU</p></li>\n<li><p>Comprehensive free software including a variety of examples, part of STM32Cube package</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f412g_disco.jpg\"><img alt=\"STM32F412G-DISCO\" class=\"align-center\" src=\"../../../../_images/stm32f412g_disco.jpg\" style=\"width: 700px; height: 522px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/32f412gdiscovery.html\">32F412GDISCOVERY website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F469I-DISCO Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F412ZGT6 in LQFP144 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>100 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>1 MB Flash</p></li>\n<li><p>256 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>LCD parallel interface, 8080/6800 modes</p></li>\n<li><p>1x12-bit ADC with 16 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (12)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (4)</p></li>\n<li><p>I2C (4)</p></li>\n<li><p>SPI (5)</p></li>\n<li><p>SDIO</p></li>\n<li><p>2xCAN</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>True random number generator</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F412ZG can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f412zg.html\">STM32F412ZG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00180369.pdf\">STM32F412 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f412g_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>QSPI NOR</p></td>\n<td><p>on-chip</p></td>\n<td><p>off-chip flash</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f412g_disco/stm32f412g_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F412G-DISCO Discovery kit has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00275919.pdf\">32F412GDISCOVERY board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>LD1 : PE0</p></li>\n<li><p>LD2 : PE1</p></li>\n<li><p>LD3 : PE2</p></li>\n<li><p>LD4 : PE3</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F412G-DISCO System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 100MHz,\ndriven internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F412G Discovery kit has up to 4 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f412g_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F412G-DISCO Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f412g-disco\">\n<h4>Flashing an application to STM32F412G-DISCO<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f412g-disco\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM32F412G-DISCO Discovery kit to your host computer using\nthe USB port, then run a serial host program to connect with your\nboard:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f412g_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f412g_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}, {"label": "backup0", "size": 8192}], "main_ram_size": 262144, "gpio": {"count": 4, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "atsame54_xpro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM E54 Xplained Pro Evaluation Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam-e54-xplained-pro-evaluation-kit\">\n<span id=\"atsame54-xpro\"></span><h1>SAM E54 Xplained Pro Evaluation Kit<a class=\"headerlink\" href=\"#sam-e54-xplained-pro-evaluation-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM E54 Xplained Pro evaluation kit is ideal for evaluation and\nprototyping with the SAM E54 Cortex®-M4F processor-based\nmicrocontrollers. The kit includes Atmel’s Embedded Debugger (EDBG),\nwhich provides a full debug interface without the need for additional\nhardware.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/atsame54_xpro.png\"><img alt=\"ATSAME54-XPRO\" class=\"align-center\" src=\"../../../../_images/atsame54_xpro.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul>\n<li><p>ATSAME54P20A ARM Cortex-M4F processor at 120 MHz</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>1024 KiB flash memory and 256 KiB of RAM</p></li>\n<li><p>One yellow user LED</p></li>\n<li><p>One mechanical user push button</p></li>\n<li><p>One reset button</p></li>\n<li><p>On-board USB based EDBG unit with serial console</p></li>\n<li><p>One QTouch® PTC button</p></li>\n<li><p>32 MiB QSPI Flash</p></li>\n<li><p>ATECC508 CryptoAuthentication™  device</p></li>\n<li><p>AT24MAC402 serial EEPROM with EUI-48™ MAC address</p></li>\n<li><p>Ethernet</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>RJ45 connector with built-in magnetics</p></li>\n<li><p>KSZ8091RNA PHY</p></li>\n<li><p>10Base-T/100Base-TX IEE 802.3 compliant Ethernet transceiver</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>USB interface, host, and device</p></li>\n<li><p>SD/SDIO card connector</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The atsame54_xpro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/atsame54_xpro/atsame54_xpro_defconfig</span></code>.</p>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM E54 Xplained Pro evaluation kit has 4 GPIO controllers. These\ncontrollers are responsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For more details please refer to <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/60001507C.pdf\">SAM D5x/E5x Family Datasheet</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> and the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAME54-Xplained-Pro_Design-Documentation.zip\">SAM E54\nXplained Pro Schematic</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a>.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ATSAME54-XPRO-pinout.png\"><img alt=\"ATSAME54-XPRO-pinout\" class=\"align-center\" src=\"../../../../_images/ATSAME54-XPRO-pinout.png\" style=\"width: 500px;\"/></a>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>SERCOM2 USART TX : PB24</p></li>\n<li><p>SERCOM2 USART RX : PB25</p></li>\n<li><p>GPIO/PWM LED0    : PC18</p></li>\n<li><p>GPIO SW0         : PB31</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAME54 MCU is configured to use the 32.768 kHz external oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAME54 MCU has 8 SERCOM based USARTs with one configured as USARTs in\nthis BSP. SERCOM2 is the default Zephyr console.</p>\n<ul class=\"simple\">\n<li><p>SERCOM2 115200 8n1 connected to the onboard Atmel Embedded Debugger (EDBG)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAME54 MCU has 5 TCC based PWM units with up to 6 outputs each and a period\nof 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then LED0 is\ndriven by TCC0 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAME54 MCU has 8 SERCOM based SPIs.</p>\n</div>\n<div class=\"section\" id=\"i2c-port\">\n<h3>I2C Port<a class=\"headerlink\" href=\"#i2c-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAME54 MCU has 8 SERCOM based I2Cs. On the SAM E54 Xplained Pro,\nSERCOM7 is connected to a AT24MAC402 EEPROM and a ATECC508A Crypto\nAuthentication device.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM E54 Xplained Pro comes with a Atmel Embedded Debugger (EDBG).  This\nprovides a debug interface to the SAME54 chip and is supported by\nOpenOCD.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_world</span></code> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsame54_xpro samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the SAM E54 Xplained Pro to your host computer using the USB debug\nport.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>To flash an image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b atsame54_xpro samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/60001507C.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/60001507C.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAME54-Xplained-Pro_Design-Documentation.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAME54-Xplained-Pro_Design-Documentation.zip</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram_l", "size": 65536}, {"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 6, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "can": {"count": 1, "instances": [{"label": "CAN_0"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 2, "instances": [{"label": "DAC_0"}, {"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "frdm_k64f", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP FRDM-K64F</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-frdm-k64f\">\n<span id=\"frdm-k64f\"></span><h1>NXP FRDM-K64F<a class=\"headerlink\" href=\"#nxp-frdm-k64f\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Freedom-K64F is an ultra-low-cost development platform for Kinetis K64,\nK63, and K24 MCUs.</p>\n<ul class=\"simple\">\n<li><p>Form-factor compatible with the Arduino R3 pin layout</p></li>\n<li><p>Peripherals enable rapid prototyping, including a 6-axis digital\naccelerometer and magnetometer to create full eCompass capabilities, a\ntri-colored LED and 2 user push-buttons for direct interaction, a microSD\ncard slot, and connectivity using onboard Ethernet port and headers for use\nwith Bluetooth* and 2.4 GHz radio add-on modules</p></li>\n<li><p>OpenSDAv2, the NXP open source hardware embedded serial and debug adapter\nrunning an open source bootloader, offers options for serial communication,\nflash programming, and run-control debugging</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/frdm_k64f.jpg\"><img alt=\"FRDM-K64F\" class=\"align-center\" src=\"../../../../_images/frdm_k64f.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MK64FN1M0VLL12 MCU (120 MHz, 1 MB flash memory, 256 KB RAM, low-power,\ncrystal-less USB, and 100 Low profile Quad Flat Package (LQFP))</p></li>\n<li><p>Dual role USB interface with micro-B USB connector</p></li>\n<li><p>RGB LED</p></li>\n<li><p>FXOS8700CQ accelerometer and magnetometer</p></li>\n<li><p>Two user push buttons</p></li>\n<li><p>Flexible power supply option - OpenSDAv2 USB, Kinetis K64 USB, and external source</p></li>\n<li><p>Easy access to MCU input/output through Arduino* R3 compatible I/O connectors</p></li>\n<li><p>Programmable OpenSDAv2 debug circuit supporting the CMSIS-DAP Interface\nsoftware that provides:</p>\n<ul>\n<li><p>Mass storage device (MSD) flash programming interface</p></li>\n<li><p>CMSIS-DAP debug interface over a driver-less USB HID connection providing\nrun-control debugging and compatibility with IDE tools</p></li>\n<li><p>Virtual serial port interface</p></li>\n<li><p>Open source CMSIS-DAP software project</p></li>\n</ul>\n</li>\n<li><p>Ethernet</p></li>\n<li><p>SDHC</p></li>\n</ul>\n<p>For more information about the K64F SoC and FRDM-K64F board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/k-seriesperformancem4/k6x-ethernet/kinetis-k64-120-mhz-256kb-sram-microcontrollers-mcus-based-on-arm-cortex-m4-core:K64_120\">K64F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/K64P144M120SF5.pdf\">K64F Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/K64P144M120SF5RM.pdf\">K64F Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/evaluation-and-development-boards/freedom-development-boards/mcu-boards/freedom-development-platform-for-kinetis-k64-k63-and-k24-mcus:FRDM-K64F\">FRDM-K64F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDMK64FUG\">FRDM-K64F User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDM-K64F-SCH-E4\">FRDM-K64F Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The frdm_k64f board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>dma</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/frdm_k64f/frdm_k64f_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTB22</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTE26</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB21</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC6</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW2 / FXOS8700 INT1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC13</p></td>\n<td><p>GPIO</p></td>\n<td><p>FXOS8700 INT2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA4</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB10</p></td>\n<td><p>ADC</p></td>\n<td><p>ADC1 channel 14</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB16</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB17</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC8</p></td>\n<td><p>PWM</p></td>\n<td><p>PWM_3 channel 4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC9</p></td>\n<td><p>PWM</p></td>\n<td><p>PWM_3 channel 5</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC16</p></td>\n<td><p>UART3_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC17</p></td>\n<td><p>UART3_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD0</p></td>\n<td><p>SPI0_PCS0</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD1</p></td>\n<td><p>SPI0_SCK</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD2</p></td>\n<td><p>SPI0_SOUT</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD3</p></td>\n<td><p>SPI0_SIN</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTE24</p></td>\n<td><p>I2C0_SCL</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTE25</p></td>\n<td><p>I2C0_SDA</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA5</p></td>\n<td><p>MII0_RXER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA12</p></td>\n<td><p>MII0_RXD1</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA13</p></td>\n<td><p>MII0_RXD0</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA14</p></td>\n<td><p>MII0_RXDV</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA15</p></td>\n<td><p>MII0_TXEN</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA16</p></td>\n<td><p>MII0_TXD0</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA17</p></td>\n<td><p>MII0_TXD1</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTA28</p></td>\n<td><p>MII0_TXER</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB0</p></td>\n<td><p>MII0_MDIO</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB1</p></td>\n<td><p>MII0_MDC</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC16</p></td>\n<td><p>ENET0_1588_TMR0</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC17</p></td>\n<td><p>ENET0_1588_TMR1</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC18</p></td>\n<td><p>ENET0_1588_TMR2</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC19</p></td>\n<td><p>ENET0_1588_TMR3</p></td>\n<td><p>Ethernet</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Do not enable Ethernet and UART BT HCI simultaneously because they conflict\non PTC16-17.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC is configured to use the 50 MHz external oscillator on the board\nwith the on-chip PLL to generate a 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC has six UARTs. One is configured for the console, another for BT\nHCI, and the remaining are not used.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC has a USB OTG (USBOTG) controller that supports both\ndevice and host functions through its micro USB connector (K64F USB).\nOnly USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<p>Early versions of this board have an outdated version of the OpenSDA bootloader\nand require an update. Please see the <a class=\"reference external\" href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">DAPLink Bootloader Update</a> page for\ninstructions to update from the CMSIS-DAP bootloader to the DAPLink bootloader.</p>\n<div class=\"sphinx-tabs docutils container\">\n<div aria-label=\"Tabbed content\" class=\"closeable\" role=\"tablist\"><button aria-controls=\"panel-0-T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" aria-selected=\"true\" class=\"sphinx-tabs-tab group-tab\" id=\"tab-0-T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" name=\"T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" role=\"tab\" tabindex=\"0\">OpenSDA DAPLink Onboard (Recommended)</button><button aria-controls=\"panel-0-T3BlblNEQSBKTGluayBPbmJvYXJk\" aria-selected=\"false\" class=\"sphinx-tabs-tab group-tab\" id=\"tab-0-T3BlblNEQSBKTGluayBPbmJvYXJk\" name=\"T3BlblNEQSBKTGluayBPbmJvYXJk\" role=\"tab\" tabindex=\"-1\">OpenSDA JLink Onboard</button></div><div aria-labelledby=\"tab-0-T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" class=\"sphinx-tabs-panel group-tab\" id=\"panel-0-T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" name=\"T3BlblNEQSBEQVBMaW5rIE9uYm9hcmQgKFJlY29tbWVuZGVkKQ==\" role=\"tabpanel\" tabindex=\"0\"><p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.nxp.com/downloads/en/snippets-boot-code-headers-monitors/k20dx_frdmk64f_if_crc_legacy_0x5000.bin\">OpenSDA DAPLink FRDM-K64F Firmware</a>.</p>\n</div><div aria-labelledby=\"tab-0-T3BlblNEQSBKTGluayBPbmJvYXJk\" class=\"sphinx-tabs-panel group-tab\" hidden=\"true\" id=\"panel-0-T3BlblNEQSBKTGluayBPbmJvYXJk\" name=\"T3BlblNEQSBKTGluayBPbmJvYXJk\" role=\"tabpanel\" tabindex=\"0\"><p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>The version of J-Link firmware to program to the board depends on the version\nof the DAPLink bootloader. Refer to <a class=\"reference external\" href=\"https://www.nxp.com/design/microcontrollers-developer-resources/ides-for-kinetis-mcus/opensda-serial-and-debug-adapter:OPENSDA#FRDM-K64F\">OpenSDA Serial and Debug Adapter</a> for\nmore details. On this page, change the pull-down menu for “Choose your board to\nstart” to FRDM-K64F, and review the section “To update your board with OpenSDA\napplications”. Note that Segger does provide an OpenSDA J-Link Board-Specific\nFirmware for this board, however it is not compatible with the DAPLink\nbootloader. After downloading the appropriate J-Link firmware, follow the\ninstructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program to the\nboard.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k64f samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div></div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J26.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k64f samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_k64f</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k64f samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! frdm_k64f</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"troubleshooting\">\n<h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If pyocd raises an uncaught <code class=\"docutils literal notranslate\"><span class=\"pre\">DAPAccessIntf.TransferFaultError()</span></code> exception\nwhen you try to flash or debug, it’s possible that the K64F flash may have been\nlocked by a corrupt application. You can unlock it with the following sequence\nof pyocd commands:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pyocd cmd\n<span class=\"go\">0001915:WARNING:target_kinetis:Forcing halt on connect in order to gain control of device</span>\n<span class=\"go\">Connected to K64F [Halted]: 0240000026334e450028400d5e0e000e4eb1000097969900</span>\n<span class=\"go\">&gt;&gt;&gt; unlock</span>\n<span class=\"go\">0016178:WARNING:target_kinetis:K64F secure state: unlocked successfully</span>\n<span class=\"go\">&gt;&gt;&gt; reinit</span>\n<span class=\"go\">0034584:WARNING:target_kinetis:Forcing halt on connect in order to gain control of device</span>\n<span class=\"go\">&gt;&gt;&gt; load build/zephyr/zephyr.bin</span>\n<span class=\"go\">[====================] 100%</span>\n<span class=\"go\">&gt;&gt;&gt; reset</span>\n<span class=\"go\">Resetting target</span>\n<span class=\"go\">&gt;&gt;&gt; quit</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "flash0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "uart_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "m2gl025_miv", "arch": "riscv", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">RISCV Boards</a> »</li>\n<li>Microsemi M2GL025 Mi-V</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"microsemi-m2gl025-mi-v\">\n<span id=\"m2gl025-miv\"></span><h1>Microsemi M2GL025 Mi-V<a class=\"headerlink\" href=\"#microsemi-m2gl025-mi-v\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Microsemi M2GL025 board is an IGLOO2 FPGA based development board.\nThe Mi-V RISC-V soft CPU can be deployed on the MGL025 board.\nMore information can be found on\n<a class=\"reference external\" href=\"https://www.microsemi.com/product-directory/embedded-processing/4406-cpus\">Microsemi’s website</a>.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">m2gl025_miv</span></code> board configuration can be built as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b m2gl025_miv</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In order to upload the application to the device, you’ll need OpenOCD and GDB\nwith RISC-V support.\nYou can get them as a part of SoftConsole SDK.\nDownload and installation instructions can be found on\n<a class=\"reference external\" href=\"https://www.microsemi.com/product-directory/design-tools/4879-softconsole\">Microsemi’s SoftConsole website</a>.</p>\n<p>With the necessary tools installed, you can connect to the board using OpenOCD.\nTo establish an OpenOCD connection run:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>sudo <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>&lt;softconsole_path&gt;/openocd/bin <span class=\"se\">\\</span>\n&lt;softconsole_path&gt;/openocd/bin/openocd  --file <span class=\"se\">\\</span>\n&lt;softconsole_path&gt;/openocd/share/openocd/scripts/board/microsemi-riscv.cfg\n</pre></div>\n</div>\n<p>Leave it running, and in a different terminal, use GDB to upload the binary to\nthe board. You can use the RISC-V GDB from a toolchain delivered with\nSoftConsole SDK.</p>\n<p>Here is the GDB terminal command to connect to the device\nand load the binary:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">&lt;softconsole_path&gt;/riscv-unknown-elf-gcc/bin/riscv64-unknown-elf-gdb \\</span>\n<span class=\"go\">-ex \"target extended-remote localhost:3333\" \\</span>\n<span class=\"go\">-ex \"set mem inaccessible-by-default off\" \\</span>\n<span class=\"go\">-ex \"set arch riscv:rv32\" \\</span>\n<span class=\"go\">-ex \"set riscv use_compressed_breakpoints no\" \\</span>\n<span class=\"go\">-ex \"load\" &lt;path_to_executable&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the detailed overview of <a class=\"reference internal\" href=\"../../../../application/index.html#application-debugging\"><span class=\"std std-ref\">Application Debugging</span></a>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 8388608}], "main_ram_size": 8388608, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "acrn", "arch": "x86", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">x86 Boards</a> »</li>\n<li>Building and Running Zephyr with ACRN</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"building-and-running-zephyr-with-acrn\">\n<h1>Building and Running Zephyr with ACRN<a class=\"headerlink\" href=\"#building-and-running-zephyr-with-acrn\" title=\"Permalink to this headline\">¶</a></h1>\n<p>Zephyr’s is capable of running as a guest under the x86 ACRN\nhypervisor (see <a class=\"reference external\" href=\"https://projectacrn.org/\">https://projectacrn.org/</a>).  The process for getting\nthis to work is somewhat involved, however.</p>\n<p>ACRN hypervisor supports a hybrid scenario where Zephyr runs in a so-\ncalled “pre-launched” mode. This means Zephyr will access the ACRN\nhypervisor directly without involving the SOS VM. This is the most\npractical user scenario in the real world because Zephyr’s real-time\nand safety capability can be assured without influence from other\nVMs. The following figure from ACRN’s official documentation shows\nhow a hybrid scenario works:</p>\n<div class=\"align-center figure\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/ACRN-Hybrid.png\"><img alt=\"ACRN Hybrid User Scenario\" src=\"../../../../_images/ACRN-Hybrid.png\" style=\"width: 80%;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">ACRN Hybrid User Scenario</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>In this tutorial, we will show you how to build a minimal running instance of Zephyr\nand ACRN hypervisor to demonstrate that it works successfully. To learn more about\nother features of ACRN, such as building and using the SOS VM or other guest VMs,\nplease refer to the Getting Started Guide for ACRN:\n<a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/using_hybrid_mode_on_nuc.html\">https://projectacrn.github.io/latest/tutorials/using_hybrid_mode_on_nuc.html</a></p>\n<div class=\"section\" id=\"build-your-zephyr-app\">\n<h2>Build your Zephyr App<a class=\"headerlink\" href=\"#build-your-zephyr-app\" title=\"Permalink to this headline\">¶</a></h2>\n<p>First, build the Zephyr application you want to run in ACRN as you\nnormally would, selecting an appropriate board:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b acrn_ehl_crb samples/hello_world</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>In this tutorial, we will use the Intel Elkhart Lake Reference Board\n(<a class=\"reference external\" href=\"https://www.intel.com/content/www/us/en/products/docs/processors/embedded/enhanced-for-iot-platform-brief.html\">EHL</a> CRB) since it is one of the suggested platform for this\ntype of scenario. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">acrn_ehl_crb</span></code> as the target board parameter.</p>\n<p>Note the kconfig output in <code class=\"docutils literal notranslate\"><span class=\"pre\">build/zephyr/.config</span></code>, you will need to\nreference that to configure ACRN later.</p>\n<p>The Zephyr build artifact you will need is <code class=\"docutils literal notranslate\"><span class=\"pre\">build/zephyr/zephyr.bin</span></code>,\nwhich is a raw memory image.  Unlike other x86 targets, you do not\nwant to use <code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>!</p>\n</div>\n<div class=\"section\" id=\"configure-and-build-acrn\">\n<h2>Configure and build ACRN<a class=\"headerlink\" href=\"#configure-and-build-acrn\" title=\"Permalink to this headline\">¶</a></h2>\n<p>First you need the source code, clone from:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">git clone https://github.com/projectacrn/acrn-hypervisor</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>We suggest that you use versions v2.5.1 or later of the ACRN hypervisor\nas they have better support for SMP in Zephyr.</p>\n<p>Like Zephyr, ACRN favors build-time configuration management instead\nof runtime probing or control.  Unlike Zephyr, ACRN has single large\nconfiguration files instead of small easily-merged configuration\nelements like kconfig defconfig files or devicetree includes.  You\nhave to edit a big XML file to match your Zephyr configuration.\nChoose an ACRN host config that matches your hardware (“ehl-crb-b” in\nthis case).  Then find the relavent file in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">misc/config_tools/data/&lt;platform&gt;/hybrid.xml</span></code>.</p>\n<p>First, find the list of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vm&gt;</span></code> declarations.  Each has an <code class=\"docutils literal notranslate\"><span class=\"pre\">id=</span></code>\nattribute.  For testing Zephyr, you will want to make sure that the\nZephyr image is ID zero.  This allows you to launch ACRN with just one\nVM image and avoids the need to needlessly copy large Linux blobs into\nthe boot filesystem.  Under currently tested configurations, Zephyr\nwill always have a “vm_type” tag of “SAFETY_VM”.</p>\n<div class=\"section\" id=\"configure-zephyr-memory-layout\">\n<h3>Configure Zephyr Memory Layout<a class=\"headerlink\" href=\"#configure-zephyr-memory-layout\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Next, locate the load address of the Zephyr image and its entry point\naddress.  These have to be configured manually in ACRN.  Traditionally\nZephyr distributes itself as an ELF image where these addresses can be\nautomatically extracted, but ACRN does not know how to do that, it\nonly knows how to load a single contiguous region of data into memory\nand jump to a specific address.</p>\n<p>Find the “&lt;vm id=”0”&gt;…&lt;os_config&gt;” tag that will look something like this:</p>\n<blockquote>\n<div><div class=\"highlight-xml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;os_config&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>Zephyr<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;kern_type&gt;</span>KERNEL_ZEPHYR<span class=\"nt\">&lt;/kern_type&gt;</span>\n    <span class=\"nt\">&lt;kern_mod&gt;</span>Zephyr_RawImage<span class=\"nt\">&lt;/kern_mod&gt;</span>\n    <span class=\"nt\">&lt;ramdisk_mod/&gt;</span>\n    <span class=\"nt\">&lt;bootargs&gt;&lt;/bootargs&gt;</span>\n    <span class=\"nt\">&lt;kern_load_addr&gt;</span>0x1000<span class=\"nt\">&lt;/kern_load_addr&gt;</span>\n    <span class=\"nt\">&lt;kern_entry_addr&gt;</span>0x1000<span class=\"nt\">&lt;/kern_entry_addr&gt;</span>\n<span class=\"nt\">&lt;/os_config&gt;</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">kern_load_addr</span></code> tag must match the Zephyr LOCORE_BASE symbol\nfound in include/arch/x86/memory.ld.  This is currently 0x1000 and\nmatches the default ACRN config.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">kern_entry_addr</span></code> tag must match the entry point in the built\n<code class=\"docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code> file.  You can find this with binutils, for example:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>objdump -f build/zephyr/zephyr.elf\n\n<span class=\"go\">build/zephyr/zephyr.elf:     file format elf64-x86-64</span>\n<span class=\"go\">architecture: i386:x86-64, flags 0x00000012:</span>\n<span class=\"go\">EXEC_P, HAS_SYMS</span>\n<span class=\"go\">start address 0x0000000000001000</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>By default this entry address is the same, at 0x1000.  This has not\nalways been true of all configurations, however, and will likely\nchange in the future.</p>\n</div>\n<div class=\"section\" id=\"configure-zephyr-cpus\">\n<h3>Configure Zephyr CPUs<a class=\"headerlink\" href=\"#configure-zephyr-cpus\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Now you need to configure the CPU environment ACRN presents to the\nguest.  By default Zephyr builds in SMP mode, but ACRN’s default\nconfiguration gives it only one CPU.  Find the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_MP_NUM_CPUS</span></code> in the Zephyr .config file give the guest that\nmany CPUs in the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;cpu_affinity&gt;</span></code> tag.  For example:</p>\n<blockquote>\n<div><div class=\"highlight-xml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;vm</span> <span class=\"na\">id=</span><span class=\"s\">\"0\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;vm_type&gt;</span>SAFETY_VM<span class=\"nt\">&lt;/vm_type&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>ACRN PRE-LAUNCHED VM0<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;guest_flags&gt;</span>\n        <span class=\"nt\">&lt;guest_flag&gt;</span>0<span class=\"nt\">&lt;/guest_flag&gt;</span>\n    <span class=\"nt\">&lt;/guest_flags&gt;</span>\n    <span class=\"nt\">&lt;cpu_affinity&gt;</span>\n        <span class=\"nt\">&lt;pcpu_id&gt;</span>0<span class=\"nt\">&lt;/pcpu_id&gt;</span>\n        <span class=\"nt\">&lt;pcpu_id&gt;</span>1<span class=\"nt\">&lt;/pcpu_id&gt;</span>\n    <span class=\"nt\">&lt;/cpu_affinity&gt;</span>\n    ...\n    <span class=\"nt\">&lt;clos&gt;</span>\n        <span class=\"nt\">&lt;vcpu_clos&gt;</span>0<span class=\"nt\">&lt;/vcpu_clos&gt;</span>\n        <span class=\"nt\">&lt;vcpu_clos&gt;</span>0<span class=\"nt\">&lt;/vcpu_clos&gt;</span>\n    <span class=\"nt\">&lt;/clos&gt;</span>\n    ...\n<span class=\"nt\">&lt;/vm&gt;</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>To use SMP, we have to change the pcpu_id of VM0 to 0 and 1.\nThis configures ACRN to run Zephyr on CPU0 and CPU1. The ACRN hypervisor\nand Zephyr application will not boot successfully without this change.\nIf you plan to run Zephyr with one CPU only, you can skip it.</p>\n<p>Since Zephyr is using CPU0 and CPU1, we also have to change\nVM1’s configuration so it runs on CPU2 and CPU3. If your ACRN set up has\nadditional VMs, you should change their configurations as well.</p>\n<blockquote>\n<div><div class=\"highlight-xml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;vm</span> <span class=\"na\">id=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;vm_type&gt;</span>SOS_VM<span class=\"nt\">&lt;/vm_type&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>ACRN SOS VM<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;guest_flags&gt;</span>\n        <span class=\"nt\">&lt;guest_flag&gt;</span>0<span class=\"nt\">&lt;/guest_flag&gt;</span>\n    <span class=\"nt\">&lt;/guest_flags&gt;</span>\n    <span class=\"nt\">&lt;cpu_affinity&gt;</span>\n        <span class=\"nt\">&lt;pcpu_id&gt;</span>2<span class=\"nt\">&lt;/pcpu_id&gt;</span>\n        <span class=\"nt\">&lt;pcpu_id&gt;</span>3<span class=\"nt\">&lt;/pcpu_id&gt;</span>\n    <span class=\"nt\">&lt;/cpu_affinity&gt;</span>\n    <span class=\"nt\">&lt;clos&gt;</span>\n        <span class=\"nt\">&lt;vcpu_clos&gt;</span>0<span class=\"nt\">&lt;/vcpu_clos&gt;</span>\n        <span class=\"nt\">&lt;vcpu_clos&gt;</span>0<span class=\"nt\">&lt;/vcpu_clos&gt;</span>\n    <span class=\"nt\">&lt;/clos&gt;</span>\n    ...\n<span class=\"nt\">&lt;/vm&gt;</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Note that these indexes are physical CPUs on the host.  When\nconfiguring multiple guests, you probably don’t want to overlap these\nassignments with other guests.  But for testing Zephyr simply using\nCPUs 0 and 1 works fine.  (Note that ehl-crb-b has four physical CPUs,\nso configuring all of 0-3 will work fine too, but leave no space for\nother guests to have dedicated CPUs).</p>\n</div>\n<div class=\"section\" id=\"build-acrn\">\n<h3>Build ACRN<a class=\"headerlink\" href=\"#build-acrn\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Once configuration is complete, ACRN builds fairly cleanly:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>make -j <span class=\"nv\">BOARD</span><span class=\"o\">=</span>ehl-crb-b <span class=\"nv\">SCENARIO</span><span class=\"o\">=</span>hybrid\n</pre></div>\n</div>\n</div></blockquote>\n<p>The only build artifact you need is the ACRN multiboot image in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">build/hypervisor/acrn.bin</span></code></p>\n</div>\n</div>\n<div class=\"section\" id=\"assemble-efi-boot-media\">\n<h2>Assemble EFI Boot Media<a class=\"headerlink\" href=\"#assemble-efi-boot-media\" title=\"Permalink to this headline\">¶</a></h2>\n<p>ACRN will boot on the hardware via the GNU GRUB bootloader, which is\nitself launched from the EFI firmware.  These need to be configured\ncorrectly.</p>\n<div class=\"section\" id=\"locate-grub\">\n<h3>Locate GRUB<a class=\"headerlink\" href=\"#locate-grub\" title=\"Permalink to this headline\">¶</a></h3>\n<p>First, you will need a GRUB EFI binary that corresponds to your\nhardware.  In many cases, a simple upstream build from source or a\ncopy from a friendly Linux distribution will work.  In some cases it\nwill not, however, and GRUB will need to be specially patched for\nspecific hardware.  Contact your hardware support team (pause for\nlaughter) for clear instructions for how to build a working GRUB.  In\npractice you may just need to ask around and copy a binary from the\nlast test that worked for someone.</p>\n</div>\n<div class=\"section\" id=\"create-efi-boot-filesystem\">\n<h3>Create EFI Boot Filesystem<a class=\"headerlink\" href=\"#create-efi-boot-filesystem\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Now attach your boot media (e.g. a USB stick on /dev/sdb, your\nhardware may differ!) to a Linux system and create an EFI boot\npartition (type code 0xEF) large enough to store your boot artifacts.\nThis command feeds the relevant commands to fdisk directly, but you\ncan type them yourself if you like:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span><span class=\"k\">for</span> i <span class=\"k\">in</span> n p <span class=\"m\">1</span> <span class=\"s2\">\"\"</span> <span class=\"s2\">\"\"</span> t ef w<span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"nb\">echo</span> <span class=\"nv\">$i</span><span class=\"p\">;</span> <span class=\"k\">done</span> <span class=\"p\">|</span> fdisk /dev/sdb\n<span class=\"go\">...</span>\n<span class=\"go\">&lt;lots of fdisk output&gt;</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Now create a FAT filesystem in the new partition and mount it:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>mkfs.vfat -n ACRN_ZEPHYR /dev/sdb1\n<span class=\"gp\"># </span>mkdir -p /mnt/acrn\n<span class=\"gp\"># </span>mount /dev/sdb1 /mnt/acrn\n</pre></div>\n</div>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"copy-images-and-configure-grub\">\n<h3>Copy Images and Configure GRUB<a class=\"headerlink\" href=\"#copy-images-and-configure-grub\" title=\"Permalink to this headline\">¶</a></h3>\n<p>ACRN does not have access to a runtime filesystem of its own.  It\nreceives its guest VMs (i.e. zephyr.bin) as GRUB “multiboot” modules.\nThis means that we must rely on GRUB’s filesystem driver.  The three\nfiles (GRUB, ACRN and Zephyr) all need to be copied into the\n“/efi/boot” directory of the boot media.  Note that GRUB must be named\n“bootx64.efi” for the firmware to recognize it as the bootloader:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>mkdir -p /mnt/acrn/efi/boot\n<span class=\"gp\"># </span>cp <span class=\"nv\">$PATH_TO_GRUB_BINARY</span> /mnt/acrn/efi/boot/bootx64.efi\n<span class=\"gp\"># </span>cp <span class=\"nv\">$ZEPHYR_BASE</span>/build/zephyr/zephyr.bin /mnt/acrn/efi/boot/\n<span class=\"gp\"># </span>cp <span class=\"nv\">$PATH_TO_ACRN</span>/build/hypervisor/acrn.bin /mnt/acrn/efi/boot/\n</pre></div>\n</div>\n</div></blockquote>\n<p>At boot, GRUB will load a “efi/boot/grub.cfg” file for its runtime\nconfiguration instructions (a feature, ironically, that both ACRN and\nZephyr lack!).  This needs to load acrn.bin as the boot target and\npass it the zephyr.bin file as its first module (because Zephyr was\nconfigured as <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vm</span> <span class=\"pre\">id=\"0\"&gt;</span></code> above).  This minimal configuration will\nwork fine for all but the weirdest hardware (i.e. “hd0” is virtually\nalways the boot filesystem from which grub loaded), no need to fiddle\nwith GRUB plugins or menus or timeouts:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>cat &gt; /mnt/acrn/efi/boot/grub.cfg&lt;&lt;EOF\n<span class=\"go\">set root='hd0,msdos1'</span>\n<span class=\"go\">multiboot2 /efi/boot/acrn.bin</span>\n<span class=\"go\">module2 /efi/boot/zephyr.bin Zephyr_RawImage</span>\n<span class=\"go\">boot</span>\n<span class=\"go\">EOF</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>Now the filesystem should be complete</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>umount /dev/sdb1\n<span class=\"gp\"># </span>sync\n</pre></div>\n</div>\n</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"boot-acrn\">\n<h2>Boot ACRN<a class=\"headerlink\" href=\"#boot-acrn\" title=\"Permalink to this headline\">¶</a></h2>\n<p>If all goes well, booting your EFI media on the hardware will result\nin a running ACRN, a running Zephyr (because by default Zephyr is\nconfigured as a “prelaunched” VM), and a working ACRN command line on\nthe console.</p>\n<p>You can see the Zephyr (vm 0) console output with the “vm_console”\ncommand:</p>\n<blockquote>\n<div><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">ACRN:\\&gt;vm_console 0</span>\n\n<span class=\"go\">----- Entering VM 0 Shell -----</span>\n<span class=\"go\">*** Booting Zephyr OS build v2.6.0-rc1-324-g1a03783861ad  ***</span>\n<span class=\"go\">Hello World! acrn</span>\n</pre></div>\n</div>\n</div></blockquote>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 16384}], "main_flash_size": 16384, "memory": [{"label": "sram0", "size": 2048}], "main_ram_size": 2048, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "UART_2"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 2, "instances": [{"label": "PWM_2"}, {"label": "PWM_21"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l011k4", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L011K4</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l011k4\">\n<span id=\"nucleo-l011k4-board\"></span><h1>ST Nucleo L011K4<a class=\"headerlink\" href=\"#st-nucleo-l011k4\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-32 development board with STM32L011K4 MCU, supports Arduino Nano V3 connectivity.</p>\n<p>The STM32 Nucleo board provides an affordable, and flexible way for users to try out new concepts,\nand build prototypes with the STM32 microcontroller, choosing from the various\ncombinations of performance, power consumption, and features.</p>\n<p>The Arduino* Nano V3 connectivity support allow easy functionality\nexpansion of the STM32 Nucleo open development platform with a wide choice of\nspecialized shields.</p>\n<p>The STM32 Nucleo board integrates the ST-LINK/V2-1 debugger and programmer.</p>\n<p>The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together\nwith various packaged software examples.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l011k4.jpg\"><img alt=\"Nucleo L011K4\" class=\"align-center\" src=\"../../../../_images/nucleo_l011k4.jpg\" style=\"width: 426px; height: 319px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l011k4.html\">Nucleo L011K4 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo L011K4 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP32 package</p></li>\n<li><p>Extension resource:</p>\n<ul>\n<li><p>Arduino* Nano V3 connectivity</p></li>\n</ul>\n</li>\n<li><p>ARM* mbed*</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector:</p>\n<ul>\n<li><p>Selection-mode switch to use the kit as a standalone ST-LINK/V2-1</p></li>\n</ul>\n</li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source (3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs:</p>\n<ul>\n<li><p>USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n</ul>\n</li>\n<li><p>One push-button: RESET</p></li>\n<li><p>USB re-enumeration capability. Three different interfaces supported on USB:</p>\n<ul>\n<li><p>Virtual COM port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</li>\n<li><p>Support of wide choice of Integrated Development Environments (IDEs) including:</p>\n<ul>\n<li><p>IAR</p></li>\n<li><p>ARM Keil</p></li>\n<li><p>GCC-based IDEs</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about STM32L011K4 can be found in the\n<a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf\">STM32L0x1 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l011k4 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>EEPROM</p></td>\n<td><p>on-chip</p></td>\n<td><p>eeprom</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l011k4/nucleo_l011k4_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA15 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PA4/PA10 (Arduino I2C)</p></li>\n<li><p>SPI1 SCK/MISO/MOSI : PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>LD2       : PB3</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf\">STM32 Nucleo-32 board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l011k4</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L011K4 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l011k4\">\n<h4>Flashing an application to Nucleo L011K4<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l011k4\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l011k4 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l011k4 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l011k4.html\">http://www.st.com/en/evaluation-tools/nucleo-l011k4.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf\">https://www.st.com/resource/en/reference_manual/dm00108282-ultralowpower-stm32l0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf\">https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 655360}], "main_ram_size": 655360, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "b_l4s5i_iot01a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST B_L4S5I_IOT01A Discovery kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-b-l4s5i-iot01a-discovery-kit\">\n<span id=\"b-l4s5i-iot01a-board\"></span><h1>ST B_L4S5I_IOT01A Discovery kit<a class=\"headerlink\" href=\"#st-b-l4s5i-iot01a-discovery-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The B_L4S5I_IOT01A Discovery kit features an ARM Cortex-M4 based STM32L4S5VI MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the B_L4S5I_IOT01A Discovery kit:</p>\n<ul>\n<li><p>STM32L4S5VIT6 microcontroller featuring 2 Mbyte of Flash memory, 640 Kbytes of RAM in LQFP100 package</p></li>\n<li><p>On-board ST-LINK/V2-1 supporting USB re-enumeration capability</p></li>\n<li><p>Three different interfaces supported on USB:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>Virtual com port</p></li>\n<li><p>Mass storage</p></li>\n<li><p>Debug port</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>ARDUINO ® Uno V3  and Pmod TM expansion connector</p></li>\n<li><p>4 LEDs (2 for user, wifi, BLE)</p></li>\n<li><p>2 push-buttons (user and reset)</p></li>\n<li><p>USB OTG FS with micro-AB connector</p></li>\n<li><p>Dynamic NFC tag</p></li>\n<li><p>2 digital omnidirectional microphones</p></li>\n<li><p>Capacitive digital sensor for relative humidity and temperature</p></li>\n<li><p>Time-of-flight and gesture-detection sensors</p></li>\n<li><p>High-performance 3-axis magnetometer</p></li>\n<li><p>3D accelerometer and 3D gyroscope</p></li>\n<li><p>64-Mbit Quad-SPI Flash memory</p></li>\n<li><p>Bluetooth ® 4.1 module</p></li>\n<li><p>802.11 b/g/n compliant Wi‐Fi ® module</p></li>\n<li><p>MCU current ammeter with 4 ranges and auto-calibration</p></li>\n<li><dl class=\"simple\">\n<dt>Flexible power supply options:</dt><dd><ul class=\"simple\">\n<li><p>ST-LINK/V2-1</p></li>\n<li><p>USB FS connector</p></li>\n<li><p>External 5 V</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/b-l4s5i_iot01a.jpg\"><img alt=\"B_L4S5I_IOT01A Discovery kit\" class=\"align-center\" src=\"../../../../_images/b-l4s5i_iot01a.jpg\" style=\"width: 450px; height: 394px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/b-l4s5i-iot01a.html\">B L4S5I IOT01A Discovery kit website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L4S5VI SoC provides the following hardware features:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 130 nA Standby mode and 100 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, frequency up to 120 MHz, 100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><dl class=\"simple\">\n<dt>Clock Sources:</dt><dd><ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than  ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>Up to 21 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><dl class=\"simple\">\n<dt>16x timers:</dt><dd><ul>\n<li><p>2x 16-bit advanced control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Up to 83 fast I/Os, most 5 V-tolerant</p></li>\n<li><dl class=\"simple\">\n<dt>Memories</dt><dd><ul>\n<li><p>Up to 2 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 640 KB of SRAM including 32 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n<li><p>Octo SPI memory interface</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><dl class=\"simple\">\n<dt>Rich analog peripherals (independent supply)</dt><dd><ul>\n<li><p>1x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>18x communication interfaces</dt><dd><ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>4x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SDMMC I/F</p></li>\n<li><p>DCMI camera interface</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>14-channel DMA controller with multiplex request router</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>AES and HASH hardware accelerators</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32L4S5VI can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32l4s5vi.html\">STM32L4S5VI on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00310109.pdf\">STM32L4S5 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr b_l4s5i_iot01a board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>BLE</p></td>\n<td><p>module</p></td>\n<td><p>bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WIFI</p></td>\n<td><p>module</p></td>\n<td><p>es-wifi</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/b_l4s5i_iot01a/b_l4s5i_iot01a_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>B_L4S5I_IOT01A Discovery kit has 9 GPIO controllers (from A to I). These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00698410.pdf\">B L47S5I IOT01A board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1 TX/RX : PB6/PB7 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_4 TX/RX : PA0/PA1 (Arduino Serial)</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C2 SCL/SDA : PB10/PB11 (Sensor I2C bus)</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PA2/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI3 SCK/MISO/MOSI : PC10/PC11/PC12 (BT SPI bus)</p></li>\n<li><p>PWM_2_CH1 : PA15</p></li>\n<li><p>LD1 : PA5</p></li>\n<li><p>LD2 : PB14</p></li>\n<li><p>user button : PC13</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>B_L4S5I_IOT01A Discovery System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default the System clock is driven by the PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>B_L4S5I_IOT01A Discovery kit has 4 U(S)ARTs. The Zephyr console output is assigned to UART1.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>B_L4S5I_IOT01A Discovery kit includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-b-l4s5i-iot01a-discovery-kit\">\n<h4>Flashing an application to B_L4S5I_IOT01A Discovery kit<a class=\"headerlink\" href=\"#flashing-an-application-to-b-l4s5i-iot01a-discovery-kit\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the B_L4S5I_IOT01A Discovery kit to your host computer using the USB\nport, then run a serial host program to connect with your Discovery\nboard. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then, build and flash in the usual way. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b b_l4s5i_iot01a samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b b_l4s5i_iot01a samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nsim_sem_mpu_stack_guard", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "DDR SYSTEM", "size": 1610612736}, {"label": "TCMU SYSTEM", "size": 32768}, {"label": "OCRAM SYSTEM", "size": 131072}, {"label": "OCRAM_S SYSTEM", "size": 32768}], "main_ram_size": 1610612736, "gpio": {"count": 7, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 7, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "pico_pi_m4", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Pico-Pi i.MX7D - Android Things IoT Development Platform</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"pico-pi-i-mx7d-android-things-iot-development-platform\">\n<span id=\"pico-pi-m4\"></span><h1>Pico-Pi i.MX7D - Android Things IoT Development Platform<a class=\"headerlink\" href=\"#pico-pi-i-mx7d-android-things-iot-development-platform\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX7D SoC is a Hybrid multi-core processor composed of Single Cortex A7\ncore and Single Cortex M4 core.\nZephyr was ported to run on the M4 core. In a later release, it will also\ncommunicate with the A7 core (running Linux) via RPmsg.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pico_pi_m4.png\"><img alt=\"Pico-Pi i.MX7D\" class=\"align-center\" src=\"../../../../_images/pico_pi_m4.png\" style=\"width: 470px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Pico-Pi Platform is composed of a CPU and IO board.</p>\n<div class=\"section\" id=\"pico-pi-io-board\">\n<h3>Pico-Pi IO Board<a class=\"headerlink\" href=\"#pico-pi-io-board\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>S1 - On/Off (MX7_ONOFF signal)</p></li>\n<li><p>Board to board connector : Edison compatible connector (70 configurable pins)</p></li>\n<li><p>mikroBUS expansion connector ADC, GPIO, I²C, PWM, SPI, UART)</p></li>\n<li><p>10-pin needle JTAG Connector</p></li>\n<li><p>Debug USB exposing One UART</p></li>\n<li><p>MIPI DSI 1 lane Connector</p></li>\n<li><p>LCD Touch Connector</p></li>\n<li><p>Audio Jack: Mic and Stereo Headphone</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pico-pi-cpu-board\">\n<h3>Pico-Pi CPU Board<a class=\"headerlink\" href=\"#pico-pi-cpu-board\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>CPU i.MX7 Dual with a Single Cortex A7 (1 GHz) core and\nSingle Cortex M4 (200MHz) core</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>RAM -&gt; A7: 4GB</p></li>\n<li><p>RAM -&gt; M4: 3x32KB (TCML, TCMU, OCRAM_S), 1x128KB (OCRAM) and 1x256MB (DDR)</p></li>\n<li><p>Flash -&gt; A7: 8GB eMMC</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the i.MX7 SoC and Pico-Pi i.MX7D, see these references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-7-processors:IMX7-SERIES?fsrch=1&amp;sr=1&amp;pageNum=1\">i.MX 7 Series Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX7DCEC.pdf\">i.MX 7 Dual Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Pico-Pi i.MX7D configuration supports the following hardware features on the\nCortex M4 Core:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/pico_pi_m4/pico_pi_m4_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Pico-Pi board Board was tested with the following pinmux controller\nconfiguration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 22%\"/>\n<col style=\"width: 31%\"/>\n<col style=\"width: 47%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART_TX232</p></td>\n<td><p>UART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART_RX232</p></td>\n<td><p>UART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RX_E</p></td>\n<td><p>UART6_TX</p></td>\n<td><p>UART (mikroBUS and Edison)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TX_E</p></td>\n<td><p>UART6_RX</p></td>\n<td><p>UART (mikroBUS and Edison)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2CX_SDA_3V</p></td>\n<td><p>I2C1_SDA</p></td>\n<td><p>I2C (mikroBUS and Edison)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2CX_SCL_3V</p></td>\n<td><p>I2C1_SCL</p></td>\n<td><p>I2C (mikroBUS and Edison)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The M4 Core is configured to run at a 200 MHz clock speed.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The iMX7D SoC has seven UARTs. The number 6 is configured for the console and\nthe number 2 is used in the mikroBUS connector.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Pico-Pi i.MX7D doesn’t have QSPI flash for the M4 and it needs to be started by\nthe A7 core. The A7 core is responsible to load the M4 binary application into\nthe RAM, put the M4 in reset, set the M4 Program Counter and Stack Pointer, and\nget the M4 out of reset.\nThe A7 can perform these steps at bootloader level or after the Linux system\nhas booted.</p>\n<p>The M4 can use up to 5 different RAMs. These are the memory mapping for A7 and\nM4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A7</p></th>\n<th class=\"head\"><p>Cortex-M4 (System Bus)</p></th>\n<th class=\"head\"><p>Cortex-M4 (Code Bus)</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0x80000000-0xFFFFFFFF</p></td>\n<td><p>0x80000000-0xDFFFFFFF</p></td>\n<td><p>0x10000000-0x1FFEFFFF</p></td>\n<td><p>2048MB (less for M4)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>0x20200000-0x2021FFFF</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x00807FFF</p></td>\n<td><p>0x20000000-0x20007FFF</p></td>\n<td></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCML</p></td>\n<td><p>0x007F8000-0x007FFFFF</p></td>\n<td></td>\n<td><p>0x1FFF8000-0x1FFFFFFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>OCRAM_S</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>0x20180000-0x20187FFF</p></td>\n<td><p>0x00000000-0x00007FFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a> from page 182 (section 2.1.2 and 2.1.3)</p></li>\n<li><p><a class=\"reference external\" href=\"https://developer.toradex.com/knowledge-base/freertos-on-the-cortex-m4-of-a-colibri-imx7#Memory_areas\">Toradex Wiki</a></p></li>\n</ul>\n<p>At compilation time you have to choose which RAM will be used. This\nconfiguration is done in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/pico_pi_m4/pico_pi_m4.dts</span></code> with\n“zephyr,flash” (when CONFIG_XIP=y) and “zephyr,sram” properties. The available\nconfigurations are:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;ddr_code\n- &amp;tcml_code\n- &amp;ocram_code\n- &amp;ocram_s_code\n- &amp;ocram_pxp_code\n- &amp;ocram_epdc_code\n\n\"zephyr,sram\"\n- &amp;ddr_sys\n- &amp;tcmu_sys\n- &amp;ocram_sys\n- &amp;ocram_s_sys\n- &amp;ocram_pxp_sys\n- &amp;ocram_epdc_sys\n</pre></div>\n</div>\n<p>Below you will find the instructions to load and run Zephyr on M4 from A7 using\nu-boot.</p>\n<p>Connect both micro USB interfaces into the PC. This is the A7 console and the\nUART6 in the Edison connector is M4 console for Zephyr with both configured to work at 115200 8N1.\nThe USB interface is used to power the CPU and IO boards and is connected\nto the USB OTG interface of the i.MX7D.</p>\n<p>After powering up the platform stop the u-boot execution on the A7 core and\nexpose the eMMC as mass storage with the following command in the u-boot\nprompt: <code class=\"docutils literal notranslate\"><span class=\"pre\">ums</span> <span class=\"pre\">0</span> <span class=\"pre\">mmc</span> <span class=\"pre\">0</span></code>. Copy the compiled zephyr.bin to the first FAT\npartition and remove the mounted device on the PC by issuing a “Ctrl+C” in the\nu-boot prompt.\nSet the u-boot environment variables and run the zephyr.bin from the\nappropriated memory configured in the Zephyr compilation:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">setenv bootm4 'fatload mmc 0:1 $m4addr $m4fw &amp;&amp; dcache flush &amp;&amp; bootaux $m4addr'</span>\n<span class=\"gp\"># </span>TCML\n<span class=\"go\">setenv m4tcml 'setenv m4fw zephyr.bin; setenv m4addr 0x007F8000'</span>\n<span class=\"go\">setenv bootm4tcml 'run m4tcml &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcml</span>\n<span class=\"gp\"># </span>TCMU\n<span class=\"go\">setenv m4tcmu 'setenv m4fw zephyr.bin; setenv m4addr 0x00800000'</span>\n<span class=\"go\">setenv bootm4tcmu 'run m4tcmu &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcmu</span>\n<span class=\"gp\"># </span>OCRAM\n<span class=\"go\">setenv m4ocram 'setenv m4fw zephyr.bin; setenv m4addr 0x00900000'</span>\n<span class=\"go\">setenv bootm4ocram 'run m4ocram &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocram</span>\n<span class=\"gp\"># </span>OCRAM_S\n<span class=\"go\">setenv m4ocrams 'setenv m4fw zephyr.bin; setenv m4addr 0x00180000'</span>\n<span class=\"go\">setenv bootm4ocrams 'run m4ocrams &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocrams</span>\n<span class=\"gp\"># </span>DDR\n<span class=\"go\">setenv m4ddr 'setenv m4fw zephyr.bin; setenv m4addr 0x80000000'</span>\n<span class=\"go\">setenv bootm4ddr 'run m4ddr &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ddr</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h3>References<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/application-note/AN5317.pdf\">Loading Code on Cortex-M4 from Linux for the i.MX 6SoloX and i.MX 7Dual/7Solo Application Processors</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://wiki.segger.com/IMX7D\">J-Link iMX7D Instructions</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "circuitdojo_feather_nrf9160ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 3080192}, {"label": "sram1", "size": 131072}], "main_ram_size": 3080192, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "intel_adsp_cavs20", "arch": "xtensa", "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf51dongle_nrf51422", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF51 Dongle</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf51-dongle\">\n<span id=\"nrf51dongle-nrf51422\"></span><h1>nRF51 Dongle<a class=\"headerlink\" href=\"#nrf51-dongle\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF51 Dongle (PCA10031) hardware provides support for the Nordic\nSemiconductor nRF51822 ARM Cortex-M0 CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf51dongle_nrf51422.jpg\"><img alt=\"nRF51 Dongle\" src=\"../../../../_images/nrf51dongle_nrf51422.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF51 Dongle (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"http://www.nordicsemi.com/eng/Products/nRF51-Dongle\">nRF51 Dongle website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. The <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF51 Dongle has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 16 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf51dongle_nrf51422 board configuration supports the following nRF51\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"http://www.nordicsemi.com/eng/Products/nRF51-Dongle\">nRF51 Dongle website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> and <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a>\nfor a complete list of nRF51 Dongle hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (red)   = P0.21</p></li>\n<li><p>LED1 (green) = P0.22</p></li>\n<li><p>LED1 (blue)  = P0.23</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BOOT = SW1 = boot/reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF51 Dongle\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51dongle_nrf51422 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-on-the-nrf51-dongle\">\n<h2>Testing the LEDs on the nRF51 Dongle<a class=\"headerlink\" href=\"#testing-the-leds-on-the-nrf51-dongle\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> sample to test that the onboard LED\nis working properly with Zephyr.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.nordicsemi.com/eng/Products/nRF51-Dongle\">http://www.nordicsemi.com/eng/Products/nRF51-Dongle</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/\">http://infocenter.nordicsemi.com/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "psram1", "size": 65536}, {"label": "dsram1", "size": 65536}, {"label": "dsram2", "size": 32768}], "main_ram_size": 65536, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "xmc45_relax_kit", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>INFINEON XMC45-RELAX-KIT</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"infineon-xmc45-relax-kit\">\n<span id=\"xmc45-relax-kit\"></span><h1>INFINEON XMC45-RELAX-KIT<a class=\"headerlink\" href=\"#infineon-xmc45-relax-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The XMC4500 Relax Kit is designed to evaluate the capabilities of the XMC4500\nMicrocontroller. It is based on High performance ARM Cortex-M4F which can run\nup to 120MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/xmc45_relax_kit.jpeg\"><img alt=\"XMC45-RELAX-KIT\" class=\"align-center\" src=\"../../../../_images/xmc45_relax_kit.jpeg\" style=\"width: 720px;\"/></a>\n<div class=\"section\" id=\"features\">\n<h3>Features:<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>ARM Cortex-M4F XMC4500</p></li>\n<li><p>32 Mbit Quad-SPI Flash</p></li>\n<li><p>4 x SPI-Master, 3x I2C, 3 x I2S, 3 x UART, 2 x CAN, 17 x ADC</p></li>\n<li><p>2 pin header x1 and x2 with 80 pins</p></li>\n<li><p>Two buttons and two LEDs for user interaction</p></li>\n<li><p>Detachable on-board debugger (second XMC4500) with Segger J-Link</p></li>\n</ul>\n<p>Details on the Relax Kit development board can be found in the <a class=\"reference external\" href=\"https://www.infineon.com/dgdl/Board_Users_Manual_XMC4500_Relax_Kit-V1_R1.2_released.pdf?fileId=db3a30433acf32c9013adf6b97b112f9\">Relax Kit User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>The on-board 12-MHz crystal allows the device to run at its maximum operating speed of 120MHz.</p></li>\n</ul>\n<p>The Relax Kit development board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 26%\"/>\n<col style=\"width: 50%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n</tbody>\n</table>\n<p>More details about the supported peripherals are available in <a class=\"reference external\" href=\"https://www.infineon.com/dgdl/Infineon-xmc4500_rm_v1.6_2016-UM-v01_06-EN.pdf?fileId=db3a30433580b3710135a5f8b7bc6d13\">XMC4500 TRM</a>\nOther hardware features are not currently supported by the Zephyr kernel.</p>\n</div>\n</div>\n<div class=\"section\" id=\"building-and-flashing\">\n<h2>Building and Flashing<a class=\"headerlink\" href=\"#building-and-flashing\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b xmc45_relax_kit samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b xmc45_relax_kit samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Step through the application in your debugger.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 134217728}], "main_ram_size": 134217728, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "em_starterkit_em7d_v22", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52840dongle_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52840 Dongle</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52840-dongle\">\n<span id=\"nrf52840dongle-nrf52840\"></span><h1>nRF52840 Dongle<a class=\"headerlink\" href=\"#nrf52840-dongle\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52840 Dongle (PCA10059) hardware provides support for the Nordic\nSemiconductor nRF52840 ARM Cortex-M4F CPU and the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf52840dongle_nrf52840.jpg\"><img alt=\"nRF52840 Dongle\" src=\"../../../../_images/nrf52840dongle_nrf52840.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF52840 Dongle</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-Dongle\">nRF52840 Dongle website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>. The <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>\ncontains the processor’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840dongle_nrf52840</span></code> has two external oscillators. The frequency of\nthe slow clock is 32.768 kHz. The frequency of the main clock\nis 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840dongle_nrf52840</span></code> board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-Dongle\">nRF52840 Dongle website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id7\">2</a>\nfor a complete list of nRF52840 Dongle board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED0 (green) = P0.6</p></li>\n<li><p>LED1 (red)   = P0.8</p></li>\n<li><p>LED1 (green) = P1.9</p></li>\n<li><p>LED1 (blue)  = P0.12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P1.6</p></li>\n<li><p>RESET   = SW2 = P0.18</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840dongle_nrf52840</span></code> board configuration can be\nbuilt in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The board supports the following programming options:</p>\n<ol class=\"arabic simple\">\n<li><p>Using the built-in bootloader only</p></li>\n<li><p>Using MCUboot in serial recovery mode</p></li>\n<li><p>Using an external <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#debug-probes\"><span class=\"std std-ref\">debug probe</span></a></p></li>\n</ol>\n<p>These instructions use the <a class=\"reference internal\" href=\"../../../../guides/west/index.html#west\"><span class=\"std std-ref\">west</span></a> tool and assume you are in the\nroot directory of your <a class=\"reference internal\" href=\"../../../../glossary.html#term-west-installation\"><span class=\"xref std std-term\">west installation</span></a>.</p>\n<div class=\"section\" id=\"option-1-using-the-built-in-bootloader-only\">\n<h4>Option 1: Using the Built-In Bootloader Only<a class=\"headerlink\" href=\"#option-1-using-the-built-in-bootloader-only\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The board is factory-programmed with Nordic’s bootloader from Nordic’s nRF5\nSDK. With this option, you’ll use Nordic’s <a class=\"reference external\" href=\"https://github.com/NordicSemiconductor/pc-nrfutil\">nrfutil</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id11\">4</a> program to create\nfirmware packages supported by this bootloader and flash them to the\ndevice. Make sure <code class=\"docutils literal notranslate\"><span class=\"pre\">nrfutil</span></code> is installed before proceeding.</p>\n<ol class=\"arabic\">\n<li><p>Reset the board into the Nordic bootloader by pressing the RESET button.</p>\n<p>The push button is on the far side of the board from the USB connector. Note\nthat the button does not face up. You will have to push it from the outside\nin, towards the USB connector:</p>\n<img alt=\"Location of RESET button and direction of push\" src=\"../../../../_images/nRF52840_dongle_press_reset.svg\"/><p>The red LED should start a fade pattern, signalling the bootloader is\nrunning.</p>\n</li>\n<li><p>Compile a Zephyr application; we’ll use <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">blinky</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52840dongle_nrf52840 zephyr/samples/basic/blinky</span>\n</pre></div>\n</div>\n</li>\n<li><p>Package the application for the bootloader using <code class=\"docutils literal notranslate\"><span class=\"pre\">nrfutil</span></code>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nrfutil pkg generate --hw-version 52 --sd-req=0x00 \\</span>\n<span class=\"go\">        --application build/zephyr/zephyr.hex \\</span>\n<span class=\"go\">        --application-version 1 blinky.zip</span>\n</pre></div>\n</div>\n</li>\n<li><p>Flash it onto the board. Note <code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code> is for Linux; it will be\nsomething like <code class=\"docutils literal notranslate\"><span class=\"pre\">COMx</span></code> on Windows, and something else on macOS.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nrfutil dfu usb-serial -pkg blinky.zip -p /dev/ttyACM0</span>\n</pre></div>\n</div>\n<p>When this command exits, observe the green LED on the board blinking,\ninstead of the red LED used by the bootloader.</p>\n</li>\n</ol>\n<p>For more information, see <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v15.2.0%2Fsdk_app_serial_dfu_bootloader.html\">Nordic Semiconductor USB DFU</a> <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id9\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-using-mcuboot-in-serial-recovery-mode\">\n<h4>Option 2: Using MCUboot in Serial Recovery Mode<a class=\"headerlink\" href=\"#option-2-using-mcuboot-in-serial-recovery-mode\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is also possible to use the MCUboot bootloader with this board to flash\nZephyr applications. You need to do some one-time set-up to build and flash\nMCUboot on your board. From that point on, you can build and flash other Zephyr\napplications using MCUboot’s serial recovery mode. This process does not\noverwrite the built-in Nordic bootloader, so you can always go back to using\nOption 1 later.</p>\n<p>Install <a class=\"reference external\" href=\"https://github.com/NordicSemiconductor/pc-nrfutil\">nrfutil</a> <a class=\"footnote-reference brackets\" href=\"#id10\" id=\"id12\">4</a> and <a class=\"reference external\" href=\"https://github.com/apache/mynewt-mcumgr-cli\">mcumgr</a> <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id16\">6</a> first, and make sure MCUboot’s <code class=\"docutils literal notranslate\"><span class=\"pre\">imgtool</span></code> is\navailable for signing your binary for MCUboot as described on <a class=\"reference internal\" href=\"../../../../guides/west/sign.html#west-sign\"><span class=\"std std-ref\">Signing Binaries</span></a>.</p>\n<p>Next, do the <strong>one-time setup</strong> to flash MCUboot. We’ll assume you’ve cloned\nthe <a class=\"reference external\" href=\"https://github.com/JuulLabs-OSS/mcuboot\">MCUboot</a> <a class=\"footnote-reference brackets\" href=\"#id13\" id=\"id14\">5</a> repository into the directory <code class=\"docutils literal notranslate\"><span class=\"pre\">mcuboot</span></code>, and that it is next\nto the zephyr repository on your computer.</p>\n<ol class=\"arabic\">\n<li><p>Reset the board into the Nordic bootloader as described above.</p></li>\n<li><p>Compile MCUboot as a Zephyr application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52840dongle_nrf52840 -d build/mcuboot mcuboot/boot/zephyr</span>\n</pre></div>\n</div>\n</li>\n<li><p>Package the application for the bootloader using <code class=\"docutils literal notranslate\"><span class=\"pre\">nrfutil</span></code>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nrfutil pkg generate --hw-version 52 --sd-req=0x00 \\</span>\n<span class=\"go\">        --application build/mcuboot/zephyr/zephyr.hex \\</span>\n<span class=\"go\">        --application-version 1 mcuboot.zip</span>\n</pre></div>\n</div>\n</li>\n<li><p>Flash it onto the board. Note <code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code> is for Linux; it will be\nsomething like <code class=\"docutils literal notranslate\"><span class=\"pre\">COMx</span></code> on Windows, and something else on macOS.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">nrfutil dfu usb-serial -pkg mcuboot.zip -p /dev/ttyACM0</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>You can now flash a Zephyr application to the board using MCUboot’s serial\nrecovery mode. We’ll use the <a class=\"reference internal\" href=\"../../../../samples/subsys/mgmt/mcumgr/smp_svr/README.html#smp-svr-sample\"><span class=\"std std-ref\">SMP Server Sample</span></a> since it’s ready to be\ncompiled for chain-loading by MCUboot (and itself supports firmware updates\nover Bluetooth).</p>\n<ol class=\"arabic\">\n<li><p>Boot into MCUboot serial recovery mode by plugging the board in with the SW1\nbutton pressed down. See above for a picture showing where SW1 is.</p>\n<p><strong>Do not press RESET</strong>; that will run the Nordic bootloader, which is\ndifferent than MCUboot.</p>\n<p>A serial port will enumerate on your board. On Windows, “MCUBOOT” should\nappear under “Other Devices” in the Device Manager (in addition to the usual\n<code class=\"docutils literal notranslate\"><span class=\"pre\">COMx</span></code> device). On Linux, something like\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/serial/by-id/usb-ZEPHYR_MCUBOOT_0.01-if00</span></code> should be created.</p>\n<p>If no serial port appears, try plugging it in again, making sure SW1 is\npressed. If it still doesn’t appear, retry the one-time MCUboot setup.</p>\n</li>\n<li><p>Compile <code class=\"docutils literal notranslate\"><span class=\"pre\">smp_svr</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52840dongle_nrf52840 -d build/smp_svr zephyr/samples/subsys/mgmt/mcumgr/smp_svr</span>\n</pre></div>\n</div>\n</li>\n<li><p>Sign <code class=\"docutils literal notranslate\"><span class=\"pre\">smp_svr</span></code> for chain-loading by MCUboot.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west sign -t imgtool --bin --no-hex -d build/smp_svr \\</span>\n<span class=\"go\">          -B smp_svr.signed.bin -- --key mcuboot/root-rsa-2048.pem</span>\n</pre></div>\n</div>\n</li>\n<li><p>Flash the application to the MCUboot serial port using <code class=\"docutils literal notranslate\"><span class=\"pre\">mcumgr</span></code>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mcumgr --conntype=serial --connstring='dev=/dev/ttyACM0,baud=115200' \\</span>\n<span class=\"go\">       image upload -e smp_svr.signed.bin</span>\n</pre></div>\n</div>\n</li>\n<li><p>Reset the device:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">mcumgr --conntype=serial --connstring='dev=/dev/ttyACM0,baud=115200' reset</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>You should now be able to scan for Bluetooth devices using a smartphone or\ncomputer. The device you just flashed will be listed with <code class=\"docutils literal notranslate\"><span class=\"pre\">Zephyr</span></code> in its\nname.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This board supports building other Zephyr applications for flashing with\nMCUboot in this way also. Just make sure <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_BOOTLOADER_MCUBOOT.html#std-kconfig-CONFIG_BOOTLOADER_MCUBOOT\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_BOOTLOADER_MCUBOOT</span></code></a>\nis set when building your application. For example, to compile blinky for\nloading by MCUboot, use this:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b nrf52840dongle_nrf52840 -d build/blinky zephyr/samples/basic/blinky -- -DCONFIG_BOOTLOADER_MCUBOOT=y</span>\n</pre></div>\n</div>\n<p>You can then sign and flash it using the steps above.</p>\n</div>\n</div>\n<div class=\"section\" id=\"option-3-using-an-external-debug-probe\">\n<h4>Option 3: Using an External Debug Probe<a class=\"headerlink\" href=\"#option-3-using-an-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>If you have one, you can also use an external <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#debug-probes\"><span class=\"std std-ref\">debug probe</span></a>\nto flash and debug Zephyr applications, but you need to solder an SWD header\nonto the back side of the board.</p>\n<p>For Segger J-Link debug probes, follow the instructions in the\n<a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install and configure all the necessary\nsoftware. Further information can be found in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>.</p>\n<p>Locate the DTS file for the board under: boards/arm/nrf52840dongle_nrf52840.\nThis file requires a small modification to use a different partition table.\nEdit the include directive to include “fstab-debugger” instead of “fstab-stock”.</p>\n<p>In addition, the Kconfig file in the same directory must be modified by setting\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BOARD_HAS_NRF5_BOOTLOADER</span></code> to be default <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>, otherwise the code will be\nflashed with an offset.</p>\n<p>Then build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf52840dongle_nrf52840 samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Observe the LED on the board blinking.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf52840dongle_nrf52840</span></code> board does not have an on-board J-Link debug IC\nas some nRF5x development boards, however, instructions from the\n<a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page also apply to this board, with the additional step\nof connecting an external debugger.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-on-the-nrf52840-dongle\">\n<h2>Testing the LEDs and buttons on the nRF52840 Dongle<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-on-the-nrf52840-dongle\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n</ul>\n<p>You can build and program the examples to make sure Zephyr is running correctly\non your board.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-Dongle\">https://www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52840-Dongle</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id6\">1</a>,<a href=\"#id7\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id9\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v15.2.0%2Fsdk_app_serial_dfu_bootloader.html\">https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v15.2.0%2Fsdk_app_serial_dfu_bootloader.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id10\"><span class=\"brackets\">4</span><span class=\"fn-backref\">(<a href=\"#id11\">1</a>,<a href=\"#id12\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/NordicSemiconductor/pc-nrfutil\">https://github.com/NordicSemiconductor/pc-nrfutil</a></p>\n</dd>\n<dt class=\"label\" id=\"id13\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id14\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/JuulLabs-OSS/mcuboot\">https://github.com/JuulLabs-OSS/mcuboot</a></p>\n</dd>\n<dt class=\"label\" id=\"id15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id16\">6</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/apache/mynewt-mcumgr-cli\">https://github.com/apache/mynewt-mcumgr-cli</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1050_evk_qspi", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram_l", "size": 65536}, {"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 2, "instances": [{"label": "DAC_0"}, {"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "frdm_k22f", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP FRDM-K22F</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-frdm-k22f\">\n<span id=\"frdm-k22f\"></span><h1>NXP FRDM-K22F<a class=\"headerlink\" href=\"#nxp-frdm-k22f\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Freedom-K22F is an ultra-low-cost development platform for Kinetis K22\nMCUs.</p>\n<ul class=\"simple\">\n<li><p>Form-factor compatible with the Arduino R3 pin layout</p></li>\n<li><p>Peripherals enable rapid prototyping, including a 6-axis digital\naccelerometer and magnetometer to create full eCompass capabilities, a\ntri-colored LED and 2 user push-buttons for direct interaction, a optional\nmicroSD card slot, and headers for use with Bluetooth* and 2.4 GHz radio\nadd-on modules</p></li>\n<li><p>OpenSDAv2, the NXP open source hardware embedded serial and debug adapter\nrunning an open source bootloader, offers options for serial communication,\nflash programming, and run-control debugging</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/frdm_k22f.jpg\"><img alt=\"FRDM-K22F\" class=\"align-center\" src=\"../../../../_images/frdm_k22f.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MK22FN512VLH12 (120 MHz, 1 MB flash memory, 256 KB RAM, low-power,\ncrystal-less USB, and 64 pin Low profile Quad Flat Package (LQFP))</p></li>\n<li><p>Dual role USB interface with micro-B USB connector</p></li>\n<li><p>RGB LED</p></li>\n<li><p>FXOS8700CQ accelerometer and magnetometer</p></li>\n<li><p>Two user push buttons</p></li>\n<li><p>Flexible power supply option - OpenSDAv2 USB, Kinetis K22 USB, and external source</p></li>\n<li><p>Easy access to MCU input/output through Arduino* R3 compatible I/O connectors</p></li>\n<li><p>Programmable OpenSDAv2 debug circuit supporting the CMSIS-DAP Interface\nsoftware that provides:</p>\n<ul>\n<li><p>Mass storage device (MSD) flash programming interface</p></li>\n<li><p>CMSIS-DAP debug interface over a driver-less USB HID connection providing\nrun-control debugging and compatibility with IDE tools</p></li>\n<li><p>Virtual serial port interface</p></li>\n<li><p>Open source CMSIS-DAP software project</p></li>\n</ul>\n</li>\n<li><p>Optional SDHC</p></li>\n</ul>\n<p>For more information about the K22F SoC and FRDM-K22F board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/k-seriesperformancem4/k2x-usb/kinetis-k22-120-mhz-cost-effective-full-speed-usb-microcontrollers-mcus-based-on-arm-cortex-m4-core:K22_120\">K22F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/K22P121M120SF7.pdf\">K22F Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/K22P121M120SF7RM.pdf\">K22F Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/evaluation-and-development-boards/freedom-development-boards/mcu-boards/nxp-freedom-development-platform-for-kinetis-k22-mcus:FRDM-K22F\">FRDM-K22F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDMK22FUG\">FRDM-K22F User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=FRDM-K22F-SCH\">FRDM-K22F Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The frdm_k22f board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<p><a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/frdm_k22f/frdm_k22f_defconfig\">boards/arm/frdm_k22f/frdm_k22f_defconfig</a></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K22F SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTA1</p></td>\n<td><p>GPIO</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA2</p></td>\n<td><p>GPIO</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD5</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC1</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD0</p></td>\n<td><p>GPIO</p></td>\n<td><p>FXOS8700 INT1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD1</p></td>\n<td><p>GPIO</p></td>\n<td><p>FXOS8700 INT2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB17</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTE1</p></td>\n<td><p>UART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTE0</p></td>\n<td><p>UART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD2</p></td>\n<td><p>UART2_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD3</p></td>\n<td><p>UART2_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC4</p></td>\n<td><p>SPI0_PCS0</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD1</p></td>\n<td><p>SPI0_SCK</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD2</p></td>\n<td><p>SPI0_SOUT</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD3</p></td>\n<td><p>SPI0_SIN</p></td>\n<td><p>SPI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB2</p></td>\n<td><p>I2C0_SCL</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB3</p></td>\n<td><p>I2C0_SDA</p></td>\n<td><p>I2C / FXOS8700</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K22F SoC is configured to use the 8 MHz crystal oscillator on the board\nwith the on-chip PLL to generate a 72 MHz system clock in its RUN mode. This\nclock was selected to allow for the maximum number of peripherals to be used\nwith the crystal and PLL clocks. Other clock configurations are possible\nthrough NXP SDK currently.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K22F SoC has three UARTs. One is configured for the console, another for BT\nHCI, and the remaining are not used.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K22F SoC has a USB OTG (USBOTG) controller that supports both\ndevice and host functions through its micro USB connector (K22F USB).\nOnly USB device function is supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<p>Early versions of this board have an outdated version of the OpenSDA bootloader\nand require an update. Please see the <a class=\"reference external\" href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">DAPLink Bootloader Update</a> page for\ninstructions to update from the CMSIS-DAP bootloader to the DAPLink bootloader.</p>\n<div class=\"section\" id=\"option-1-opensda-daplink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-daplink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"http://www.nxp.com/assets/downloads/data/en/ide-debug-compile-build-tools/OpenSDAv2.2_DAPLink_frdmk22f_rev0242.zip\">OpenSDA DAPLink FRDM-K22F Firmware</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-jlink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_V2_1.bin\">Segger J-Link OpenSDA V2.1 Firmware</a>. Note that Segger\ndoes provide an OpenSDA J-Link Board-Specific Firmware for this board, however\nit is not compatible with the DAPLink bootloader.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k22f samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J26.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k22f samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.0.0 *****</span>\n<span class=\"go\">Hello World! frdm_k22f</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b frdm_k22f samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v2.0.0 *****</span>\n<span class=\"go\">Hello World! frdm_k22f</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "sram1", "size": 294912}, {"label": "sram4", "size": 65536}, {"label": "dtcm", "size": 131072}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_h745zi_q_m7", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "pinnacle_100_dvk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Laird Connectivity Pinnacle 100 DVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"laird-connectivity-pinnacle-100-dvk\">\n<span id=\"pinnacle-100-dvk\"></span><h1>Laird Connectivity Pinnacle 100 DVK<a class=\"headerlink\" href=\"#laird-connectivity-pinnacle-100-dvk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Pinnacle™ 100 cellular modem seamlessly incorporates a powerful Cortex M4F\ncontroller, full Bluetooth 5 and LTE-M/NB-IoT capabilities – all with full\nregulatory certifications and LTE carrier approvals. The Pinnacle 100 also\ndelivers complete antenna flexibility, with pre-integrated internal or external\nantenna options such as the Revie Flex family of LTE and NB-IoT\ninternal antennas.</p>\n<p>Develop your application directly on the M4F controller using Zephyr RTOS to\ncut BOM costs and power consumption. Take advantage of the Zephyr community,\nLaird Connectivity’s sample code (cellular, Bluetooth) and hardware interfaces,\nor use our hosted mode AT commands set firmware.</p>\n<p>Extremely power conscious, the Pinnacle 100 is ideal for battery-powered\ndevices operating at the edge of your IoT networks, seamlessly bridging the\ncellular WAN to BLE. It’s never been easier to bridge wireless\nBluetooth 5 sensor data to cloud services like AWS IoT over a\nlow-power LTE connection.</p>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.lairdconnect.com/wireless-modules/cellular-solutions/pinnacle-100-cellular-modem\">Pinnacle 100 website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n<p>The Pinnacle 100 Development Kit (453-00010-K1 or 453-00011-K1) hardware\nprovides support for the\nNordic Semiconductor nRF52840 ARM Cortex-M4F CPU, <a class=\"reference external\" href=\"https://source.sierrawireless.com/devices/hl-series/hl7800/#sthash.641qTTwA.dpbs\">Sierra Wireless HL7800</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a> (Altair ALT1250)\nand the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n<li><p><abbr title=\"Quad Serial Peripheral Interface\">QSPI</abbr></p></li>\n<li><p><abbr title=\"Bosch Sensortec BME680 environmental sensor\">BME680</abbr></p></li>\n<li><p><abbr title=\"Sierra Wireless HL7800 LTE-M1/NB-IoT modem\">HL7800</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pinnacle_100_dvk.jpg\"><img alt=\"Pinnacle 100 DVK\" src=\"../../../../_images/pinnacle_100_dvk.jpg\" style=\"width: 1000px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Pinnacle 100 DVK (453-00010-K1)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Pinnacle 100 development board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>qspi/MX25R64(8MB)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>BME680</p></td>\n<td><p>I2C(M)</p></td>\n<td><p>sensor/bme680</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HL7800</p></td>\n<td><p>UART</p></td>\n<td><p>HL7800 modem driver</p></td>\n</tr>\n</tbody>\n</table>\n<p>See <a class=\"reference external\" href=\"https://www.lairdconnect.com/wireless-modules/cellular-solutions/pinnacle-100-cellular-modem\">Pinnacle 100 website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a> for a complete list\nof Pinnacle 100 Development Kit hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (blue)  = P1.4</p></li>\n<li><p>LED2 (green) = P1.5</p></li>\n<li><p>LED3 (red)   = P1.6</p></li>\n<li><p>LED4 (green) = P1.7</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.31</p></li>\n<li><p>BUTTON2 = SW2 = P0.3</p></li>\n<li><p>BUTTON3 = SW3 = P0.4</p></li>\n<li><p>BUTTON4 = SW4 = P0.2</p></li>\n<li><p>NRF RESET = SW5 = reset</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">pinnacle_100_dvk</span></code> board configuration can be\nbuilt and flashed in the usual way. (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>\nand <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details)</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>On the Pinnacle 100 development board,\nthe FTDI USB should be used to access the UART console.</p>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board Pinnacle 100 DVK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b pinnacle_100_dvk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"software\">\n<h2>Software<a class=\"headerlink\" href=\"#software\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"pinnacle-100-out-of-box-demo-software\">\n<h3>Pinnacle 100 Out-of-Box Demo Software<a class=\"headerlink\" href=\"#pinnacle-100-out-of-box-demo-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Pinnacle 100 development kit ships with an out of the box software demo.\nCheck out the <a class=\"reference external\" href=\"https://github.com/LairdCP/Pinnacle_100_oob_demo\">Pinnacle 100 OOB Demo</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">4</a> source code and documentation.</p>\n</div>\n<div class=\"section\" id=\"sample-applications\">\n<h3>Sample Applications<a class=\"headerlink\" href=\"#sample-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p><a class=\"reference external\" href=\"https://github.com/LairdCP/Pinnacle_100_Sample_Applications\">Pinnacle 100 Sample Applications</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">5</a> are available.</p>\n</div>\n<div class=\"section\" id=\"testing-bluetooth-on-the-pinnacle-100-dvk\">\n<h3>Testing Bluetooth on the Pinnacle 100 DVK<a class=\"headerlink\" href=\"#testing-bluetooth-on-the-pinnacle-100-dvk\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Many of the Bluetooth examples will work on the Pinnacle 100 DVK.\nTry them out:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/peripheral/README.html#ble-peripheral\"><span class=\"std std-ref\">Bluetooth: Peripheral</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/eddystone/README.html#bluetooth-eddystone-sample\"><span class=\"std std-ref\">Bluetooth: Eddystone</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/bluetooth/ibeacon/README.html#bluetooth-ibeacon-sample\"><span class=\"std std-ref\">Bluetooth: iBeacon</span></a></p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-pinnacle-100-dvk\">\n<h3>Testing the LEDs and buttons in the Pinnacle 100 DVK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-pinnacle-100-dvk\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/pinnacle_100_dvk/pinnacle_100_dvk.dts\">boards/arm/pinnacle_100_dvk/pinnacle_100_dvk.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.1.pdf\">nRF52840 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>, chapter 7 ‘Hardware and Layout’.\nIn the table 7.1.1 ‘aQFN73 ball assignments’ select the pins marked\n‘General purpose I/O’.  Note that pins marked as ‘low frequency I/O only’ can only be used\nin under-10KHz applications. They are not suitable for 115200 speed of UART.</p>\n<p>Translate the ‘Pin’ into number for devicetree by using the following formula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.lairdconnect.com/wireless-modules/cellular-solutions/pinnacle-100-cellular-modem\">https://www.lairdconnect.com/wireless-modules/cellular-solutions/pinnacle-100-cellular-modem</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.1.pdf\">https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.1.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://source.sierrawireless.com/devices/hl-series/hl7800/#sthash.641qTTwA.dpbs\">https://source.sierrawireless.com/devices/hl-series/hl7800/#sthash.641qTTwA.dpbs</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/LairdCP/Pinnacle_100_oob_demo\">https://github.com/LairdCP/Pinnacle_100_oob_demo</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">5</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/LairdCP/Pinnacle_100_Sample_Applications\">https://github.com/LairdCP/Pinnacle_100_Sample_Applications</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 524288}, {"label": "dtcm", "size": 131072}], "main_ram_size": 524288, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 9, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 4, "instances": [{"label": "ADC_1"}, {"label": "ADC_2"}, {"label": "ADC_1_2"}, {"label": "ADC_3"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}]}, "usb": {"count": 1, "instances": [{"label": "OTG_FS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_h743zi", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo H743ZI</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-h743zi\">\n<span id=\"nucleo-h743zi-board\"></span><h1>ST Nucleo H743ZI<a class=\"headerlink\" href=\"#st-nucleo-h743zi\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 boards offer combinations of performance and power that\nprovide an affordable and flexible way for users to build prototypes and try\nout new concepts. For compatible boards, the SMPS (Switched-Mode Power Supply)\nsignificantly reduces power consumption in Run mode.</p>\n<p>The Arduino-compatible ST Zio connector expands functionality of the Nucleo\nopen development platform, with a wide choice of specialized Arduino* Uno V3\nshields.</p>\n<p>The STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK/V2-1 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p></li>\n</ul>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB with Micro-AB</p></li>\n<li><p>SWD</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>ST Zio connector including Arduino* Uno V3</p></li>\n<li><p>ST morpho</p></li>\n</ul>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources.</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration</p></li>\n<li><p>capability: mass storage, virtual COM port and debug port.</p></li>\n<li><p>Comprehensive free software libraries and examples available with the\nSTM32Cube MCU package.</p></li>\n<li><p>Arm* Mbed Enabled* compliant (only for some Nucleo part numbers)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_h743zi.jpg\"><img alt=\"Nucleo H743ZI\" class=\"align-center\" src=\"../../../../_images/nucleo_h743zi.jpg\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-h743zi.html\">Nucleo H743ZI website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo H743ZI provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32H743ZI in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>Hardware JPEG Codec</p></li>\n<li><p>480 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.62 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>1 MB SRAM</p></li>\n<li><p>High-resolution timer (2.1 ns)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>16-bit timers(12)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN-FD(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO (up to 114) with external interrupt capability</p></li>\n<li><p>16-bit ADC(3) with 36 channels / 3.6 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_h743zi board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 60%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>counter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random number generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Backup SRAM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Backup SRAM</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb_device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_h743zi/nucleo_h743zi_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo H743ZI board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n<li><p>ADC1_INP15 : PA3</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>SPI1 NSS/SCK/MISO/MOSI : PD14/PA5/PA6/PB5 (Arduino SPI)</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H743ZI System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 96MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo H743ZI board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"backup-sram\">\n<h4>Backup SRAM<a class=\"headerlink\" href=\"#backup-sram\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to test backup SRAM you may want to disconnect VBAT from VDD. You can\ndo it by removing <code class=\"docutils literal notranslate\"><span class=\"pre\">SB156</span></code> jumper on the back side of the board.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_h743zi</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>If using OpenOCD you will need a recent development version as the last\nofficial release does not support H7 series yet. You can also choose the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stm32cubeprogrammer</span></code> runner.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo H743ZI board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-h743zi\">\n<h4>Flashing an application to Nucleo H743ZI<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-h743zi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h743zi samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_h743zi\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_h743zi samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 196608}, {"label": "ccm0", "size": 65536}], "main_ram_size": 196608, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "96b_aerocore2", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Aerocore2</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-aerocore2\">\n<span id=\"b-aerocore2-board\"></span><h1>96Boards Aerocore2<a class=\"headerlink\" href=\"#boards-aerocore2\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards Aerocore2 Mezzanine is based on the STMicroelectronics\nSTM32F427VIT6 Cortex-M4 CPU primarily designed for use in drones.\nThis board acts as a mezzanine platform for all 96Boards CE compliant\nboards. It can also be used as a standalone board.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/96b_aerocore2.jpg\"><img alt=\"96Boards Aerocore2\" src=\"../../../../_images/96b_aerocore2.jpg\" style=\"width: 487px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">96Boards Aerocore2</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Aerocore2 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F427VIT6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>168 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>2048 KB Flash</p></li>\n<li><p>256 KB SRAM</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>12-bit ADC with 16 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timers (2)</p></li>\n<li><p>General Purpose Timers (10)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART/UART (4)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>SDIO</p></li>\n<li><p>USB 2.0 OTG FS</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F427VIT6 can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.st.com/en/microcontrollers-microprocessors/stm32f427vi.html\">STM32F427 on www.st.com</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_aerocore2 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 20%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>timers / pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB OTG FS</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n</tbody>\n</table>\n<p>More details about the board can be found at <a class=\"reference external\" href=\"https://www.96boards.org/product/aerocore2/\">96Boards website</a>.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_aerocore2/96b_aerocore2_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User1 LED = PE10</p></li>\n<li><p>LED2 / User2 LED = PE9</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"external-connectors\">\n<h4>External Connectors<a class=\"headerlink\" href=\"#external-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Octal PWM Header (J1)</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 8%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 8%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 8%\"/>\n<col style=\"width: 15%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F427 Functions Pin</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>Pin #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>PWM4_CH1</p></td>\n<td><p>PD12</p></td>\n<td><p>2</p></td>\n<td><p>5.0v</p></td>\n<td><p>3</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>PWM4_CH2</p></td>\n<td><p>PD13</p></td>\n<td><p>5</p></td>\n<td><p>5.0v</p></td>\n<td><p>6</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>7</p></td>\n<td><p>PWM4_CH3</p></td>\n<td><p>PD14</p></td>\n<td><p>8</p></td>\n<td><p>5.0v</p></td>\n<td><p>9</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>10</p></td>\n<td><p>PWM4_CH4</p></td>\n<td><p>PD15</p></td>\n<td><p>11</p></td>\n<td><p>5.0v</p></td>\n<td><p>12</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PWM5_CH1</p></td>\n<td><p>PA0</p></td>\n<td><p>14</p></td>\n<td><p>5.0v</p></td>\n<td><p>15</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>16</p></td>\n<td><p>PWM5_CH2</p></td>\n<td><p>PA1</p></td>\n<td><p>17</p></td>\n<td><p>5.0v</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>19</p></td>\n<td><p>PWM5_CH3</p></td>\n<td><p>PA2</p></td>\n<td><p>20</p></td>\n<td><p>5.0v</p></td>\n<td><p>21</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>22</p></td>\n<td><p>PWM5_CH4</p></td>\n<td><p>PA3</p></td>\n<td><p>23</p></td>\n<td><p>5.0v</p></td>\n<td><p>24</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>IO Header J11</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>PB9</p></td>\n<td><p>2</p></td>\n<td><p>PB8*</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>PC9</p></td>\n<td><p>4</p></td>\n<td><p>PB0</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>PE5</p></td>\n<td><p>6</p></td>\n<td><p>NA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>PE6</p></td>\n<td><p>8</p></td>\n<td><p>NA</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>PC6</p></td>\n<td><p>10</p></td>\n<td><p>NA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>PC7</p></td>\n<td><p>12</p></td>\n<td><p>NA</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>PC8</p></td>\n<td><p>14</p></td>\n<td><p>NA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>PA8</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>PA9</p></td>\n<td><p>18</p></td>\n<td><p>3v3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>PA10</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<ul class=\"simple\">\n<li><p>PB8 is connected to a watchdog buzzer, It needs to be pulsed every 10 seconds to keep the buzzer silent.</p></li>\n</ul>\n<p>IO Header J5</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 8%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 28%\"/>\n<col style=\"width: 8%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 28%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F427 Functions Pin</p></th>\n<th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F427 Functions Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>AGND</p></td>\n<td><p>AGND</p></td>\n<td><p>2</p></td>\n<td><p>ADC1_13</p></td>\n<td><p>PC3</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>ADC1_12</p></td>\n<td><p>PC2</p></td>\n<td><p>4</p></td>\n<td><p>ADC1_11</p></td>\n<td><p>PC1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>PB11</p></td>\n<td><p>6</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>PB10</p></td>\n<td><p>8</p></td>\n<td><p>VCC 3v3</p></td>\n<td><p>VCC 3v3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>9</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n<td><p>10</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n<td><p>12</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>13</p></td>\n<td><p>UART_TX 7</p></td>\n<td><p>PE8</p></td>\n<td><p>14</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>UART_RX 7</p></td>\n<td><p>PE7</p></td>\n<td><p>16</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>17</p></td>\n<td><p>UART_TX 2</p></td>\n<td><p>PD5</p></td>\n<td><p>18</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>UART_TX 2</p></td>\n<td><p>PD6</p></td>\n<td><p>20</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>21</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n<td><p>10</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n<td><p>10</p></td>\n<td><p>NC</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>25</p></td>\n<td><p>SPI1_NIRQ</p></td>\n<td><p>PC5</p></td>\n<td><p>26</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>27</p></td>\n<td><p>SPI1_CLK</p></td>\n<td><p>PA5</p></td>\n<td><p>28</p></td>\n<td><p>SPI1_MISO</p></td>\n<td><p>PA6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>29</p></td>\n<td><p>SPI1_CS0</p></td>\n<td><p>PA4</p></td>\n<td><p>30</p></td>\n<td><p>SPI1_MOSI</p></td>\n<td><p>PA7</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>31</p></td>\n<td><p>CAN_TX</p></td>\n<td><p>PD1</p></td>\n<td><p>32</p></td>\n<td><p>CANH</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>33</p></td>\n<td><p>CAN_RX</p></td>\n<td><p>PD0</p></td>\n<td><p>34</p></td>\n<td><p>CANL</p></td>\n<td><p>NC</p></td>\n</tr>\n</tbody>\n</table>\n<p>GPS connector J15</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 16%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F427 Functions Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>V_OUT 5v</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>UART1_TX</p></td>\n<td><p>PB6</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>UART1_RX</p></td>\n<td><p>PB7</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>4</p></td>\n<td><p>VCC 3v3</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>5</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n</tbody>\n</table>\n<p>Spektrum connector J3</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 16%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 56%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>PIN #</p></th>\n<th class=\"head\"><p>Signal Name</p></th>\n<th class=\"head\"><p>STM32F427 Functions Pin</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>1</p></td>\n<td><p>VCC 3v3</p></td>\n<td><p>NC</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>2</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>3</p></td>\n<td><p>UART8_RX</p></td>\n<td><p>PE0</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"external-clock-sources\">\n<h4>External Clock Sources<a class=\"headerlink\" href=\"#external-clock-sources\" title=\"Permalink to this headline\">¶</a></h4>\n<p>STM32F4 has one external oscillator. The frequency of the clock is\n32.768 kHz. The internal 16MHz clock is used as the main clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Aerocore2 board has up to 4 U(S)ARTs. The Zephyr console output is\nassigned to USART7. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Aerocore2 board has 1 I2C port. The default I2C mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL : PB10</p></li>\n<li><p>I2C1_SDA : PB11</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards Aerocore2 board has 1 SPI port. The default SPI mapping for Zephyr is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_CS0  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Aerocore2 board has a USB OTG dual-role device (DRD) controller that\nsupports both device and host functions through its mini “OTG” USB connector.\nOnly USB device functions are supported in Zephyr at the moment.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 main entry points for flashing STM32F4X SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware). Flashing using the ROM bootloader requires a special activation\npattern, which can be triggered by using the BOOT0 pin. The ROM bootloader\nsupports flashing via USB (DFU), UART, I2C and SPI. You can read more about\nhow to enable and use the ROM bootloader by checking the application\nnote <a class=\"reference external\" href=\"http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf\">AN2606</a>, page 109.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"installing-dfu-util\">\n<h4>Installing dfu-util<a class=\"headerlink\" href=\"#installing-dfu-util\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is recommended to use at least v0.8 of <a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/build.html\">dfu-util</a>. The package available in\ndebian/ubuntu can be quite old, so you might have to build dfu-util from source.</p>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-96boards-aerocore2\">\n<h4>Flashing an Application to 96Boards Aerocore2<a class=\"headerlink\" href=\"#flashing-an-application-to-96boards-aerocore2\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the micro-USB cable to the USB OTG/STM_CONSOLE Aerocore2 port and to your computer.\nThe board should power ON. Force the board into DFU mode by keeping the BOOT0\nswitch pressed while pressing and releasing the RST switch.</p>\n<p>The BOOT button is located at the back-side of the PCB.</p>\n<p>Confirm that the board is in DFU mode:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo dfu-util -l\n<span class=\"go\">dfu-util 0.8</span>\n<span class=\"go\">Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.</span>\n<span class=\"go\">Copyright 2010-2014 Tormod Volden and Stefan Schmidt</span>\n<span class=\"go\">This program is Free Software and has ABSOLUTELY NO WARRANTY</span>\n<span class=\"go\">Please report bugs to dfu-util@lists.gnumonks.org</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=3, name=\"@Device Feature/0xFFFF0000/01*004 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=2, name=\"@OTP Memory /0x1FFF7800/01*512 e,01*016 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=1, name=\"@Option Bytes /0x1FFFC000/01*016 e\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=15, cfg=1, intf=0, alt=0, name=\"@Internal Flash /0x08000000/04*016Kg,01*064Kg,03*128Kg\", serial=\"3574364C3034\"</span>\n<span class=\"go\">Found Runtime: [05ac:8290] ver=0104, devnum=2, cfg=1, intf=5, alt=0, name=\"UNKNOWN\", serial=\"UNKNOWN\"</span>\n</pre></div>\n</div>\n<p>You should see following confirmation on your Linux host:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>dmesg\n<span class=\"go\">usb 1-2.1: new full-speed USB device number 14 using xhci_hcd</span>\n<span class=\"go\">usb 1-2.1: New USB device found, idVendor=0483, idProduct=df11</span>\n<span class=\"go\">usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span>\n<span class=\"go\">usb 1-2.1: Product: STM32 BOOTLOADER</span>\n<span class=\"go\">usb 1-2.1: Manufacturer: STMicroelectronics</span>\n<span class=\"go\">usb 1-2.1: SerialNumber: 3574364C3034</span>\n</pre></div>\n</div>\n<p>Then build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_aerocore2 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Connect a USB-TTL dongle to the UART_7 header port and to your computer.\nRun your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board 96Boards Aerocore2\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">-b</span></code> option sets baud rate ignoring the value from config.</p>\n<p>Press the Reset button and you should see the the following message in your\nterminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "serpente", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Arturo182 Serpente</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arturo182-serpente\">\n<span id=\"serpente\"></span><h1>Arturo182 Serpente<a class=\"headerlink\" href=\"#arturo182-serpente\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Serpente is a very small low-cost development and prototyping\nboard equipped with 4MiB flash storage, a PWM enabled RGB led and 6 I/O pins.\nThe board comes with 3 different USB connector options: USB Type-C plug,\nUSB Type-C socket and USB Type-A plug.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/serpente.jpg\"><img alt=\"Serpente Baords\" class=\"align-center\" src=\"../../../../_images/serpente.jpg\" style=\"width: 640px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21E18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>Extra 4MiB SPI flash memory</p></li>\n<li><p>RGB User LED</p></li>\n<li><p>Reset button</p></li>\n<li><p>Native USB port</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Serpente board configuration supports the\nfollowing hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/serpente/serpente_defconfig\">boards/arm/serpente/serpente_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://serpente.solder.party/r2/\">Serpente documentation</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed information about the board\nincluding <a class=\"reference external\" href=\"https://serpente.solder.party/r2/docs/pinout/\">pinouts</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> and the <a class=\"reference external\" href=\"https://serpente.solder.party/r2/docs/downloads/\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 8MHz internal oscillator\nwith the on-chip PLL generating the 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which prints “Hello World!”\nto the host PC.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h3>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Serpente ships the BOSSA compatible UF2 bootloader. The bootloader\ncan be entered by quickly tapping the reset button twice.</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b serpente samples/basic/blinky</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Serpente to your host computer using USB</p></li>\n<li><p>Tap the reset button twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b serpente samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the User LED blink.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://serpente.solder.party/r2/\">https://serpente.solder.party/r2/</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://serpente.solder.party/r2/docs/pinout/\">https://serpente.solder.party/r2/docs/pinout/</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://serpente.solder.party/r2/docs/downloads/\">https://serpente.solder.party/r2/docs/downloads/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "LPUART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32l562e_dk_ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 16777216}], "main_ram_size": 16777216, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "emsdp_em7d_esp", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 524288}], "main_ram_size": 524288, "gpio": {"count": 1, "instances": [{"label": "GPIO"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "quick_feather", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>QuickFeather</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"quickfeather\">\n<span id=\"id1\"></span><h1>QuickFeather<a class=\"headerlink\" href=\"#quickfeather\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The QuickFeather development board is a platform with an on-board QuickLogic\nEOS S3 Sensor Processing Platform.</p>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/feather-board.png\"><img alt=\"QuickFeather\" src=\"../../../../_images/feather-board.png\" style=\"width: 500px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">QuickFeather (Credit: QuickLogic)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>QuickLogic EOS S3 MCU Platform</p></li>\n<li><p>mCube MC3635 accelerometer</p></li>\n<li><p>Infineon DPS310 pressure sensor</p></li>\n<li><p>Infineon IM69D130 MEMS microphone</p></li>\n<li><p>16 Mbit of on-board flash memory</p></li>\n<li><p>User button</p></li>\n<li><p>RGB LED</p></li>\n<li><p>Integrated battery charger</p></li>\n</ul>\n<p>Detailed information about the board can be found in a <a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board\">QuickFeather repository</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">1</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The QuickFeather configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the Kconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/quick_feather/quick_feather_defconfig\">boards/arm/quick_feather/quick_feather_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Detailed information about pinouts is available in the <a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/quickfeather-board.pdf\">schematics document</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The QuickFeather platform by default boots from flash. Currently\nthe Zephyr port only enables loading the program directly to SRAM using either\nOpenOCD and a SWD programmer or SEGGER JLink.</p>\n<div class=\"section\" id=\"openocd\">\n<h4>OpenOCD<a class=\"headerlink\" href=\"#openocd\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to connect to the target a SWD programmer supported in\nOpenOCD is needed. To connect to the board run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">openocd -f /path/to/swd-programmer.cfg -f tcl/board/quicklogic_quickfeather.cfg -c \"init\" -c \"reset halt\"</span>\n</pre></div>\n</div>\n<p><a class=\"reference external\" href=\"https://sourceforge.net/p/openocd/code/ci/master/tree/tcl/board/quicklogic_quickfeather.cfg\">The QuickFeather OpenOCD config</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a> can be found in the OpenOCD mainline repository.</p>\n</div>\n<div class=\"section\" id=\"jlink\">\n<h4>JLink<a class=\"headerlink\" href=\"#jlink\" title=\"Permalink to this headline\">¶</a></h4>\n<p>To connect to the QuickFeather board with JLink please follow instructions\nin the <a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/QuickFeather_UserGuide.pdf\">QuickFeather User Guide</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">4</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To debug the QuickFeather board please connect to the target with either\nOpenOCD or JLink and use GDB distributed in Zephyr’s SDK in <em>arm-zephyr-eabi/bin</em>\ndirectory.</p>\n<p>To load basic sample via GDB:</p>\n<ul class=\"simple\">\n<li><p>Build the sample in an usual way:</p></li>\n</ul>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b quickfeather samples/hello_world</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>Connect to the target using either OpenOCD or JLink</p></li>\n<li><p>Connect via GDB and load an ELF file:</p></li>\n</ul>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">/path/to/zephyr-sdk/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb</span>\n<span class=\"go\">target remote &lt;port_number&gt;</span>\n<span class=\"go\">file &lt;/path/to/zephyr.elf&gt;</span>\n<span class=\"go\">load</span>\n<span class=\"go\">continue</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board\">https://github.com/QuickLogic-Corp/quick-feather-dev-board</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/quickfeather-board.pdf\">https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/quickfeather-board.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://sourceforge.net/p/openocd/code/ci/master/tree/tcl/board/quicklogic_quickfeather.cfg\">https://sourceforge.net/p/openocd/code/ci/master/tree/tcl/board/quicklogic_quickfeather.cfg</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/QuickFeather_UserGuide.pdf\">https://github.com/QuickLogic-Corp/quick-feather-dev-board/blob/master/doc/QuickFeather_UserGuide.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 10, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}, {"label": "GPIO_G"}, {"label": "GPIO_H"}, {"label": "GPIO_I"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 6, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}, {"label": "USART_4"}, {"label": "USART_5"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32gg_stk3701a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>EFM32 Giant Gecko GG11 Starter Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"efm32-giant-gecko-gg11-starter-kit\">\n<span id=\"efm32gg-stk3701a\"></span><h1>EFM32 Giant Gecko GG11 Starter Kit<a class=\"headerlink\" href=\"#efm32-giant-gecko-gg11-starter-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The EFM32 Giant Gecko Starter Kit EFM32GG-STK3701A contains an MCU from the\nEFM32GG Series 1 family built on an ARM® Cortex®-M4F processor with excellent\nlow power capabilities.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/efm32gg_stk3701a.jpg\"><img alt=\"EFM32GG-SLSTK3701A\" src=\"../../../../_images/efm32gg_stk3701a.jpg\" style=\"width: 375px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">EFM32GG-SLSTK3701A (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring provides real-time information about the energy\nconsumption of an application or prototype design.</p></li>\n<li><p>Ultra low power 128x128 pixel color Memory-LCD</p></li>\n<li><p>2 user buttons, 2 LEDs and a touch slider</p></li>\n<li><p>Relative humidity, magnetic Hall Effect and inductive-capacitive metal sensor</p></li>\n<li><p>USB interface for Host/Device/OTG</p></li>\n<li><p>32 Mb Quad-SPI Flash memory</p></li>\n<li><p>SD card slot</p></li>\n<li><p>RJ-45 Ethernet jack</p></li>\n<li><p>2 digital microphones</p></li>\n<li><p>On-board Segger J-Link USB debugger</p></li>\n</ul>\n<p>For more information about the EFM32GG11 SoC and EFM32GG-STK3701A board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/mcu/32-bit/efm32-giant-gecko-s1\">EFM32GG Series 1 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/efm32gg11-datasheet.pdf\">EFM32GG11 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/efm32gg11-rm.pdf\">EFM32GG11 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/products/development-tools/mcu/32-bit/efm32-giant-gecko-gg11-starter-kit\">EFM32GG-STK3701A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug287-stk3701.pdf\">EFM32GG-STK3701A User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/schematic-files/BRD2204A-B00-schematic.pdf\">EFM32GG-STK3701A Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32gg_stk3701a board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtcc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c port-polling</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32gg_stk3701a/efm32gg_stk3701a_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are currently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG11 SoC has nine GPIO controllers (PORTA to PORTI), all of which are\ncurrently enabled for the EFM32GG-STK3701A board.</p>\n<p>In the following table, the column <strong>Name</strong> contains pin names. For example, PE1\nmeans pin number 1 on PORTE, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PH10</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0 red</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PH11</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0 green</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PH12</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0 blue</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PH13</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1 red</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PH14</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1 green</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PH15</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1 blue</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PC8</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PC9</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PE1</p></td>\n<td><p>GPIO</p></td>\n<td><p>Board Controller Enable\nEFM_BC_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PH4</p></td>\n<td><p>UART_TX</p></td>\n<td><p>UART TX Console VCOM_TX US0_TX #4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PH5</p></td>\n<td><p>UART_RX</p></td>\n<td><p>UART RX Console VCOM_RX US0_RX #4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PI4</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>SENSOR_I2C_SDA I2C2_SDA #7</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PI5</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>SENSOR_I2C_SCL I2C2_SCL #7</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG11 SoC is configured to use the 50 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG11 SoC has six USARTs, two UARTs and two Low Energy UARTs (LEUART).\nUSART4 is connected to the board controller and is used for the console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG-STK3701A includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer, which exposes a mass storage device and a\nUSB serial port.</p></li>\n<li><p>A serial flash device, which implements the USB flash disk file storage.</p></li>\n<li><p>A physical UART connection which is relayed over interface USB serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-efm32gg-stk3701a\">\n<h4>Flashing an application to EFM32GG-STK3701A<a class=\"headerlink\" href=\"#flashing-an-application-to-efm32gg-stk3701a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The sample application <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> is used for this example.\nBuild the Zephyr kernel and application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32gg_stk3701a samples/hello_world</span>\n</pre></div>\n</div>\n<p>Connect the EFM32GG-STK3701A to your host computer using the USB port and you\nshould see a USB connection which exposes a mass storage device(STK3701A) and\na USB Serial Port. Copy the generated zephyr.bin to the STK3701A drive.</p>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you’ll see the following message on the corresponding serial port\nterminal session:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! efm32gg_stk3701a</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 5, "instances": [{"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "stm32l1_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32L1 Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32l1-discovery\">\n<span id=\"stm32l1-disco-board\"></span><h1>ST STM32L1 Discovery<a class=\"headerlink\" href=\"#st-stm32l1-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The two generations of the STM32L1 Discovery development boards come with\nan integrated ST-LINK/V2 debugger and programmer.  The boards have a\n24-segment LCD and a touch slider, along with two user LEDs and a user button.\nSupport circuitry for measuring power consumption is also available.\nIt also comes with a comprehensive STM32 software HAL library and various\npackaged software examples.</p>\n<p>There\nare two variants of the board:</p>\n<ul class=\"simple\">\n<li><p>STM32LDISCOVERY targets STM32L152RBT6, with 128K flash, 16K RAM</p></li>\n<li><p>32L152CDISCOVERY targets STM32L152RCT6, with 256K flash, 32K RAM</p></li>\n</ul>\n<p>The STM32LDISCOVERY is no longer sold, but was widely available.  The current\nconfiguration assumes only 128K flash and 16K RAM, so it builds and runs\non both variants out of the box.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32l1_disco.jpg\"><img alt=\"STM32LDISCOVERY\" class=\"align-center\" src=\"../../../../_images/stm32l1_disco.jpg\" style=\"width: 564px; height: 600px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/32l152cdiscovery.html\">STM32LDISCOVERY website</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Discovery board features:</p>\n<ul>\n<li><p>On-board ST-LINK/V2 with selection mode switch to use the kit as a standalone\nST-LINK/V2 (with SWD connector for programming and debugging)</p></li>\n<li><p>Board power supply: through USB bus or from an external 5 V supply voltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>Four LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>LD1 (red) for 3.3 V power on</p></li>\n<li><p>LD2 (red/green) for USB communication</p></li>\n<li><p>LD3 (green) for PC9 output</p></li>\n<li><p>LD4 (blue) for PC8 output</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push buttons (user and reset)</p></li>\n<li><p>Extension header for all LQFP64 I/Os for quick connection to prototyping board\nand easy probing</p></li>\n</ul>\n<p>More information about STM32L151x can be found in the <a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00240193.pdf\">STM32L1x reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32l1_disco board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\" id=\"id1\">\n<caption><span class=\"caption-text\">Supported hardware</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this table\">¶</a></caption>\n<colgroup>\n<col style=\"width: 33%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 33%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>window watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32l1_disco/stm32l1_disco_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PA9</p></li>\n<li><p>UART_1_RX : PA10</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PB10</p></li>\n<li><p>I2C2_SDA : PB11</p></li>\n<li><p>SPI1_NSS : PA4</p></li>\n<li><p>SPI1_SCK : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS : PB12</p></li>\n<li><p>SPI2_SCK : PB13</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n</ul>\n<p>For mode details please refer to <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00027954.pdf\">STM32L1DISCOVERY board User Manual</a> <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id7\">3</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32l1_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32L1DISCOVERY board includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application\">\n<h4>Flashing an application<a class=\"headerlink\" href=\"#flashing-an-application\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l1_disco samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32l1_disco samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/32l152cdiscovery.html\">https://www.st.com/en/evaluation-tools/32l152cdiscovery.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/cd00240193.pdf\">https://www.st.com/resource/en/reference_manual/cd00240193.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00027954.pdf\">https://www.st.com/resource/en/user_manual/dm00027954.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "DDR SYSTEM", "size": 1610612736}, {"label": "TCMU SYSTEM", "size": 32768}, {"label": "OCRAM SYSTEM", "size": 131072}, {"label": "OCRAM_S SYSTEM", "size": 32768}], "main_ram_size": 1610612736, "gpio": {"count": 7, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}, {"label": "GPIO_6"}, {"label": "GPIO_7"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 7, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "96b_meerkat96", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards Meerkat96</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-meerkat96\">\n<span id=\"b-meerkat96\"></span><h1>96Boards Meerkat96<a class=\"headerlink\" href=\"#boards-meerkat96\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards Meerkat96 board is based on NXP i.MX7 Hybrid multi-core processor,\ncomposed of a dual Cortex®-A7 and a single Cortex®-M4 core.\nZephyr OS is ported to run on the Cortex®-M4 core.</p>\n<ul class=\"simple\">\n<li><p>Board features:</p>\n<ul>\n<li><p>RAM: 512 Mbyte</p></li>\n<li><p>Storage:</p>\n<ul>\n<li><p>microSD Socket</p></li>\n</ul>\n</li>\n<li><p>Wireless:</p>\n<ul>\n<li><p>WiFi: 2.4GHz IEEE 802.11b/g/n</p></li>\n<li><p>Bluetooth: v4.1 (BR/EDR)</p></li>\n</ul>\n</li>\n<li><p>USB:</p>\n<ul>\n<li><p>Host - 2x type A</p></li>\n<li><p>OTG: - 1x type micro-B</p></li>\n</ul>\n</li>\n<li><p>HDMI</p></li>\n<li><p>Connectors:</p>\n<ul>\n<li><p>40-Pin Low Speed Header</p></li>\n<li><p>60-Pin High Speed Header</p></li>\n</ul>\n</li>\n<li><p>LEDs:</p>\n<ul>\n<li><p>4x Green user LEDs</p></li>\n<li><p>1x Blue Bluetooth LED</p></li>\n<li><p>1x Yellow WiFi LED</p></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img alt=\"96Boards Meerkat96\" class=\"align-center\" src=\"../../../../_images/96b_meerkat96.jpg\"/>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://www.96boards.org/product/imx7-96/\">96Boards website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX7 SoC provides the following hardware capabilities:</p>\n<ul class=\"simple\">\n<li><p>Dual Cortex A7 (800MHz/1.0GHz) core and Single Cortex M4 (200MHz) core</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>External DDR memory up to 1 Gbyte</p></li>\n<li><p>Internal RAM -&gt; A7: 256KB SRAM</p></li>\n<li><p>Internal RAM -&gt; M4: 3x32KB (TCML, TCMU, OCRAM_S), 1x128KB (OCRAM) and 1x256MB (DDR)</p></li>\n</ul>\n</li>\n<li><p>Display</p>\n<ul>\n<li><p>RGB 1920x1080x24bpp</p></li>\n<li><p>4-wire Resistive touch</p></li>\n</ul>\n</li>\n<li><p>Multimedia</p>\n<ul>\n<li><p>1x Camera Parallel Interface</p></li>\n<li><p>1x Analog Audio Line in (Stereo)</p></li>\n<li><p>1x Analog Audio Mic in (Mono)</p></li>\n<li><p>1x Analog Audio Headphone out (Stereo)</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>USB 2.0 OTG (High Speed)</p></li>\n<li><p>USB 2.0 host (High Speed)</p></li>\n<li><p>10/100 Mbit/s Ethernet PHY</p></li>\n<li><p>4x I2C</p></li>\n<li><p>4x SPI</p></li>\n<li><p>7x UART</p></li>\n<li><p>1x IrDA</p></li>\n<li><p>20x PWM</p></li>\n<li><p>Up to 125 GPIO</p></li>\n<li><p>4x Analog Input (12 Bit)</p></li>\n<li><p>2x SDIO/SD/MMC (8 Bit)</p></li>\n<li><p>2x CAN</p></li>\n</ul>\n</li>\n</ul>\n<p>More information about the i.MX7 SoC can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/applications-processors/i.mx-applications-processors/i.mx-7-processors:IMX7-SERIES?fsrch=1&amp;sr=1&amp;pageNum=1\">i.MX 7 Series Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMX7DCEC.pdf\">i.MX 7 Dual Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_meerkat96 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_meerkat96/96b_meerkat96_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Meerkat96 board was tested with the following pinmux controller\nconfiguration.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Board Name</p></th>\n<th class=\"head\"><p>SoC Name</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>UART_1 RXD</p></td>\n<td><p>UART1_TXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART_1 TXD</p></td>\n<td><p>UART1_RXD</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED_R1</p></td>\n<td><p>GPIO1_IO04</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED_R2</p></td>\n<td><p>GPIO1_IO05</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED_R3</p></td>\n<td><p>GPIO1_IO06</p></td>\n<td><p>LED2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED_R4</p></td>\n<td><p>GPIO1_IO07</p></td>\n<td><p>LED3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The M4 Core is configured to run at a 200 MHz clock speed.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The iMX7D SoC has seven UARTs. UART_1 is configured for the console and\nthe remaining are not used/tested.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The 96Boards Meerakat96 board doesn’t have QSPI flash for the M4 and it needs\nto be started by the A7 core. The A7 core is responsible to load the M4 binary\napplication into the RAM, put the M4 in reset, set the M4 Program Counter and\nStack Pointer, and get the M4 out of reset. The A7 can perform these steps at\nbootloader level or after the Linux system has booted.</p>\n<p>The M4 can use up to 5 different RAMs. These are the memory mapping for A7 and M4:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 22%\"/>\n<col style=\"width: 21%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Region</p></th>\n<th class=\"head\"><p>Cortex-A7</p></th>\n<th class=\"head\"><p>Cortex-M4 (System Bus)</p></th>\n<th class=\"head\"><p>Cortex-M4 (Code Bus)</p></th>\n<th class=\"head\"><p>Size</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>DDR</p></td>\n<td><p>0x80000000-0xFFFFFFFF</p></td>\n<td><p>0x80000000-0xDFFFFFFF</p></td>\n<td><p>0x10000000-0x1FFEFFFF</p></td>\n<td><p>2048MB (less for M4)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>OCRAM</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>0x20200000-0x2021FFFF</p></td>\n<td><p>0x00900000-0x0091FFFF</p></td>\n<td><p>128KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>TCMU</p></td>\n<td><p>0x00800000-0x00807FFF</p></td>\n<td><p>0x20000000-0x20007FFF</p></td>\n<td></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>TCML</p></td>\n<td><p>0x007F8000-0x007FFFFF</p></td>\n<td></td>\n<td><p>0x1FFF8000-0x1FFFFFFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>OCRAM_S</p></td>\n<td><p>0x00180000-0x00187FFF</p></td>\n<td><p>0x20180000-0x20187FFF</p></td>\n<td><p>0x00000000-0x00007FFF</p></td>\n<td><p>32KB</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>QSPI Flash</p></td>\n<td></td>\n<td></td>\n<td><p>0x08000000-0x0BFFFFFF</p></td>\n<td><p>64MB</p></td>\n</tr>\n</tbody>\n</table>\n<p>For more information about memory mapping see the\n<a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMX7DRM\">i.MX 7 Dual Reference Manual</a>  (section 2.1.2 and 2.1.3), and the\n<a class=\"reference external\" href=\"https://developer.toradex.com/knowledge-base/freertos-on-the-cortex-m4-of-a-colibri-imx7#Memory_areas\">Toradex Wiki</a>.</p>\n<p>At compilation time you have to choose which RAM will be used. This\nconfiguration is done in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_meerkat96/96b_meerkat96.dts</span></code>\nwith “zephyr,flash” (when CONFIG_XIP=y) and “zephyr,sram” properties.\nThe available configurations are:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>\"zephyr,flash\"\n- &amp;ddr_code\n- &amp;tcml_code\n- &amp;ocram_code\n- &amp;ocram_s_code\n- &amp;ocram_pxp_code\n- &amp;ocram_epdc_code\n\n\"zephyr,sram\"\n- &amp;ddr_sys\n- &amp;tcmu_sys\n- &amp;ocram_sys\n- &amp;ocram_s_sys\n- &amp;ocram_pxp_sys\n- &amp;ocram_epdc_sys\n</pre></div>\n</div>\n<p>Below you will find the instructions to load and run Zephyr on M4 from\nA7 using u-boot.</p>\n<p>Copy the compiled zephyr.bin to the first FAT partition of the SD card and\nplug into the board. Power it up and stop the u-boot execution.\nSet the u-boot environment variables and run the zephyr.bin from the\nappropriated memory configured in the Zephyr compilation:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">setenv bootm4 'fatload mmc 0:1 $m4addr $m4fw &amp;&amp; dcache flush &amp;&amp; bootaux $m4addr'</span>\n<span class=\"gp\"># </span>TCML\n<span class=\"go\">setenv m4tcml 'setenv m4fw zephyr.bin; setenv m4addr 0x007F8000'</span>\n<span class=\"go\">setenv bootm4tcml 'run m4tcml &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcml</span>\n<span class=\"gp\"># </span>TCMU\n<span class=\"go\">setenv m4tcmu 'setenv m4fw zephyr.bin; setenv m4addr 0x00800000'</span>\n<span class=\"go\">setenv bootm4tcmu 'run m4tcmu &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4tcmu</span>\n<span class=\"gp\"># </span>OCRAM\n<span class=\"go\">setenv m4ocram 'setenv m4fw zephyr.bin; setenv m4addr 0x00900000'</span>\n<span class=\"go\">setenv bootm4ocram 'run m4ocram &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocram</span>\n<span class=\"gp\"># </span>OCRAM_S\n<span class=\"go\">setenv m4ocrams 'setenv m4fw zephyr.bin; setenv m4addr 0x00180000'</span>\n<span class=\"go\">setenv bootm4ocrams 'run m4ocrams &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ocrams</span>\n<span class=\"gp\"># </span>DDR\n<span class=\"go\">setenv m4ddr 'setenv m4fw zephyr.bin; setenv m4addr 0x80000000'</span>\n<span class=\"go\">setenv bootm4ddr 'run m4ddr &amp;&amp; run bootm4'</span>\n<span class=\"go\">run bootm4ddr</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards Meerkat96 board can be debugged by connecting an external JLink\nJTAG debugger to the J4 debug connector. Then download and install\n<a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack\">J-Link Tools</a> and <a class=\"reference external\" href=\"https://wiki.segger.com/images/8/86/NXP_iMX7D_Connect_CortexM4.JLinkScript\">NXP iMX7D Connect CortexM4.JLinkScript</a>.</p>\n<p>To run Zephyr Binary using J-Link create the following script in order to\nget the Program Counter and Stack Pointer from zephyr.bin.</p>\n<p>get-pc-sp.sh:\n.. code-block:: console</p>\n<blockquote>\n<div><p>#!/bin/sh</p>\n<p>firmware=$1</p>\n<p>pc=$(od -An -N 8 -t x4 $firmware | awk ‘{print $2;}’)\nsp=$(od -An -N 8 -t x4 $firmware | awk ‘{print $1;}’)</p>\n<p>echo pc=$pc\necho sp=$sp</p>\n</div></blockquote>\n<p>Get the SP and PC from firmware binary: <code class=\"docutils literal notranslate\"><span class=\"pre\">./get-pc-sp.sh</span> <span class=\"pre\">zephyr.bin</span></code>\n.. code-block:: console</p>\n<blockquote>\n<div><p>pc=00900f01\nsp=00905020</p>\n</div></blockquote>\n<p>Plug in the J-Link into the board and PC and run the J-Link command line tool:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">/usr/bin/JLinkExe -device Cortex-M4 -if JTAG -speed 4000 -autoconnect 1 -jtagconf -1,-1 -jlinkscriptfile iMX7D_Connect_CortexM4.JLinkScript</span>\n</pre></div>\n</div>\n<p>The following steps are necessary to run the zephyr.bin:</p>\n<ol class=\"arabic simple\">\n<li><p>Put the M4 core in reset</p></li>\n<li><p>Load the binary in the appropriate addr (TMCL, TCMU, OCRAM, OCRAM_S or DDR)</p></li>\n<li><p>Set PC (Program Counter)</p></li>\n<li><p>Set SP (Stack Pointer)</p></li>\n<li><p>Get the M4 core out of reset</p></li>\n</ol>\n<p>Issue the following commands inside J-Link commander:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">w4 0x3039000C 0xAC</span>\n<span class=\"go\">loadfile zephyr.bin,0x00900000</span>\n<span class=\"go\">w4 0x00180000 00900f01</span>\n<span class=\"go\">w4 0x00180004 00905020</span>\n<span class=\"go\">w4 0x3039000C 0xAA</span>\n</pre></div>\n</div>\n<p>With these mechanisms, applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">96b_meerkat96</span></code> board\nconfiguration can be built and debugged in the usual way (see\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/application-note/AN5317.pdf\">Loading Code on Cortex-M4 from Linux for the i.MX 6SoloX and i.MX 7Dual/7Solo Application Processors</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://wiki.segger.com/IMX7D\">J-Link iMX7D Instructions</a></p></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 6, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_F"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 3, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efr32_radio_brd4255a", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram_l", "size": 65536}, {"label": "sram0", "size": 196608}], "main_ram_size": 196608, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 6, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "can": {"count": 1, "instances": [{"label": "CAN_0"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 2, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}]}, "dac": {"count": 2, "instances": [{"label": "DAC_0"}, {"label": "DAC_1"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "hexiwear_k64", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Hexiwear</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"hexiwear\">\n<span id=\"hexiwear-k64\"></span><h1>Hexiwear<a class=\"headerlink\" href=\"#hexiwear\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Hexiwear is powered by a Kinetis K64 microcontroller based on the ARM Cortex-M4\ncore. Another Kinetis wireless MCU, the KW40Z, provides Bluetooth Low Energy\nconnectivity. Hexiwear also integrates a wide variety of sensors, as well as a\nuser interface consisting of a 1.1” 96px x 96px full color OLED display and six\ncapacitive buttons with haptic feedback.</p>\n<ul class=\"simple\">\n<li><p>Eye-catching Smart Watch form factor with powerful, low power Kinetis K6x MCU\nand 6 on-board sensors.</p></li>\n<li><p>Designed for wearable applications with the onboard rechargeable battery,\nOLED screen and onboard sensors such as optical heart rate, accelerometer,\nmagnetometer and gyroscope.</p></li>\n<li><p>Designed for IoT end node applications with the onboard sensor’s such as\ntemperature, pressure, humidity and ambient light.</p></li>\n<li><p>Flexibility to let you add the sensors of your choice nearly 200 additional\nsensors through click boards.</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/hexiwear_k64.jpg\"><img alt=\"Hexiwear\" class=\"align-center\" src=\"../../../../_images/hexiwear_k64.jpg\" style=\"width: 442px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Main MCU: NXP Kinetis K64x (ARM Cortex-M4, 120 MHz, 1M Flash, 256K SRAM)</p></li>\n<li><p>Wireless MCU: NXP Kinetis KW4x (ARM Cortex-M0+, Bluetooth Low Energy &amp;\n802.15.4 radio)</p></li>\n<li><p>6-axis combo Accelerometer and Magnetometer NXP FXOS8700</p></li>\n<li><p>3-Axis Gyroscope: NXP FXAS21002</p></li>\n<li><p>Absolute Pressure sensor NXP MPL3115</p></li>\n<li><p>Li-Ion/Li-Po Battery Charger NXP MC34671</p></li>\n<li><p>Optical heart rate sensor Maxim MAX30101</p></li>\n<li><p>Ambient Light sensor, Humidity and Temperature sensor</p></li>\n<li><p>1.1” full color OLED display</p></li>\n<li><p>Haptic feedback engine</p></li>\n<li><p>190 mAh 2C Li-Po battery</p></li>\n<li><p>Capacitive touch interface</p></li>\n<li><p>RGB LED</p></li>\n</ul>\n<p>For more information about the K64F SoC and Hexiwear board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/k-seriesperformancem4/k6x-ethernet/kinetis-k64-120-mhz-256kb-sram-microcontrollers-mcus-based-on-arm-cortex-m4-core:K64_120\">K64F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/K64P144M120SF5.pdf\">K64F Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/K64P144M120SF5RM.pdf\">K64F Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/nxp-designs/hexiwear-complete-iot-development-solution:HEXIWEAR?&amp;tid=vanHEXIWEAR\">Hexiwear Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/fact-sheet/HEXIWEAR-FS.pdf\">Hexiwear Fact Sheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://cdn-docs.mikroe.com/images/c/c0/Sch_Hexiwear_MainBoard_v106c.pdf\">Hexiwear Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The hexiwear_k64 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\nfxos8700 trigger;\nfxas21002 polling;\nfxas21002 trigger;\nmax30101 polling</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/hexiwear_k64/hexiwear_k64_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 14%\"/>\n<col style=\"width: 33%\"/>\n<col style=\"width: 53%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTA29</p></td>\n<td><p>GPIO</p></td>\n<td><p>LDO_EN</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB0</p></td>\n<td><p>I2C0_SCL</p></td>\n<td><p>I2C / MAX30101</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB1</p></td>\n<td><p>I2C0_SDA</p></td>\n<td><p>I2C / MAX30101</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB12</p></td>\n<td><p>GPIO</p></td>\n<td><p>3V3B EN</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB16</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB17</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC8</p></td>\n<td><p>GPIO / PWM</p></td>\n<td><p>Red LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC9</p></td>\n<td><p>GPIO / PWM</p></td>\n<td><p>Green LED</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC10</p></td>\n<td><p>I2C1_SCL</p></td>\n<td><p>I2C / FXOS8700 / FXAS21002</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC11</p></td>\n<td><p>I2C1_SDA</p></td>\n<td><p>I2C / FXOS8700 / FXAS21002</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC14</p></td>\n<td><p>GPIO</p></td>\n<td><p>Battery sense enable</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC18</p></td>\n<td><p>GPIO</p></td>\n<td><p>FXAS21002 INT2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD0</p></td>\n<td><p>GPIO / PWM</p></td>\n<td><p>Blue LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD13</p></td>\n<td><p>GPIO</p></td>\n<td><p>FXOS8700 INT2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTE24</p></td>\n<td><p>UART4_RX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTE25</p></td>\n<td><p>UART4_TX</p></td>\n<td><p>UART BT HCI</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC is configured to use the 12 MHz external oscillator on the board\nwith the on-chip PLL to generate a 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64F SoC has six UARTs. One is configured for the console, another for BT\nHCI, and the remaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nbut because Segger RTT is required for a console on KW40Z, we recommend that\nyou reconfigure the board for the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>OpenSDA is shared between the K64 and the KW40Z via switches, therefore only\none SoC can be flashed, debugged, or have an open console at a time.</p>\n</div>\n<div class=\"section\" id=\"option-1-opensda-jlink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-jlink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_V2_1\">OpenSDA J-Link Generic Firmware for V2.1 Bootloader</a>. Check that switches\nSW1 and SW2 are <strong>on</strong>, and SW3 and SW4 are <strong>off</strong>  to ensure K64F SWD signals\nare connected to the OpenSDA microcontroller.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-daplink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-daplink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to\nprogram the <a class=\"reference external\" href=\"https://github.com/MikroElektronika/HEXIWEAR/blob/master/HW/HEXIWEAR_DockingStation/HEXIWEAR_DockingStation_DAPLINK_FW.bin\">OpenSDA DAPLink Hexiwear Firmware</a>. Check that switches SW1 and\nSW2 are <strong>on</strong>, and SW3 and SW4 are <strong>off</strong>  to ensure K64F SWD signals are\nconnected to the OpenSDA microcontroller.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=pyocd</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=pyocd</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from J-Link to pyOCD:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_k64 samples/hello_world -- -DBOARD_FLASH_RUNNER=pyocd -DBOARD_DEBUG_RUNNER=pyocd</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to CN1.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_k64 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the T4 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! hexiwear_k64</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_k64 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! hexiwear_k64</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"using-bluetooth\">\n<h2>Using Bluetooth<a class=\"headerlink\" href=\"#using-bluetooth\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"configure-the-kw40z-as-a-bluetooth-controller\">\n<h3>Configure the KW40Z as a Bluetooth controller<a class=\"headerlink\" href=\"#configure-the-kw40z-as-a-bluetooth-controller\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The K64 can support Zephyr Bluetooth host applications when you configure the\nKW40Z as a Bluetooth controller.</p>\n<ol class=\"arabic simple\">\n<li><p>Download and install the <a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=KW40Z-CONNECTIVITY-SOFTWARE&amp;appType=license&amp;location=null&amp;fpsp=1&amp;WT_TYPE=Protocol%20Stacks&amp;WT_VENDOR=FREESCALE&amp;WT_FILE_FORMAT=exe&amp;WT_ASSET=Downloads&amp;fileExt=.exe&amp;Parent_nodeId=1432854896956716810497&amp;Parent_pageType=product\">KW40Z Connectivity Software</a>. This package\ncontains Bluetooth controller application for the KW40Z.</p></li>\n<li><p>Flash the file <code class=\"docutils literal notranslate\"><span class=\"pre\">tools/binaries/BLE_HCI_Modem.bin</span></code> to the KW40Z.</p></li>\n</ol>\n<p>Now you can build and run the sample Zephyr Bluetooth host applications on the\nK64. You do not need to repeat this step each time you flash a new Bluetooth\nhost application to the K64.</p>\n</div>\n<div class=\"section\" id=\"peripheral-heart-rate-sensor\">\n<h3>Peripheral Heart Rate Sensor<a class=\"headerlink\" href=\"#peripheral-heart-rate-sensor\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Navigate to the Zephyr <code class=\"docutils literal notranslate\"><span class=\"pre\">samples/bluetooth/peripheral_hr</span></code> sample\napplication, then build and flash it to the Hexiwear K64. Make sure\nthe OpenSDA switches on the docking station are configured for the\nK64.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hexiwear_k64 samples/bluetooth/peripheral_hr</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Reset the KW40Z and the K64 using the push buttons on the docking station.</p>\n<p>Install the Kinetis BLE Toolbox on your smartphone:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://itunes.apple.com/us/app/kinetis-ble-toolbox/id1049036961?mt=8\">Kinetis BLE Toolbox for iOS</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://play.google.com/store/apps/details?id=com.freescale.kinetisbletoolbox\">Kinetis BLE Toolbox for Android</a></p></li>\n</ul>\n<p>Open the app, tap the <strong>Heart Rate</strong> feature, and you should see a <strong>Zephyr\nHeartrate Sensor</strong> device. Tap the <strong>Zephyr Heartrate Sensor</strong> device and you\nwill then see a plot of the heart rate data that updates once per second.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "usb_kw24d512", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP USB-KW24D512</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-usb-kw24d512\">\n<span id=\"usb-kw24d512\"></span><h1>NXP USB-KW24D512<a class=\"headerlink\" href=\"#nxp-usb-kw24d512\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The USB-KW24D512 is an evaluation board in a convenient USB dongle\nform factor based on the NXP MKW24D512 System-in-Package (SiP) device\n(KW2xD wireless MCU series).\nMKW24D512 wireless MCU provides a low-power, compact device with\nintegrated IEEE 802.15.4 radio. The board can be used as a packet sniffer,\nnetwork node, border router or as a development board.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Kinetis KW2xD-2.4 GHz 802.15.4 Wireless Radio Microcontroller\n(50 MHz, 512 KB flash memory, 64 KB RAM, low-power, crystal-less USB)</p></li>\n<li><p>USB Type A Connector</p></li>\n<li><p>Two blue LEDs</p></li>\n<li><p>One user push button</p></li>\n<li><p>One reset button</p></li>\n<li><p>Integrated PCB Folded F-type antenna</p></li>\n<li><p>10-pin (0.05”) JTAG debug port for target MCU</p></li>\n</ul>\n<p>For more information about the KW2xD SiP and USB-KW24D512 board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/wireless/thread/kinetis-kw2xd-2.4-ghz-802.15.4-wireless-radio-microcontroller-mcu-based-on-arm-cortex-m4-core:KW2xD\">KW2xD Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/MKW2xDxxx.pdf\">KW2xD Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/MKW2xDxxxRM.pdf\">KW2xD Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/w-serieswireless-conn.m0-plus-m4/ieee-802.15.4-packet-sniffer-usb-dongle-form-factor:USB-KW24D512\">USB-KW24D512 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/USB-KW2XHWRM.pdf\">USB-KW24D512 Hardware Reference Manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The USB-KW24D512 board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/usb_kw24d512/usb_kw24d512_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW2xD SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 11%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 61%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PTA1</p></td>\n<td><p>UART0_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTA2</p></td>\n<td><p>UART0_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTC4</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTD4</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED (D2)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTD5</p></td>\n<td><p>GPIO</p></td>\n<td><p>Blue LED (D3)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB10</p></td>\n<td><p>SPI1_PCS0</p></td>\n<td><p>internal connected to MCR20A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB11</p></td>\n<td><p>SPI1_SCK</p></td>\n<td><p>internal connected to MCR20A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB16</p></td>\n<td><p>SPI1_SOUT</p></td>\n<td><p>internal connected to MCR20A</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB17</p></td>\n<td><p>SPI1_SIN</p></td>\n<td><p>internal connected to MCR20A</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTB19</p></td>\n<td><p>GPIO</p></td>\n<td><p>internal connected to MCR20A (Reset)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PTB3</p></td>\n<td><p>GPIO</p></td>\n<td><p>internal connected to MCR20A (IRQ_B)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PTC0</p></td>\n<td><p>GPIO</p></td>\n<td><p>internal connected to MCR20A (GPIO5)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>USB-KW24D512 contains 32 MHz oscillator crystal, which is connected to the\nclock pins of the radio transceiver. The MCU is configured to\nuse the 4 MHz external clock from the transceiver with the on-chip PLL\nto generate a 48 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW2xD SoC has three UARTs. One is configured and can be used for the\nconsole, but it uses the same pins as the JTAG interface and is only\naccessible via the JTAG SWD connector.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KW2xD SoC has a USB OTG (USBOTG) controller that supports both\ndevice and host functions. Only USB device function is supported in Zephyr\nat the moment. The USB-KW24D512 board has a USB Type A connector and\ncan only be used in device mode.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a>.</p>\n<div class=\"section\" id=\"jlink-external-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 10-pin connector to J1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The console is available using <a class=\"reference external\" href=\"https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/\">Segger RTT</a>.</p>\n<p>Connect a USB cable from your PC to J5.</p>\n<p>Once you have started a debug session, run telnet:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Trying 127.0.0.1...</span>\n<span class=\"go\">Connected to localhost.</span>\n<span class=\"go\">Escape character is '^]'.</span>\n<span class=\"go\">SEGGER J-Link V6.44 - Real time terminal output</span>\n<span class=\"go\">SEGGER J-Link ARM V10.1, SN=600111924</span>\n<span class=\"go\">Process: JLinkGDBServerCLExe</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b usb_kw24d512 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>The Segger RTT console is only available during a debug session. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">attach</span></code>\nto start one:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b usb_kw24d512 samples/hello_world</span>\n<span class=\"go\">west attach</span>\n</pre></div>\n</div>\n<p>Run telnet as shown earlier, and you should see the following message in the\nterminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! usb_kw24d512</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b usb_kw24d512 samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Run telnet as shown earlier, step through the application in your debugger, and\nyou should see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1 *****</span>\n<span class=\"go\">Hello World! usb_kw24d512</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 131072}], "main_flash_size": 131072, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 2, "instances": [{"label": "UART_1"}, {"label": "UART_2"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 9, "instances": [{"label": "PWM_1"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_14"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_2"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f072_eval", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F072 Evaluation</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f072-evaluation\">\n<span id=\"stm32f072-eval-board\"></span><h1>ST STM32F072 Evaluation<a class=\"headerlink\" href=\"#st-stm32f072-evaluation\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F072-EVAL Discovery kit features an ARM Cortex-M0 based STM32F072VBT6 MCU\nwith a wide range of connectivity support and configurations.\nHere are some highlights of the STM32F072-EVAL board:</p>\n<ul class=\"simple\">\n<li><p>Four 5 V power supply options: power jack, ST-LINK/V2 USB connector, user USB connector, or daughter board</p></li>\n<li><p>Stereo audio jack, which supports a headset with microphone connected to DAC and ADC of STM32F072VBT6.</p></li>\n<li><p>2G Byte (or more) SPI interface MicroSD card</p></li>\n<li><p>I2C compatible serial interface temperature sensor</p></li>\n<li><p>RF E2PROM</p></li>\n<li><p>RS232 and RS485 communication</p></li>\n<li><p>IrDA transceiver</p></li>\n<li><p>IR LED and IR receiver</p></li>\n<li><p>SWD debug support, ST-LINK/V2 embedded</p></li>\n<li><p>240x320 TFT color LCD connected to SPI interface of STM32F072VBT6</p></li>\n<li><p>Joystick with 4-direction control and selector</p></li>\n<li><p>Reset and tamper buttons</p></li>\n<li><p>Four color user LEDs and two LEDs as MCU low power alarm</p></li>\n<li><p>Extension connector for daughter board or wrapping board</p></li>\n<li><p>MCU voltage choice: fixed 3.3 V or adjustable from 1.65 V to 3.6 V</p></li>\n<li><p>USB full-speed connector</p></li>\n<li><p>Touch sensing buttons</p></li>\n<li><p>RTC with backup battery</p></li>\n<li><p>CAN2.0A/B compliant connector</p></li>\n<li><p>Light Dependent Resistor (LDR)</p></li>\n<li><p>Potentiometer</p></li>\n<li><p>Two HDMI connectors with DDC and CEC</p></li>\n<li><p>Smart Card slot</p></li>\n<li><p>Motor control connector</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f072_eval.jpg\"><img alt=\"STM32F072-EVAL\" class=\"align-center\" src=\"../../../../_images/stm32f072_eval.jpg\" style=\"width: 540px; height: 549px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32072b-eval.html\">STM32F072-EVAL website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F072-EVAL Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F072VBT6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M0 CPU</p></li>\n<li><p>48 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>128 KB Flash</p></li>\n<li><p>16 KB SRAM with HW parity</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>one 12-bit ADC with 16 channels</p></li>\n<li><p>one 12-bit D/A converters with 2 channels</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (8)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>USART (4)</p></li>\n<li><p>I2C (2)</p></li>\n<li><p>SPI (2)</p></li>\n<li><p>CAN</p></li>\n<li><p>USB 2.0 OTG FS with on-chip PHY</p></li>\n<li><p>CRC calculation unit</p></li>\n<li><p>DMA Controller</p></li>\n<li><p>HDMI CEC Controller</p></li>\n<li><p>24 capacitive sensing channels for touchkey, linear, and rotary touch sensors</p></li>\n<li><p>Up to 87 fast I/Os: 68 I/Os with 5V tolerant capability and 19 with independent supply</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F072VB can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f072vb.html\">STM32F072VB on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00031936.pdf\">STM32F072 reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f072_eval board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f072_eval/stm32f072_eval_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072-EVAL Discovery kit has 6 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00104135.pdf\">STM32F072-EVAL board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PD5</p></li>\n<li><p>UART_2_RX : PD6</p></li>\n<li><p>TAMPER_PB : PC13</p></li>\n<li><p>JOYSTICK_RIGHT_PB : PE3</p></li>\n<li><p>JOYSTICK_LEFT_PB : PF2</p></li>\n<li><p>JOYSTICK_UP_PB : PF9</p></li>\n<li><p>JOYSTICK_DOWN_PB : PF10</p></li>\n<li><p>JOYSTICK_SEL_PB : PA0</p></li>\n<li><p>LD1 : PD8</p></li>\n<li><p>LD2 : PD9</p></li>\n<li><p>LD3 : PD10</p></li>\n<li><p>LD4 : PD11</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072-EVAL System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default the System clock is driven by the PLL clock at 48MHz,\ndriven by an 8MHz high speed internal clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072-EVAL Discovery kit has up to 4 UARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f072_eval</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F072-EVAL Discovery kit includes an ST-LINK/V2 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f072-eval\">\n<h4>Flashing an application to STM32F072-EVAL<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f072-eval\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f072_eval samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f072_eval samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 2, "instances": [{"label": "PORTA"}, {"label": "PORTB"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 1, "instances": [{"label": "USB0"}]}, "ethernet": {"count": 0, "instances": []}, "name": "arduino_nano_33_iot", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Arduino Nano 33 IOT</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"arduino-nano-33-iot\">\n<span id=\"id1\"></span><h1>Arduino Nano 33 IOT<a class=\"headerlink\" href=\"#arduino-nano-33-iot\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Arduino Nano 33 IOT is a a small form factor development board with USB,\nWifi, Bluetooth, a 6 axis IMU, and secure element.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nano_33_iot.png\"><img alt=\"Arduino Nano 33 IOT\" class=\"align-center\" src=\"../../../../_images/nano_33_iot.png\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAMD21G18A ARM Cortex-M0+ processor at 48 MHz</p></li>\n<li><p>256 KiB flash memory and 32 KiB of RAM</p></li>\n<li><p>One user LED</p></li>\n<li><p>One reset button</p></li>\n<li><p>Native USB port</p></li>\n<li><p>Wifi and Bluetooth via a u-blox NINA-W102</p></li>\n<li><p>ATECC608A secure element</p></li>\n<li><p>LSM6DS3 six axis accelerometer and gyro</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The arduino_nano_33_iot board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>Analog to digital converter</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse counter</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct memory access unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Flash</p></td>\n<td><p>on-chip</p></td>\n<td><p>Can be used with LittleFS to store files</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>I/O ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>HWINFO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Hardware info and serial number</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Pulse Width Modulation</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial Peripheral Interface ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>Serial ports</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/arduino_nano_33_iot/arduino_nano_33_iot_defconfig\">boards/arm/arduino_nano_33_iot/arduino_nano_33_iot_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"https://store.arduino.cc/arduino-nano-33-iot\">Arduino store</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> has detailed information about board\nconnections. Download the <a class=\"reference external\" href=\"https://content.arduino.cc/assets/NANO33IoTV2.0_sch.pdf\">schematic</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU is configured to use the 8 MHz internal oscillator\nwith the on-chip PLL generating the 48 MHz system clock.  The internal\nAPB and GCLK unit are set up in the same way as the upstream Arduino\nlibraries.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based USARTs. SERCOM5 is available on pins 1 and 2.</p>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h3>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 3 TCC based PWM units with up to 4 outputs each and a period\nof 24 bits or 16 bits.  If <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_PWM_SAM0_TCC</span></code> is enabled then LED0 is\ndriven by TCC2 instead of by GPIO.</p>\n</div>\n<div class=\"section\" id=\"spi-port\">\n<h3>SPI Port<a class=\"headerlink\" href=\"#spi-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has 6 SERCOM based SPIs.  SERCOM1 is available on pins 1, 14,\nand 15.</p>\n</div>\n<div class=\"section\" id=\"usb-device-port\">\n<h3>USB Device Port<a class=\"headerlink\" href=\"#usb-device-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAMD21 MCU has a USB device port that can be used to communicate\nwith a host PC.  See the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/usb.html#usb-samples\"><span class=\"std std-ref\">USB device support samples</span></a> sample applications for\nmore, such as the <a class=\"reference internal\" href=\"../../../../samples/subsys/usb/cdc_acm/README.html#usb-cdc-acm\"><span class=\"std std-ref\">USB CDC ACM Sample Application</span></a> sample which sets up a virtual\nserial port that echos characters back to the host PC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nano 33 IOT ships the BOSSA compatible UF2 bootloader.  The\nbootloader can be entered by quickly tapping the reset button twice.</p>\n<p>Additionally, if <code class=\"code docutils literal notranslate\"><span class=\"pre\">CONFIG_USB_CDC_ACM</span></code> is enabled then the bootloader\nwill be entered automatically when you run <code class=\"code docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">flash</span></code>.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<ol class=\"arabic\">\n<li><p>Build the Zephyr kernel and the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> sample application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b arduino_nano_33_iot samples/hello_world</span>\n</pre></div>\n</div>\n</li>\n<li><p>Connect the Nano 33 IOT to your host computer using USB</p></li>\n<li><p>Connect a 3.3 V USB to serial adapter to the board and to the\nhost.  See the <a class=\"reference internal\" href=\"#serial-port\">Serial Port</a> section above for the board’s pin\nconnections.</p></li>\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization\nstring. Connection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Tap the reset button twice quickly to enter bootloader mode</p></li>\n<li><p>Flash the image:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b arduino_nano_33_iot samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see “Hello World! arduino_nano_33_iot” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://store.arduino.cc/arduino-nano-33-iot\">https://store.arduino.cc/arduino-nano-33-iot</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://content.arduino.cc/assets/NANO33IoTV2.0_sch.pdf\">https://content.arduino.cc/assets/NANO33IoTV2.0_sch.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 5, "instances": [{"label": "PORTA"}, {"label": "PORTB"}, {"label": "PORTC"}, {"label": "PORTD"}, {"label": "PORTE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 2, "instances": [{"label": "USART_0"}, {"label": "USART_1"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "GMAC"}]}, "name": "sam4e_xpro", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>SAM4E Xplained Pro</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sam4e-xplained-pro\">\n<span id=\"sam4e-xpro\"></span><h1>SAM4E Xplained Pro<a class=\"headerlink\" href=\"#sam4e-xplained-pro\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The SAM4E Xplained Pro evaluation kit is a development platform to evaluate the\nAtmel SAM4E series microcontrollers.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/sam4e_xpro.jpg\"><img alt=\"SAM4E Xplained Pro\" class=\"align-center\" src=\"../../../../_images/sam4e_xpro.jpg\" style=\"width: 500px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>ATSAM4E16E ARM Cortex-M4F Processor</p></li>\n<li><p>12 MHz crystal oscillator</p></li>\n<li><p>internal 32.768 kHz crystal oscillator</p></li>\n<li><p>2 x IS61WV5128BLL 4Mb SRAM</p></li>\n<li><p>MT29F2G08ABAEAWP 2Gb NAND</p></li>\n<li><p>SD card connector</p></li>\n<li><p>CAN-bus (TLE7250GVIOXUMA1 CAN Transceiver)</p></li>\n<li><p>Ethernet port (KSZ8081MNXIA phy)</p></li>\n<li><p>Micro-AB USB device</p></li>\n<li><p>Micro-AB USB debug interface supporting CMSIS-DAP, Virtual COM Port and Data\nGateway Interface (DGI)</p></li>\n<li><p>One reset and one user pushbutton</p></li>\n<li><p>1 yellow user LEDs</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The sam4e_xpro board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not currently supported by Zephyr.</p>\n<p>The default configuration can be found in the Kconfig\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/sam4e_xpro/sam4e_xpro_defconfig\">boards/arm/sam4e_xpro/sam4e_xpro_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42216-SAM4E-Xplained-Pro_User-Guide.pdf\">SAM4E Xplained Pro User Guide</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> has detailed information about board\nconnections. Download the <a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4E-Xplained-Pro_Design-Documentation.zip\">SAM4E Xplained Pro documentation</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SAM4E MCU is configured to use the 12 MHz internal oscillator on the board\nwith the on-chip PLL to generate an 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ATSAM4E16E MCU has 2 UARTs and 2 USARTs. One of the UARTs (UART0) is\nconfigured for the console and is available as a Virtual COM Port by EDBG USB\nchip.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Flashing the Zephyr project onto SAM4E MCU requires the <a class=\"reference external\" href=\"http://openocd.org/\">OpenOCD tool</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a>.\nBy default a factory new SAM4E chip will boot SAM-BA boot loader located in\nthe ROM, not the flashed image. This is determined by the value of GPNVM1\n(General-Purpose NVM bit 1). The flash procedure will ensure that GPNVM1 is\nset to 1 changing the default behavior to boot from Flash.</p>\n<p>If your chip has a security bit GPNVM0 set you will be unable to program flash\nmemory or connect to it via a debug interface. The only way to clear GPNVM0\nis to perform a chip erase procedure that will erase all GPNVM bits and the full\ncontents of the SAM4E flash memory:</p>\n<ul class=\"simple\">\n<li><p>With the board power off, set a jumper on the J304 header.</p></li>\n<li><p>Turn the board power on. The jumper can be removed soon after the power is on\n(flash erasing procedure is started when the erase line is asserted for at\nleast 230ms)</p></li>\n</ul>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>For flash the board Zephyr provides two paths.  One uses the default OpenOCD\ntool and the second one uses <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#atmel-sam-ba-bootloader\"><span class=\"std std-ref\">SAM Boot Assistant (SAM-BA)</span></a>.</p>\n<div class=\"section\" id=\"using-openocd\">\n<h4>Using OpenOCD<a class=\"headerlink\" href=\"#using-openocd\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Connect the SAM4E Xplained Pro board to your host computer using the USB\ndebug port. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4e_xpro samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"using-sam-ba-bootloader\">\n<h4>Using SAM-BA bootloader<a class=\"headerlink\" href=\"#using-sam-ba-bootloader\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Close the <code class=\"docutils literal notranslate\"><span class=\"pre\">ERASE</span></code> jumper on the SAM4E Xplained Pro board.  Power on the\nboard for 10s.</p></li>\n<li><p>Open the <code class=\"docutils literal notranslate\"><span class=\"pre\">ERASE</span></code> jumper.</p></li>\n<li><p>Connect the SAM4E Xplained Pro board to your host computer using the SoC\nUSB port. Then build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4e_xpro samples/hello_world</span>\n</pre></div>\n</div>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>west flash -r bossac\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"visualizing-the-message\">\n<h4>Visualizing the message<a class=\"headerlink\" href=\"#visualizing-the-message\" title=\"Permalink to this headline\">¶</a></h4>\n<ol class=\"arabic\">\n<li><p>Run your favorite terminal program to listen for output. Under Linux the\nterminal should be <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>. For example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0 -o\n</pre></div>\n</div>\n<p>The -o option tells minicom not to send the modem initialization string.\nConnection should be configured as follows:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</li>\n<li><p>Press reset button</p>\n<p>You should see “Hello World! arm” in your terminal.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b sam4e_xpro samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42216-SAM4E-Xplained-Pro_User-Guide.pdf\">http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42216-SAM4E-Xplained-Pro_User-Guide.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4E-Xplained-Pro_Design-Documentation.zip\">http://ww1.microchip.com/downloads/en/DeviceDoc/SAM4E-Xplained-Pro_Design-Documentation.zip</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://openocd.org/\">http://openocd.org/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH0", "size": 134217728}], "main_flash_size": 134217728, "memory": [], "main_ram_size": 0, "gpio": {"count": 1, "instances": [{"label": "gpio_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 3, "instances": [{"label": "spi_0"}, {"label": "spi_1"}, {"label": "spi_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 2, "instances": [{"label": "uart_0"}, {"label": "uart_1"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 3, "instances": [{"label": "pwm_0"}, {"label": "pwm_1"}, {"label": "pwm_2"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "hifive1_revb", "arch": "riscv", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">RISCV Boards</a> »</li>\n<li>SiFive HiFive1 Rev B</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"sifive-hifive1-rev-b\">\n<span id=\"hifive1-revb\"></span><h1>SiFive HiFive1 Rev B<a class=\"headerlink\" href=\"#sifive-hifive1-rev-b\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The HiFive1 Rev B is an Arduino-compatible development board with\na SiFive FE310-G002 RISC-V SoC.</p>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">hifive1_revb</span></code> board configuration can be built as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a>) using the corresponding board name:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hifive1_revb</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The HiFive 1 Rev B uses Segger J-Link OB for flashing and debugging. To flash and\ndebug the board, you’ll need to install the\n<a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink#J-LinkSoftwareAndDocumentationPack\">Segger J-Link Software and Documentation Pack</a>\nand choose version V6.46a or later (Downloads for Windows, Linux, and macOS are\navailable).</p>\n<p>With the Segger J-Link Software installed, you can flash the application as usual\n(see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and <a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the detailed overview about <a class=\"reference internal\" href=\"../../../../application/index.html#application-debugging\"><span class=\"std std-ref\">Application Debugging</span></a>.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 655360}], "main_ram_size": 655360, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "sensortile_box", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST SensorTile.box</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-sensortile-box\">\n<span id=\"sensortile-box\"></span><h1>ST SensorTile.box<a class=\"headerlink\" href=\"#st-sensortile-box\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STEVAL-MKSBOX1V1 (SensorTile.box) is a ready-to-use box kit for wireless\nIoT and wearable sensor platforms to help you use and develop apps based on\nremote motion and environmental sensor data.\nThe SensorTile.box board fits into a small plastic box with a long-life rechargeable\nbattery, and communicates with a standard smartphone through its Bluetooth interface,\nproviding data coming from the sensors.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/sensortile_box.jpg\"><img alt=\"SensorTile.box\" class=\"align-center\" src=\"../../../../_images/sensortile_box.jpg\" style=\"width: 784px; height: 643px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/steval-mksbox1v1.html\">SensorTile.box website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>SensorTile.box provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>Ultra low-power STM32L4R9ZI System on Chip</p>\n<ul>\n<li><p>LQFP144 package</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, adaptive\nreal-time accelerator (ART Accelerator) allowing 0-wait-state\nexecution from Flash memory, frequency up to 120 MHz, MPU, 150\nDMIPS/1.25 DMIPS/MHz (Dhrystone 2.1), and DSP instructions</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>16 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Communication</p>\n<ul>\n<li><p>Bluetooth Smart connectivity v4.2 (SPBTLE-1S)</p></li>\n<li><p>1 x USB OTG FS (SoC) with micro-B connector\n(USB device role only)</p></li>\n</ul>\n</li>\n<li><p>Internal Busses</p>\n<ul>\n<li><p>3 x SPI bus</p></li>\n<li><p>3 x I2C bus</p></li>\n</ul>\n</li>\n<li><p>micro-SD connector</p></li>\n<li><p>On board sensors:</p>\n<ul>\n<li><p>Digital temperature sensor (STTS751)</p></li>\n<li><p>6-axis inertial measurement unit (LSM6DSOX)</p></li>\n<li><p>3-axis accelerometers (LIS2DW12 and LIS3DHH)</p></li>\n<li><p>3-axis magnetometer (LIS2MDL)</p></li>\n<li><p>Altimeter / pressure sensor (LPS22HH)</p></li>\n<li><p>Microphone / audio sensor (MP23ABS1)</p></li>\n<li><p>Humidity sensor (HTS221)</p></li>\n</ul>\n</li>\n<li><p>HCP602535ZC LI-ion rechargeable battery (3.7V 500mAh)</p></li>\n<li><p>FTSH107 connector for SWD debugging and UART Tx/Rx</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SensorTile.box provides motion, environmental, and audio\nsensor data through either the BLE or USB protocols to a host application running\non a smartphone/PC to implement applications such as:</p>\n<ul class=\"simple\">\n<li><p>Pedometer optimized for belt positioning</p></li>\n<li><p>Baby crying detection with Cloud AI learning</p></li>\n<li><p>Barometer / environmental monitoring</p></li>\n<li><p>Vehicle / goods tracking</p></li>\n<li><p>Vibration monitoring</p></li>\n<li><p>Compass and inclinometer</p></li>\n<li><p>Sensor data logger</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>Blue LED  = PB15</p></li>\n<li><p>Green LED = PF2</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = BOOT\n(used to let the SensorTile.box enter DFU mode. See <a class=\"reference internal\" href=\"#programming-and-debugging\">Programming and Debugging</a>\nsection)</p></li>\n<li><p>BUTTON = PWR\n(used to Power on/off the board when battery is connected)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>SensorTile.box System Clock could be driven by internal or external\noscillator, as well as main PLL clock. By default, the System clock is\ndriven by the PLL clock at 80MHz, driven by the 16MHz external oscillator.\nThe system clock can be boosted to 120MHz.\nThe internal AHB/APB1/APB2 AMBA busses are all clocked at 80MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are two possible options for Zephyr console output:</p>\n<ul class=\"simple\">\n<li><p>using USART1 which is available on FTSH107 connector. In this case a JTAG adapter\ncan be used to connect SensorTile.box to STLINK-V2 and have both SWD and console lines\navailable on PC.</p></li>\n<li><p>using the USB connector, which may be used to make the console available on PC as\nUSB CDC class.</p></li>\n</ul>\n<p>Console default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"usb-interface\">\n<h3>USB interface<a class=\"headerlink\" href=\"#usb-interface\" title=\"Permalink to this headline\">¶</a></h3>\n<p>SensorTile.box can be connected as a USB device to a PC host through its micro-B connector.\nThe final application may use it to declare SensorTile.box device as belonging to a\ncertain standard or vendor class, e.g. a CDC, a mass storage or a composite device with both\nfunctions.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 main entry points for flashing STM32FL4Rx SoCs, one using the ROM\nbootloader, and another by using the SWD debug port (which requires additional\nhardware) on FTSH107 connector.\nFlash using the ROM bootloader by powering on the board\nwhile keeping the BOOT0 button pressed.\nThe ROM bootloader supports flashing via USB (DFU), UART, I2C and SPI.\nYou can read more about how to enable and use the ROM bootloader by checking\nthe application note <a class=\"reference external\" href=\"http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf\">AN2606</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a> (STM32L4Rx section).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"installing-dfu-util\">\n<h4>Installing dfu-util<a class=\"headerlink\" href=\"#installing-dfu-util\" title=\"Permalink to this headline\">¶</a></h4>\n<p>It is recommended to use at least v0.8 of dfu-util. The package available in\nDebian and Ubuntu can be quite old, so you might have to build dfu-util from source.\nInformation about how to get the source code and how to build it can be found\nat the <a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/\">DFU-UTIL website</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">3</a></p>\n</div>\n<div class=\"section\" id=\"flashing-an-application-to-sensortile-box\">\n<h4>Flashing an Application to SensorTile.box<a class=\"headerlink\" href=\"#flashing-an-application-to-sensortile-box\" title=\"Permalink to this headline\">¶</a></h4>\n<p>While pressing the BOOT0 button, connect the\nmicro-USB cable to the USB OTG SensorTile.box\nport and to your computer. The board should be\nforced to enter DFU mode.</p>\n<p>Confirm that the board is in DFU mode:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo dfu-util -l\n<span class=\"go\">dfu-util 0.9</span>\n\n<span class=\"go\">Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.</span>\n<span class=\"go\">Copyright 2010-2019 Tormod Volden and Stefan Schmidt</span>\n<span class=\"go\">This program is Free Software and has ABSOLUTELY NO WARRANTY</span>\n<span class=\"go\">Please report bugs to http://sourceforge.net/p/dfu-util/tickets/</span>\n\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=74, cfg=1, intf=0, path=\"2-2\", alt=2, name=\"@OTP Memory /0x1FFF7000/01*0001Ke\", serial=\"204A325D574D\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=74, cfg=1, intf=0, path=\"2-2\", alt=1, name=\"@Option Bytes  /0x1FF00000/01*040 e/0x1FF01000/01*040 e\", serial=\"204A325D574D\"</span>\n<span class=\"go\">Found DFU: [0483:df11] ver=2200, devnum=74, cfg=1, intf=0, path=\"2-2\", alt=0, name=\"@Internal Flash  /0x08000000/512*0004Kg\", serial=\"204A325D574D\"</span>\n</pre></div>\n</div>\n<p>You should see following confirmation on your Linux host:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>dmesg\n<span class=\"go\">usb 2-2: new full-speed USB device number 74 using xhci_hcd</span>\n<span class=\"go\">usb 2-2: New USB device found, idVendor=0483, idProduct=df11</span>\n<span class=\"go\">usb 2-2: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span>\n<span class=\"go\">usb 2-2: Product: STM32  BOOTLOADER</span>\n<span class=\"go\">usb 2-2: Manufacturer: STMicroelectronics</span>\n<span class=\"go\">usb 2-2: SerialNumber: 204A325D574D</span>\n</pre></div>\n</div>\n<p>You can build and flash the provided sample application\n(<a class=\"reference internal\" href=\"../../../../samples/boards/sensortile_box/README.html#sensortile-box-sensors\"><span class=\"std std-ref\">ST SensorTile.box</span></a>) that reads sensors data and outputs\nvalues on the console.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/steval-mksbox1v1.html\">https://www.st.com/en/evaluation-tools/steval-mksbox1v1.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf\">http://www.st.com/content/ccc/resource/technical/document/application_note/b9/9b/16/3a/12/1e/40/0c/CD00167594.pdf/files/CD00167594.pdf/jcr:content/translations/en.CD00167594.pdf</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://dfu-util.sourceforge.net/\">http://dfu-util.sourceforge.net/</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "actinius_icarus", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Actinius Icarus</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"actinius-icarus\">\n<span id=\"id1\"></span><h1>Actinius Icarus<a class=\"headerlink\" href=\"#actinius-icarus\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"figure align-center\" id=\"id2\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/Icarus_front.png\"><img alt=\"Icarus IoT Dev Board\" src=\"../../../../_images/Icarus_front.png\" style=\"width: 450px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Icarus IoT Dev Board (nRF9160 Feather)</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>The Icarus is a cost-effective cellular IoT board in Adafruit’s Feather/FeatherWing\nform factor. It is built around Nordic Semi’s nRF9160 modem and combines\nLTE-M, NB-IoT, GPS, accelerometer, USB, LiPo charger as well as\nan eSIM and a nano SIM connector.</p>\n<p>The main uController is the Nordic Semiconductor nRF9160, with\nARM Cortex-M33F CPU, ARMv8-M Security Extension and the\nfollowing devices (provided directly by Nordic):</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter with EasyDMA\">UARTE</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n<li><p><abbr title=\"Implementation Defined Attribution Unit\">IDAU</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id3\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/Icarus_pinouts.png\"><img alt=\"Icarus IoT Dev Board w/ Pinouts\" src=\"../../../../_images/Icarus_pinouts.png\" style=\"width: 450px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Icarus IoT Dev Board w/ Pinouts</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/Icarus_internal_pinouts.png\"><img alt=\"Icarus IoT Dev Board\" src=\"../../../../_images/Icarus_internal_pinouts.png\" style=\"width: 200px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">Internal Pinouts</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The detailed information about the on-board hardware can be found at the <a class=\"reference external\" href=\"https://www.actinius.com/icarus\">Icarus Product Website</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">2</a>.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The actinius_icarus board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>system protection</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UARTE</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ACCEL</p></td>\n<td><p>st</p></td>\n<td><p>lis2dh</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"security-components\">\n<h3>Security components<a class=\"headerlink\" href=\"#security-components\" title=\"Permalink to this headline\">¶</a></h3>\n<ul class=\"simple\">\n<li><p>Implementation Defined Attribution Unit (<a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">IDAU</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">1</a>).  The IDAU is implemented\nwith the System Protection Unit and is used to define secure and non-secure\nmemory maps.  By default, all of the memory space  (Flash, SRAM, and\nperipheral address space) is defined to be secure accessible only.</p></li>\n<li><p>Secure boot.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"building-secure-non-secure-zephyr-applications\">\n<h3>Building Secure/Non-Secure Zephyr applications<a class=\"headerlink\" href=\"#building-secure-non-secure-zephyr-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The process requires the following steps:</p>\n<ol class=\"arabic simple\">\n<li><p>Build the Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=actinius_icarus</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_TRUSTED_EXECUTION_SECURE=y</span></code> in the application project configuration file.</p></li>\n<li><p>Build the Non-Secure Zephyr application using <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD=actinius_icarus_ns</span></code>.</p></li>\n<li><p>Merge the two binaries together.</p></li>\n</ol>\n<p>If you are using Segger Embedded Studio v4.18 or later, the two binaries are built, merged, and\nburned automatically, unless you have disabled the feature.</p>\n<p>When building a Secure/Non-Secure application, the Secure application will\nhave to set the IDAU (SPU) configuration to allow Non-Secure access to all\nCPU resources utilized by the Non-Secure application firmware. SPU\nconfiguration shall take place before jumping to the Non-Secure application.</p>\n<p>More information can be found in the <a class=\"reference external\" href=\"https://www.actinius.com/get-started\">Icarus “Get Started” Guide</a> <a class=\"footnote-reference brackets\" href=\"#id9\" id=\"id10\">3</a> or the\n<a class=\"reference external\" href=\"https://docs.actinius.com\">Actinius Documentation Portal</a> <a class=\"footnote-reference brackets\" href=\"#id11\" id=\"id12\">4</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau\">https://developer.arm.com/docs/100690/latest/attribution-units-sau-and-idau</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.actinius.com/icarus\">https://www.actinius.com/icarus</a></p>\n</dd>\n<dt class=\"label\" id=\"id9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id10\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.actinius.com/get-started\">https://www.actinius.com/get-started</a></p>\n</dd>\n<dt class=\"label\" id=\"id11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.actinius.com\">https://docs.actinius.com</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 10, "instances": [{"label": "GPIO"}, {"label": "GPIO_A"}, {"label": "GPIO_B"}, {"label": "GPIO_C"}, {"label": "GPIO_D"}, {"label": "GPIO_E"}, {"label": "GPIO_F"}, {"label": "GPIO_G"}, {"label": "GPIO_H"}, {"label": "GPIO_I"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 6, "instances": [{"label": "USART_0"}, {"label": "USART_1"}, {"label": "USART_2"}, {"label": "USART_3"}, {"label": "USART_4"}, {"label": "USART_5"}]}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "efm32gg_slwstk6121a", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>WGM160P Starter Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"wgm160p-starter-kit\">\n<span id=\"efm32gg-slwstk6121a\"></span><h1>WGM160P Starter Kit<a class=\"headerlink\" href=\"#wgm160p-starter-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The WGM160P Starter Kit SLWSTK6121A comes with the BRD4321A radio board.\nThis radio boards contains a WGM160P module, which combines the WF200 Wi-Fi\ntransceiver with an EFM32GG11 microcontroller.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/wgm160p-starter-kit.jpg\"><img alt=\"SLWSTK6121A\" src=\"../../../../_images/wgm160p-starter-kit.jpg\" style=\"width: 300px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">SLWSTK6121A (image courtesy of Silicon Labs)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>Advanced Energy Monitoring provides real-time information about the energy\nconsumption of an application or prototype design.</p></li>\n<li><p>Ultra low power 128x128 pixel color Memory-LCD</p></li>\n<li><p>2 user buttons and 2 LEDs</p></li>\n<li><p>Si7021 Humidity and Temperature Sensor</p></li>\n<li><p>On-board Segger J-Link USB and Ethernet debugger</p></li>\n<li><p>10/100Base-TX ethernet PHY and RJ-45 jack (on included expansion board)</p></li>\n<li><p>MicroSD card slot</p></li>\n<li><p>USB Micro-AB connector</p></li>\n</ul>\n<p>For more information about the WGM160P and SLWSTK6121A board:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/wireless/wi-fi/wfm160-series-1-modules\">WGM160P Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/wgm160p-datasheet.pdf\">WGM160P Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/development-tools/wireless/wi-fi/wgm160p-wifi-module-starter-kit\">SLWSTK6121A Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/user-guides/ug351-brd4321a-user-guide.pdf\">SLWSTK6121A User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/efm32gg11-datasheet.pdf\">EFM32GG11 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/reference-manuals/efm32gg11-rm.pdf\">EFM32GG11 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.silabs.com/documents/public/data-sheets/wf200-datasheet.pdf\">WF200 Datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The efm32gg_slwstk6121a board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>memory protection unit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtcc</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c port-polling</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/efm32gg_slwstk6121a/efm32gg_slwstk6121a_defconfig</span></code></p>\n</div></blockquote>\n<p>Other hardware features, including the WF200 WiFi transceiver, are\ncurrently not supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The WGM160P’s EFM32GG11 SoC has six GPIO controllers (PORTA to PORTF), all of which are\ncurrently enabled for the SLWSTK6121A board.</p>\n<p>In the following table, the column <strong>Name</strong> contains pin names. For example, PE1\nmeans pin number 1 on PORTE, as used in the board’s datasheets and manuals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 12%\"/>\n<col style=\"width: 23%\"/>\n<col style=\"width: 65%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>PA4</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PA5</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PD6</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PD8</p></td>\n<td><p>GPIO</p></td>\n<td><p>Push Button PB1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PE7</p></td>\n<td><p>UART_TX</p></td>\n<td><p>UART TX Console VCOM_TX US0_TX #1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PE6</p></td>\n<td><p>UART_RX</p></td>\n<td><p>UART RX Console VCOM_RX US0_RX #1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PB11</p></td>\n<td><p>I2C_SDA</p></td>\n<td><p>SENSOR_I2C_SDA I2C1_SDA #1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PB12</p></td>\n<td><p>I2C_SCL</p></td>\n<td><p>SENSOR_I2C_SCL I2C1_SCL #1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG11 SoC is configured to use the 50 MHz external oscillator on the\nboard.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EFM32GG11 SoC has four USARTs, two UARTs and two Low Energy UARTs (LEUART).\nUSART0 is connected to the board controller and is used for the console.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Before using the kit the first time, you should update the J-Link firmware\nfrom <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink\">J-Link-Downloads</a></p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The SLWSTK6121A includes an <a class=\"reference external\" href=\"https://www.segger.com/jlink-debug-probes.html\">J-Link</a> serial and debug adaptor built into the\nboard. The adaptor provides:</p>\n<ul class=\"simple\">\n<li><p>A USB connection to the host computer</p></li>\n<li><p>A physical UART connection which is relayed over interface USB serial port.</p></li>\n</ul>\n<div class=\"section\" id=\"flashing-an-application-to-slwstk6121a\">\n<h4>Flashing an application to SLWSTK6121A<a class=\"headerlink\" href=\"#flashing-an-application-to-slwstk6121a\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the SLWSTK6121A to your host computer using the USB port.</p>\n<p>Here is an example to build and flash the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b efm32gg_slwstk6121a samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal (minicom, putty, etc.) with the following settings:</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n<p>Reset the board and you’ll see the following message on the corresponding serial port\nterminal session:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! efm32gg_slwstk6121a</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 134217728}], "main_ram_size": 134217728, "gpio": {"count": 4, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "em_starterkit", "arch": "arc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARC Boards</a> »</li>\n<li>DesignWare(R) ARC(R) EM Starter Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"designware-r-arc-r-em-starter-kit\">\n<span id=\"em-starterkit\"></span><h1>DesignWare(R) ARC(R) EM Starter Kit<a class=\"headerlink\" href=\"#designware-r-arc-r-em-starter-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The DesignWare(R) ARC(R) EM Starter Kit is a low-cost, versatile solution\nenabling rapid software development and software debugging, and profiling\nfor the ARC EM Family of processors. The EM Family includes the EM4, EM6,\nEM5D, EM7D, EM9D, and EM11D cores. The Zephyr RTOS can be used with the\nEM Starter Kit.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/em_starterkit.jpg\"><img alt=\"DesignWare(R) ARC(R) EM Starter Kit (synopsys.com)\" class=\"align-center\" src=\"../../../../_images/em_starterkit.jpg\" style=\"width: 442px;\"/></a>\n<p>The ARC EM Starter Kit consists of a hardware platform, including pre-installed\nFPGA images of different ARC EM processor configurations with peripherals.\nDocumentation for this board can be found at <a class=\"reference external\" href=\"https://www.embarc.org\">embARC website</a>.</p>\n<p>See also this URL for details about the board:\n<a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc_em_starter_kit\">Designware ARC EM Starter Kit website</a> .</p>\n<p>The latest version of EM Starter Kit is 2.3, developer can upgrade from\n2.0/2.1/2.2 to 2.3 using latest firmware.\nThe default configuration for EM Starter Kit boards can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arc/em_starterkit/em_starterkit_defconfig\">boards/arc/em_starterkit/em_starterkit_defconfig</a>.</p>\n<p>The default SoC for this board supported in Zephyr is the EM9D.\nThis configuration is a Harvard Architecture, with a separate\ninstruction bus and data bus. Instruction memory is called ICCM\nand data memory is called DCCM. The configuration file for EM9D\nis found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/soc/arc/snps_emsk/Kconfig.defconfig.em9d\">soc/arc/snps_emsk/Kconfig.defconfig.em9d</a>.</p>\n<p>If you have a larger program, you can select the EM7D or EM11D, which gives\naccess to 128KB DRAM with i-cache and d-cache. The configuration file for EM7D\nis found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/soc/arc/snps_emsk/Kconfig.defconfig.em7d\">soc/arc/snps_emsk/Kconfig.defconfig.em7d</a> and EM11D is\nfound in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/soc/arc/snps_emsk/Kconfig.defconfig.em11d\">soc/arc/snps_emsk/Kconfig.defconfig.em11d</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"board-layout\">\n<h3>Board Layout<a class=\"headerlink\" href=\"#board-layout\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC EM Starter Kit main board has 6 Pmod connectors. These can be configured\nto support attachment of GPIO, I2C, UART or SPI devices.</p>\n<p>The board also has a 16MB SPI-FLASH and an SDCard for storage. There are 9 LEDs,\n3 buttons, and 4 dip switches that can be used with GPIO.</p>\n<p>The Xilinx Spartan(R)-6 LX150 FPGA can auto-load one of 3 FPGA SoC bit files\nwhich have the EM7D, EM9D, or EM11D SoC.</p>\n<p>Documentation and general information for the board can be found at the\n<a class=\"reference external\" href=\"https://www.embarc.org\">embARC website</a>, which also includes some free sample software.</p>\n</div>\n<div class=\"section\" id=\"supported-firmware-versions\">\n<h3>Supported Firmware Versions<a class=\"headerlink\" href=\"#supported-firmware-versions\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The EM Starter Kit has different versions, such as 1.0, 1.1, 2.0, 2.1,\n2.2 and 2.3.\nIn Zephyr, only firmware versions 2.2 and 2.3 are supported.</p>\n<ul class=\"simple\">\n<li><p>For EM Starter Kit 2.2, EM7D, EM9D and EM11D core configurations are supported.</p>\n<ul>\n<li><p>Use <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_BOARD_EM_STARTERKIT_R22.html#std-kconfig-CONFIG_BOARD_EM_STARTERKIT_R22\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_BOARD_EM_STARTERKIT_R22</span></code></a> to select 2.2 version.</p></li>\n<li><p>Use <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM7D.html#std-kconfig-CONFIG_SOC_EMSK_EM7D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM7D</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM9D.html#std-kconfig-CONFIG_SOC_EMSK_EM9D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM9D</span></code></a> or\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM11D.html#std-kconfig-CONFIG_SOC_EMSK_EM11D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM11D</span></code></a> to select EM7D or EM9D or EM11D.</p></li>\n</ul>\n</li>\n<li><p>For EM Starter Kit 2.3, EM7D, EM9D and EM11D core configurations are\nsupported.</p>\n<ul>\n<li><p>Use <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_BOARD_EM_STARTERKIT_R23.html#std-kconfig-CONFIG_BOARD_EM_STARTERKIT_R23\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_BOARD_EM_STARTERKIT_R23</span></code></a> to select 2.3 version.</p></li>\n<li><p>Use <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM7D.html#std-kconfig-CONFIG_SOC_EMSK_EM7D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM7D</span></code></a>, <a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM9D.html#std-kconfig-CONFIG_SOC_EMSK_EM9D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM9D</span></code></a> or\n<a class=\"reference internal\" href=\"../../../../reference/kconfig/CONFIG_SOC_EMSK_EM11D.html#std-kconfig-CONFIG_SOC_EMSK_EM11D\"><code class=\"xref std std-kconfig docutils literal notranslate\"><span class=\"pre\">CONFIG_SOC_EMSK_EM11D</span></code></a> to select EM7D or EM9D or EM11D.</p></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr kernel supports multiple hardware features on the EM Starter Kit\nthrough the use of device drivers.</p>\n<p>The EM Starter Kit supports 6 Digilent Pmod(TM) Interfaces, which enables the\nuse of a large variety of pluggable modules for storage, communications,\nsensors, displays, etc. With the Pmod interface, you can prototype your\napplications using the Zephyr RTOS.</p>\n<p>The table below shows which drivers are supported and which functionality can\nbe found on which architectures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 19%\"/>\n<col style=\"width: 21%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>EM9D</p></th>\n<th class=\"head\"><p>EM11D</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>INT</p></td>\n<td><p>on-chip</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>interrupt_controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>usb +\n2 Pmods</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>2 Pmods</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>n/a</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>adc (can add via Pmod)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>2 Pmods</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>6 Pmods</p></td>\n<td><p>Y</p></td>\n<td><p>Y</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>n/a</p></td>\n<td><p>N</p></td>\n<td><p>N</p></td>\n<td><p>pwm</p></td>\n</tr>\n</tbody>\n</table>\n<p>The board has 3 (debounced and interrupting) buttons for use with GPIO, 4 dip\nswitches, 9 LEDs, SDCard on SPI, and a 16MB SPI-Flash memory.</p>\n<p>The SPI-Flash also holds 3 (or 4) separate FPGA CPU bit files, selectable via\ndip switch.</p>\n<p>The SPI-Flash is also programmed with a bootloader. The bootloader can copy a\nprogram image from SPI-Flash into executable memory. Zephyr initialization will\ncopy the initialized data section to the data memory if CONFIG_XIP is used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"required-hardware-and-software\">\n<h3>Required Hardware and Software<a class=\"headerlink\" href=\"#required-hardware-and-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To use Zephyr RTOS applications on the EM Starter Kit board, a few additional\npieces of hardware are required.</p>\n<ul class=\"simple\">\n<li><p>USB Cable (delivered as part of the ARC EM Starter Kit)</p></li>\n<li><p>The USB cable provides power to the board; however, if the board is to run\nstandalone, the universal switching power adaptor (110-240V AC to 5V DC),\nprovided in the package, can be used to power the board.</p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">The Zephyr SDK</span></a></p></li>\n<li><p>Terminal emulator software for use with the USB-UART. Suggestion:\n<a class=\"reference external\" href=\"http://www.putty.org\">Putty Website</a>.</p></li>\n<li><p>(optional) A collection of Pmods.\nSee <a class=\"reference external\" href=\"http://store.digilentinc.com/pmod-modules\">Digilent Pmod Modules</a> or develop your custom interfaces to attach\nto the Pmod connector.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-the-arc-em-starter-kit\">\n<h3>Set up the ARC EM Starter Kit<a class=\"headerlink\" href=\"#set-up-the-arc-em-starter-kit\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run Zephyr application on correct arc core of EM Starter Kit, you need to\nsetup the board correctly.</p>\n<ul class=\"simple\">\n<li><p>Connect the digilent usb cable from your host to the board.</p></li>\n<li><p>Connect the 5V DC power supply to your board.</p></li>\n<li><p>Select the core configuration of the board by choosing correct dip switch\nSW1 settings, then press then FPGA configure button located above the letter\n‘C’ of the ARC logo on the board.</p></li>\n<li><p>Then the board will be reconfigured with selected core configuration, you\ncan download and debug Zephyr application now.</p></li>\n<li><p>If you want to know more about how to use this board, you can take a look\nat the <a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc_em_starter_kit\">ARC EM Starter Kit User Guide</a>.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-zephyr-software\">\n<h3>Set up Zephyr Software<a class=\"headerlink\" href=\"#set-up-zephyr-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Since there are different firmware versions of EM Starter Kit, you need to\nchoose the proper firmware version supported in Zephyr.</p>\n<p>Three different configurations exist for this board:</p>\n<ul class=\"simple\">\n<li><p>EM7D: em_starterkit_em7d_defconfig</p></li>\n<li><p>EM9D: em_starterkit_defconfig</p></li>\n<li><p>EM11D: em_starterkit_em11d_defconfig</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"building-sample-applications\">\n<h3>Building Sample Applications<a class=\"headerlink\" href=\"#building-sample-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can try many of the sample applications or tests, but let us discuss\nthe one called <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.\nIt is found in <a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/hello_world\">samples/hello_world</a>.</p>\n<div class=\"section\" id=\"configuring\">\n<h4>Configuring<a class=\"headerlink\" href=\"#configuring\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You may need to write a prj_arc.conf file if the sample doesn’t have one.\nNext, you can use the menuconfig rule to configure the target. By\nspecifying <code class=\"docutils literal notranslate\"><span class=\"pre\">em_starterkit</span></code> as the board configuration, you can select the ARC\nEM Starter Kit board support for Zephyr.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b em_starterkit samples/hello_world</span>\n<span class=\"go\">west build -t menuconfig</span>\n</pre></div>\n</div>\n<p>On this board you will also need to consider the “ARC SoC Selection” and set\nit either to EM9D or EM11D. To boot up the EM9D on the board, all dip\nswitches should be UP except for switch 1. Other configuration choices\nare made in the normal way. To boot up the EM11D on the board,\nall dip switches should be UP except for switch 2. Next press the button\nabove the letter C in the “ARC” logo on the silkscreen.</p>\n</div>\n<div class=\"section\" id=\"building\">\n<h4>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build application in the usual way.  Refer to\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b em_starterkit samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"connecting-serial-output\">\n<h3>Connecting Serial Output<a class=\"headerlink\" href=\"#connecting-serial-output\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the default configuration, Zephyr’s EM Starter Kit images support\nserial output via the UART1 on the board.  To enable serial output:</p>\n<p>On your development environment, you will need to:</p>\n<ul class=\"simple\">\n<li><p>Open a serial port emulator (i.e. on Linux minicom, putty, screen, etc)</p></li>\n<li><p>Specify the tty driver name, for example, on Linux this may be <code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB1</span></code></p></li>\n<li><p>Set the communication settings to:</p></li>\n</ul>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Parameter</p></th>\n<th class=\"head\"><p>Value</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Baud:</p></td>\n<td><p>115200</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Data:</p></td>\n<td><p>8 bits</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Parity:</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Stopbits:</p></td>\n<td><p>1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using the latest version of Zephyr SDK(&gt;=0.9), you can debug and flash\nEM Starterkit directly.</p>\n<p>One option is to build and debug the application using the usual\nZephyr build system commands.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b em_starterkit &lt;my app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>At this point you can do your normal debug session. Set breakpoints and then\n‘c’ to continue into the program.</p>\n<p>The other option is to launch a debug server, as follows.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b em_starterkit &lt;my app&gt;</span>\n<span class=\"go\">west debugserver</span>\n</pre></div>\n</div>\n<p>Then connect to the debug server at the EM Starter Kit from a second\nconsole, from the build directory containing the output <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> &lt;my app&gt;\n<span class=\"gp\">$ </span><span class=\"nv\">$ZEPHYR_SDK_INSTALL_DIR</span>/arc-zephyr-elf/bin/arc-zephyr-elf-gdb zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote localhost:3333</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b main</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">c</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you just want to download the application to the EM Starter Kit’s CCM\nor DDR and run, you can do so in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b em_starterkit</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This command still uses openocd and gdb to load application elf file\nto EM Starter Kit, but it will load application and then run immediately.\nIf power is lost, the application will also lost due to power loss.</p>\n<p>Most of the time you will not be flashing your program but will instead\ndebug it using openocd and gdb. The program can be download via the USB\ncable into the code and data memories.</p>\n<p>When you are ready to deploy the program so that it boots up automatically\non reset or power-up, you can follow the steps to place the program on\nSPI-FLASH.</p>\n<p>For instructions on how to write your program to SPI-FLASH,\nrefer to the documentation on the ARC EM Starter Kit at the\n<a class=\"reference external\" href=\"https://www.embarc.org\">embARC website</a>, which includes instructions for how to place an\nexecutable image onto the SPI-FLASH in such a way that it is understood\nby the bootloader.</p>\n</div>\n</div>\n<div class=\"section\" id=\"release-notes\">\n<h2>Release Notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following is a list of TODO items:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://jira.zephyrproject.org/browse/GH-2647\">GH-2647</a>: Zephyr needs i-cache API (all targets)</p></li>\n<li><p><a class=\"reference external\" href=\"https://jira.zephyrproject.org/browse/GH-2230\">GH-2230</a>: Zephyr ARC port doesn’t yet support nested regular interrupts.</p></li>\n<li><p>pinmux driver: Possibly it can be written to configure PMods too.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "dram0", "size": 2147483648}], "main_ram_size": 2147483648, "gpio": {"count": 10, "instances": [{"label": "GPIO_N_000"}, {"label": "GPIO_N_032"}, {"label": "GPIO_N_064"}, {"label": "GPIO_NW_000"}, {"label": "GPIO_NW_032"}, {"label": "GPIO_NW_064"}, {"label": "GPIO_W_000"}, {"label": "GPIO_W_032"}, {"label": "GPIO_SW_000"}, {"label": "GPIO_SW_032"}]}, "i2c": {"count": 8, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}, {"label": "I2C_5"}, {"label": "I2C_6"}, {"label": "I2C_7"}]}, "spi": {"count": 0, "instances": []}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "up_squared_32", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}], "main_ram_size": 65536, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_1"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 7, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}]}, "usb": {"count": 1, "instances": [{"label": "OTGFS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm3210c_eval", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM3210C Evaluation</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm3210c-evaluation\">\n<span id=\"stm3210c-eval-board\"></span><h1>ST STM3210C Evaluation<a class=\"headerlink\" href=\"#st-stm3210c-evaluation\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM3210C-EVAL evaluation board is a complete development platform for STMicroelectronic’s\nARM Cortex-M3 core-based STM32F107VCT microcontroller.</p>\n<p>The range of hardware features on the board help you to evaluate all peripherals\n(USB-OTG FS, ethernet, motor control, CAN, microSD CardTM, smartcard, USART,\naudio DAC, MEMS, EEPROM and more) and develop your own applications.</p>\n<p>Extension headers make it easy to connect a daughterboard or wrapping board for your specific\napplication.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm3210c_eval.jpg\"><img alt=\"STM3210C-EVAL\" class=\"align-center\" src=\"../../../../_images/stm3210c_eval.jpg\" style=\"width: 660px; height: 792px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm3210c-eval.html\">STM3210C-EVAL website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM3210C-EVAL provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><dl class=\"simple\">\n<dt>Three 5 V power supply options:</dt><dd><ul>\n<li><p>Power jack</p></li>\n<li><p>USB connector</p></li>\n<li><p>daughterboard</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Boot from user Flash, system memory or SRAM.</p></li>\n<li><p>I2S audio DAC, stereo audio jack.</p></li>\n<li><p>2 GByte (or more) microSD CardTM.</p></li>\n<li><p>Both type A and B smartcard support.</p></li>\n<li><p>I2C compatible serial interface 64 Kbit EEPROM, MEMS and I/O expander.</p></li>\n<li><p>RS-232 communication.</p></li>\n<li><p>IrDA transceiver.</p></li>\n<li><p>USB-OTG full speed, USB microAB connector.</p></li>\n<li><p>IEEE-802.3-2002 compliant ethernet connector.</p></li>\n<li><p>Two channels of CAN2.0A/B compliant connection.</p></li>\n<li><p>Inductor motor control connector.</p></li>\n<li><p>JTAG and trace debug support.</p></li>\n<li><p>3.2” 240x320 TFT color LCD with touch screen.</p></li>\n<li><p>Joystick with 4-direction control and selector.</p></li>\n<li><p>Reset, Wakeup, Tamper and User button.</p></li>\n<li><p>4 color LEDs.</p></li>\n<li><p>RTC with backup battery.</p></li>\n<li><p>MCU consumption measurement circuit.</p></li>\n<li><p>Extension connector for daughterboard or wrapping board.</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F107VCT can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/CD00171190.pdf\">STM32F107VCT reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm3210c_eval board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm3210c_eval/stm3210c_eval_defconfig\">boards/arm/stm3210c_eval/stm3210c_eval_defconfig</a>.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm3210c_eval_connectors.png\"><img alt=\"STM3210C_EVAL connectors\" class=\"align-center\" src=\"../../../../_images/stm3210c_eval_connectors.png\" style=\"width: 966px; height: 1017px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PD5</p></li>\n<li><p>UART_2_RX : PD6</p></li>\n<li><p>USER_PB   : PB9</p></li>\n<li><p>LED2      : PD13</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM3210C-EVAL board includes an ST-LINK/V2-1 embedded debug tool interface.\nAt power-on, the board is in firmware-upgrade mode (also called DFU for\n“Device Firmware Upgrade”), allowing the firmware to be updated through the USB.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm3210c_eval</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm3210c-eval\">\n<h4>Flashing an application to STM3210C-EVAL<a class=\"headerlink\" href=\"#flashing-an-application-to-stm3210c-eval\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the STM3210C-EVAL to your host computer using the USB port, then build\nand flash an application in the usual way.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm3210c_eval samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can run a serial host program to connect with your STM3210C-EVAL board. For\nexample, on Linux:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm3210c_eval samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm3210c-eval.html\">http://www.st.com/en/evaluation-tools/stm3210c-eval.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/CD00171190.pdf\">http://www.st.com/resource/en/reference_manual/CD00171190.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf51_blenano", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>Redbear Labs Nano</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"redbear-labs-nano\">\n<span id=\"nrf51-blenano\"></span><h1>Redbear Labs Nano<a class=\"headerlink\" href=\"#redbear-labs-nano\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nano is a development board equipped with Nordic’s nRF51822 Bluetooth Low Energy SOC.\nThis board is available on <a class=\"reference external\" href=\"https://redbear.cc/product/ble-nano-kit.html\">RedBear Store</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>nRF51 BLE Nano has two external oscillators. The frequency of the slow clock\nis 32.768 kHz. The frequency of the main clock is 16 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf51_blenano board configuration supports the following nRF51\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vectored\ninterrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>BLE nano pinout</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf51_blenano.png\"><img alt=\"BLE Nano\" class=\"align-center\" src=\"../../../../_images/nrf51_blenano.png\" style=\"width: 500px;\"/></a>\n<p>DAPLink board</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/daplink.png\"><img alt=\"DAPLink\" class=\"align-center\" src=\"../../../../_images/daplink.png\" style=\"width: 500px;\"/></a>\n<p>The DAPLink USB board acts as a dongle. DAPLink debug probes appear on the host computer as a USB disk.\nIt also regulates 5V from USB to 3.3V via the onboard LDO to power Nano.</p>\n<p>More information about Nano and DAPLink can be found at the <a class=\"reference external\" href=\"https://github.com/redbear/nRF5x\">RedBear Github</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf51_blenano</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To flash an application, you’ll need to connect your BLE Nano with the\nDAPLink board, then attach that to your computer via USB.</p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>Be careful to mount the BLE Nano correctly! The side of the board\nwith the VIN and GND pins should face <strong>towards</strong> the USB connector.\nThe <a class=\"reference external\" href=\"https://redbear.cc/product/ble-nano-kit.html\">RedBear Store</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id3\">1</a> page links to a tutorial video that shows how to\nproperly solder headers and assemble the DAPLink and BLE Nano boards.</p>\n</div>\n<p>Now build and flash applications as usual. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51_blenano samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>After mounting the BLE Nano on its DAPLink board as described above,\nyou can debug an application in the usual way. Here is an example for\nthe <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf51_blenano samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id2\">1</a>,<a href=\"#id3\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://redbear.cc/product/ble-nano-kit.html\">https://redbear.cc/product/ble-nano-kit.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://github.com/redbear/nRF5x\">https://github.com/redbear/nRF5x</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 98304}], "main_ram_size": 98304, "gpio": {"count": 8, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 11, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_17"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l476rg", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo L476RG</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-l476rg\">\n<span id=\"nucleo-l476rg-board\"></span><h1>ST Nucleo L476RG<a class=\"headerlink\" href=\"#st-nucleo-l476rg\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo L476RG board features an ARM Cortex-M4 based STM32L476RG MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo L476RG board:</p>\n<ul>\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul class=\"simple\">\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l476rg.jpg\"><img alt=\"Nucleo L476RG\" class=\"align-center\" src=\"../../../../_images/nucleo_l476rg.jpg\" style=\"width: 250px; height: 250px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-l476rg.html\">Nucleo L476RG website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32L476RG SoC provides the following hardware IPs:</p>\n<ul class=\"simple\">\n<li><p>Ultra-low-power with FlexPowerControl (down to 130 nA Standby mode and 100 uA/MHz run mode)</p></li>\n<li><p>Core: ARM® 32-bit Cortex®-M4 CPU with FPU, frequency up to 80 MHz, 100DMIPS/1.25DMIPS/MHz (Dhrystone 2.1)</p></li>\n<li><p>Clock Sources:</p>\n<ul>\n<li><p>4 to 48 MHz crystal oscillator</p></li>\n<li><p>32 kHz crystal oscillator for RTC (LSE)</p></li>\n<li><p>Internal 16 MHz factory-trimmed RC ( ±1%)</p></li>\n<li><p>Internal low-power 32 kHz RC ( ±5%)</p></li>\n<li><p>Internal multispeed 100 kHz to 48 MHz oscillator, auto-trimmed by\nLSE (better than  ±0.25 % accuracy)</p></li>\n<li><p>3 PLLs for system clock, USB, audio, ADC</p></li>\n</ul>\n</li>\n<li><p>RTC with HW calendar, alarms and calibration</p></li>\n<li><p>LCD 8 x 40 or 4 x 44 with step-up converter</p></li>\n<li><p>Up to 24 capacitive sensing channels: support touchkey, linear and rotary touch sensors</p></li>\n<li><p>16x timers:</p>\n<ul>\n<li><p>2x 16-bit advanced motor-control</p></li>\n<li><p>2x 32-bit and 5x 16-bit general purpose</p></li>\n<li><p>2x 16-bit basic</p></li>\n<li><p>2x low-power 16-bit timers (available in Stop mode)</p></li>\n<li><p>2x watchdogs</p></li>\n<li><p>SysTick timer</p></li>\n</ul>\n</li>\n<li><p>Up to 114 fast I/Os, most 5 V-tolerant, up to 14 I/Os with independent supply down to 1.08 V</p></li>\n<li><p>Memories</p>\n<ul>\n<li><p>Up to 1 MB Flash, 2 banks read-while-write, proprietary code readout protection</p></li>\n<li><p>Up to 128 KB of SRAM including 32 KB with hardware parity check</p></li>\n<li><p>External memory interface for static memories supporting SRAM, PSRAM, NOR and NAND memories</p></li>\n<li><p>Quad SPI memory interface</p></li>\n</ul>\n</li>\n<li><p>4x digital filters for sigma delta modulator</p></li>\n<li><p>Rich analog peripherals (independent supply)</p>\n<ul>\n<li><p>3x 12-bit ADC 5 MSPS, up to 16-bit with hardware oversampling, 200 uA/MSPS</p></li>\n<li><p>2x 12-bit DAC, low-power sample and hold</p></li>\n<li><p>2x operational amplifiers with built-in PGA</p></li>\n<li><p>2x ultra-low-power comparators</p></li>\n</ul>\n</li>\n<li><p>18x communication interfaces</p>\n<ul>\n<li><p>USB OTG 2.0 full-speed, LPM and BCD</p></li>\n<li><p>2x SAIs (serial audio interface)</p></li>\n<li><p>3x I2C FM+(1 Mbit/s), SMBus/PMBus</p></li>\n<li><p>6x USARTs (ISO 7816, LIN, IrDA, modem)</p></li>\n<li><p>3x SPIs (4x SPIs with the Quad SPI)</p></li>\n<li><p>CAN (2.0B Active) and SDMMC interface</p></li>\n<li><p>SWPMI single wire protocol master I/F</p></li>\n</ul>\n</li>\n<li><p>14-channel DMA controller</p></li>\n<li><p>True random number generator</p></li>\n<li><p>CRC calculation unit, 96-bit unique ID</p></li>\n<li><p>Development support: serial wire debug (SWD), JTAG, Embedded Trace Macrocell™</p></li>\n</ul>\n<p>More information about STM32L476RG can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32l476rg.html\">STM32L476RG on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/DM00083560.pdf\">STM32L476 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_l476rg board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_l476rg/nucleo_l476rg_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L476RG Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l476rg_arduino.png\"><img alt=\"Nucleo L476RG Arduino connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l476rg_arduino.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_l476rg_morpho.png\"><img alt=\"Nucleo L476RG Morpho connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_l476rg_morpho.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1 TX/RX  : PA9/PA10</p></li>\n<li><p>UART_2 TX/RX  : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_3 TX/RX  : PB10/PB11</p></li>\n<li><p>I2C_1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>I2C_3 SCL/SDA : PC0/PC1</p></li>\n<li><p>SPI_1 CS/SCK/MISO/MOSI : PB6/PA5/PA6/PA7 (Arduino SPI)</p></li>\n<li><p>SPI_2 CS/SCK/MISO/MOSI : PB12/PB13/PB14/PB15</p></li>\n<li><p>SPI_3 CS/SCK/MISO/MOSI : PA15/PC10/PC11/PC12</p></li>\n<li><p>PWM_2_CH1 : PA0</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L476RG System Clock could be driven by internal or external oscillator,\nas well as main PLL clock. By default System clock is driven by PLL clock at 80MHz,\ndriven by 16MHz high speed internal oscillator.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo L476RG board has 6 U(S)ARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_l476rg</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo L476RG board includes an ST-LINK/V2-1 embedded debug tool\ninterface.  This interface is supported by the openocd version\nincluded in the Zephyr SDK since v0.9.2.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-l476rg\">\n<h4>Flashing an application to Nucleo L476RG<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-l476rg\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Connect the Nucleo L476RG to your host computer using the USB port.\nThen build and flash an application. Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Then build and flash the application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l476rg samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_l476rg samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 163840}], "main_ram_size": 163840, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOH"}, {"label": "GPIOD"}, {"label": "GPIOE"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_3"}, {"label": "I2C_2"}, {"label": "I2C_4"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 5, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "LPUART_1"}, {"label": "UART_3"}, {"label": "UART_4"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 6, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_6"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_3"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_l452re_p", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "96b_stm32_sensor_mez", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>96Boards STM32 Sensor Mezzanine</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"boards-stm32-sensor-mezzanine\">\n<span id=\"b-stm32-sensor-mez\"></span><h1>96Boards STM32 Sensor Mezzanine<a class=\"headerlink\" href=\"#boards-stm32-sensor-mezzanine\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards STM32 Sensor Mezzanine is based on the ST Microelectronics\nSTM32F446VE Cortex M4 CPU.</p>\n<p>This board acts as a mezzanine platform for all 96Boards CE compliant\nboards. It can also be used as a standalone board.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"96Boards STM32 Sensor Mezzanine\" src=\"../../../../_images/96b_stm32_sensor_mez.png\"/>\n<p class=\"caption\"><span class=\"caption-text\">96Boards STM32 Sensor Mezzanine</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>96Boards STM32 Sensor Mezzanine provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F446VE in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>180 MHz max CPU frequency</p></li>\n<li><p>1.8V work voltage</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>On board sensors:</p>\n<ul>\n<li><p>Temperature/Pressure: STMicro LPS22HB</p></li>\n<li><p>Acclerometer/Gyroscope: STMicro LSM6DS3H</p></li>\n<li><p>Magnetometer: STMicro LIS3MDL</p></li>\n<li><p>Microphone: STMicro MP34DT01</p></li>\n</ul>\n</li>\n<li><p>3User LEDs</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>UART</p></li>\n<li><p>I2C (2)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>I2S (1)</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr 96b_stm32_sensor_mez board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2S</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2s</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default board configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/96b_stm32_sensor_mez/96b_stm32_sensor_mez_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 / User1 LED = PD10</p></li>\n<li><p>LED2 / User2 LED = PD11</p></li>\n<li><p>LED3 / User3 LED = PD12</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON = RST (BT1)</p></li>\n<li><p>BUTTON = USR (BT2)</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards STM32 Sensor Mezzanine can be driven by an internal oscillator as\nwell as the main PLL clock. In default board configuration, the 16MHz external\noscillator is used to drive the main PLL clock to generate a System Clock\n(SYSCLK) at 84MHz. On the bus side, AHB/APB2 clocks runs at 84MHz, while APB1\nclock runs at 42MHz.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>On 96Boards STM32 Sensor Mezzanine, Zephyr console output is assigned to UART4\nexposed via on-board Micro USB connector. Default settings are 115200 8N1.</p>\n<p>The default USART mappings for the remaining ones are:</p>\n<ul class=\"simple\">\n<li><dl class=\"simple\">\n<dt>USART1: Connected to AP via UART0 on the 96Boards Low-Speed Header.</dt><dd><ul>\n<li><p>TX: PA9</p></li>\n<li><p>RX: PA10</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>USART2: Connected to D0(RX) and D1(TX) on the Arduino Header.</dt><dd><ul>\n<li><p>TX: PD5</p></li>\n<li><p>RX: PD6</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>USART3: Broken out to Grove connector J10.</dt><dd><ul>\n<li><p>TX: PD8</p></li>\n<li><p>RX: PD9</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<div class=\"section\" id=\"i2c\">\n<h4>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards STM32 Sensor Mezzanine board has up to 3 I2Cs. The default I2C\nmapping is:</p>\n<ul class=\"simple\">\n<li><p>I2C1_SCL  : PB6</p></li>\n<li><p>I2C1_SDA  : PB7</p></li>\n<li><p>I2C2_SCL  : PB10</p></li>\n<li><p>I2C2_SDA  : PC12</p></li>\n</ul>\n<p>I2C2 goes to the Groove connectors and can be used to attach external sensors.</p>\n</div>\n<div class=\"section\" id=\"spi\">\n<h4>SPI<a class=\"headerlink\" href=\"#spi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards STM32 Sensor Mezzanine board has 3 SPIs. SPI1 is used in slave mode\nas the communication bus with the AP. SPI2 is used in master mode to control\nthe LSM6DS3H sensor. SPI4 is broken out to Grove Connector J5.\nThe default SPI mapping is:</p>\n<ul class=\"simple\">\n<li><p>SPI1_NSS  : PA4</p></li>\n<li><p>SPI1_SCK  : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS  : PB9</p></li>\n<li><p>SPI2_SCK  : PD3</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n<li><p>SPI4_NSS  : PE11</p></li>\n<li><p>SPI4_SCK  : PE12</p></li>\n<li><p>SPI4_MISO : PE13</p></li>\n<li><p>SPI4_MOSI : PE14</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"pwm\">\n<h4>PWM<a class=\"headerlink\" href=\"#pwm\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards STM32 Sensor Mezzanine board exposes 6 PWM channels on the Arduino\nconnector. The default PWM mapping is:</p>\n<ul class=\"simple\">\n<li><p>PWM3_CH1  : PB4  : D9</p></li>\n<li><p>PWM3_CH3  : PC8  : D3</p></li>\n<li><p>PWM4_CH3  : PD14 : D6</p></li>\n<li><p>PWM4_CH4  : PD15 : D5</p></li>\n<li><p>PWM9_CH1  : PE5  : D12</p></li>\n<li><p>PWM9_CH2  : PE6  : D11</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"i2s\">\n<h4>I2S<a class=\"headerlink\" href=\"#i2s\" title=\"Permalink to this headline\">¶</a></h4>\n<p>96Boards STM32 Sensor Mezzanine board exposes 1 I2S port which is connected\nto the on-board ST MP34DT01 DMIC. The default I2S mapping is:</p>\n<ul class=\"simple\">\n<li><p>I2S2_SD   : PC1</p></li>\n<li><p>I2S2_CK   : PC7</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"building\">\n<h3>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for building the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_stm32_sensor_mez samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>96Boards STM32 Sensor Mezzanine board includes an ST-LINK/V2-1 embedded\ndebug tool interface. This interface is supported by the openocd version\nincluded in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-96boards-stm32-sensor-mezzanine\">\n<h4>Flashing an application to 96Boards STM32 Sensor Mezzanine<a class=\"headerlink\" href=\"#flashing-an-application-to-96boards-stm32-sensor-mezzanine\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your 96Boards STM32 Sensor Mezzanine\nboard.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_stm32_sensor_mez samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! 96b_stm32_sensor_mez\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b 96b_stm32_sensor_mez samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "mikroe_mini_m4_for_stm32", "arch": "arm", "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "LPC_FLASH", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram1", "size": 65536}, {"label": "sram2", "size": 32768}, {"label": "sramx", "size": 32768}], "main_ram_size": 65536, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "lpcxpresso54114_m0", "arch": null, "docu_html": "Error generating the docs"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 14, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}, {"label": "PWM_18"}, {"label": "PWM_19"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32373c_eval", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32373C Evaluation</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32373c-evaluation\">\n<span id=\"stm32373c-eval-board\"></span><h1>ST STM32373C Evaluation<a class=\"headerlink\" href=\"#st-stm32373c-evaluation\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32373C-EVAL evaluation board is designed as a complete demonstration and development platform for STMicroelectronics ARM Cortex-M4 core-based STM32F373VCT6 microcontroller.</p>\n<p>The full range of hardware features on the board can help the user evaluate all peripherals (USB FS, USART, audio DAC, microphone ADC, dot-matrix LCD, IrDA, LDR, MicroSD card, HDMI CEC, ECG, pressure sensor, CAN, IR transmitter and receiver, EEPROM, touch slider, temperature sensor, etc.) and develop their own applications.</p>\n<p>Extension headers make it possible to easily connect a daughter board or wrapping board for a specific application.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32373c_eval.jpg\"><img alt=\"STM32373C-EVAL\" class=\"align-center\" src=\"../../../../_images/stm32373c_eval.jpg\" style=\"width: 350px; height: 489px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32373c-eval.html\">STM32373C-EVAL website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32373C-EVAL provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F373VCT6 microcontroller</p></li>\n<li><dl class=\"simple\">\n<dt>Four 5 V power supply options:</dt><dd><ul>\n<li><p>Power jack</p></li>\n<li><p>ST-LINK/V2 USB connector</p></li>\n<li><p>User USB connector</p></li>\n<li><p>Daughter board</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>Audio jack connected to I2 S DAC</p></li>\n<li><p>Microphone connected to ADC through an amplifier</p></li>\n<li><p>2-GByte (or more) MicroSD card on SPI</p></li>\n<li><p>Three components on I2 C bus: temperature sensor, EEPROM and dual interface RF EEPROM</p></li>\n<li><p>RS-232 communication configurable for communication of Flash loader</p></li>\n<li><p>IrDA transceiver</p></li>\n<li><p>240x320 TFT color LCD connected to SPI interface</p></li>\n<li><p>Joystick with 4-direction control and selector</p></li>\n<li><p>Reset, Wakeup or Tamper, and Key buttons</p></li>\n<li><p>4 color user LEDs</p></li>\n<li><p>2 LEDs for MCU power range indicator</p></li>\n<li><p>ECG, pressure sensor and PT100 temperature sensor connected to the 16-bit Sigma Delta ADC of STM32F373VCT6</p></li>\n<li><p>Extension connectors for daughter board or wrapping board</p></li>\n<li><p>MCU voltage: 3.3 V or adjustable 2.0 V - 3.6 V</p></li>\n<li><p>USB FS connector</p></li>\n<li><p>Touch slider</p></li>\n<li><p>RTC with backup battery</p></li>\n<li><p>CAN 2.0 A/B compliant connection</p></li>\n<li><p>Light dependent resistor (LDR)</p></li>\n<li><p>Two HDMI connectors with DDC and CEC</p></li>\n<li><p>IR transmitter and receiver</p></li>\n<li><p>Two ADC &amp; DAC input and output signal connectors and one Sigma Delta ADC input signal connector</p></li>\n<li><p>Potentiometer</p></li>\n<li><p>JTAG/SWD and ETM trace debug support</p></li>\n<li><p>Embedded ST-LINK/V2</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F373VCT6 can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00041563.pdf\">STM32F373VCT6 reference manual</a> <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id4\">2</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32373c_eval board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>reset and clock control</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash memory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported in this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/stm32373c_eval/stm32373c_eval_defconfig\">boards/arm/stm32373c_eval/stm32373c_eval_defconfig</a></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Each of the GPIO pins can be configured by software as output (push-pull or open-drain), as\ninput (with or without pull-up or pull-down), or as peripheral alternate function. Most of the\nGPIO pins are shared with digital or analog alternate functions. All GPIOs are high current\ncapable except for analog inputs.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32373c_eval_connectors.png\"><img alt=\"STM32373C_EVAL connectors\" class=\"align-center\" src=\"../../../../_images/stm32373c_eval_connectors.png\" style=\"width: 664px; height: 820px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_2_TX : PD5</p></li>\n<li><p>UART_2_RX : PD6</p></li>\n<li><p>USER_PB   : PA2</p></li>\n<li><p>LED2      : PC1</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32373c_eval</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32373C-EVAL board includes an ST-LINK/V2-1 embedded debug tool interface.\nAt power-on, the board is in firmware-upgrade mode (also called DFU for\n“Device Firmware Upgrade”), allowing the firmware to be updated through the USB.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32373c-eval\">\n<h4>Flashing an application to STM32373C-EVAL<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32373c-eval\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32373c_eval samples/basic/blinky</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You will see the LED blinking every second.</p>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32373c_eval samples/basic/blinky</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32373c-eval.html\">http://www.st.com/en/evaluation-tools/stm32373c-eval.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00041563.pdf\">http://www.st.com/resource/en/reference_manual/dm00041563.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_0", "size": 393216}, {"label": "FLASH_1", "size": 655360}], "main_flash_size": 655360, "memory": [{"label": "sram0", "size": 143360}, {"label": "sram1", "size": 4096}, {"label": "sram2", "size": 114688}], "main_ram_size": 143360, "gpio": {"count": 15, "instances": [{"label": "P0"}, {"label": "P1"}, {"label": "P2"}, {"label": "P3"}, {"label": "P4"}, {"label": "P5"}, {"label": "P6"}, {"label": "P7"}, {"label": "P8"}, {"label": "P9"}, {"label": "P10"}, {"label": "P11"}, {"label": "P12"}, {"label": "P13"}, {"label": "P14"}]}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 2, "instances": [{"label": "uart_5"}, {"label": "uart_6"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "cy8ckit_062_ble_m4", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 2, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 2, "instances": [{"label": "UART_0"}, {"label": "UART_1"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf21540dk_nrf52840", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF21540 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf21540-dk\">\n<span id=\"nrf21540dk-nrf52840\"></span><h1>nRF21540 DK<a class=\"headerlink\" href=\"#nrf21540-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF21540 DK (PCA10112) shows possibility of the Nordic Semiconductor\nnRF21540 Front End Module connected with nRF52840 ARM Cortex-M4F CPU.\nThe CPU provides support for the following devices:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p>RADIO (Bluetooth Low Energy and 802.15.4)</p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter\">UART</abbr></p></li>\n<li><p><abbr title=\"Universal Serial Bus\">USB</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n</ul>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf21540dk_nrf52840.jpg\"><img alt=\"nRF21540 DK\" src=\"../../../../_images/nrf21540dk_nrf52840.jpg\" style=\"width: 442px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF21540 DK (Credit: Nordic Semiconductor)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF21540\">nRF21540 website</a> <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id6\">2</a>.\nThe <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a> contains the processor’s and front end\nmodule’s information and the datasheet.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF52840 on the nRF21540 DK has two external oscillators. The frequency\nof the slow clock is 32.768 kHz. The frequency of the main clock is 32 MHz.</p>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nrf21540dk_nrf52840 board configuration supports the following\nhardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 24%\"/>\n<col style=\"width: 27%\"/>\n<col style=\"width: 49%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CLOCK</p></td>\n<td><p>on-chip</p></td>\n<td><p>clock_control</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>flash</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MPU</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>arch/arm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RADIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>Bluetooth,\nieee802154</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>system clock</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTT</p></td>\n<td><p>Segger</p></td>\n<td><p>console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M/S)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not supported by the Zephyr kernel.\nSee <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">nRF52840 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id8\">3</a> and <a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">Nordic Semiconductor Infocenter</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id4\">1</a>\nfor a complete list of nRF21540 Development Kit board hardware features.</p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>LED1 (green) = P0.13</p></li>\n<li><p>LED2 (green) = P0.14</p></li>\n<li><p>LED3 (green) = P0.15</p></li>\n<li><p>LED4 (green) = P0.16</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons\">\n<h4>Push buttons<a class=\"headerlink\" href=\"#push-buttons\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>BUTTON1 = SW1 = P0.11</p></li>\n<li><p>BUTTON2 = SW2 = P0.12</p></li>\n<li><p>BUTTON3 = SW3 = P0.24</p></li>\n<li><p>BUTTON4 = SW4 = P0.25</p></li>\n<li><p>BOOT = SW5 = boot/reset</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"front-end-module\">\n<h4>Front End Module<a class=\"headerlink\" href=\"#front-end-module\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>MOSI        = P1.13</p></li>\n<li><p>MISO        = P1.14</p></li>\n<li><p>CLOCK       = P1.15</p></li>\n<li><p>CHIP SELECT = P0.21</p></li>\n<li><p>PDN         = P0.23</p></li>\n<li><p>MODE        = P0.17</p></li>\n<li><p>RXEN        = P0.19</p></li>\n<li><p>ANTSEL      = P0.20</p></li>\n<li><p>TXEN        = P0.22</p></li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nrf21540dk_nrf52840</span></code> board configuration can be built,\nflashed, and debugged in the usual way. See <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details on building and running.</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D &lt;tty_device&gt; -b <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the board nRF21540 DK\ncan be found. For example, under Linux, <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/ttyACM0</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nrf21540dk_nrf52840 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-in-the-nrf21540-dk\">\n<h2>Testing the LEDs and buttons in the nRF21540 DK<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-in-the-nrf21540-dk\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">samples/basic/blinky</span>\n<span class=\"go\">samples/basic/button</span>\n</pre></div>\n</div>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/nrf21540dk_nrf52840/nrf21540dk_nrf52840.dts\">boards/arm/nrf21540dk_nrf52840/nrf21540dk_nrf52840.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"using-uart1\">\n<h2>Using UART1<a class=\"headerlink\" href=\"#using-uart1\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following approach can be used when an application needs to use\nmore than one UART for connecting peripheral devices:</p>\n<ol class=\"arabic\">\n<li><p>Add devicetree overlay file to the main directory of your application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>cat nrf21540dk_nrf52840.overlay\n<span class=\"go\">&amp;uart1 {</span>\n<span class=\"go\">  compatible = \"nordic,nrf-uarte\";</span>\n<span class=\"go\">  current-speed = &lt;115200&gt;;</span>\n<span class=\"go\">  status = \"okay\";</span>\n<span class=\"go\">  tx-pin = &lt;14&gt;;</span>\n<span class=\"go\">  rx-pin = &lt;16&gt;;</span>\n<span class=\"go\">};</span>\n</pre></div>\n</div>\n<p>In the overlay file above, pin P0.16 is used for RX and P0.14 is used for TX</p>\n</li>\n<li><p>Use the UART1 as <code class=\"docutils literal notranslate\"><span class=\"pre\">device_get_binding(DT_LABEL(DT_NODELABEL(uart1)))</span></code></p></li>\n</ol>\n<p>See <a class=\"reference internal\" href=\"../../../../guides/dts/howtos.html#set-devicetree-overlays\"><span class=\"std std-ref\">Set devicetree overlays</span></a> for further details.</p>\n<div class=\"section\" id=\"selecting-the-pins\">\n<h3>Selecting the pins<a class=\"headerlink\" href=\"#selecting-the-pins\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To select the pin numbers for tx-pin and rx-pin:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">tx-pin = &lt;pin_no&gt;</span>\n</pre></div>\n</div>\n<p>Open the <a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">nRF52840 Product Specification</a> <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id9\">3</a>, chapter 7 ‘Hardware and Layout’.\nIn the table 7.1.1 ‘aQFN73 ball assignments’ select the pins marked\n‘General purpose I/O’.  Note that pins marked as ‘low frequency I/O only’ can only be used\nin under-10KHz applications. They are not suitable for 115200 speed of UART.</p>\n<p>Translate the ‘Pin’ into number for devicetree by using the following formula:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pin_no</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\\<span class=\"o\">*</span><span class=\"mi\">32</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n</pre></div>\n</div>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> are from the Pin value in the table (Pb.a).\nFor example, for P0.1, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></code> and for P1.0, <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_no</span> <span class=\"pre\">=</span> <span class=\"pre\">32</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id3\">1</a>,<a href=\"#id4\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"https://infocenter.nordicsemi.com\">https://infocenter.nordicsemi.com</a></p>\n</dd>\n<dt class=\"label\" id=\"id5\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id6\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF21540\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF21540</a></p>\n</dd>\n<dt class=\"label\" id=\"id7\"><span class=\"brackets\">3</span><span class=\"fn-backref\">(<a href=\"#id8\">1</a>,<a href=\"#id9\">2</a>)</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf\">http://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.0.pdf</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "MCUX_FLASH", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram_l", "size": 32768}, {"label": "sram0", "size": 32768}], "main_ram_size": 32768, "gpio": {"count": 5, "instances": [{"label": "GPIO_0"}, {"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}]}, "uart": {"count": 3, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}]}, "can": {"count": 2, "instances": [{"label": "CAN_0"}, {"label": "CAN_1"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 3, "instances": [{"label": "ADC_0"}, {"label": "ADC_1"}, {"label": "ADC_2"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_0"}]}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "twr_ke18f", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP TWR-KE18F</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-twr-ke18f\">\n<span id=\"twr-ke18f\"></span><h1>NXP TWR-KE18F<a class=\"headerlink\" href=\"#nxp-twr-ke18f\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The TWR-KE18F is a development board for NXP Kinetis KE1xF 32-bit\nMCU-based platforms. The onboard OpenSDAv2 serial and debug adapter,\nrunning an open source bootloader, offers options for serial\ncommunication, flash programming, and run-control debugging.</p>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/TWR-KE18F-DEVICE.jpg\"><img alt=\"TWR-KE18F\" src=\"../../../../_images/TWR-KE18F-DEVICE.jpg\" style=\"width: 800px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">TWR-KE18F (Credit: NXP)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MKE18F512VLL16 MCU (up to 168 MHz, 512 KB flash memory, 64 KB RAM,\nand 100 Low profile Quad Flat Package (LQFP))</p></li>\n<li><p>3.3 V or 5 V MCU operation</p></li>\n<li><p>6-axis FXOS8700CQ digital accelerometer and magnetometer</p></li>\n<li><p>RGB LED</p></li>\n<li><p>Four user LEDs</p></li>\n<li><p>Two user push-buttons</p></li>\n<li><p>Potentiometer</p></li>\n<li><p>Thermistor</p></li>\n<li><p>Infrared port (IrDA)</p></li>\n<li><p>CAN pin header</p></li>\n<li><p>Flex I/O pin header</p></li>\n</ul>\n<p>For more information about the KE1xF SoC and the TWR-KE18F board, see\nthese NXP reference documents:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/kinetis-cortex-m-mcus/e-series5v-robustm0-plus-m4/kinetis-ke1xf-168mhz-performance-with-can-5v-microcontrollers-based-on-arm-cortex-m4:KE1xF\">KE1xF Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/KE1xFP100M168SF0.pdf\">KE1xF Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/reference-manual/KE1xFP100M168SF0RM.pdf\">KE1xF Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/TWR-KE18F\">TWR-KE18F Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/user-guide/TWRKE18FUG.pdf\">TWR-KE18F User Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=TWR-KE18F-SCH-DESIGNFILES\">TWR-KE18F Schematics</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The twr_ke18f board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>FLASH</p></td>\n<td><p>on-chip</p></td>\n<td><p>soc flash</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SENSOR</p></td>\n<td><p>off-chip</p></td>\n<td><p>fxos8700 polling;\ntrigger supported with H/W mods\nexplained below;</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI(M)</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>can</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WDT</p></td>\n<td><p>on-chip</p></td>\n<td><p>watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ACMP</p></td>\n<td><p>on-chip</p></td>\n<td><p>analog comparator</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/twr_ke18f/twr_ke18f_defconfig</span></code>.</p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KE18 SoC is configured to use the 8 MHz external oscillator on the\nboard with the on-chip PLL to generate a 120 MHz system clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The KE18 SoC has three UARTs. UART0 is configured for the console. The\nremaining UARTs are not used.</p>\n</div>\n<div class=\"section\" id=\"accelerometer-and-magnetometer\">\n<h3>Accelerometer and magnetometer<a class=\"headerlink\" href=\"#accelerometer-and-magnetometer\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The TWR-KE18F board by default only supports polling the FXOS8700\naccelerometer and magnetometer for sensor values\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_FXOS8700_TRIGGER_NONE=y</span></code>).</p>\n<p>In order to support FXOS8700 triggers (interrupts) the 0 ohm resistors\n<code class=\"docutils literal notranslate\"><span class=\"pre\">R47</span></code> and and <code class=\"docutils literal notranslate\"><span class=\"pre\">R57</span></code> must be mounted on the TWR-KE18F board. The\ndevicetree must also be modified to describe the FXOS8700 interrupt\nGPIOs:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/dts-v1/;\n\n&amp;fxos8700 {\n        int1-gpios = &lt;&amp;gpioa 14 0&gt;;\n        int2-gpios = &lt;&amp;gpioc 17 0&gt;;\n};\n</pre></div>\n</div>\n<p>Finally, a trigger option must be enabled in Kconfig (either\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FXOS8700_TRIGGER_GLOBAL_THREAD=y</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FXOS8700_TRIGGER_OWN_THREAD=y</span></code>).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>.</p>\n<p>Early versions of this board have an outdated version of the OpenSDA bootloader\nand require an update. Please see the <a class=\"reference external\" href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">DAPLink Bootloader Update</a> page for\ninstructions to update from the CMSIS-DAP bootloader to the DAPLink bootloader.</p>\n<div class=\"section\" id=\"option-1-opensda-daplink-onboard-debug-probe-recommended\">\n<h4>Option 1: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> (Recommended)<a class=\"headerlink\" href=\"#option-1-opensda-daplink-onboard-debug-probe-recommended\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/run-time-software/kinetis-developer-resources/ides-for-kinetis-mcus/opensda-serial-and-debug-adapter:OPENSDA#TWR-KE18F\">OpenSDA DAPLink TWR-KE18F Firmware</a>.</p>\n</div>\n<div class=\"section\" id=\"option-2-opensda-jlink-onboard-debug-probe\">\n<h4>Option 2: <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a><a class=\"headerlink\" href=\"#option-2-opensda-jlink-onboard-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Follow the instructions in <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-jlink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA J-Link Onboard Debug Probe</span></a> to program\nthe <a class=\"reference external\" href=\"https://www.segger.com/downloads/jlink/OpenSDA_TWR-KE18F\">OpenSDA J-Link Firmware for TWR-KE18F</a>.</p>\n<p>Add the arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_FLASH_RUNNER=jlink</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-DBOARD_DEBUG_RUNNER=jlink</span></code> when you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">west</span> <span class=\"pre\">build</span></code> to override the\ndefault runner from pyOCD to J-Link:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_ke18f samples/hello_world -- -DBOARD_FLASH_RUNNER=jlink -DBOARD_DEBUG_RUNNER=jlink</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console.</p>\n<p>Connect a USB cable from your PC to J2.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_ke18f samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW1 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! twr_ke18f</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b twr_ke18f samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, step through the application in your debugger, and you\nshould see the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-xxx-gxxxxxxxxxxxx *****</span>\n<span class=\"go\">Hello World! twr_ke18f</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "sram0", "size": 65536}, {"label": "ccm0", "size": 16384}], "main_ram_size": 65536, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 11, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_1"}, {"label": "PWM_4"}, {"label": "PWM_8"}, {"label": "PWM_20"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f303re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F303RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f303re\">\n<span id=\"nucleo-f303re-board\"></span><h1>ST Nucleo F303RE<a class=\"headerlink\" href=\"#st-nucleo-f303re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303RE board features an ARM Cortex-M4 based STM32F303RE\nmixed-signal MCU with FPU and DSP instructions capable of running at 72 MHz.\nHere are some highlights of the Nucleo F303RE board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>LSE crystal: 32.768 kHz crystal oscillator</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectors</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>One user LED</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f303re.jpg\"><img alt=\"Nucleo F303RE\" class=\"align-center\" src=\"../../../../_images/nucleo_f303re.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f303re.html\">Nucleo F303RE website</a>,\nand in the <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F303RET6 in QFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>72 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>512 MB Flash</p></li>\n<li><p>64 + 16 KB SRAM</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (4)</p></li>\n<li><p>Basic Timer</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>PWM channels (18)</p></li>\n<li><p>SPI/I2S (2)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>USART/UART (3/3)</p></li>\n<li><p>USB 2.0 FS with on-chip PHY</p></li>\n<li><p>CAN (2)</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>DMA channels (12)</p></li>\n<li><p>Capacitive sensing channels (18)</p></li>\n<li><p>12-bit ADC with 40 channels (4)</p></li>\n<li><p>12-bit D/A converter with two channels</p></li>\n<li><p>Analog comparator (7)</p></li>\n<li><p>Op amp (4)</p></li>\n<li><p>Capacitive sensing 24 channels</p></li>\n</ul>\n<p>More information about the STM32F303RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f303re.html\">STM32F303RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00043574.pdf\">STM32F303RE reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f303re.pdf\">STM32F303RE datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f302r8 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RTC</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f303re/nucleo_f303re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Nucleo F303RE Board has 5 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_connectors.png\"><img alt=\"Nucleo F303RE connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303RE board features an Arduino Uno V3 connector and a ST\nmorpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303RE System Clock can be driven by an internal or\nexternal oscillator, as well as by the main PLL clock. By default the\nSystem Clock is driven by the PLL clock at 72 MHz. The input to the\nPLL is an 8 MHz external clock supplied by the processor of the\non-board ST-LINK/V2-1 debugger/programmer.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303RE board has 2 UARTs. The Zephyr console output is assigned\nto UART2.  Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303RE board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 262144}], "main_flash_size": 262144, "memory": [{"label": "sram0", "size": 40960}, {"label": "ccm0", "size": 8192}], "main_ram_size": 40960, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 11, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_1"}, {"label": "PWM_4"}, {"label": "PWM_8"}, {"label": "PWM_20"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "stm32f3_disco", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST STM32F3 Discovery</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-stm32f3-discovery\">\n<span id=\"stm32f3-disco-board\"></span><h1>ST STM32F3 Discovery<a class=\"headerlink\" href=\"#st-stm32f3-discovery\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32F3DISCOVERY Discovery kit features an ARM Cortex-M4 based STM32F303VC\nMCU with everything required for beginners and experienced users to get\nstarted quickly. Here are some highlights of the STM32F3DISCOVERY board:</p>\n<ul>\n<li><p>STM32 microcontroller in LQFP100 package</p></li>\n<li><p>Extension header for all LQFP100 I/Os for quick connection to prototyping\nboard and easy probing</p></li>\n<li><p>On-board, ST-LINK/V2 for PCB version A or B or ST-LINK/V2-B for PCB version\nC and newer, debugger/programmer with SWD connector</p></li>\n<li><p>Board power supply: through USB bus or from an external 3 V or 5 V supply\nvoltage</p></li>\n<li><p>External application power supply: 3 V and 5 V</p></li>\n<li><p>Ten LEDs:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>3.3 V power on (LD1)</p></li>\n<li><p>USB communication (LD2)</p></li>\n<li><p>Eight user LEDs: red (LD3/LD10), blue (LD4/LD9), orange (LD5/LD9)\nand green (LD6/LD7)</p></li>\n</ul>\n</div></blockquote>\n</li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n<li><p>USB USER with Mini-B connector</p></li>\n<li><p>L3GD20 or I3G4250D, ST MEMS motion sensor, 3-axis digital output gyroscope</p></li>\n<li><p>LSM303DLHC or LSM303AGR, ST MEMS system-in-package featuring a 3D digital linear\nacceleration sensor and a 3D digital magnetic sensor;</p></li>\n</ul>\n<div class=\"admonition hint\">\n<p class=\"admonition-title\">Hint</p>\n<p>Recent PCB revisions (E and newer) are shiped with I3G4250D and LSM303AGR.</p>\n</div>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/stm32f3_disco.jpg\"><img alt=\"STM32F3DISCOVERY\" class=\"align-center\" src=\"../../../../_images/stm32f3_disco.jpg\" style=\"width: 350px; height: 531px;\"/></a>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/stm32f3discovery.html\">STM32F3DISCOVERY website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>STM32F3DISCOVERY Discovery kit provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F303VCT6 in LQFP100 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>72 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>256 KB Flash</p></li>\n<li><p>40 KB SRAM</p></li>\n<li><p>Routine booster: 8 Kbytes of SRAM on instruction and data bus</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>4x12-bit ADC with 39 channels</p></li>\n<li><p>2x12-bit D/A converters</p></li>\n<li><p>RTC</p></li>\n<li><p>General Purpose Timers (13)</p></li>\n<li><p>USART/UART (5)</p></li>\n<li><p>I2C (2)</p></li>\n<li><p>SPI (3)</p></li>\n<li><p>CAN</p></li>\n<li><p>USB 2.0 full speed interface</p></li>\n<li><p>Infrared transmitter</p></li>\n<li><p>DMA Controller</p></li>\n</ul>\n<dl class=\"simple\">\n<dt>More information about STM32F303VC can be found here:</dt><dd><ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f303vc.html\">STM32F303VC on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00043574.pdf\">STM32F303xC reference manual</a></p></li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr stm32f3_disco board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN</p></td>\n<td><p>on-chip</p></td>\n<td><p>CAN</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IWDG</p></td>\n<td><p>on-chip</p></td>\n<td><p>Independent WatchDoG</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>adc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>dac</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>DMA</p></td>\n<td><p>on-chip</p></td>\n<td><p>Direct Memory Access</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on Zephyr porting.</p>\n<p>The default configuration can be found in the defconfig file:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/stm32f3_disco/stm32f3_disco_defconfig</span></code></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"pin-mapping\">\n<h3>Pin Mapping<a class=\"headerlink\" href=\"#pin-mapping\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY Discovery kit has 6 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00063382.pdf\">STM32F3DISCOVERY board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"rst-columns simple\">\n<li><p>UART_1_TX : PC4</p></li>\n<li><p>UART_1_RX : PC5</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>I2C1_SCL : PB6</p></li>\n<li><p>I2C1_SDA : PB7</p></li>\n<li><p>I2C2_SCL : PA9</p></li>\n<li><p>I2C2_SDA : PA10</p></li>\n<li><p>SPI1_NSS : PA4</p></li>\n<li><p>SPI1_SCK : PA5</p></li>\n<li><p>SPI1_MISO : PA6</p></li>\n<li><p>SPI1_MOSI : PA7</p></li>\n<li><p>SPI2_NSS : PB12</p></li>\n<li><p>SPI2_SCK : PB13</p></li>\n<li><p>SPI2_MISO : PB14</p></li>\n<li><p>SPI2_MOSI : PB15</p></li>\n<li><p>CAN1_RX : PD0</p></li>\n<li><p>CAN1_TX : PD1</p></li>\n<li><p>USB_DM : PA11</p></li>\n<li><p>USB_DP : PA12</p></li>\n<li><p>USER_PB : PA0</p></li>\n<li><p>LD3 : PE9</p></li>\n<li><p>LD4 : PE8</p></li>\n<li><p>LD5 : PE10</p></li>\n<li><p>LD6 : PE15</p></li>\n<li><p>LD7 : PE11</p></li>\n<li><p>LD8 : PE14</p></li>\n<li><p>LD9 : PE12</p></li>\n<li><p>LD10 : PE13</p></li>\n<li><p>PWM : PA8</p></li>\n<li><p>ADC1 : PA0</p></li>\n<li><p>DAC1 : PA4</p></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY System Clock could be driven by internal or external\noscillator, as well as main PLL clock. By default System clock is driven\nby PLL clock at 72 MHz, driven by 8 MHz MCO from the ST Link.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY Discovery kit has up to 5 UARTs. The Zephyr console output\nis assigned to UART1. Default settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"i2c\">\n<h3>I2C<a class=\"headerlink\" href=\"#i2c\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY has up to 2 I2Cs. I2C1 is connected to the LSM303DLHC and is\nan ultra-compact low-power system-in-package featuring a 3D digital linear\nacceleration sensor and a 3D digital magnetic sensor.</p>\n</div>\n<div class=\"section\" id=\"usb\">\n<h3>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY has a USB 2.0 full-speed device interface available through\nits mini USB connector (USB USER).</p>\n</div>\n<div class=\"section\" id=\"can\">\n<h3>CAN<a class=\"headerlink\" href=\"#can\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The STM32F3DISCOVERY does not have an onboard CAN transceiver. In\norder to use the CAN bus on the this board, an external CAN bus\ntranceiver must be connected to <code class=\"docutils literal notranslate\"><span class=\"pre\">PD0</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">CAN1_RX</span></code>) and <code class=\"docutils literal notranslate\"><span class=\"pre\">PD1</span></code>\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">CAN1_TX</span></code>).</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>STM32F3DISCOVERY Discovery kit includes a ST-LINK/V2 or ST-LINK/V2-B embedded\ndebug tool interface.</p>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">stm32f3_disco</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing-an-application-to-stm32f3discovery\">\n<h4>Flashing an application to STM32F3DISCOVERY<a class=\"headerlink\" href=\"#flashing-an-application-to-stm32f3discovery\" title=\"Permalink to this headline\">¶</a></h4>\n<p>First, connect the STM32F3DISCOVERY Discovery kit to your host computer using\nthe USB port to prepare it for flashing. Then build and flash your application.</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f3_disco samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>In case you are using a recent PCB revision (E or newer), you have to use an\nadapted board definition:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f3_disco@E samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Run a serial host program to connect with your board. For PCB version A or B a\nTTL(3.3V) serial adapter is required. For PCB version C and newer a Virtual Com\nPort (VCP) is available on the  USB ST-LINK port.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -D /dev/&lt;tty device&gt;\n</pre></div>\n</div>\n<p>Replace &lt;tty_device&gt; with the port where the STM32F3DISCOVERY board can be\nfound. For example, under Linux, /dev/ttyUSB0.</p>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Hello World! arm</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f3_disco samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>Again you have to use the adapted command for newer PCB revisions (E and newer):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b stm32f3_disco@E samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 65536}, {"label": "sram0_bsd", "size": 65536}, {"label": "sram0_ns", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf9160_innblue22ns", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 524288}], "main_flash_size": 524288, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}], "main_ram_size": 131072, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 8, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f446re", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F446RE</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f446re\">\n<span id=\"nucleo-f446re-board\"></span><h1>ST Nucleo F446RE<a class=\"headerlink\" href=\"#st-nucleo-f446re\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F446RE board features an ARM Cortex-M4 based STM32F446RE MCU\nwith a wide range of connectivity support and configurations. Here are\nsome highlights of the Nucleo F446RE board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in QFP64 package</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino Uno V3 connectivity</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>USB VBUS or external source(3.3V, 5V, 7 - 12V)</p></li>\n<li><p>Power management access point</p></li>\n</ul>\n</li>\n<li><p>Three LEDs: USB communication (LD1), user LED (LD2), power LED (LD3)</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f446re.png\"><img alt=\"Nucleo F446RE\" class=\"align-center\" src=\"../../../../_images/nucleo_f446re.png\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f446re.html\">Nucleo F446RE website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F446RE provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F446RET6 in LQFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex®-M4 CPU with FPU</p></li>\n<li><p>Adaptive real-time accelerator (ART Accelerator)</p></li>\n<li><p>180 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>512 KB Flash</p></li>\n<li><p>128 KB SRAM</p></li>\n<li><p>10 General purpose timers</p></li>\n<li><p>2 Advanced control timers</p></li>\n<li><p>2 basic timers</p></li>\n<li><p>SPI(4)</p></li>\n<li><p>I2C(3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(2)</p></li>\n<li><p>USB OTG Full Speed and High Speed</p></li>\n<li><p>CAN(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(1)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO(50) with external interrupt capability</p></li>\n<li><p>12-bit ADC(3) with 16 channels</p></li>\n<li><p>12-bit DAC with 2 channels</p></li>\n</ul>\n<p>More information about STM32F446RE can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f446re.html\">STM32F446RE on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00135183.pdf\">STM32F446 reference manual</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f446re board configuration supports the following hardware features:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 60%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Backup SRAM</p></td>\n<td><p>on-chip</p></td>\n<td><p>Backup SRAM</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>CAN 1/2</p></td>\n<td><p>on-chip</p></td>\n<td><p>Controller Area Network</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f446re/nucleo_f446re_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F446RE Board has 8 GPIO controllers. These controllers are responsible for pin muxing,\ninput/output, pull-up, etc.</p>\n<div class=\"section\" id=\"available-pins\">\n<h4>Available pins:<a class=\"headerlink\" href=\"#available-pins\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f446re_arduino_top_left.png\"><img alt=\"Nucleo F446RE Arduino connectors (top left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f446re_arduino_top_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f446re_arduino_top_right.png\"><img alt=\"Nucleo F446RE Arduino connectors (top right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f446re_arduino_top_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f446re_morpho_top_left.png\"><img alt=\"Nucleo F446RE Morpho connectors (top left)\" class=\"align-center\" src=\"../../../../_images/nucleo_f446re_morpho_top_left.png\" style=\"width: 720px; height: 540px;\"/></a>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f446re_morpho_top_right.png\"><img alt=\"Nucleo F446RE Morpho connectors (top right)\" class=\"align-center\" src=\"../../../../_images/nucleo_f446re_morpho_top_right.png\" style=\"width: 720px; height: 540px;\"/></a>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>UART_1_TX : PB6</p></li>\n<li><p>UART_1_RX : PB7</p></li>\n<li><p>UART_2_TX : PA2</p></li>\n<li><p>UART_2_RX : PA3</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PA5</p></li>\n<li><p>I2C1_SDA  : PB9</p></li>\n<li><p>I2C1_SCL  : PB8</p></li>\n<li><p>I2C2_SDA  : PB3</p></li>\n<li><p>I2C2_SCL  : PB10</p></li>\n<li><p>I2C3_SDA  : PB4</p></li>\n<li><p>I2C3_SCL  : PA8</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F446RE System Clock could be driven by an internal or external oscillator,\nas well as the main PLL clock. By default, the System clock is driven by the PLL clock at 84MHz,\ndriven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F446RE board has 2 UARTs and 4 USARTs. The Zephyr console output is assigned to UART2.\nDefault settings are 115200 8N1.</p>\n</div>\n<div class=\"section\" id=\"backup-sram\">\n<h4>Backup SRAM<a class=\"headerlink\" href=\"#backup-sram\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to test backup SRAM you may want to disconnect VBAT from VDD. You can\ndo it by removing <code class=\"docutils literal notranslate\"><span class=\"pre\">SB45</span></code> jumper on the back side of the board.</p>\n</div>\n<div class=\"section\" id=\"controller-area-network\">\n<h4>Controller Area Network<a class=\"headerlink\" href=\"#controller-area-network\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The TX/RX wires connected with D14/D15 of CN5 connector. Thus the board can be\nused with <a class=\"reference external\" href=\"https://www.waveshare.com/wiki/RS485_CAN_Shield\">RS485 CAN Shield</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f446re</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F446RE board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in the Zephyr SDK.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f446re\">\n<h4>Flashing an application to Nucleo F446RE<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f446re\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f446re samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! arm\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f446re samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 12288}, {"label": "ccm0", "size": 8192}], "main_ram_size": 12288, "gpio": {"count": 6, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}, {"label": "GPIOE"}]}, "i2c": {"count": 2, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 11, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_1"}, {"label": "PWM_4"}, {"label": "PWM_8"}, {"label": "PWM_20"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f303k8", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F303K8</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f303k8\">\n<span id=\"nucleo-f303k8-board\"></span><h1>ST Nucleo F303K8<a class=\"headerlink\" href=\"#st-nucleo-f303k8\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303K8 board features an ARM Cortex-M4 based STM32F303K8\nmixed-signal MCU with FPU and DSP instructions capable of running at 72 MHz.\nHere are some highlights of the Nucleo F303K8 board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP32 package</p></li>\n<li><p>one type of extension resources:</p></li>\n<li><p>Arduino™ Nano V3 connectivity support</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p></li>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V, 5V and 7 - 12 V</p></li>\n<li><p>One user LED</p></li>\n<li><p>One push-buttons: RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f303k8.jpg\"><img alt=\"Nucleo F303K8\" class=\"align-center\" src=\"../../../../_images/nucleo_f303k8.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-F303K8.html\">Nucleo F303K8 website</a>,\nand in the <a class=\"reference external\" href=\"https://www.st.com/resource/en/user_manual/dm00231744-stm32-nucleo32-boards-mb1180-stmicroelectronics.pdf\">STM32 Nucleo-32 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303K8 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F303K8T6 in LQFP32 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>72 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>64 MB Flash</p></li>\n<li><p>12 KB SRAM</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (5)</p></li>\n<li><p>Basic Timer (2)</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>PWM channels (12)</p></li>\n<li><p>SPI/I2S (1)</p></li>\n<li><p>I2C (1)</p></li>\n<li><p>USART/UART (2)</p></li>\n<li><p>CAN (1)</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>DMA channels (7)</p></li>\n<li><p>Capacitive sensing channels (18)</p></li>\n<li><p>12-bit ADC with 21 channels</p></li>\n<li><p>12-bit D/A converter</p></li>\n<li><p>Analog comparator (3)</p></li>\n<li><p>Op amp</p></li>\n</ul>\n<p>More information about the STM32F303K8 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32F303K8.html\">STM32F303K8 on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/reference_manual/dm00043574-stm32f303xbcde-stm32f303x68-stm32f328x8-stm32f358xc-stm32f398xe-advanced-armbased-mcus-stmicroelectronics.pdf\">STM32F303K8 reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.st.com/resource/en/datasheet/stm32f303k8.pdf\">STM32F303K8 datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f303k8 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f303k8/nucleo_f303k8_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Nucleo F303K8 Board has 1 GPIO controller. This controllers is responsible\nfor input/output, pull-up, etc.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f303k8_pinout.png\"><img alt=\"Nucleo F303K8 connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f303k8_pinout.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303K8 board features an Arduino Zero V3 connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA15 (ST-Link Virtual Port Com)</p></li>\n<li><p>I2C1 SCL/SDA : PB7/PB6</p></li>\n<li><p>SPI1 CS/SCK/MISO/MOSI : PA_4/PA_5/PB_4/PA_7</p></li>\n<li><p>LD2       : PB3</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303K8 System Clock can be driven by an internal or\nexternal oscillator, as well as by the main PLL clock. By default the\nSystem Clock is driven by the PLL clock at 72 MHz. The input to the\nPLL is an 8 MHz internal clock supply.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F303K8 board has 2 UARTs. The Zephyr console output is assigned\nto UART2.  Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F303K8 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "ddr0", "size": 1342177280}], "main_ram_size": 1342177280, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}]}, "spi": {"count": 3, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "hsdk", "arch": "arc", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARC Boards</a> »</li>\n<li>DesignWare(R) ARC(R) HS Development Kit</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"designware-r-arc-r-hs-development-kit\">\n<span id=\"hsdk\"></span><h1>DesignWare(R) ARC(R) HS Development Kit<a class=\"headerlink\" href=\"#designware-r-arc-r-hs-development-kit\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The DesignWare(R) ARC(R) HS Development Kit is a ready-to-use platform for\nrapid software development on the ARC HS3x family of processors. It supports\nsingle-core and multi-core ARC HS34, HS36 and HS38 processors and offers a wide\nrange of interfaces including Ethernet, WiFi, Bluetooth, USB, SDIO, I2C, SPI,\nUART, I2S, ADC, PWM and GPIO. A Vivante GPU is also contained in the ARC\nDevelopment System SoC. This allows developers to build and debug complex\nsoftware on a comprehensive hardware platform</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/hsdk.jpg\"><img alt=\"DesignWare(R) ARC(R) HS Development Kit (synopsys.com)\" class=\"align-center\" src=\"../../../../_images/hsdk.jpg\" style=\"width: 442px;\"/></a>\n<p>For details about the board, see: <a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc-hs-development-kit\">ARC HS Development Kit\n(HSDK)</a></p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The ARC HSDK has 24 general GPIOs, which divided into 8 groups named from GPIO_SEL_0 to GPIO_SEL_7.\nEach sel can configured for different functions, such as: GPIO, UART, SPI, I2C and PWM. We can program\nCREG_GPIO_MUX register to do configuration for each sel. Tables below show the bit definition for\nCREG_GPIO_MUX register and the details configuration for each pin.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 18%\"/>\n<col style=\"width: 43%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Bit</p></td>\n<td><p>Name</p></td>\n<td><p>Access</p></td>\n<td><p>Reset value</p></td>\n<td><p>Description</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>2:0</p></td>\n<td><p>GPIO_SEL_0</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[3:0]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>5:3</p></td>\n<td><p>GPIO_SEL_1</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[7:4]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>8:6</p></td>\n<td><p>GPIO_SEL_2</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[11:8]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11:9</p></td>\n<td><p>GPIO_SEL_3</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[15:12]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14:12</p></td>\n<td><p>GPIO_SEL_4</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[17:16]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>17:15</p></td>\n<td><p>GPIO_SEL_5</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[19:18]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>20:18</p></td>\n<td><p>GPIO_SEL_6</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[21:20]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23:21</p></td>\n<td><p>GPIO_SEL_7</p></td>\n<td><p>RW</p></td>\n<td><p>0x0*</p></td>\n<td><p>GPIO mux select for gpio[23:22]</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 6%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 11%\"/>\n<col style=\"width: 9%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 12%\"/>\n<col style=\"width: 10%\"/>\n<col style=\"width: 12%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>SELS</p></td>\n<td><p>GPIO PINS</p></td>\n<td><p>FUN0</p></td>\n<td><p>FUN1</p></td>\n<td><p>FUN2</p></td>\n<td><p>FUN3</p></td>\n<td><p>FUN4</p></td>\n<td><p>FUN5</p></td>\n<td><p>FUN6</p></td>\n<td><p>FUN7</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"4\"><p>SEL0</p></td>\n<td><p>0</p></td>\n<td><p>gpio[0]</p></td>\n<td><p>uart0_cts</p></td>\n<td><p>spi1_cs[0]</p></td>\n<td><p>gpio[0]</p></td>\n<td><p>gpio[0]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>pwm_ch[1]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>1</p></td>\n<td><p>gpio[1]</p></td>\n<td><p>uart0_txd</p></td>\n<td><p>spi1_mosi</p></td>\n<td><p>gpio[1]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>gpio[1]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>pwm_ch[0]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>2</p></td>\n<td><p>gpio[2]</p></td>\n<td><p>uart0_rxd</p></td>\n<td><p>spi1 _miso</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[2]</p></td>\n<td><p>gpio[2]</p></td>\n<td><p>gpio[2]</p></td>\n<td><p>gpio[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>3</p></td>\n<td><p>gpio[3]</p></td>\n<td><p>uart0_rts</p></td>\n<td><p>spi1_clk</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>gpio[3]</p></td>\n<td><p>gpio[3]</p></td>\n<td><p>gpio[3]</p></td>\n<td><p>gpio[3]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"4\"><p>SEL1</p></td>\n<td><p>4</p></td>\n<td><p>gpio[4]</p></td>\n<td><p>uart1_cts</p></td>\n<td><p>spi2_cs[0]</p></td>\n<td><p>gpio[4]</p></td>\n<td><p>gpio[4]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><p>pwm_ch[3]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>5</p></td>\n<td><p>gpio[5]</p></td>\n<td><p>uart1_txd</p></td>\n<td><p>spi2_mosi</p></td>\n<td><p>gpio[5]</p></td>\n<td><p>pwm_ch[2]</p></td>\n<td><p>gpio[5]</p></td>\n<td><p>pwm_ch[2]</p></td>\n<td><p>pwm_ch[2]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>6</p></td>\n<td><p>gpio[6]</p></td>\n<td><p>uart1_rxd</p></td>\n<td><p>spi2_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[6]</p></td>\n<td><p>gpio[6]</p></td>\n<td><p>gpio[6]</p></td>\n<td><p>gpio[6]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>7</p></td>\n<td><p>gpio[7]</p></td>\n<td><p>uart1_rts</p></td>\n<td><p>spi2_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[7]</p></td>\n<td><p>gpio[7]</p></td>\n<td><p>gpio[7]</p></td>\n<td><p>gpio[7]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"4\"><p>SEL2</p></td>\n<td><p>8</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>uart2_cts</p></td>\n<td><p>spi1_cs[1]</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>pwm_ch[2]</p></td>\n<td><p>pwm_ch[2]</p></td>\n<td><p>pwm_ch[5]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>9</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>uart2_txd</p></td>\n<td><p>spi1_mosi</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><p>pwm_ch[4]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>10</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><p>spi1_miso</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>gpio[10]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>11</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>uart2_rts</p></td>\n<td><p>spi1_clk</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>gpio[11]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"4\"><p>SEL3</p></td>\n<td><p>12</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>uart0_cts</p></td>\n<td><p>spi2_cs[1]</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>pwm_ch[7]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>13</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>uart0_txd</p></td>\n<td><p>spi2_mosi</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>pwm_ch[6]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>14</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>uart0_rxd</p></td>\n<td><p>spi2_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>gpio[14]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>15</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>uart0_rts</p></td>\n<td><p>spi2_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>gpio[15]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"2\"><p>SEL4</p></td>\n<td><p>16</p></td>\n<td><p>gpio[16]</p></td>\n<td><p>uart1_txd</p></td>\n<td><p>spi1_cs[2]</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[16]</p></td>\n<td><p>pwm_fault_0</p></td>\n<td><p>gpio[16]</p></td>\n<td><p>pwm_fault_0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>17</p></td>\n<td><p>gpio[17]</p></td>\n<td><p>uart1_rxd</p></td>\n<td><p>spi1_mosi</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>pwm_ch[5]</p></td>\n<td><p>pwm_ch[5]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"2\"><p>SEL5</p></td>\n<td><p>18</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>uart2_txd</p></td>\n<td><p>spi1_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>gpio[18]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>19</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><p>spi1_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>gpio[19]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"2\"><p>SEL6</p></td>\n<td><p>20</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>uart0_txd</p></td>\n<td><p>spi2_cs[2]</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>pwm_fault_1</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>pwm_fault_1</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>21</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>uart0_rxd</p></td>\n<td><p>spi2_mosi</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>pwm_ch[3]</p></td>\n<td><p>pwm_ch[3]</p></td>\n</tr>\n<tr class=\"row-even\"><td rowspan=\"2\"><p>SEL7</p></td>\n<td><p>22</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>uart2_txd</p></td>\n<td><p>spi2_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>23</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><p>spi2_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"digilent-pmod\">\n<h3>Digilent Pmod<a class=\"headerlink\" href=\"#digilent-pmod\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC HSDK features two 12-pin Pmod connectors Pmod_A and Pmod_B and one 6-pin Pmod connector Pmod_C.\nThe functionality of the Pmod connectors is programmable and includes GPIO, UART, SPI, I2C and PWM.\nThe location of the pins on the Pmod connectors is shown in Figure below. Detailed pin descriptions\ndepending on the pin multiplexer settings are provided in the subsequent sections.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/pinout_diagram_of_the_pmod.jpg\"><img alt=\"Pinout Diagram of the Pmod\" class=\"align-center\" src=\"../../../../_images/pinout_diagram_of_the_pmod.jpg\" style=\"width: 442px;\"/></a>\n<div class=\"section\" id=\"pmod-a-connector\">\n<h4>Pmod_A Connector<a class=\"headerlink\" href=\"#pmod-a-connector\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Table below lists the pin assignment of valid protocols that can be multiplexed on the Pmod_A\nconnector. The GPIO column is the default assignment after Reset.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 8%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 16%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 16%\"/>\n<col style=\"width: 14%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pin</p></td>\n<td><p>GPIO</p></td>\n<td><p>UART</p></td>\n<td><p>SPI</p></td>\n<td><p>I2C</p></td>\n<td><p>PWM_1</p></td>\n<td><p>PWM_2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A1</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>uart2_cts</p></td>\n<td><p>spi1_cs[1]</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>pwm_ch[2]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A2</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>uart2_txd</p></td>\n<td><p>spi1_mosi</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><p>gpio[9]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A3</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><p>spi1_miso</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[10]</p></td>\n<td><p>gpio[10]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A4</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>uart2_rts</p></td>\n<td><p>spi1_clk</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>gpio[11]</p></td>\n<td><p>gpio[11]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A5</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A6</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A7</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>gpio[20]</p></td>\n<td><p>gpio[20]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A8</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>gpio[21]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A9</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A10</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>A11</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>A12</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pmod-b-connector\">\n<h4>Pmod_B Connector<a class=\"headerlink\" href=\"#pmod-b-connector\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Table below lists the pin assignment of valid protocols that can be multiplexed on the Pmod_B\nconnector. The GPIO column is the default assignment after Reset.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 8%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 16%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 14%\"/>\n<col style=\"width: 16%\"/>\n<col style=\"width: 14%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pin</p></td>\n<td><p>GPIO</p></td>\n<td><p>UART</p></td>\n<td><p>SPI</p></td>\n<td><p>I2C</p></td>\n<td><p>PWM_1</p></td>\n<td><p>PWM_2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B1</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>uart0_cts</p></td>\n<td><p>spi2_cs[1]</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>pwm_ch[0]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B2</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>uart0_txd</p></td>\n<td><p>spi2_mosi</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>gpio[13]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B3</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>uart0_rxd</p></td>\n<td><p>spi2_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[14]</p></td>\n<td><p>gpio[14]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B4</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>uart0_rts</p></td>\n<td><p>spi2_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[15]</p></td>\n<td><p>gpio[15]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B5</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B6</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B7</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>gpio[22]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B8</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>gpio[23]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B9</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B10</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n<td><p>n.c.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>B11</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>B12</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"pmod-c-connector\">\n<h4>Pmod_C Connector<a class=\"headerlink\" href=\"#pmod-c-connector\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Table below lists the pin assignment of valid protocols that can be multiplexed on the Pmod_C\nconnector. The GPIO column is the default assignment after Reset.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 9%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 19%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 17%\"/>\n<col style=\"width: 17%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pin</p></td>\n<td><p>GPIO</p></td>\n<td><p>UART</p></td>\n<td><p>SPI</p></td>\n<td><p>I2C</p></td>\n<td><p>PWM</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>C1</p></td>\n<td><p>gpio[16]</p></td>\n<td><p>uart1_txd</p></td>\n<td><p>spi1_cs[2]</p></td>\n<td><p>i2c1_scl</p></td>\n<td><p>gpio[16]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>C2</p></td>\n<td><p>gpio[17]</p></td>\n<td><p>uart1_rxd</p></td>\n<td><p>spi1_mosi</p></td>\n<td><p>i2c1_sda</p></td>\n<td><p>pwm_ch[0]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>C3</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>uart2_txd</p></td>\n<td><p>spi1_miso</p></td>\n<td><p>i2c2_scl</p></td>\n<td><p>gpio[18]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>C4</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><p>spi1_clk</p></td>\n<td><p>i2c2_sda</p></td>\n<td><p>gpio[19]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>C5</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n<td><p>GND</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>C6</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n<td><p>3V3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"mikrobus\">\n<h3>Mikrobus<a class=\"headerlink\" href=\"#mikrobus\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC HSDK features a set of MikroBUS headers. Figure below shows the relevant function assignments,\nfully compatible with the MikroBUS standard. Table below shows the pin assignment on the I/O Multiplexer.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mikrobus_header.jpg\"><img alt=\"mikrobus header\" class=\"align-center\" src=\"../../../../_images/mikrobus_header.jpg\" style=\"width: 442px;\"/></a>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 17%\"/>\n<col style=\"width: 41%\"/>\n<col style=\"width: 15%\"/>\n<col style=\"width: 27%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pin</p></td>\n<td><p>I/O</p></td>\n<td><p>Pin</p></td>\n<td><p>I/O</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>AN</p></td>\n<td><p>ADC VIN6*</p></td>\n<td><p>PWM</p></td>\n<td><p>pwm_ch[0]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>RST</p></td>\n<td><p>GPX_Port0_bit1</p></td>\n<td><p>INT</p></td>\n<td><p>gpio[16]</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>CS</p></td>\n<td><p>spi2_cs[1]</p></td>\n<td><p>RX</p></td>\n<td><p>uart2_rxd</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SCK</p></td>\n<td><p>spi2_clk</p></td>\n<td><p>TX</p></td>\n<td><p>uart2_txd</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>MISO</p></td>\n<td><p>spi2_miso</p></td>\n<td><p>SCL</p></td>\n<td><p>i2c2_scl</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>MOSI</p></td>\n<td><p>spi2_mosi</p></td>\n<td><p>SDA</p></td>\n<td><p>i2c2_sda</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>ADC VIN6 is available through the on-board ADC and is\nread though SPI0 using SPI chip select 1.</p>\n</div>\n</div>\n<div class=\"section\" id=\"arduino\">\n<h3>Arduino<a class=\"headerlink\" href=\"#arduino\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC HSDK provides an Arduino shield interface. Figure below shows the relevant\nfunction assignments. The Arduino shield interface is compatible with the Arduino UNO\nR3 with the following exceptions: 5 Volt shields are not supported, the IOREF voltage on\nthe ARC HSDK board is fixed to 3V3. Note that the ICSP header is also not available. Most\nshields do not require this ICSP header as the SPI master interface on this ICSP header\nis also available on the IO10 to IO13 pins.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/arduino_shield_interface.jpg\"><img alt=\"arduino shield interface\" class=\"align-center\" src=\"../../../../_images/arduino_shield_interface.jpg\" style=\"width: 442px;\"/></a>\n<p>Table below shows the pin assignment on the I/O Multiplexer. Multiplexing is controlled by software\nusing the CREG_GPIO_MUX register (see Pinmux ). After a reset, all ports are configured as GPIO inputs.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 15%\"/>\n<col style=\"width: 25%\"/>\n<col style=\"width: 35%\"/>\n<col style=\"width: 25%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pin</p></td>\n<td><p>I/O-1</p></td>\n<td><p>I/O-2</p></td>\n<td><p>I/O-3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>AD0</p></td>\n<td><p>ADC VIN0*</p></td>\n<td><p>GPX_port0_bit2</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>AD1</p></td>\n<td><p>ADC VIN1*</p></td>\n<td><p>GPX_port0_bit3</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>AD2</p></td>\n<td><p>ADC VIN2*</p></td>\n<td><p>GPX_port0_bit4</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>AD3</p></td>\n<td><p>ADC VIN3*</p></td>\n<td><p>GPX_port0_bit5</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>AD4</p></td>\n<td><p>ADC VIN4*</p></td>\n<td><p>gpio[18]</p></td>\n<td><p>i2c2_sda</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>AD5</p></td>\n<td><p>ADC VIN5*</p></td>\n<td><p>gpio[19]</p></td>\n<td><p>i2c2_scl</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IO0</p></td>\n<td><p>gpio[23]</p></td>\n<td><p>uart2_rxd</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO1</p></td>\n<td><p>gpio[22]</p></td>\n<td><p>uart2_txd</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>IO2</p></td>\n<td><p>gpio[16]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO3</p></td>\n<td><p>gpio[17]</p></td>\n<td><p>pwm_ch[5]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>IO4</p></td>\n<td><p>gpio[11]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO5</p></td>\n<td><p>gpio[9]</p></td>\n<td><p>pwm_ch[4]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>IO6</p></td>\n<td><p>gpio[21]</p></td>\n<td><p>pwm_ch[3]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO7</p></td>\n<td><p>gpio[20]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>IO8</p></td>\n<td><p>gpio[10]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO9</p></td>\n<td><p>gpio[8]</p></td>\n<td><p>pwm_ch[2]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n</tr>\n<tr class=\"row-even\"><td><p>IO10</p></td>\n<td><p>gpio[12]</p></td>\n<td><p>pwm_ch[0]</p></td>\n<td><p>spi2_cs[1]</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO11</p></td>\n<td><p>gpio[13]</p></td>\n<td><p>pwm_ch[6]</p></td>\n<td><p>spi2_mosi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>IO12</p></td>\n<td><p>gpio[14]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>spi2_miso</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>IO13</p></td>\n<td><p>gpio[15]</p></td>\n<td><ul class=\"simple\">\n<li></li>\n</ul>\n</td>\n<td><p>spi2_clk</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"i-o-expander\">\n<h3>I/O expander<a class=\"headerlink\" href=\"#i-o-expander\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC HSDK board includes a CY8C9520A I/O expander from <a class=\"reference external\" href=\"https://www.cypress.com/file/37971/download\">Cypress CY8C9520A</a>. The I/O\nexpander offers additional GPIO signals and board control signals and can be accessed\nthrough the on-board I2C bus, we have implemented a basic driver for it.\nTables below shows an overview of relevant I/O signals.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 21%\"/>\n<col style=\"width: 79%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>Pins</p></td>\n<td><p>Usage</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>port0_bit0</p></td>\n<td><p>RS9113 Bluetooth I2S RX enable (active low)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>port0_bit1</p></td>\n<td><p>mikroBUS Reset (active low)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>port0_bit2</p></td>\n<td><p>GPIO for Arduino AD0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>port0_bit3</p></td>\n<td><p>GPIO for Arduino AD1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>port0_bit4</p></td>\n<td><p>GPIO for Arduino AD2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>port0_bit5</p></td>\n<td><p>GPIO for Arduino AD3</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>port1_bit4</p></td>\n<td><p>On-board user LED0</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>port1_bit5</p></td>\n<td><p>On-board user LED1</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>port1_bit6</p></td>\n<td><p>On-board user LED2</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>port1_bit7</p></td>\n<td><p>On-board user LED3</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"on-board-user-leds\">\n<h3>On-board user LEDS<a class=\"headerlink\" href=\"#on-board-user-leds\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The ARC HSDK includes 4 user LEDs(active high), which can be controlled through the I/O expander pins.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 29%\"/>\n<col style=\"width: 71%\"/>\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p>LEDs</p></td>\n<td><p>PINs</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED0</p></td>\n<td><p>GPX_port1_bit4</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED1</p></td>\n<td><p>GPX_port1_bit5</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>LED2</p></td>\n<td><p>GPX_port1_bit6</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>LED3</p></td>\n<td><p>GPX_port1_bit7</p></td>\n</tr>\n</tbody>\n</table>\n<p>For hardware feature details, refer to : <a class=\"reference external\" href=\"https://www.synopsys.com/dw/ipdir.php?ds=arc-hs-development-kit\">Designware HS Development Kit website</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"section\" id=\"required-hardware-and-software\">\n<h3>Required Hardware and Software<a class=\"headerlink\" href=\"#required-hardware-and-software\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To use Zephyr RTOS applications on the HS Development Kit board, a few\nadditional pieces of hardware are required.</p>\n<ul class=\"simple\">\n<li><p>A micro USB cable provides USB-JTAG debug and USB-UART communication\nto the board</p></li>\n<li><p>A universal switching power adaptor (110-240V\nAC to 12V DC), provided in the package, provides power to the board.</p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../getting_started/installation_linux.html#zephyr-sdk\"><span class=\"std std-ref\">The Zephyr SDK</span></a></p></li>\n<li><p>Terminal emulator software for use with the USB-UART. Suggestion:\n<a class=\"reference external\" href=\"http://www.putty.org\">Putty Website</a>.</p></li>\n<li><p>(optional) A collection of Pmods, Arduino modules, or Mikro modules.\nSee <a class=\"reference external\" href=\"http://store.digilentinc.com/pmod-modules\">Digilent Pmod Modules</a> or develop your custom interfaces to attach\nto the Pmod connector.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-the-arc-hs-development-kit\">\n<h3>Set up the ARC HS Development Kit<a class=\"headerlink\" href=\"#set-up-the-arc-hs-development-kit\" title=\"Permalink to this headline\">¶</a></h3>\n<p>To run Zephyr application on IoT Development Kit, you need to\nset up the board correctly.</p>\n<ul class=\"simple\">\n<li><p>Connect the digilent USB cable from your host to the board.</p></li>\n<li><p>Connect the 12V DC power supply to your board</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"set-up-zephyr-software\">\n<h3>Set up Zephyr Software<a class=\"headerlink\" href=\"#set-up-zephyr-software\" title=\"Permalink to this headline\">¶</a></h3>\n</div>\n<div class=\"section\" id=\"building-sample-applications\">\n<h3>Building Sample Applications<a class=\"headerlink\" href=\"#building-sample-applications\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can try many of the <a class=\"reference internal\" href=\"../../../../samples/index.html#samples-and-demos\"><span class=\"std std-ref\">sample applications and demos</span></a>.  We’ll use <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>, found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/samples/hello_world\">samples/hello_world</a> as an example.</p>\n<div class=\"section\" id=\"configuring\">\n<h4>Configuring<a class=\"headerlink\" href=\"#configuring\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You may need to write a prj_arc.conf file if the sample doesn’t have one.\nNext, you can use the menuconfig rule to configure the target. By specifying\n<code class=\"docutils literal notranslate\"><span class=\"pre\">hsdk</span></code> as the board configuration, you can select the ARC HS Development\nKit board support for Zephyr.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hsdk samples/hello_world</span>\n<span class=\"go\">west build -t menuconfig</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"building\">\n<h4>Building<a class=\"headerlink\" href=\"#building\" title=\"Permalink to this headline\">¶</a></h4>\n<p>You can build an application in the usual way.  Refer to\n<a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> for more details. Here is an example for\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b hsdk samples/hello_world</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"connecting-serial-output\">\n<h3>Connecting Serial Output<a class=\"headerlink\" href=\"#connecting-serial-output\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the default configuration, Zephyr’s HS Development Kit images support\nserial output via the USB-UART on the board.  To enable serial output:</p>\n<ul class=\"simple\">\n<li><p>Open a serial port emulator (i.e. on Linux minicom, putty, screen, etc)</p></li>\n<li><p>Specify the tty driver name, for example, on Linux this may be\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">/dev/ttyUSB0</span></code></p></li>\n<li><p>Set the communication settings to:</p></li>\n</ul>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\"/>\n<col style=\"width: 40%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Parameter</p></th>\n<th class=\"head\"><p>Value</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>Baud:</p></td>\n<td><p>115200</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Data:</p></td>\n<td><p>8 bits</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>Parity:</p></td>\n<td><p>None</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>Stopbits:</p></td>\n<td><p>1</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Using the latest version of Zephyr SDK(&gt;=0.10), you can debug and\nflash (run) HS Development Kit directly.</p>\n<p>One option is to build and debug the application using the usual\nZephyr build system commands.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hsdk &lt;my app&gt;</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n<p>At this point you can do your normal debug session. Set breakpoints and then\n<kbd class=\"kbd docutils literal notranslate\">c</kbd> to continue into the program.</p>\n<p>The other option is to launch a debug server, as follows.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hsdk &lt;my app&gt;</span>\n<span class=\"go\">west debugserver</span>\n</pre></div>\n</div>\n<p>Then connect to the debug server at the HS Development Kit from a second\nconsole, from the build directory containing the output <code class=\"file docutils literal notranslate\"><span class=\"pre\">zephyr.elf</span></code>.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> &lt;my app&gt;\n<span class=\"gp\">$ </span><span class=\"nv\">$ZEPHYR_SDK_INSTALL_DIR</span>/arc-zephyr-elf/arc-zephyr-elf-gdb zephyr.elf\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">target remote localhost:3333</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">load</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">b main</span>\n<span class=\"gp gp-VirtualEnv\">(gdb)</span> <span class=\"go\">c</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you just want to download the application to the HS Development Kit’s DDR\nand run, you can do so in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">west build -b hsdk &lt;my app&gt;</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>This command still uses openocd and gdb to load the application elf file to\nHS Development Kit, but it will load the application and immediately run. If\npower is removed, the application will be lost since it wasn’t written to flash.</p>\n<p>Most of the time you will not be flashing your program but will instead debug\nit using openocd and gdb. The program can be download via the USB cable into\nthe code and data memories.</p>\n<p>The HS Development Kit also supports flashing the Zephyr application\nwith the U-Boot bootloader, a powerful and flexible tool for loading\nan executable from different sources and running it on the target platform.</p>\n<p>The U-Boot implementation for the HS Development Kit was further extended with\nadditional functionality that allows users to better manage the broad\nconfigurability of the HS Development Kit</p>\n<p>When you are ready to deploy the program so that it boots up automatically on\nreset or power-up, you can follow the steps to place the program on SD card.</p>\n<p>For details, see: <a class=\"reference external\" href=\"https://github.com/foss-for-synopsys-dwc-arc-processors/linux/wiki/Uboot-HSDK-Command-Reference#launching-baremetal-application-on-hsdk\">Uboot-HSDK-Command-Reference</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"release-notes\">\n<h2>Release Notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [], "main_ram_size": 0, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mimxrt1015_evk", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>NXP MIMXRT1015-EVK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nxp-mimxrt1015-evk\">\n<span id=\"mimxrt1015-evk\"></span><h1>NXP MIMXRT1015-EVK<a class=\"headerlink\" href=\"#nxp-mimxrt1015-evk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The i.MX RT1015 expands the i.MX RT crossover processor families by providing\nhigh-performance feature set in low-cost LQFP packages, further simplifying\nboard design and layout for customers. The i.MX RT1015 runs on the Arm®\nCortex®-M7 core at 500 MHz.</p>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/mimxrt1015_evk.jpg\"><img alt=\"MIMXRT1015-EVK\" class=\"align-center\" src=\"../../../../_images/mimxrt1015_evk.jpg\" style=\"width: 720px;\"/></a>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<ul class=\"simple\">\n<li><p>MIMXRT1015DAF5A MCU</p></li>\n<li><p>Memory</p>\n<ul>\n<li><p>128 Mbit QSPI Flash</p></li>\n</ul>\n</li>\n<li><p>Connectivity</p>\n<ul>\n<li><p>Micro USB host and OTG connectors</p></li>\n<li><p>Arduino interface</p></li>\n</ul>\n</li>\n<li><p>Audio</p>\n<ul>\n<li><p>Audio Codec</p></li>\n<li><p>4-pole audio headphone jack</p></li>\n<li><p>External speaker connection</p></li>\n<li><p>Microphone</p></li>\n</ul>\n</li>\n<li><p>Debug</p>\n<ul>\n<li><p>JTAG 10-pin connector</p></li>\n<li><p>OpenSDA with DAPLink</p></li>\n</ul>\n</li>\n</ul>\n<p>For more information about the MIMXRT1015 SoC and MIMXRT1015-EVK board, see\nthese references:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/products/processors-and-microcontrollers/arm-based-processors-and-mcus/i.mx-applications-processors/i.mx-rt-series/i.mx-rt1015-crossover-processor-with-arm-cortex-m7-core:i.MX-RT1015\">i.MX RT1015 Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/docs/en/data-sheet/IMXRT1015CEC.pdf\">i.MX RT1015 Datasheet</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1015RM\">i.MX RT1015 Reference Manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/support/developer-resources/run-time-software/i.mx-developer-resources/i.mx-rt1015-evaluation-kit:MIMXRT1015-EVK\">MIMXRT1015-EVK Website</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=IMXRT1015QSG\">MIMXRT1015-EVK Quick Reference Guide</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://www.nxp.com/webapp/Download?colCode=MIMXRT1015-EVK-REVB-DS\">MIMXRT1015-EVK Design Files</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The mimxrt1015_evk board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SYSTICK</p></td>\n<td><p>on-chip</p></td>\n<td><p>systick</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>USB device</p></td>\n</tr>\n</tbody>\n</table>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/mimxrt1015_evk/mimxrt1015_evk_defconfig</span></code></p>\n<p>Other hardware features are not currently supported by the port.</p>\n</div>\n<div class=\"section\" id=\"connections-and-i-os\">\n<h3>Connections and I/Os<a class=\"headerlink\" href=\"#connections-and-i-os\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1015 SoC has five pairs of pinmux/gpio controllers.</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 25%\"/>\n<col style=\"width: 29%\"/>\n<col style=\"width: 46%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Name</p></th>\n<th class=\"head\"><p>Function</p></th>\n<th class=\"head\"><p>Usage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_05</p></td>\n<td><p>GPIO</p></td>\n<td><p>LED</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_09</p></td>\n<td><p>GPIO</p></td>\n<td><p>SW4</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B0_06</p></td>\n<td><p>LPUART1_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B0_07</p></td>\n<td><p>LPUART1_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_EMC_32</p></td>\n<td><p>LPUART4_TX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_EMC_33</p></td>\n<td><p>LPUART4_RX</p></td>\n<td><p>UART Console</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>GPIO_AD_B1_15</p></td>\n<td><p>LPI2C1_SDA</p></td>\n<td><p>I2C SDA</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO_AD_B1_14</p></td>\n<td><p>LPI2C1_CLK</p></td>\n<td><p>I2C SCL</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h3>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1015 SoC is configured to use the 24 MHz external oscillator on the\nboard with the on-chip PLL to generate a 500 MHz core clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h3>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The MIMXRT1015 SoC has four UARTs. <code class=\"docutils literal notranslate\"><span class=\"pre\">LPUART1</span></code> is configured for the console,\nand the remaining are not used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Build and flash applications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"configuring-a-debug-probe\">\n<h3>Configuring a Debug Probe<a class=\"headerlink\" href=\"#configuring-a-debug-probe\" title=\"Permalink to this headline\">¶</a></h3>\n<p>A debug probe is used for both flashing and debugging the board. This board is\nconfigured by default to use the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#opensda-daplink-onboard-debug-probe\"><span class=\"std std-ref\">OpenSDA DAPLink Onboard Debug Probe</span></a>,\nhowever the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#pyocd-debug-host-tools\"><span class=\"std std-ref\">pyOCD Debug Host Tools</span></a> do not yet support programming the\nexternal flashes on this board so you must reconfigure the board for one of the\nfollowing debug probes instead.</p>\n<div class=\"section\" id=\"jlink-external-debug-probe\">\n<h4><a class=\"reference internal\" href=\"../../../../guides/flash_debug/probes.html#jlink-external-debug-probe\"><span class=\"std std-ref\">J-Link External Debug Probe</span></a><a class=\"headerlink\" href=\"#jlink-external-debug-probe\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Install the <a class=\"reference internal\" href=\"../../../../guides/flash_debug/host-tools.html#jlink-debug-host-tools\"><span class=\"std std-ref\">J-Link Debug Host Tools</span></a> and make sure they are in your search\npath.</p>\n<p>Attach a J-Link 10-pin connector to J55. Check that jumpers J47 and J48 are\n<strong>off</strong> (they are on by default when boards ship from the factory) to ensure\nSWD signals are disconnected from the OpenSDA microcontroller.</p>\n</div>\n</div>\n<div class=\"section\" id=\"configuring-a-console\">\n<h3>Configuring a Console<a class=\"headerlink\" href=\"#configuring-a-console\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Regardless of your choice in debug probe, we will use the OpenSDA\nmicrocontroller as a usb-to-serial adapter for the serial console. Check that\njumpers J45 and J46 are <strong>on</strong> (they are on by default when boards ship from\nthe factory) to connect UART signals to the OpenSDA microcontroller.</p>\n<p>Connect a USB cable from your PC to J41.</p>\n<p>Use the following settings with your serial terminal of choice (minicom, putty,\netc.):</p>\n<ul class=\"simple\">\n<li><p>Speed: 115200</p></li>\n<li><p>Data: 8 bits</p></li>\n<li><p>Parity: None</p></li>\n<li><p>Stop bits: 1</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b mimxrt1015_evk samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>Open a serial terminal, reset the board (press the SW9 button), and you should\nsee the following message in the terminal:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">***** Booting Zephyr OS v1.14.0-rc1-1297-g312d75f2459e *****</span>\n<span class=\"go\">Hello World! mimxrt1015_evk</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sdram0", "size": 33554432}], "main_ram_size": 33554432, "gpio": {"count": 5, "instances": [{"label": "GPIO_1"}, {"label": "GPIO_2"}, {"label": "GPIO_3"}, {"label": "GPIO_4"}, {"label": "GPIO_5"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "FLEXSPI"}, {"label": "FLEXSPI1"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "can": {"count": 3, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}, {"label": "CAN_3"}]}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 2, "instances": [{"label": "ETH_0"}, {"label": "ETH_1"}]}, "name": "mimxrt1060_evk_hyperflash", "arch": null, "docu_html": ""}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 65536}], "main_flash_size": 65536, "memory": [{"label": "sram0", "size": 16384}], "main_ram_size": 16384, "gpio": {"count": 5, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOF"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 2, "instances": [{"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 3, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 8, "instances": [{"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_15"}, {"label": "PWM_16"}, {"label": "PWM_17"}, {"label": "PWM_1"}]}, "usb": {"count": 1, "instances": [{"label": "USB"}]}, "ethernet": {"count": 0, "instances": []}, "name": "nucleo_f302r8", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F302R8</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f302r8\">\n<span id=\"nucleo-f302r8-board\"></span><h1>ST Nucleo F302R8<a class=\"headerlink\" href=\"#st-nucleo-f302r8\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F302R8 board features an ARM Cortex-M4 based STM32F302R8\nmixed-signal MCU with FPU and DSP instructions capable of running at 72 MHz.\nHere are some highlights of the Nucleo F302R8 board:</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP64 package</p></li>\n<li><p>LSE crystal: 32.768 kHz crystal oscillator</p></li>\n<li><p>Two types of extension resources:</p>\n<ul>\n<li><p>Arduino* Uno V3 connectors</p></li>\n<li><p>ST morpho extension pin headers for full access to all STM32 I/Os</p></li>\n</ul>\n</li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with SWD connector</p></li>\n<li><p>Flexible board power supply:</p>\n<ul>\n<li><p>5 V from ST-LINK/V2-1 USB VBUS</p></li>\n<li><p>External power sources: 3.3 V and 7 - 12 V on ST Zio or ST morpho\nconnectors, 5 V on ST morpho connector</p></li>\n</ul>\n</li>\n<li><p>One user LED</p></li>\n<li><p>Two push-buttons: USER and RESET</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f302r8.jpg\"><img alt=\"Nucleo F302R8\" class=\"align-center\" src=\"../../../../_images/nucleo_f302r8.jpg\" style=\"width: 500px; height: 367px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"http://www.st.com/en/evaluation-tools/nucleo-f302r8.html\">Nucleo F302R8 website</a>,\nand in the <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00105823.pdf\">STM32 Nucleo-64 board User Manual</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F302R8 provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F302R8T6 in QFP64 package</p></li>\n<li><p>ARM® 32-bit Cortex® -M4 CPU with FPU</p></li>\n<li><p>72 MHz max CPU frequency</p></li>\n<li><p>VDD from 2.0 V to 3.6 V</p></li>\n<li><p>64 MB Flash</p></li>\n<li><p>16 KB SRAM</p></li>\n<li><p>RTC</p></li>\n<li><p>Advanced-control Timer</p></li>\n<li><p>General Purpose Timers (4)</p></li>\n<li><p>Basic Timer</p></li>\n<li><p>Watchdog Timers (2)</p></li>\n<li><p>PWM channels (18)</p></li>\n<li><p>SPI/I2S (2)</p></li>\n<li><p>I2C (3)</p></li>\n<li><p>USART/UART (3/3)</p></li>\n<li><p>USB 2.0 FS with on-chip PHY</p></li>\n<li><p>CAN (2)</p></li>\n<li><p>GPIO with external interrupt capability</p></li>\n<li><p>DMA channels (7)</p></li>\n<li><p>Capacitive sensing channels (18)</p></li>\n<li><p>12-bit ADC with 15 channels</p></li>\n<li><p>12-bit D/A converter</p></li>\n<li><p>Analog comparator (3)</p></li>\n<li><p>Op amp</p></li>\n</ul>\n<p>More information about the STM32F302R8 can be found here:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://www.st.com/en/microcontrollers/stm32f302r8.html\">STM32F302R8 on www.st.com</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/reference_manual/dm00094349.pdf\">STM32F302R8 reference manual</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://www.st.com/resource/en/datasheet/stm32f302r8.pdf\">STM32F302R8 datasheet</a></p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f302r8 board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port-polling;\nserial port-interrupt</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n</tbody>\n</table>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f302r8/nucleo_f302r8_defconfig</span></code></p>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Nucleo F302R8 Board has 5 GPIO controllers. These controllers are\nresponsible for pin muxing, input/output, pull-up, etc.</p>\n<div class=\"section\" id=\"board-connectors\">\n<h4>Board connectors:<a class=\"headerlink\" href=\"#board-connectors\" title=\"Permalink to this headline\">¶</a></h4>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f302r8_connectors.png\"><img alt=\"Nucleo F302R8 connectors\" class=\"align-center\" src=\"../../../../_images/nucleo_f302r8_connectors.png\" style=\"width: 800px; height: 619px;\"/></a>\n</div>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F302R8 board features an Arduino Uno V3 connector and a ST\nmorpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX : PA2/PA3 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_3 TX/RX : PC10/PC11</p></li>\n<li><p>I2C1 SCL/SDA : PB8/PB9 (Arduino I2C)</p></li>\n<li><p>SPI2 CS/SCK/MISO/MOSI : PB6/PB13/PB14/P15 (Arduino SPI)</p></li>\n<li><p>PWM_2_CH2 : PA0</p></li>\n<li><p>USER_PB   : PC13</p></li>\n<li><p>LD2       : PB13</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F302R8 System Clock can be driven by an internal or\nexternal oscillator, as well as by the main PLL clock. By default the\nSystem Clock is driven by the PLL clock at 72 MHz. The input to the\nPLL is an 8 MHz external clock supplied by the processor of the\non-board ST-LINK/V2-1 debugger/programmer.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F302R8 board has 3 UARTs. The Zephyr console output is assigned\nto UART2.  Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Nucleo F302R8 board includes an ST-LINK/V2-1 embedded debug tool interface.\nThis interface is supported by the openocd version included in Zephyr SDK.</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "sram0", "size": 262144}], "main_ram_size": 262144, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_0"}, {"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_0"}, {"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}]}, "uart": {"count": 4, "instances": [{"label": "UART_0"}, {"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 4, "instances": [{"label": "PWM_0"}, {"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}]}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "circuitdojo_feather_nrf9160", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF9160 Feather</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf9160-feather\">\n<span id=\"circuitdojo-feather-nrf9160\"></span><h1>nRF9160 Feather<a class=\"headerlink\" href=\"#nrf9160-feather\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"figure align-center\" id=\"id1\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/circuitdojo_feather_nrf9160.png\"><img alt=\"Circuit Dojo nRF9160 Feather\" src=\"../../../../_images/circuitdojo_feather_nrf9160.png\" style=\"width: 711px;\"/></a>\n<p class=\"caption\"><span class=\"caption-text\">nRF9160 Feather (Credit: Circuit Dojo)</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">¶</a></p>\n</div>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nRF9160 Feather by Circuit Dojo is a single-board development\nfor bringing your LTE-M and NB-IoT applications to life. The circuitdojo_feather_nrf9160\nboard configuration leverages the pre-existing support for the Nordic Semiconductor\nnRF9160. Supported nRF9160 peripherals include:</p>\n<ul class=\"simple\">\n<li><p><abbr title=\"Analog to Digital Converter\">ADC</abbr></p></li>\n<li><p>CLOCK</p></li>\n<li><p>FLASH</p></li>\n<li><p><abbr title=\"General Purpose Input Output\">GPIO</abbr></p></li>\n<li><p><abbr title=\"Inter-Integrated Circuit\">I2C</abbr></p></li>\n<li><p><abbr title=\"Memory Protection Unit\">MPU</abbr></p></li>\n<li><p><abbr title=\"Nested Vectored Interrupt Controller\">NVIC</abbr></p></li>\n<li><p><abbr title=\"Pulse Width Modulation\">PWM</abbr></p></li>\n<li><p><abbr title=\"nRF RTC System Clock\">RTC</abbr></p></li>\n<li><p>Segger RTT (RTT Console)</p></li>\n<li><p><abbr title=\"Serial Peripheral Interface\">SPI</abbr></p></li>\n<li><p><abbr title=\"Universal asynchronous receiver-transmitter with EasyDMA\">UARTE</abbr></p></li>\n<li><p><abbr title=\"Watchdog Timer\">WDT</abbr></p></li>\n<li><p><abbr title=\"Implementation Defined Attribution Unit\">IDAU</abbr></p></li>\n</ul>\n<p>More information about the board can be found at the\n<a class=\"reference external\" href=\"https://docs.jaredwolff.com/nrf9160-introduction.html\">nRF9160 Feather Documentation</a> <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id3\">1</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"figure align-center\">\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nrf9160-feather-v31-features.png\"><img alt=\"nRF9160 Feather Features\" src=\"../../../../_images/nrf9160-feather-v31-features.png\" style=\"width: 711px;\"/></a>\n</div>\n<div class=\"section\" id=\"connections-and-ios\">\n<h3>Connections and IOs<a class=\"headerlink\" href=\"#connections-and-ios\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The nRF9160 Feather has everything you know and love about\nthe Feather platform. Here are some of the highlights:</p>\n<div class=\"section\" id=\"led\">\n<h4>LED<a class=\"headerlink\" href=\"#led\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>D7 (blue) = P0.03</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"push-buttons-and-switches\">\n<h4>Push buttons and Switches<a class=\"headerlink\" href=\"#push-buttons-and-switches\" title=\"Permalink to this headline\">¶</a></h4>\n<ul class=\"simple\">\n<li><p>MODE = P0.12</p></li>\n<li><p>RESET</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"usb\">\n<h4>USB<a class=\"headerlink\" href=\"#usb\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Contains a USB/UART connection for both debugging and loading new\ncode using a UART Enabled MCUBoot.</p>\n</div>\n<div class=\"section\" id=\"standard-battery-connection\">\n<h4>Standard Battery Connection<a class=\"headerlink\" href=\"#standard-battery-connection\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The nRF9160 Feather has a 2 pin battery connector on board. Lithium Polymer batteries &gt;\n300mA required.</p>\n</div>\n<div class=\"section\" id=\"nano-sim-holder\">\n<h4>Nano SIM Holder<a class=\"headerlink\" href=\"#nano-sim-holder\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The nRF9160 Feather has a built-in nano SIM (4FF) holder located\non the bottom side.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>circuitdojo_feather_nrf9160 has a Tag Connect TC2030-CTX-NL. It can be used\nby most programmers like:</p>\n<ul class=\"simple\">\n<li><p>J-Link (the nRF53-DK is recommended)</p></li>\n<li><p>CMSIS-DAP based programmers</p></li>\n</ul>\n<p>Check out <a class=\"reference external\" href=\"https://docs.jaredwolff.com/nrf9160-getting-started.html\">Getting Started</a> <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id5\">2</a> for more info.</p>\n<div class=\"section\" id=\"building-an-application\">\n<h3>Building an application<a class=\"headerlink\" href=\"#building-an-application\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In most cases you’ll want to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">ns</span></code> target with any of the Zephyr\nor Nordic based examples. Some of the examples do not use secure mode,\nso they do not required the <code class=\"docutils literal notranslate\"><span class=\"pre\">ns</span></code> suffix. A great example of this is the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> below:</p>\n</div>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Follow the instructions in the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to install\nand configure all the necessary software. Further information can be\nfound in <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger-flashing\"><span class=\"std std-ref\">Flashing</span></a>. Then build and flash\napplications as usual (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>First, run your favorite terminal program to listen for output.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>screen /dev/&lt;tty_device&gt; <span class=\"m\">115200</span>\n</pre></div>\n</div>\n<p>Replace <code class=\"code docutils literal notranslate\"><span class=\"pre\">&lt;tty_device&gt;</span></code> with the port where the nRF9160 Feather\ncan be found. In most cases (On Linux/Mac) it will be: <code class=\"code docutils literal notranslate\"><span class=\"pre\">/dev/tty.SLAB_USBtoUART</span></code>.</p>\n<p>Then build and flash the application in the usual way.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b circuitdojo_feather_nrf9160 samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../../../../guides/tools/nordic_segger.html#nordic-segger\"><span class=\"std std-ref\">Nordic nRF5x Segger J-Link</span></a> page to learn about debugging Nordic boards with a\nSegger IC.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-the-leds-and-buttons-on-the-nrf9160-feather\">\n<h2>Testing the LEDs and buttons on the nRF9160 Feather<a class=\"headerlink\" href=\"#testing-the-leds-and-buttons-on-the-nrf9160-feather\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are 2 samples that allow you to test that the buttons (switches) and LEDs on\nthe board are working properly with Zephyr:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/blinky/README.html#blinky-sample\"><span class=\"std std-ref\">Blinky</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../../../samples/basic/button/README.html#button-sample\"><span class=\"std std-ref\">Button</span></a></p></li>\n</ul>\n<p>You can build and flash the examples to make sure Zephyr is running correctly on\nyour board. The button and LED definitions can be found in\n<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/blob/zephyr-v2.7.0/boards/arm/circuitdojo_feather_nrf9160/circuitdojo_feather_nrf9160_common.dts\">boards/arm/circuitdojo_feather_nrf9160/circuitdojo_feather_nrf9160_common.dts</a>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.jaredwolff.com/nrf9160-introduction.html\">https://docs.jaredwolff.com/nrf9160-introduction.html</a></p>\n</dd>\n<dt class=\"label\" id=\"id4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id5\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://docs.jaredwolff.com/nrf9160-getting-started.html\">https://docs.jaredwolff.com/nrf9160-getting-started.html</a></p>\n</dd>\n</dl>\n<p><strong>Side note</strong> This page was based on the documentation for the nRF9160 DK. Thanks to Nordic for\ndeveloping a great platform!</p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "NRF_FLASH", "size": 196608}], "main_flash_size": 196608, "memory": [{"label": "sram0", "size": 24576}], "main_ram_size": 24576, "gpio": {"count": 1, "instances": [{"label": "GPIO_0"}]}, "i2c": {"count": 1, "instances": [{"label": "I2C_0"}]}, "spi": {"count": 1, "instances": [{"label": "SPI_0"}]}, "uart": {"count": 1, "instances": [{"label": "UART_0"}]}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_0"}]}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "nrf52dk_nrf52805", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>nRF52805 emulation on nRF52 DK</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"nrf52805-emulation-on-nrf52-dk\">\n<span id=\"nrf52dk-nrf52805\"></span><h1>nRF52805 emulation on nRF52 DK<a class=\"headerlink\" href=\"#nrf52805-emulation-on-nrf52-dk\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The nrf52dk_nrf52805 board is a modified version of the <a class=\"reference internal\" href=\"../../nrf52dk_nrf52832/doc/index.html#nrf52dk-nrf52832\"><span class=\"std std-ref\">nRF52 DK</span></a>\nthat enforces the limitations imposed by the nRF52805 IC, which is a\ncost-reduced variant of the original nRF52832. Since Nordic does not offer a\ndevelopment kit for the nRF52805, you can use this board to develop for this\nIC while using the nRF52 Development Kit (PCA10040).</p>\n<p>See <a class=\"reference internal\" href=\"../../nrf52dk_nrf52832/doc/index.html#nrf52dk-nrf52832\"><span class=\"std std-ref\">nRF52 DK</span></a> for more information about the development board and\n<a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52805\">nRF52805 website</a> <a class=\"footnote-reference brackets\" href=\"#id1\" id=\"id2\">1</a> for the official reference on the IC itself.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">¶</a></h2>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52805\">https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF52805</a></p>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 2097152}], "main_flash_size": 2097152, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 393216}, {"label": "dtcm", "size": 131072}], "main_ram_size": 393216, "gpio": {"count": 11, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOH"}, {"label": "GPIOI"}, {"label": "GPIOJ"}, {"label": "GPIOK"}]}, "i2c": {"count": 4, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}, {"label": "I2C_4"}]}, "spi": {"count": 6, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}, {"label": "SPI_5"}, {"label": "SPI_6"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 1, "instances": [{"label": "CAN_1"}]}, "serial": {"count": 8, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}, {"label": "UART_6"}, {"label": "UART_7"}, {"label": "UART_8"}]}, "quadspi": {"count": 1, "instances": [{"label": "QUADSPI"}]}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "nucleo_f767zi", "arch": "arm", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">ARM Boards</a> »</li>\n<li>ST Nucleo F767ZI</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"st-nucleo-f767zi\">\n<span id=\"nucleo-f767zi-board\"></span><h1>ST Nucleo F767ZI<a class=\"headerlink\" href=\"#st-nucleo-f767zi\" title=\"Permalink to this headline\">¶</a></h1>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The STM32 Nucleo-144 F767ZI boards offer combinations of performance and\npower that provide an affordable and flexible way for users to build\nprototypes and try out new concepts. For compatible boards, the SMPS\nsignificantly reduces power consumption in Run mode.</p>\n<p>The Arduino-compatible ST Zio connector expands functionality of the Nucleo\nopen development platform, with a wide choice of specialized Arduino* Uno V3\nshields.</p>\n<p>The STM32 Nucleo-144 board does not require any separate probe as it integrates\nthe ST-LINK/V2-1 debugger/programmer.</p>\n<p>The STM32 Nucleo-144 board comes with the STM32 comprehensive free software\nlibraries and examples available with the STM32Cube MCU Package.</p>\n<p>Key Features</p>\n<ul class=\"simple\">\n<li><p>STM32 microcontroller in LQFP144 package</p></li>\n<li><p>Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support)</p></li>\n<li><p>USB OTG or full-speed device (depending on STM32 support)</p></li>\n<li><p>3 user LEDs</p></li>\n<li><p>2 user and reset push-buttons</p></li>\n<li><p>32.768 kHz crystal oscillator</p></li>\n<li><p>Board connectors:</p></li>\n</ul>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>USB with Micro-AB</p></li>\n<li><p>SWD</p></li>\n<li><p>Ethernet RJ45 (depending on STM32 support)</p></li>\n<li><p>ST Zio connector including Arduino* Uno V3</p></li>\n<li><p>ST morpho</p></li>\n</ul>\n</div></blockquote>\n<ul class=\"simple\">\n<li><p>Flexible power-supply options: ST-LINK USB VBUS or external sources.</p></li>\n<li><p>On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration</p></li>\n<li><p>capability: mass storage, virtual COM port and debug port.</p></li>\n<li><p>Comprehensive free software libraries and examples available with the\nSTM32Cube MCU package.</p></li>\n<li><p>Arm* Mbed Enabled* compliant (only for some Nucleo part numbers)</p></li>\n</ul>\n<a class=\"reference internal image-reference\" href=\"../../../../_images/nucleo_f767zi.jpg\"><img alt=\"Nucleo F767ZI\" class=\"align-center\" src=\"../../../../_images/nucleo_f767zi.jpg\" style=\"width: 720px; height: 720px;\"/></a>\n<p>More information about the board can be found at the <a class=\"reference external\" href=\"https://www.st.com/en/evaluation-tools/nucleo-f767zi.html\">Nucleo F767ZI website</a>.</p>\n</div>\n<div class=\"section\" id=\"hardware\">\n<h2>Hardware<a class=\"headerlink\" href=\"#hardware\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Nucleo F767ZI provides the following hardware components:</p>\n<ul class=\"simple\">\n<li><p>STM32F767ZI in LQFP144 package</p></li>\n<li><p>ARM 32-bit Cortex-M7 CPU with FPU</p></li>\n<li><p>Chrom-ART Accelerator</p></li>\n<li><p>ART Accelerator</p></li>\n<li><p>216 MHz max CPU frequency</p></li>\n<li><p>VDD from 1.7 V to 3.6 V</p></li>\n<li><p>2 MB Flash</p></li>\n<li><p>512 KB SRAM</p></li>\n<li><p>16-bit timers(10)</p></li>\n<li><p>32-bit timers(2)</p></li>\n<li><p>SPI(6)</p></li>\n<li><p>I2C(4)</p></li>\n<li><p>I2S (3)</p></li>\n<li><p>USART(4)</p></li>\n<li><p>UART(4)</p></li>\n<li><p>USB OTG Full Speed and High Speed(1)</p></li>\n<li><p>USB OTG Full Speed(1)</p></li>\n<li><p>CAN(2)</p></li>\n<li><p>SAI(2)</p></li>\n<li><p>SPDIF_Rx(4)</p></li>\n<li><p>HDMI_CEC(1)</p></li>\n<li><p>Dual Mode Quad SPI(1)</p></li>\n<li><p>Camera Interface</p></li>\n<li><p>GPIO(up to 168) with external interrupt capability</p></li>\n<li><p>12-bit ADC(3) with 24 channels / 2.4 MSPS</p></li>\n<li><p>12-bit DAC with 2 channels(2)</p></li>\n<li><p>True Random Number Generator (RNG)</p></li>\n<li><p>16-channel DMA</p></li>\n<li><p>LCD-TFT Controller with XGA resolution</p></li>\n</ul>\n<div class=\"section\" id=\"supported-features\">\n<h3>Supported Features<a class=\"headerlink\" href=\"#supported-features\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The Zephyr nucleo_f767zi board configuration supports the following hardware\nfeatures:</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 18%\"/>\n<col style=\"width: 20%\"/>\n<col style=\"width: 62%\"/>\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Interface</p></th>\n<th class=\"head\"><p>Controller</p></th>\n<th class=\"head\"><p>Driver/Component</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>NVIC</p></td>\n<td><p>on-chip</p></td>\n<td><p>nested vector interrupt controller</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>UART</p></td>\n<td><p>on-chip</p></td>\n<td><p>serial port</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PINMUX</p></td>\n<td><p>on-chip</p></td>\n<td><p>pinmux</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>GPIO</p></td>\n<td><p>on-chip</p></td>\n<td><p>gpio</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ETHERNET</p></td>\n<td><p>on-chip</p></td>\n<td><p>ethernet (*)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>USB</p></td>\n<td><p>on-chip</p></td>\n<td><p>usb_device</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>COUNTER</p></td>\n<td><p>on-chip</p></td>\n<td><p>rtc</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>I2C</p></td>\n<td><p>on-chip</p></td>\n<td><p>i2c</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>PWM</p></td>\n<td><p>on-chip</p></td>\n<td><p>pwm</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>SPI</p></td>\n<td><p>on-chip</p></td>\n<td><p>spi</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>WATCHDOG</p></td>\n<td><p>on-chip</p></td>\n<td><p>independent watchdog</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ADC</p></td>\n<td><p>on-chip</p></td>\n<td><p>ADC Controller</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>RNG</p></td>\n<td><p>on-chip</p></td>\n<td><p>True Random number generator</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>DAC</p></td>\n<td><p>on-chip</p></td>\n<td><p>DAC Controller</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"simple\">\n<dt>(*) nucleo_f767zi with soc cut-A (Device marking A) has some ethernet</dt><dd><p>instability (<a class=\"reference external\" href=\"https://github.com/zephyrproject-rtos/zephyr/issues/26519\">https://github.com/zephyrproject-rtos/zephyr/issues/26519</a>).\nUse of cut-Z is advised.\nsee restrictions errata:\n<a class=\"reference external\" href=\"https://www.st.com/content/ccc/resource/technical/document/errata_sheet/group0/23/a6/11/0b/30/24/46/a5/DM00257543/files/DM00257543.pdf/jcr:content/translations/en.DM00257543.pdf\">https://www.st.com/content/ccc/resource/technical/document/errata_sheet/group0/23/a6/11/0b/30/24/46/a5/DM00257543/files/DM00257543.pdf/jcr:content/translations/en.DM00257543.pdf</a></p>\n</dd>\n</dl>\n<p>Other hardware features are not yet supported on this Zephyr port.</p>\n<p>The default configuration can be found in the defconfig file:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">boards/arm/nucleo_f767zi/nucleo_f767zi_defconfig</span></code></p>\n<p>For mode details please refer to <a class=\"reference external\" href=\"http://www.st.com/resource/en/user_manual/dm00244518.pdf\">STM32 Nucleo-144 board User Manual</a>.</p>\n<div class=\"section\" id=\"default-zephyr-peripheral-mapping\">\n<h4>Default Zephyr Peripheral Mapping:<a class=\"headerlink\" href=\"#default-zephyr-peripheral-mapping\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The Nucleo F767ZI board features a ST Zio connector (extended Arduino Uno V3)\nand a ST morpho connector. Board is configured as follows:</p>\n<ul class=\"simple\">\n<li><p>UART_2 TX/RX/RTS/CTS : PD5/PD6/PD4/PD3</p></li>\n<li><p>UART_3 TX/RX : PD8/PD9 (ST-Link Virtual Port Com)</p></li>\n<li><p>UART_6 TX/RX : PG14/PG9 (Arduino UART)</p></li>\n<li><p>USER_PB : PC13</p></li>\n<li><p>LD1 : PB0</p></li>\n<li><p>LD2 : PB7</p></li>\n<li><p>LD3 : PB14</p></li>\n<li><p>ETH : PA1, PA2, PA7, PB13, PC1, PC4, PC5, PG11, PG13</p></li>\n<li><p>USB DM : PA11</p></li>\n<li><p>USB DP : PA12</p></li>\n<li><p>I2C : PB8, PB9</p></li>\n<li><p>PWM : PE13</p></li>\n<li><p>SPI : PD14, PA5, PA6, PA7</p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The Arduino Uno v3 specified SPI device conflicts with the on-board ETH\ndevice on pin PA7.</p>\n</div>\n</div>\n<div class=\"section\" id=\"system-clock\">\n<h4>System Clock<a class=\"headerlink\" href=\"#system-clock\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F767ZI System Clock could be driven by an internal or external\noscillator, as well as the main PLL clock. By default, the System clock is\ndriven by the PLL clock at 72MHz, driven by an 8MHz high-speed external clock.</p>\n</div>\n<div class=\"section\" id=\"serial-port\">\n<h4>Serial Port<a class=\"headerlink\" href=\"#serial-port\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Nucleo F767ZI board has 4 UARTs and 4 USARTs. The Zephyr console output is\nassigned to UART3. Default settings are 115200 8N1.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"programming-and-debugging\">\n<h2>Programming and Debugging<a class=\"headerlink\" href=\"#programming-and-debugging\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Applications for the <code class=\"docutils literal notranslate\"><span class=\"pre\">nucleo_f767zi</span></code> board configuration can be built and\nflashed in the usual way (see <a class=\"reference internal\" href=\"../../../../application/index.html#build-an-application\"><span class=\"std std-ref\">Building an Application</span></a> and\n<a class=\"reference internal\" href=\"../../../../application/index.html#application-run\"><span class=\"std std-ref\">Run an Application</span></a> for more details).</p>\n<div class=\"section\" id=\"flashing\">\n<h3>Flashing<a class=\"headerlink\" href=\"#flashing\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Nucleo F767ZI board includes an ST-LINK/V2-1 embedded debug tool interface.</p>\n<div class=\"section\" id=\"flashing-an-application-to-nucleo-f767zi\">\n<h4>Flashing an application to Nucleo F767ZI<a class=\"headerlink\" href=\"#flashing-an-application-to-nucleo-f767zi\" title=\"Permalink to this headline\">¶</a></h4>\n<p>Here is an example for the <a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<p>Run a serial host program to connect with your Nucleo board.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>minicom -b <span class=\"m\">115200</span> -D /dev/ttyACM0\n</pre></div>\n</div>\n<p>Build and flash the application:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f767zi samples/hello_world</span>\n<span class=\"go\">west flash</span>\n</pre></div>\n</div>\n<p>You should see the following message on the console:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>Hello World! nucleo_f767zi\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h3>Debugging<a class=\"headerlink\" href=\"#debugging\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can debug an application in the usual way.  Here is an example for the\n<a class=\"reference internal\" href=\"../../../../samples/hello_world/README.html#hello-world\"><span class=\"std std-ref\">Hello World</span></a> application.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\"># </span>From the root of the zephyr repository\n<span class=\"go\">west build -b nucleo_f767zi samples/hello_world</span>\n<span class=\"go\">west debug</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [], "main_flash_size": 0, "memory": [{"label": "sram0", "size": 1966080}, {"label": "sram1", "size": 131072}], "main_ram_size": 1966080, "gpio": {"count": 0, "instances": []}, "i2c": {"count": 0, "instances": []}, "spi": {"count": 0, "instances": []}, "uart": {"count": 0, "instances": []}, "can": {"count": 0, "instances": []}, "serial": {"count": 0, "instances": []}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 0, "instances": []}, "dac": {"count": 0, "instances": []}, "pwm": {"count": 0, "instances": []}, "usb": {"count": 0, "instances": []}, "ethernet": {"count": 0, "instances": []}, "name": "intel_adsp_cavs25", "arch": "xtensa", "docu_html": "<div class=\"rst-content\">\n<div aria-label=\"breadcrumbs navigation\" role=\"navigation\">\n<ul class=\"wy-breadcrumbs\">\n<!-- Docs / Latest -->\n<li><a href=\"../../../../index.html\">Docs / Latest</a> »</li>\n<li><a href=\"../../../index.html\">Supported Boards</a> »</li>\n<li><a href=\"../../index.html\">XTENSA Boards</a> »</li>\n<li>Zephyr Audio DSP Development on Chromebooks</li>\n<dark-mode-toggle appearance=\"toggle\" id=\"dark-mode-toggle\" permanent=\"true\"></dark-mode-toggle>\n<li class=\"wy-breadcrumbs-aside\">\n</li>\n</ul>\n<hr/>\n</div>\n<div class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\" role=\"main\">\n<div class=\"wy-alert wy-alert-danger\">\n     This is the documentation for the latest (main) development branch of\n     Zephyr. If you are looking for the documentation of previous releases, use\n     the drop-down menu on the left and select the desired version.\n    </div>\n<div itemprop=\"articleBody\">\n<div class=\"section\" id=\"zephyr-audio-dsp-development-on-chromebooks\">\n<h1>Zephyr Audio DSP Development on Chromebooks<a class=\"headerlink\" href=\"#zephyr-audio-dsp-development-on-chromebooks\" title=\"Permalink to this headline\">¶</a></h1>\n<p>The Audio DSP on Intel Chromebooks is configured to use the SOF\n“Community” key for firmware signing, and can therefore accept\narbitrary user-developed firmware like Zephyr applications (of which\nSOF is one), including the Zephyr samples and test suite.</p>\n<div class=\"section\" id=\"initial-tgl-chromebook-setup\">\n<h2>Initial TGL Chromebook Setup<a class=\"headerlink\" href=\"#initial-tgl-chromebook-setup\" title=\"Permalink to this headline\">¶</a></h2>\n<p>(These instructions were written specifically to the Asus Flip CX5\ndevice code named “delbin”.  But they should be reasonably applicable\nto any recent Intel device.)</p>\n<p>Power the device on and connect it to a wireless network.  It will\nlikely want to download a firmware update (mine did).  Let this finish\nfirst, to ensure you have two working OS images.</p>\n<div class=\"section\" id=\"enable-developer-mode\">\n<h3>Enable Developer Mode<a class=\"headerlink\" href=\"#enable-developer-mode\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Power the device off (menu in lower right, or hold the power button\non the side)</p>\n<p>Hold Esc + Refresh (the arrow-in-a-circle “reload” key above “3”) and\nhit the power key to enter recovery mode.  Note: the touchscreen and\npad don’t work in recovery mode, use the arrow keys to navigate.</p>\n<p>Select “Advanced Options”, then “Enable Developer Mode” and confirm\nthat you really mean it.  Select “Boot from Internal Storage” at the\nbootloader screen.  You will see this screen every time the machine\nboots now, telling you that the boot is unverified.</p>\n<p>Wait while the device does the required data wipe.  My device takes\nabout 15 minutes to completely write the stateful partition.  On\nreboot, select “Boot from Internal Storage” again and set it up\n(again) with Google account.</p>\n</div>\n<div class=\"section\" id=\"make-a-recovery-drive\">\n<h3>Make a Recovery Drive<a class=\"headerlink\" href=\"#make-a-recovery-drive\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You will at some point wreck your device and need a recovery stick.\nInstall the Chromebook Recovery Utility from the Google Web Store and\nmake one.</p>\n<p>You can actually do this on any machine (and any OS) with Chrome\ninstalled, but it’s easiest on the Chromebook because it knows its\ndevice ID (for example “DELBIN-XHVI D4B-H4D-G4G-Q9A-A9P” for the Asus\nTiger Lake board).  Note that recovery, when it happens, will not\naffect developer mode or firmware settings but it <strong>will wipe out the\nroot filesystem and /usr/local customizations you have made</strong>.  So\nplan on a strategy that can tolerate data loss on the device you’re\nmessing with!</p>\n</div>\n<div class=\"section\" id=\"make-the-root-filesystem-writable\">\n<h3>Make the root filesystem writable<a class=\"headerlink\" href=\"#make-the-root-filesystem-writable\" title=\"Permalink to this headline\">¶</a></h3>\n<p>For security, ChromeOS signs and cryptographically verifies (using\nLinux’s dm-verity feature) all access to the read-only root\nfilesystem.  Mucking with the rootfs (for example, to install modules\nfor a custom kernel) requires that the dm-verity layer be turned off:</p>\n<p>First open a terminal with Ctrl-Alt-T.  Then at the “crosh&gt; ” prompt\nissue the “shell” command to get a shell running as the “chronos”\nuser.  Finally (in developer mode) a simple “sudo su -” will get you a\nroot prompt.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">crosh&gt; shell</span>\n<span class=\"gp\">chronos@localhost / $ </span>sudo su -\n<span class=\"go\">localhost ~ #</span>\n</pre></div>\n</div>\n<p>Now you need to turn of signature verification in the bootloader\n(because obviously we’ll be breaking whatever signature existed).\nNote that signature verification is something done by the ROM\nbootloader, not the OS, and this setting is a (developer-mode-only)\ndirective to that code:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# crossystem dev_boot_signed_only=0</span>\n</pre></div>\n</div>\n<p>(<em>Note: for clarity, commands in this document entered at the ChromeOS\ncore shell will be prefixed with a hostname of cros.</em>)</p>\n<p>Next you disable the validation step:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification</span>\n</pre></div>\n</div>\n<p><strong>THIS COMMAND WILL FAIL</strong>, give you an error that you are changing\nthe setting for the entire running system, and suggest an alternative\n“–paritions X” argument to use that modifies only the currently used\npartition.  Run that modified command, then reboot.</p>\n<p>After rebooting, you will notice that your chromebook boots with the\nraw storage device (e.g. /dev/nvme0n1p5) mounted as root and not the\n“dm-0” verity device, and that the rootfs is read-write.</p>\n<p>Note: What this command actually does is modify the command line of\nthe installed kernel image (it saves a backup in\n/mnt/stateful_partition/cros_sign_backups) so that it specifies\n“root=&lt;guid&gt;” and not “root=dm-0”.  It does seem to leave the other\nverity configuration in place though, it just doesn’t try to mount the\nresulting (now-invalid!) partition.</p>\n<p>Metanote: The astute will note that we’re probably going to throw this\nkernel out, and that we could probably have just editted the command\nline of the new kernel instead of flashing and rebooting into this\nmodified one.  But that’s too many balls to juggle at once for me.</p>\n</div>\n<div class=\"section\" id=\"enable-chromeos-ssh\">\n<h3>Enable ChromeOS SSH<a class=\"headerlink\" href=\"#enable-chromeos-ssh\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Once you are booted with a writable partition, you can turn on the\nbuilt-in ssh server with:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# /usr/libexec/debugd/helpers/dev_features_ssh</span>\n</pre></div>\n</div>\n<p>By default neither the “chronos” user nor root accounts have\npasswords, so unless you want to type a ssh key in by hand, you\nprobably want to set a password for the first login (before you run\nssh-copy-id, of course):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# passwd</span>\n</pre></div>\n</div>\n<p>Now ssh into the chromebook and add your key to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.ssh/authorized_keys</span></code> as you do for any Linux system.</p>\n</div>\n</div>\n<div class=\"section\" id=\"install-crouton\">\n<h2>Install Crouton<a class=\"headerlink\" href=\"#install-crouton\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The Zephyr integration tools require a proper Linux environment and\nwon’t run on ChromeOS’s minimal distro.  So we need to install a Linux\npersonality.  <strong>DO NOT</strong> bother installing the “Linux Development\nEnvironment” (Crostini) from the ChromeOS Developer settings.  This\npersonality runs inside a VM, where our tools need access to the real\nkernel running on the real hardware.  Instead install Crouton\n(<a class=\"reference external\" href=\"https://github.com/dnschneid/crouton\">https://github.com/dnschneid/crouton</a>), which is a community\nchroot-based personality that preserves access to the real hardware\nsysfs and /dev filesystem.  These instructions install the “cli-extra”\npackage list, there are X11-enabled ones available too if you prefer\nto work on the device screen directly.  See the project page, etc…</p>\n<p>At a root shell, grab the installer and run it (note: /usr/local is\nthe only writable filesystem without noexec, you must place the binary\nthere for it to run!):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# mkdir -p /usr/local/bin</span>\n<span class=\"go\">cros# curl -L https://github.com/dnschneid/crouton/raw/master/installer/crouton \\</span>\n<span class=\"go\">              &gt; /usr/local/bin/crouton</span>\n<span class=\"go\">cros# chmod 755 /usr/local/bin/crouton</span>\n<span class=\"go\">cros# crouton -r focal -t cli-extra</span>\n</pre></div>\n</div>\n<p>Start the Crouton chroot environment:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# startcli</span>\n</pre></div>\n</div>\n<p>Now you are typing commands into the Ubuntu environment.  Enable\ninbound ssh on Crouton, but on a port other than 22 (which is used for\nthe native ChromeOS ssh server).  I’m using 222 here (which is easy to\nremember, and not a registered port in /etc/services):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">crouton# apt install iptables openssh-server</span>\n<span class=\"go\">crouton# echo \"Port 222\" &gt;&gt; /etc/ssh/sshd_config</span>\n<span class=\"go\">crouton# mkdir /run/sshd</span>\n<span class=\"go\">crouton# iptables -I INPUT -p tcp --dport 222 -j ACCEPT</span>\n<span class=\"go\">crouton# /usr/sbin/sshd</span>\n</pre></div>\n</div>\n<p>(<em>As above: note that we have introduced a hostname of “crouton” to\nrefer to the separate Linux personality.</em>)</p>\n<p>NOTE: the mkdir, iptables and sshd commands need to be run every time\nthe chroot is restarted.  You can put them in /etc/rc.local for\nconvenience.  Crouton doesn’t run systemd (because it can’t – it\ndoesn’t own the system!) so Ubuntu services like openssh-server don’t\nknow how to start themselves.</p>\n</div>\n<div class=\"section\" id=\"building-and-installing-a-custom-kernel\">\n<h2>Building and Installing a Custom Kernel<a class=\"headerlink\" href=\"#building-and-installing-a-custom-kernel\" title=\"Permalink to this headline\">¶</a></h2>\n<p>On your build host, grab a copy of the ChromeOS kernel tree.  The\nshipping device is using a 5.4 kernel, but the 5.10 tree works for me\nand seems to have been backporting upstream drivers such that its main\nhardware is all quite recent (5-6 weeks behind mainline or so).  We\nplace it in the home directory here for simplicity:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ cd $HOME</span>\n<span class=\"go\">dev$ git clone https://chromium.googlesource.com/chromiumos/third_party/kernel</span>\n<span class=\"go\">dev$ cd kernel</span>\n<span class=\"go\">dev$ git checkout chromeos-5.10</span>\n</pre></div>\n</div>\n<p>(<em>Once again, we are typing into a different shell.  We introduce the\nhostname “dev” here to represent the development machine on which you\nare building kernels and Zephyr apps. It is possible to do this on the\nchromebook directly, but not advisable.  Remember the discussion above\nabout requiring a drive wipe on system recovery!</em>)</p>\n<p>Note: you probably have an existing Linux tree somewhere already.  If\nyou do it’s much faster to add this as a remote there and just fetch\nthe deltas – ChromeOS tracks upstream closely.</p>\n<p>Now you need a .config file.  The Chromebook kernel ships with the\n“configs” module built which exposes this in the running kernel.  You\njust have to load the module and read the file.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ cd /path/to/kernel</span>\n<span class=\"go\">dev$ ssh root@cros modprobe configs</span>\n<span class=\"go\">dev$ ssh root@cros zcat /proc/config.gz &gt; .config</span>\n</pre></div>\n</div>\n<p>You will need to set some custom configuration variables differently\nfrom ChromeOS defaults (you can edit .config directly, or use\nmenuconfig, etc…):</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_HUGETLBFS=y</span></code> - The Zephyr loader tool requires this</p></li>\n<li><dl class=\"simple\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_EXTRA_FIRMWARE_DIR=n</span></code> - This refers to a build directory</dt><dd><p>in Google’s build environment that we will not have.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_SECURITY_LOADPIN=n</span></code> - Pins modules such that they will</dt><dd><p>only load from one filesystem.  Annoying restriction for custom\nkernels.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">CONFIG_MODVERSIONS=n</span></code> - Allow modules to be built and installed</dt><dd><p>from modified “dirty” build trees.</p>\n</dd>\n</dl>\n</li>\n</ul>\n<p>Now build your kernel just as you would any other:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ make olddefconfig     # Or otherwise update .config</span>\n<span class=\"go\">dev$ make bzImage modules  # Probably want -j&lt;whatever&gt; for parallel build</span>\n</pre></div>\n</div>\n<p>The modules you can copy directly to the (now writable) rootfs on the\ndevice.  Note that this filesystem has very limited space (it’s\nintended to be read only), so the INSTALL_MOD_STRIP=1 is absolutely\nrequired, and you may find you need to regularly prune modules from\nolder kernels to make space:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ make INSTALL_MOD_PATH=mods INSTALL_MOD_STRIP=1 modules_install</span>\n<span class=\"go\">dev$ (cd mods/lib/modules; tar cf - .) | ssh root@cros '(cd /lib/modules; tar xfv -)'</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"pack-and-install-chromeos-kernel-image\">\n<h3>Pack and Install ChromeOS Kernel Image<a class=\"headerlink\" href=\"#pack-and-install-chromeos-kernel-image\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The kernel bzImage file itself needs to be signed and packaged into a\nChromeOS vboot package and written directly to the kernel partition.\nThankfully the tools to do this are shipped in Debian/Ubuntu\nrepositories already:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>sudo apt install vboot-utils vboot-kernel-utils\n</pre></div>\n</div>\n<p>Find the current kernel partition on the device.  You can get this by\ncomparing the “kernel_guid” command line parameter (passed by the\nbootloader) with the partition table of the boot drive, for example:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ KPART=`ssh root@cros 'fdisk -l -o UUID,Device /dev/nvme0n1 | \\</span>\n<span class=\"go\">                           grep -i $(sed \"s/.*kern_guid=//\" /proc/cmdline \\</span>\n<span class=\"go\">                                     | sed \"s/ .*//\") \\</span>\n<span class=\"go\">                           | sed \"s/.* //\"'`</span>\n<span class=\"go\">dev$ echo $KPART</span>\n<span class=\"go\">/dev/nvme0n1p4</span>\n</pre></div>\n</div>\n<p>Extract the command line from that image into a local file:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ ssh root@cros vbutil_kernel --verify /dev/$KPART | tail -1 &gt; cmdline.txt</span>\n</pre></div>\n</div>\n<p>Now you can pack a new kernel image using the vboot tooling.  Most of\nthese arguments are boilerplate and always the same.  The keys are\nthere because the boot requires a valid signature, even though as\nconfigured it won’t use it.  Note the cannot-actually-be-empty dummy\nfile passed as a “bootloader”, which is a holdover from previous ROM\nvariants which needed an EFI stub.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ echo dummy &gt; dummy.efi</span>\n<span class=\"go\">dev$ vbutil_kernel --pack kernel.img --config cmdline.txt \\</span>\n<span class=\"go\">       --vmlinuz arch/x86_64/boot/bzImage \\</span>\n<span class=\"go\">       --keyblock /usr/share/vboot/devkeys/kernel.keyblock \\</span>\n<span class=\"go\">       --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \\</span>\n<span class=\"go\">       --version 1 --bootloader dummy.efi --arch x86_64</span>\n</pre></div>\n</div>\n<p>You can verify this image if you like with “vbutil_kernel –verify”.</p>\n<p>Now just copy up the file and write it to the partition on the device:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>scp kernel.img root@cros:/tmp\n<span class=\"gp\">$ </span>ssh root@cros dd <span class=\"k\">if</span><span class=\"o\">=</span>/tmp/kernel.img <span class=\"nv\">of</span><span class=\"o\">=</span>/dev/nvme0n1p4\n</pre></div>\n</div>\n<p>Now reboot, and if all goes well you will find yourself running in\nyour new kernel.</p>\n</div>\n<div class=\"section\" id=\"wifi-firmware-fixup\">\n<h3>Wifi Firmware Fixup<a class=\"headerlink\" href=\"#wifi-firmware-fixup\" title=\"Permalink to this headline\">¶</a></h3>\n<p>On the Tiger Lake Chromebook, the /lib/firmware tree is a bit stale\nrelative to the current 5.10 kernel.  The iwlwifi driver requests a\nfirmware file that doesn’t exist, leading to a device with no network.\nIt’s a simple problem, but a catastrophic drawback if uncorrected.  It\nseems to be sufficient just to link the older version to the new name.\n(It would probably be better to copy the proper version from\n/lib/firmware from a recent kernel.org checkout.):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">cros# cd /lib/firmware</span>\n<span class=\"go\">cros# ln -s iwlwifi-QuZ-a0-hr-b0-62.ucode iwlwifi-QuZ-a0-hr-b0-64.ucode</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"build-and-run-a-zephyr-application\">\n<h2>Build and Run a Zephyr Application<a class=\"headerlink\" href=\"#build-and-run-a-zephyr-application\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Finally, with your new kernel booted, you are ready to run Zephyr\ncode.</p>\n<div class=\"section\" id=\"build-rimage-signing-tool\">\n<h3>Build rimage Signing Tool<a class=\"headerlink\" href=\"#build-rimage-signing-tool\" title=\"Permalink to this headline\">¶</a></h3>\n<p>First download and build a copy of the Sound Open Firmware “rimage”\ntool (these instructions put it in your home directory for clarity,\nbut anywhere is acceptable):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ cd $HOME</span>\n<span class=\"go\">dev$ git clone https://github.com/thesofproject/rimage</span>\n<span class=\"go\">dev$ cd rimage/</span>\n<span class=\"go\">dev$ git submodule init</span>\n<span class=\"go\">dev$ git submodule update</span>\n<span class=\"go\">dev$ cmake .</span>\n<span class=\"go\">dev$ make</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"copy-integration-scripting-to-chromebook\">\n<h3>Copy Integration Scripting to Chromebook<a class=\"headerlink\" href=\"#copy-integration-scripting-to-chromebook\" title=\"Permalink to this headline\">¶</a></h3>\n<p>There are two python scripts needed on the device, to be run inside\nthe Crouton environment installed above.  Copy them:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ scp boards/xtensa/intel_adsp_cavs15/tools/cavs-fw-v25.py root@crouton:</span>\n<span class=\"go\">dev$ scp boards/xtensa/intel_adsp_cavs15/tools/adsplog.py root@crouton:</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"build-and-sign-zephyr-app\">\n<h3>Build and Sign Zephyr App<a class=\"headerlink\" href=\"#build-and-sign-zephyr-app\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Zephyr applications build conventionally for this platform, and are\nsigned with “west flash” with just a few extra arguments.  Note that\nthe key in use for the Tiger Lake DSP is the “3k” key from SOF, not\nthe original that is used with older hardware.  The output artifact is\na “zephyr.ri” file to be copied to the device.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">dev$ west build -b intel_adsp_cavs25 samples/hello_world</span>\n<span class=\"go\">dev$ west sign --tool-data=~/rimage/config -t ~/rimage/rimage -- \\</span>\n<span class=\"go\">            -k $ZEPHYR_BASE/../modules/audio/sof/keys/otc_private_key_3k.pem</span>\n<span class=\"go\">dev$ scp build/zephyr/zephyr.ri root@crouton:</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"run-it\">\n<h3>Run it!<a class=\"headerlink\" href=\"#run-it\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The loader script takes the signed rimage file as its argument.  Once\nit reports success, the application begins running immediately and its\nconsole output (in the SOF shared memory trace buffer) can be read by\nthe logging script.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">crouton# ./cavs-fw-v25.py zephyr.ri</span>\n<span class=\"go\">crouton# ./adsplog.py</span>\n<span class=\"go\">Hello World! intel_adsp_cavs25</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"misc-references\">\n<h2>Misc References<a class=\"headerlink\" href=\"#misc-references\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Upstream documentation from which these instructions were drawn:</p>\n<p>This page has the best reference for the boot process:</p>\n<p><a class=\"reference external\" href=\"http://www.chromium.org/chromium-os/chromiumos-design-docs/disk-format\">http://www.chromium.org/chromium-os/chromiumos-design-docs/disk-format</a></p>\n<p>This is great too, with an eye toward booting things other than ChromeOS:</p>\n<p><a class=\"reference external\" href=\"https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/custom-firmware\">https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/custom-firmware</a></p>\n</div>\n</div>\n</div>\n</div>\n<footer>\n<hr/>\n<div role=\"contentinfo\">\n<p>\n        © <a href=\"../../../../copyright.html\">Copyright</a> 2015-2021 Zephyr Project members and individual contributors.\n      <span class=\"lastupdated\">\n        Last updated on Dec 19, 2021.\n      </span>\n</p>\n</div>\n</footer>\n</div>"}, {"cpus": {"cores_count": 1}, "flash": [{"label": "FLASH_STM32", "size": 1048576}], "main_flash_size": 1048576, "memory": [{"label": "BACKUP_SRAM", "size": 4096}, {"label": "sram0", "size": 131072}, {"label": "ccm0", "size": 65536}], "main_ram_size": 131072, "gpio": {"count": 9, "instances": [{"label": "GPIOA"}, {"label": "GPIOB"}, {"label": "GPIOC"}, {"label": "GPIOD"}, {"label": "GPIOE"}, {"label": "GPIOH"}, {"label": "GPIOF"}, {"label": "GPIOG"}, {"label": "GPIOI"}]}, "i2c": {"count": 3, "instances": [{"label": "I2C_1"}, {"label": "I2C_2"}, {"label": "I2C_3"}]}, "spi": {"count": 4, "instances": [{"label": "SPI_1"}, {"label": "SPI_2"}, {"label": "SPI_3"}, {"label": "SPI_4"}]}, "uart": {"count": 0, "instances": []}, "can": {"count": 2, "instances": [{"label": "CAN_1"}, {"label": "CAN_2"}]}, "serial": {"count": 6, "instances": [{"label": "UART_1"}, {"label": "UART_2"}, {"label": "UART_6"}, {"label": "UART_3"}, {"label": "UART_4"}, {"label": "UART_5"}]}, "quadspi": {"count": 0, "instances": []}, "usart": {"count": 0, "instances": []}, "adc": {"count": 1, "instances": [{"label": "ADC_1"}]}, "dac": {"count": 1, "instances": [{"label": "DAC_1"}]}, "pwm": {"count": 14, "instances": [{"label": "PWM_1"}, {"label": "PWM_2"}, {"label": "PWM_3"}, {"label": "PWM_4"}, {"label": "PWM_5"}, {"label": "PWM_9"}, {"label": "PWM_10"}, {"label": "PWM_11"}, {"label": "PWM_6"}, {"label": "PWM_7"}, {"label": "PWM_8"}, {"label": "PWM_12"}, {"label": "PWM_13"}, {"label": "PWM_14"}]}, "usb": {"count": 2, "instances": [{"label": "OTGFS"}, {"label": "OTGHS"}]}, "ethernet": {"count": 1, "instances": [{"label": "ETH_0"}]}, "name": "mikroe_clicker_2", "arch": "arm", "docu_html": "Error generating the docs"}]